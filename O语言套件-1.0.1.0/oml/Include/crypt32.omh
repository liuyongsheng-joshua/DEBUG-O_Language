引用段
{
函数 CertAddCRLContextToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddCRLLinkToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddCTLContextToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddCTLLinkToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddCertificateContextToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddCertificateLinkToStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddEncodedCRLToStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddEncodedCTLToStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddEncodedCertificateToStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddEncodedCertificateToSystemStoreA(整数32,整数32,整数32)=>整数32;
函数 CertAddEncodedCertificateToSystemStoreW(整数32,整数32,整数32)=>整数32;
函数 CertAddEnhancedKeyUsageIdentifier(整数32,整数32)=>整数32;
函数 CertAddSerializedElementToStore(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertAddStoreToCollection(整数32,整数32,整数32,整数32)=>整数32;
函数 CertAlgIdToOID(整数32)=>整数32;
函数 CertCloseStore(整数32,整数32)=>整数32;
函数 CertCompareCertificate(整数32,整数32,整数32)=>整数32;
函数 CertCompareCertificateName(整数32,整数32,整数32)=>整数32;
函数 CertCompareIntegerBlob(整数32,整数32)=>整数32;
函数 CertComparePublicKeyInfo(整数32,整数32,整数32)=>整数32;
函数 CertControlStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertCreateCRLContext(整数32,整数32,整数32)=>整数32;
函数 CertCreateCTLContext(整数32,整数32,整数32)=>整数32;
函数 CertCreateCTLEntryFromCertificateContextProperties(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertCreateCertificateChainEngine(整数32,整数32)=>整数32;
函数 CertCreateCertificateContext(整数32,整数32,整数32)=>整数32;
函数 CertCreateContext(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertCreateSelfSignCertificate(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertDeleteCRLFromStore(整数32)=>整数32;
函数 CertDeleteCTLFromStore(整数32)=>整数32;
函数 CertDeleteCertificateFromStore(整数32)=>整数32;
函数 CertDuplicateCRLContext(整数32)=>整数32;
函数 CertDuplicateCTLContext(整数32)=>整数32;
函数 CertDuplicateCertificateChain(整数32)=>整数32;
函数 CertDuplicateCertificateContext(整数32)=>整数32;
函数 CertDuplicateStore(整数32)=>整数32;
函数 CertEnumCRLContextProperties(整数32,整数32)=>整数32;
函数 CertEnumCRLsInStore(整数32,整数32)=>整数32;
函数 CertEnumCTLContextProperties(整数32,整数32)=>整数32;
函数 CertEnumCTLsInStore(整数32,整数32)=>整数32;
函数 CertEnumCertificateContextProperties(整数32,整数32)=>整数32;
函数 CertEnumCertificatesInStore(整数32,整数32)=>整数32;
函数 CertEnumPhysicalStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertEnumSubjectInSortedCTL(整数32,整数32,整数32,整数32)=>整数32;
函数 CertEnumSystemStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertEnumSystemStoreLocation(整数32,整数32,整数32)=>整数32;
函数 CertFindAttribute(整数32,整数32,整数32)=>整数32;
函数 CertFindCRLInStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindCTLInStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindCertificateInCRL(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindCertificateInStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindChainInStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindExtension(整数32,整数32,整数32)=>整数32;
函数 CertFindRDNAttr(整数32,整数32)=>整数32;
函数 CertFindSubjectInCTL(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFindSubjectInSortedCTL(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertFreeCRLContext(整数32)=>整数32;
函数 CertFreeCTLContext(整数32)=>整数32;
函数 CertFreeCertificateChain(整数32)=>整数32;
函数 CertFreeCertificateChainEngine(整数32)=>整数32;
函数 CertFreeCertificateContext(整数32)=>整数32;
函数 CertGetCRLContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetCRLFromStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetCTLContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetCertificateChain(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetCertificateContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetEnhancedKeyUsage(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetIntendedKeyUsage(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetIssuerCertificateFromStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetNameStringA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetNameStringW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetPublicKeyLength(整数32,整数32)=>整数32;
函数 CertGetStoreProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertGetSubjectCertificateFromStore(整数32,整数32,整数32)=>整数32;
函数 CertGetValidUsages(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertIsRDNAttrsInCertificateName(整数32,整数32,整数32,整数32)=>整数32;
函数 CertIsValidCRLForCertificate(整数32,整数32,整数32,整数32)=>整数32;
函数 CertNameToStrA(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertNameToStrW(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertOIDToAlgId(整数32)=>整数32;
函数 CertOpenStore(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertOpenSystemStoreA(整数32,整数32)=>整数32;
函数 CertOpenSystemStoreW(整数32,整数32)=>整数32;
函数 CertRDNValueToStrA(整数32,整数32,整数32,整数32)=>整数32;
函数 CertRDNValueToStrW(整数32,整数32,整数32,整数32)=>整数32;
函数 CertRegisterPhysicalStore(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertRegisterSystemStore(整数32,整数32,整数32,整数32)=>整数32;
函数 CertRemoveEnhancedKeyUsageIdentifier(整数32,整数32)=>整数32;
函数 CertRemoveStoreFromCollection(整数32,整数32)=>整数32;
函数 CertResyncCertificateChainEngine(整数32)=>整数32;
函数 CertSaveStore(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertSerializeCRLStoreElement(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSerializeCTLStoreElement(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSerializeCertificateStoreElement(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSetCRLContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSetCTLContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSetCertificateContextPropertiesFromCTLEntry(整数32,整数32,整数32)=>整数32;
函数 CertSetCertificateContextProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertSetEnhancedKeyUsage(整数32,整数32)=>整数32;
函数 CertSetStoreProperty(整数32,整数32,整数32,整数32)=>整数32;
函数 CertStrToNameA(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertStrToNameW(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertUnregisterPhysicalStore(整数32,整数32,整数32)=>整数32;
函数 CertUnregisterSystemStore(整数32,整数32)=>整数32;
函数 CertVerifyCRLRevocation(整数32,整数32,整数32,整数32)=>整数32;
函数 CertVerifyCRLTimeValidity(整数32,整数32)=>整数32;
函数 CertVerifyCTLUsage(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertVerifyCertificateChainPolicy(整数32,整数32,整数32,整数32)=>整数32;
函数 CertVerifyRevocation(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CertVerifySubjectCertificateContext(整数32,整数32,整数32)=>整数32;
函数 CertVerifyTimeValidity(整数32,整数32)=>整数32;
函数 CertVerifyValidityNesting(整数32,整数32)=>整数32;
函数 CryptAcquireCertificatePrivateKey(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptBinaryToStringA(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptBinaryToStringW(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCloseAsyncHandle(整数32)=>整数32;
函数 CryptCreateAsyncHandle(整数32,整数32)=>整数32;
函数 CryptCreateKeyIdentifierFromCSP(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptDecodeMessage(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptDecodeObject(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptDecodeObjectEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptDecryptAndVerifyMessageSignature(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptDecryptMessage(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEncodeObject(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEncodeObjectEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEncryptMessage(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEnumKeyIdentifierProperties(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEnumOIDFunction(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptEnumOIDInfo(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptExportPKCS8(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptExportPublicKeyInfo(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptExportPublicKeyInfoEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptFindCertificateKeyProvInfo(整数32,整数32,整数32)=>整数32;
函数 CryptFindLocalizedName(整数32)=>整数32;
函数 CryptFindOIDInfo(整数32,整数32,整数32)=>整数32;
函数 CryptFormatObject(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptFreeOIDFunctionAddress(整数32,整数32)=>整数32;
函数 CryptGetAsyncParam(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetDefaultOIDDllList(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetDefaultOIDFunctionAddress(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetKeyIdentifierProperty(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetMessageCertificates(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetMessageSignerCount(整数32,整数32,整数32)=>整数32;
函数 CryptGetOIDFunctionAddress(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptGetOIDFunctionValue(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptHashCertificate(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptHashMessage(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptHashPublicKeyInfo(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptHashToBeSigned(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptImportPKCS8(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptImportPublicKeyInfo(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptImportPublicKeyInfoEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptInitOIDFunctionSet(整数32,整数32)=>整数32;
函数 CryptInstallDefaultContext(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptInstallOIDFunctionAddress(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptLoadSip(整数32,整数32,整数32)=>整数32;
函数 CryptMemAlloc(整数32)=>整数32;
函数 CryptMemFree(整数32)=>整数32;
函数 CryptMemRealloc(整数32,整数32)=>整数32;
函数 CryptMsgCalculateEncodedLength(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgClose(整数32)=>整数32;
函数 CryptMsgControl(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgCountersign(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgCountersignEncoded(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgDuplicate(整数32)=>整数32;
函数 CryptMsgEncodeAndSignCTL(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgGetAndVerifySigner(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgGetParam(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgOpenToDecode(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgOpenToEncode(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgSignCTL(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgUpdate(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgVerifyCountersignatureEncoded(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptMsgVerifyCountersignatureEncodedEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptProtectData(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptProtectMemory(整数32,整数32,整数32)=>整数32;
函数 CryptQueryObject(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptRegisterDefaultOIDFunction(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptRegisterOIDFunction(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptRegisterOIDInfo(整数32,整数32)=>整数32;
函数 CryptSIPAddProvider(整数32)=>整数32;
函数 CryptSIPCreateIndirectData(整数32,整数32,整数32)=>整数32;
函数 CryptSIPGetSignedDataMsg(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSIPLoad(整数32,整数32,整数32)=>整数32;
函数 CryptSIPPutSignedDataMsg(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSIPRemoveProvider(整数32)=>整数32;
函数 CryptSIPRemoveSignedDataMsg(整数32,整数32)=>整数32;
函数 CryptSIPRetrieveSubjectGuid(整数32,整数32,整数32)=>整数32;
函数 CryptSIPRetrieveSubjectGuidForCatalogFile(整数32,整数32,整数32)=>整数32;
函数 CryptSIPVerifyIndirectData(整数32,整数32)=>整数32;
函数 CryptSetAsyncParam(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSetKeyIdentifierProperty(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSetOIDFunctionValue(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSignAndEncodeCertificate(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSignAndEncryptMessage(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSignCertificate(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSignMessage(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSignMessageWithKey(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptStringToBinaryA(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptStringToBinaryW(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptUninstallDefaultContext(整数32,整数32,整数32)=>整数32;
函数 CryptUnprotectData(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptUnprotectMemory(整数32,整数32,整数32)=>整数32;
函数 CryptUnregisterDefaultOIDFunction(整数32,整数32,整数32)=>整数32;
函数 CryptUnregisterOIDFunction(整数32,整数32,整数32)=>整数32;
函数 CryptUnregisterOIDInfo(整数32)=>整数32;
函数 CryptVerifyCertificateSignature(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyCertificateSignatureEx(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyDetachedMessageHash(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyDetachedMessageSignature(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyMessageHash(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyMessageSignature(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptVerifyMessageSignatureWithKey(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 DbgInitOSS(整数32)=>整数32;
函数 C调用 DbgPrintf(整数32, ..)=>整数32;
函数 PFXExportCertStore(整数32,整数32,整数32,整数32)=>整数32;
函数 PFXExportCertStoreEx(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 PFXImportCertStore(整数32,整数32,整数32)=>整数32;
函数 PFXIsPFXBlob(整数32)=>整数32;
函数 PFXVerifyPassword(整数32,整数32,整数32)=>整数32;

宏定义 CertAddEncodedCertificateToSystemStore  CertAddEncodedCertificateToSystemStoreA
宏定义 CertGetNameString  CertGetNameStringA
宏定义 CertNameToStr  CertNameToStrA
宏定义 CertOpenSystemStore  CertOpenSystemStoreA
宏定义 CertRDNValueToStr  CertRDNValueToStrA
宏定义 CertStrToName  CertStrToNameA
宏定义 CryptBinaryToString  CryptBinaryToStringA
宏定义 CryptStringToBinary  CryptStringToBinaryA
}
