引用段
{
函数 CStdStubBuffer_AddRef(整数32)=>整数32;
函数 CStdStubBuffer_Connect(整数32,整数32)=>整数32;
函数 CStdStubBuffer_CountRefs(整数32)=>整数32;
函数 CStdStubBuffer_DebugServerQueryInterface(整数32,整数32)=>整数32;
函数 CStdStubBuffer_DebugServerRelease(整数32,整数32)=>整数32;
函数 CStdStubBuffer_Disconnect(整数32)=>整数32;
函数 CStdStubBuffer_Invoke(整数32,整数32,整数32)=>整数32;
函数 CStdStubBuffer_IsIIDSupported(整数32,整数32)=>整数32;
函数 CStdStubBuffer_QueryInterface(整数32,整数32,整数32)=>整数32;
函数 DceErrorInqTextA(整数32,整数32)=>整数32;
函数 DceErrorInqTextW(整数32,整数32)=>整数32;
函数 GlobalMutexClearExternal()=>整数32;
函数 GlobalMutexRequestExternal()=>整数32;
函数 IUnknown_AddRef_Proxy(整数32)=>整数32;
函数 IUnknown_QueryInterface_Proxy(整数32,整数32,整数32)=>整数32;
函数 IUnknown_Release_Proxy(整数32)=>整数32;
函数 I_RpcAbortAsyncCall(整数32,整数32)=>整数32;
函数 I_RpcAllocate(整数32)=>整数32;
函数 I_RpcAsyncAbortCall(整数32,整数32)=>整数32;
函数 I_RpcAsyncSetHandle(整数32,整数32)=>整数32;
函数 I_RpcBCacheAllocate(整数32)=>整数32;
函数 I_RpcBCacheFree(整数32)=>整数32;
函数 I_RpcBindingCopy(整数32,整数32)=>整数32;
函数 I_RpcBindingHandleToAsyncHandle(整数32,整数32)=>整数32;
函数 I_RpcBindingInqConnId(整数32,整数32,整数32)=>整数32;
函数 I_RpcBindingInqDynamicEndpointA(整数32,整数32)=>整数32;
函数 I_RpcBindingInqDynamicEndpointW(整数32,整数32)=>整数32;
函数 I_RpcBindingInqLocalClientPID(整数32,整数32)=>整数32;
函数 I_RpcBindingInqMarshalledTargetInfo(整数32,整数32,整数32)=>整数32;
函数 I_RpcBindingInqSecurityContext(整数32,整数32)=>整数32;
函数 I_RpcBindingInqTransportType(整数32,整数32)=>整数32;
函数 I_RpcBindingInqWireIdForSnego(整数32,整数32)=>整数32;
函数 I_RpcBindingIsClientLocal(整数32,整数32)=>整数32;
函数 I_RpcBindingToStaticStringBindingW(整数32,整数32)=>整数32;
函数 I_RpcClearMutex(整数32)=>整数32;
函数 I_RpcConnectionInqSockBuffSize(整数32,整数32)=>整数32;
函数 I_RpcConnectionSetSockBuffSize(整数32,整数32)=>整数32;
函数 I_RpcDeleteMutex(整数32)=>整数32;
函数 I_RpcEnableWmiTrace(整数32,整数32)=>整数32;
函数 I_RpcExceptionFilter(整数32)=>整数32;
函数 I_RpcFree(整数32)=>整数32;
函数 I_RpcFreeBuffer(整数32)=>整数32;
函数 I_RpcFreePipeBuffer(整数32)=>整数32;
函数 I_RpcGetBuffer(整数32)=>整数32;
函数 I_RpcGetBufferWithObject(整数32,整数32)=>整数32;
函数 I_RpcGetCurrentCallHandle()=>整数32;
函数 I_RpcGetExtendedError()=>整数32;
函数 I_RpcIfInqTransferSyntaxes(整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcLogEvent(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcMapWin32Status(整数32)=>整数32;
函数 I_RpcNDRCGetWireRepresentation(整数32,整数32)=>整数32;
函数 I_RpcNDRSContextEmergencyCleanup(整数32,整数32)=>整数32;
函数 I_RpcNegotiateTransferSyntax(整数32)=>整数32;
函数 I_RpcNsBindingSetEntryNameA(整数32,整数32,整数32)=>整数32;
函数 I_RpcNsBindingSetEntryNameW(整数32,整数32,整数32)=>整数32;
函数 I_RpcNsInterfaceExported(整数32,整数32,整数32)=>整数32;
函数 I_RpcNsInterfaceUnexported(整数32,整数32,整数32)=>整数32;
函数 I_RpcParseSecurity(整数32,整数32)=>整数32;
函数 I_RpcPauseExecution(整数32)=>整数32;
函数 I_RpcProxyNewConnection(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcReallocPipeBuffer(整数32,整数32)=>整数32;
函数 I_RpcReceive(整数32,整数32)=>整数32;
函数 I_RpcRecordCalloutFailure(整数32,整数32,整数32)=>整数32;
函数 I_RpcReplyToClientWithStatus(整数32,整数32)=>整数32;
函数 I_RpcRequestMutex(整数32)=>整数32;
函数 I_RpcSNCHOption(整数32,整数32)=>整数32;
函数 I_RpcSend(整数32)=>整数32;
函数 I_RpcSendReceive(整数32)=>整数32;
函数 I_RpcServerAllocateIpPort(整数32,整数32)=>整数32;
函数 I_RpcServerCheckClientRestriction(整数32)=>整数32;
函数 I_RpcServerInqAddressChangeFn()=>整数32;
函数 I_RpcServerInqLocalConnAddress(整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcServerInqTransportType(整数32)=>整数32;
函数 I_RpcServerIsClientDisconnected(整数32,整数32)=>整数32;
函数 I_RpcServerRegisterForwardFunction(整数32)=>整数32;
函数 I_RpcServerSetAddressChangeFn(整数32)=>整数32;
函数 I_RpcServerUseProtseq2A(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcServerUseProtseq2W(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcServerUseProtseqEp2A(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcServerUseProtseqEp2W(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcSessionStrictContextHandle()=>整数32;
函数 I_RpcSetAsyncHandle(整数32,整数32)=>整数32;
函数 I_RpcSsDontSerializeContext()=>整数32;
函数 I_RpcSystemFunction001(整数32,整数32,整数32)=>整数32;
函数 I_RpcTransConnectionAllocatePacket(整数32,整数32)=>整数32;
函数 I_RpcTransConnectionFreePacket(整数32,整数32)=>整数32;
函数 I_RpcTransConnectionReallocPacket(整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcTransDatagramAllocate2(整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcTransDatagramAllocate(整数32,整数32,整数32,整数32)=>整数32;
函数 I_RpcTransDatagramFree(整数32,整数32)=>整数32;
函数 I_RpcTransGetThreadEvent()=>整数32;
函数 I_RpcTransIoCancelled(整数32,整数32)=>整数32;
函数 I_RpcTransServerNewConnection(整数32)=>整数32;
函数 I_RpcTurnOnEEInfoPropagation()=>整数32;
函数 I_UuidCreate(整数32)=>整数32;
函数 MesBufferHandleReset(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 MesDecodeBufferHandleCreate(整数32,整数32,整数32)=>整数32;
函数 MesDecodeIncrementalHandleCreate(整数32,整数32,整数32)=>整数32;
函数 MesEncodeDynBufferHandleCreate(整数32,整数32,整数32)=>整数32;
函数 MesEncodeFixedBufferHandleCreate(整数32,整数32,整数32,整数32)=>整数32;
函数 MesEncodeIncrementalHandleCreate(整数32,整数32,整数32,整数32)=>整数32;
函数 MesHandleFree(整数32)=>整数32;
函数 MesIncrementalHandleReset(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 MesInqProcEncodingId(整数32,整数32,整数32)=>整数32;
函数 NDRCContextBinding(整数32)=>整数32;
函数 NDRCContextMarshall(整数32,整数32)=>整数32;
函数 NDRCContextUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NDRSContextMarshall2(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NDRSContextMarshall(整数32,整数32,整数32)=>整数32;
函数 NDRSContextMarshallEx(整数32,整数32,整数32,整数32)=>整数32;
函数 NDRSContextUnmarshall2(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NDRSContextUnmarshall(整数32,整数32)=>整数32;
函数 NDRSContextUnmarshallEx(整数32,整数32,整数32)=>整数32;
函数 NdrAllocate(整数32,整数32)=>整数32;
函数 C调用 NdrAsyncClientCall(整数32, ..)=>整数32;
函数 NdrAsyncServerCall(整数32)=>整数32;
函数 NdrByteCountPointerBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrByteCountPointerFree(整数32,整数32,整数32)=>整数32;
函数 NdrByteCountPointerMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrByteCountPointerUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrCStdStubBuffer2_Release(整数32,整数32)=>整数32;
函数 NdrCStdStubBuffer_Release(整数32,整数32)=>整数32;
函数 NdrClearOutParameters(整数32,整数32,整数32)=>整数32;
函数 C调用 NdrClientCall(整数32, ..)=>整数32;
函数 C调用 NdrClientCall2(整数32, ..)=>整数32;
函数 NdrClientContextMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrClientContextUnmarshall(整数32,整数32,整数32)=>整数32;
函数 NdrClientInitialize(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrClientInitializeNew(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrComplexArrayBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrComplexArrayFree(整数32,整数32,整数32)=>整数32;
函数 NdrComplexArrayMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrComplexArrayMemorySize(整数32,整数32)=>整数32;
函数 NdrComplexArrayUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrComplexStructBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrComplexStructFree(整数32,整数32,整数32)=>整数32;
函数 NdrComplexStructMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrComplexStructMemorySize(整数32,整数32)=>整数32;
函数 NdrComplexStructUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrConformantArrayBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrConformantArrayFree(整数32,整数32,整数32)=>整数32;
函数 NdrConformantArrayMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrConformantArrayMemorySize(整数32,整数32)=>整数32;
函数 NdrConformantArrayUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrConformantStringBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrConformantStringMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrConformantStringMemorySize(整数32,整数32)=>整数32;
函数 NdrConformantStringUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrConformantStructBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrConformantStructFree(整数32,整数32,整数32)=>整数32;
函数 NdrConformantStructMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrConformantStructMemorySize(整数32,整数32)=>整数32;
函数 NdrConformantStructUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingArrayBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingArrayFree(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingArrayMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingArrayMemorySize(整数32,整数32)=>整数32;
函数 NdrConformantVaryingArrayUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingStructBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingStructFree(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingStructMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrConformantVaryingStructMemorySize(整数32,整数32)=>整数32;
函数 NdrConformantVaryingStructUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrContextHandleInitialize(整数32,整数32)=>整数32;
函数 NdrContextHandleSize(整数32,整数32,整数32)=>整数32;
函数 NdrConvert2(整数32,整数32,整数32)=>整数32;
函数 NdrConvert(整数32,整数32)=>整数32;
函数 NdrCorrelationFree(整数32)=>整数32;
函数 NdrCorrelationInitialize(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrCorrelationPass(整数32)=>整数32;
函数 NdrCreateServerInterfaceFromStub(整数32,整数32)=>整数32;
函数 C调用 NdrDcomAsyncClientCall(整数32, ..)=>整数32;
函数 NdrDcomAsyncStubCall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrDllCanUnloadNow(整数32)=>整数32;
函数 NdrDllGetClassObject(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrDllRegisterProxy(整数32,整数32,整数32)=>整数32;
函数 NdrDllUnregisterProxy(整数32,整数32,整数32)=>整数32;
函数 NdrEncapsulatedUnionBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrEncapsulatedUnionFree(整数32,整数32,整数32)=>整数32;
函数 NdrEncapsulatedUnionMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrEncapsulatedUnionMemorySize(整数32,整数32)=>整数32;
函数 NdrEncapsulatedUnionUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrFixedArrayBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrFixedArrayFree(整数32,整数32,整数32)=>整数32;
函数 NdrFixedArrayMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrFixedArrayMemorySize(整数32,整数32)=>整数32;
函数 NdrFixedArrayUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrFreeBuffer(整数32)=>整数32;
函数 NdrFullPointerFree(整数32,整数32)=>整数32;
函数 NdrFullPointerInsertRefId(整数32,整数32,整数32)=>整数32;
函数 NdrFullPointerQueryPointer(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrFullPointerQueryRefId(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrFullPointerXlatFree(整数32)=>整数32;
函数 NdrFullPointerXlatInit(整数32,整数32)=>整数32;
函数 NdrGetBuffer(整数32,整数32,整数32)=>整数32;
函数 NdrGetDcomProtocolVersion(整数32,整数32)=>整数32;
函数 NdrGetSimpleTypeBufferAlignment(整数32)=>整数32;
函数 NdrGetSimpleTypeBufferSize(整数32)=>整数32;
函数 NdrGetSimpleTypeMemorySize(整数32)=>整数32;
函数 NdrGetTypeFlags(整数32)=>整数32;
函数 NdrGetUserMarshalInfo(整数32,整数32,整数32)=>整数32;
函数 NdrInterfacePointerBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrInterfacePointerFree(整数32,整数32,整数32)=>整数32;
函数 NdrInterfacePointerMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrInterfacePointerMemorySize(整数32,整数32)=>整数32;
函数 NdrInterfacePointerUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMapCommAndFaultStatus(整数32,整数32,整数32,整数32)=>整数32;
函数 C调用 NdrMesProcEncodeDecode(整数32, ..)=>整数32;
函数 C调用 NdrMesProcEncodeDecode2(整数32, ..)=>整数32;
函数 NdrMesSimpleTypeAlignSize(整数32)=>整数32;
函数 NdrMesSimpleTypeDecode(整数32,整数32,整数32)=>整数32;
函数 NdrMesSimpleTypeEncode(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeAlignSize2(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeAlignSize(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeDecode2(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeDecode(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeEncode2(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeEncode(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrMesTypeFree2(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrNonConformantStringBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrNonConformantStringMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrNonConformantStringMemorySize(整数32,整数32)=>整数32;
函数 NdrNonConformantStringUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrNonEncapsulatedUnionBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrNonEncapsulatedUnionFree(整数32,整数32,整数32)=>整数32;
函数 NdrNonEncapsulatedUnionMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrNonEncapsulatedUnionMemorySize(整数32,整数32)=>整数32;
函数 NdrNonEncapsulatedUnionUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrNsGetBuffer(整数32,整数32,整数32)=>整数32;
函数 NdrNsSendReceive(整数32,整数32,整数32)=>整数32;
函数 NdrOleAllocate(整数32)=>整数32;
函数 NdrOleFree(整数32)=>整数32;
函数 NdrOutInit(整数32,整数32,整数32)=>整数32;
函数 NdrPartialIgnoreClientBufferSize(整数32,整数32)=>整数32;
函数 NdrPartialIgnoreClientMarshall(整数32,整数32)=>整数32;
函数 NdrPartialIgnoreServerInitialize(整数32,整数32,整数32)=>整数32;
函数 NdrPartialIgnoreServerUnmarshall(整数32,整数32)=>整数32;
函数 NdrPointerBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrPointerFree(整数32,整数32,整数32)=>整数32;
函数 NdrPointerMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrPointerMemorySize(整数32,整数32)=>整数32;
函数 NdrPointerUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrProxyErrorHandler(整数32)=>整数32;
函数 NdrProxyFreeBuffer(整数32,整数32)=>整数32;
函数 NdrProxyGetBuffer(整数32,整数32)=>整数32;
函数 NdrProxyInitialize(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrProxySendReceive(整数32,整数32)=>整数32;
函数 NdrRangeUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrRpcSmClientAllocate(整数32)=>整数32;
函数 NdrRpcSmClientFree(整数32)=>整数32;
函数 NdrRpcSmSetClientToOsf(整数32)=>整数32;
函数 NdrRpcSsDefaultAllocate(整数32)=>整数32;
函数 NdrRpcSsDefaultFree(整数32)=>整数32;
函数 NdrRpcSsDisableAllocate(整数32)=>整数32;
函数 NdrRpcSsEnableAllocate(整数32)=>整数32;
函数 NdrSendReceive(整数32,整数32)=>整数32;
函数 NdrServerCall2(整数32)=>整数32;
函数 NdrServerCall(整数32)=>整数32;
函数 NdrServerContextMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrServerContextNewMarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrServerContextNewUnmarshall(整数32,整数32)=>整数32;
函数 NdrServerContextUnmarshall(整数32)=>整数32;
函数 NdrServerInitialize(整数32,整数32,整数32)=>整数32;
函数 NdrServerInitializeMarshall(整数32,整数32)=>整数32;
函数 NdrServerInitializeNew(整数32,整数32,整数32)=>整数32;
函数 NdrServerInitializePartial(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrServerInitializeUnmarshall(整数32,整数32,整数32)=>整数32;
函数 NdrServerMarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrServerUnmarshall(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrSimpleStructBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrSimpleStructFree(整数32,整数32,整数32)=>整数32;
函数 NdrSimpleStructMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrSimpleStructMemorySize(整数32,整数32)=>整数32;
函数 NdrSimpleStructUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrSimpleTypeMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrSimpleTypeUnmarshall(整数32,整数32,整数32)=>整数32;
函数 NdrStubCall2(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrStubCall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrStubForwardingFunction(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrStubGetBuffer(整数32,整数32,整数32)=>整数32;
函数 NdrStubInitialize(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrStubInitializeMarshall(整数32,整数32,整数32)=>整数32;
函数 C调用 NdrTypeFlags(整数32, ..)=>整数32;
函数 NdrTypeFree(整数32,整数32,整数32)=>整数32;
函数 NdrTypeMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrTypeSize(整数32,整数32,整数32)=>整数32;
函数 NdrTypeUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrUnmarshallBasetypeInline(整数32,整数32,整数32)=>整数32;
函数 NdrUserMarshalBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrUserMarshalFree(整数32,整数32,整数32)=>整数32;
函数 NdrUserMarshalMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrUserMarshalMemorySize(整数32,整数32)=>整数32;
函数 NdrUserMarshalSimpleTypeConvert(整数32,整数32,整数32)=>整数32;
函数 NdrUserMarshalUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrVaryingArrayBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrVaryingArrayFree(整数32,整数32,整数32)=>整数32;
函数 NdrVaryingArrayMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrVaryingArrayMemorySize(整数32,整数32)=>整数32;
函数 NdrVaryingArrayUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrXmitOrRepAsBufferSize(整数32,整数32,整数32)=>整数32;
函数 NdrXmitOrRepAsFree(整数32,整数32,整数32)=>整数32;
函数 NdrXmitOrRepAsMarshall(整数32,整数32,整数32)=>整数32;
函数 NdrXmitOrRepAsMemorySize(整数32,整数32)=>整数32;
函数 NdrXmitOrRepAsUnmarshall(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrpCreateProxy(整数32,整数32,整数32,整数32)=>整数32;
函数 NdrpCreateStub(整数32,整数32,整数32)=>整数32;
函数 NdrpGetProcFormatString(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 NdrpGetTypeFormatString(整数32,整数32,整数32)=>整数32;
函数 NdrpGetTypeGenCookie(整数32)=>整数32;
函数 NdrpMemoryIncrement(整数32,整数32,整数32)=>整数32;
函数 NdrpReleaseTypeFormatString(整数32)=>整数32;
函数 NdrpReleaseTypeGenCookie(整数32)=>整数32;
函数 NdrpSetRpcSsDefaults(整数32,整数32)=>整数32;
函数 NdrpVarVtOfTypeDesc(整数32,整数32,整数32)=>整数32;
函数 RpcAbortAsyncCall(整数32,整数32)=>整数32;
函数 RpcAsyncAbortCall(整数32,整数32)=>整数32;
函数 RpcAsyncCancelCall(整数32,整数32)=>整数32;
函数 RpcAsyncCompleteCall(整数32,整数32)=>整数32;
函数 RpcAsyncGetCallStatus(整数32)=>整数32;
函数 RpcAsyncInitializeHandle(整数32,整数32)=>整数32;
函数 RpcAsyncRegisterInfo(整数32)=>整数32;
函数 RpcBindingCopy(整数32,整数32)=>整数32;
函数 RpcBindingFree(整数32)=>整数32;
函数 RpcBindingFromStringBindingA(整数32,整数32)=>整数32;
函数 RpcBindingFromStringBindingW(整数32,整数32)=>整数32;
函数 RpcBindingInqAuthClientA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthClientExA(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthClientExW(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthClientW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthInfoA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthInfoExA(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthInfoExW(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqAuthInfoW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingInqObject(整数32,整数32)=>整数32;
函数 RpcBindingInqOption(整数32,整数32,整数32)=>整数32;
函数 RpcBindingReset(整数32)=>整数32;
函数 RpcBindingServerFromClient(整数32,整数32)=>整数32;
函数 RpcBindingSetAuthInfoA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingSetAuthInfoExA(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingSetAuthInfoExW(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingSetAuthInfoW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcBindingSetObject(整数32,整数32)=>整数32;
函数 RpcBindingSetOption(整数32,整数32,整数32)=>整数32;
函数 RpcBindingToStringBindingA(整数32,整数32)=>整数32;
函数 RpcBindingToStringBindingW(整数32,整数32)=>整数32;
函数 RpcBindingVectorFree(整数32)=>整数32;
函数 RpcCancelAsyncCall(整数32,整数32)=>整数32;
函数 RpcCancelThread(整数32)=>整数32;
函数 RpcCancelThreadEx(整数32,整数32)=>整数32;
函数 RpcCertGeneratePrincipalNameA(整数32,整数32,整数32)=>整数32;
函数 RpcCertGeneratePrincipalNameW(整数32,整数32,整数32)=>整数32;
函数 RpcCompleteAsyncCall(整数32,整数32)=>整数32;
函数 RpcEpRegisterA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcEpRegisterNoReplaceA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcEpRegisterNoReplaceW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcEpRegisterW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcEpResolveBinding(整数32,整数32)=>整数32;
函数 RpcEpUnregister(整数32,整数32,整数32)=>整数32;
函数 RpcErrorAddRecord(整数32)=>整数32;
函数 RpcErrorClearInformation()=>整数32;
函数 RpcErrorEndEnumeration(整数32)=>整数32;
函数 RpcErrorGetNextRecord(整数32,整数32,整数32)=>整数32;
函数 RpcErrorGetNumberOfRecords(整数32,整数32)=>整数32;
函数 RpcErrorLoadErrorInfo(整数32,整数32,整数32)=>整数32;
函数 RpcErrorResetEnumeration(整数32)=>整数32;
函数 RpcErrorSaveErrorInfo(整数32,整数32,整数32)=>整数32;
函数 RpcErrorStartEnumeration(整数32)=>整数32;
函数 RpcFreeAuthorizationContext(整数32)=>整数32;
函数 RpcGetAsyncCallStatus(整数32)=>整数32;
函数 RpcGetAuthorizationContextForClient(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcIfIdVectorFree(整数32)=>整数32;
函数 RpcIfInqId(整数32,整数32)=>整数32;
函数 RpcImpersonateClient(整数32)=>整数32;
函数 RpcInitializeAsyncHandle(整数32,整数32)=>整数32;
函数 RpcMgmtEnableIdleCleanup()=>整数32;
函数 RpcMgmtEpEltInqBegin(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcMgmtEpEltInqDone(整数32)=>整数32;
函数 RpcMgmtEpEltInqNextA(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcMgmtEpEltInqNextW(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcMgmtEpUnregister(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcMgmtInqComTimeout(整数32,整数32)=>整数32;
函数 RpcMgmtInqDefaultProtectLevel(整数32,整数32)=>整数32;
函数 RpcMgmtInqIfIds(整数32,整数32)=>整数32;
函数 RpcMgmtInqServerPrincNameA(整数32,整数32,整数32)=>整数32;
函数 RpcMgmtInqServerPrincNameW(整数32,整数32,整数32)=>整数32;
函数 RpcMgmtInqStats(整数32,整数32)=>整数32;
函数 RpcMgmtIsServerListening(整数32)=>整数32;
函数 RpcMgmtSetAuthorizationFn(整数32)=>整数32;
函数 RpcMgmtSetCancelTimeout(整数32)=>整数32;
函数 RpcMgmtSetComTimeout(整数32,整数32)=>整数32;
函数 RpcMgmtSetServerStackSize(整数32)=>整数32;
函数 RpcMgmtStatsVectorFree(整数32)=>整数32;
函数 RpcMgmtStopServerListening(整数32)=>整数32;
函数 RpcMgmtWaitServerListen()=>整数32;
函数 RpcNetworkInqProtseqsA(整数32)=>整数32;
函数 RpcNetworkInqProtseqsW(整数32)=>整数32;
函数 RpcNetworkIsProtseqValidA(整数32)=>整数32;
函数 RpcNetworkIsProtseqValidW(整数32)=>整数32;
函数 RpcNsBindingInqEntryNameA(整数32,整数32,整数32)=>整数32;
函数 RpcNsBindingInqEntryNameW(整数32,整数32,整数32)=>整数32;
函数 RpcObjectInqType(整数32,整数32)=>整数32;
函数 RpcObjectSetInqFn(整数32)=>整数32;
函数 RpcObjectSetType(整数32,整数32)=>整数32;
函数 RpcProtseqVectorFreeA(整数32)=>整数32;
函数 RpcProtseqVectorFreeW(整数32)=>整数32;
函数 RpcRaiseException(整数32)=>整数32;
函数 RpcRegisterAsyncInfo(整数32)=>整数32;
函数 RpcRevertToSelf()=>整数32;
函数 RpcRevertToSelfEx(整数32)=>整数32;
函数 RpcServerInqBindings(整数32)=>整数32;
函数 RpcServerInqCallAttributesA(整数32,整数32)=>整数32;
函数 RpcServerInqCallAttributesW(整数32,整数32)=>整数32;
函数 RpcServerInqDefaultPrincNameA(整数32,整数32)=>整数32;
函数 RpcServerInqDefaultPrincNameW(整数32,整数32)=>整数32;
函数 RpcServerInqIf(整数32,整数32,整数32)=>整数32;
函数 RpcServerListen(整数32,整数32,整数32)=>整数32;
函数 RpcServerRegisterAuthInfoA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerRegisterAuthInfoW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerRegisterIf2(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerRegisterIf(整数32,整数32,整数32)=>整数32;
函数 RpcServerRegisterIfEx(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerTestCancel(整数32)=>整数32;
函数 RpcServerUnregisterIf(整数32,整数32,整数32)=>整数32;
函数 RpcServerUnregisterIfEx(整数32,整数32,整数32)=>整数32;
函数 RpcServerUseAllProtseqs(整数32,整数32)=>整数32;
函数 RpcServerUseAllProtseqsEx(整数32,整数32,整数32)=>整数32;
函数 RpcServerUseAllProtseqsIf(整数32,整数32,整数32)=>整数32;
函数 RpcServerUseAllProtseqsIfEx(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqA(整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqEpA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqEpExA(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqEpExW(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqEpW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqExA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqExW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqIfA(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqIfExA(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqIfExW(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqIfW(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcServerUseProtseqW(整数32,整数32,整数32)=>整数32;
函数 RpcServerYield()=>整数32;
函数 RpcSmAllocate(整数32,整数32)=>整数32;
函数 RpcSmClientFree(整数32)=>整数32;
函数 RpcSmDestroyClientContext(整数32)=>整数32;
函数 RpcSmDisableAllocate()=>整数32;
函数 RpcSmEnableAllocate()=>整数32;
函数 RpcSmFree(整数32)=>整数32;
函数 RpcSmGetThreadHandle(整数32)=>整数32;
函数 RpcSmSetClientAllocFree(整数32,整数32)=>整数32;
函数 RpcSmSetThreadHandle(整数32)=>整数32;
函数 RpcSmSwapClientAllocFree(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcSsAllocate(整数32)=>整数32;
函数 RpcSsContextLockExclusive(整数32,整数32)=>整数32;
函数 RpcSsContextLockShared(整数32,整数32)=>整数32;
函数 RpcSsDestroyClientContext(整数32)=>整数32;
函数 RpcSsDisableAllocate()=>整数32;
函数 RpcSsDontSerializeContext()=>整数32;
函数 RpcSsEnableAllocate()=>整数32;
函数 RpcSsFree(整数32)=>整数32;
函数 RpcSsGetContextBinding(整数32,整数32)=>整数32;
函数 RpcSsGetThreadHandle()=>整数32;
函数 RpcSsSetClientAllocFree(整数32,整数32)=>整数32;
函数 RpcSsSetThreadHandle(整数32)=>整数32;
函数 RpcSsSwapClientAllocFree(整数32,整数32,整数32,整数32)=>整数32;
函数 RpcStringBindingComposeA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcStringBindingComposeW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcStringBindingParseA(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcStringBindingParseW(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 RpcStringFreeA(整数32)=>整数32;
函数 RpcStringFreeW(整数32)=>整数32;
函数 RpcTestCancel()=>整数32;
函数 RpcUserFree(整数32,整数32)=>整数32;
函数 C调用 SimpleTypeAlignment(整数32, ..)=>整数32;
函数 C调用 SimpleTypeBufferSize(整数32, ..)=>整数32;
函数 C调用 SimpleTypeMemorySize(整数32, ..)=>整数32;
函数 TowerConstruct(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 TowerExplode(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 UuidCompare(整数32,整数32,整数32)=>整数32;
函数 UuidCreate(整数32)=>整数32;
函数 UuidCreateNil(整数32)=>整数32;
函数 UuidCreateSequential(整数32)=>整数32;
函数 UuidEqual(整数32,整数32,整数32)=>整数32;
函数 UuidFromStringA(整数32,整数32)=>整数32;
函数 UuidFromStringW(整数32,整数32)=>整数32;
函数 UuidHash(整数32,整数32)=>整数32;
函数 UuidIsNil(整数32,整数32)=>整数32;
函数 UuidToStringA(整数32,整数32)=>整数32;
函数 UuidToStringW(整数32,整数32)=>整数32;
函数 C调用 pfnFreeRoutines(整数32, ..)=>整数32;
函数 C调用 pfnMarshallRoutines(整数32, ..)=>整数32;
函数 C调用 pfnSizeRoutines(整数32, ..)=>整数32;
函数 C调用 pfnUnmarshallRoutines(整数32, ..)=>整数32;

宏定义 DceErrorInqText  DceErrorInqTextA
宏定义 I_RpcBindingInqDynamicEndpoint  I_RpcBindingInqDynamicEndpointA
宏定义 I_RpcNsBindingSetEntryName  I_RpcNsBindingSetEntryNameA
宏定义 I_RpcServerUseProtseq2  I_RpcServerUseProtseq2A
宏定义 I_RpcServerUseProtseqEp2  I_RpcServerUseProtseqEp2A
宏定义 RpcBindingFromStringBinding  RpcBindingFromStringBindingA
宏定义 RpcBindingInqAuthClient  RpcBindingInqAuthClientA
宏定义 RpcBindingInqAuthClientEx  RpcBindingInqAuthClientExA
宏定义 RpcBindingInqAuthInfo  RpcBindingInqAuthInfoA
宏定义 RpcBindingInqAuthInfoEx  RpcBindingInqAuthInfoExA
宏定义 RpcBindingSetAuthInfo  RpcBindingSetAuthInfoA
宏定义 RpcBindingSetAuthInfoEx  RpcBindingSetAuthInfoExA
宏定义 RpcBindingToStringBinding  RpcBindingToStringBindingA
宏定义 RpcCertGeneratePrincipalName  RpcCertGeneratePrincipalNameA
宏定义 RpcEpRegister  RpcEpRegisterA
宏定义 RpcEpRegisterNoReplace  RpcEpRegisterNoReplaceA
宏定义 RpcMgmtEpEltInqNext  RpcMgmtEpEltInqNextA
宏定义 RpcMgmtInqServerPrincName  RpcMgmtInqServerPrincNameA
宏定义 RpcNetworkInqProtseqs  RpcNetworkInqProtseqsA
宏定义 RpcNetworkIsProtseqValid  RpcNetworkIsProtseqValidA
宏定义 RpcNsBindingInqEntryName  RpcNsBindingInqEntryNameA
宏定义 RpcProtseqVectorFree  RpcProtseqVectorFreeA
宏定义 RpcServerInqCallAttributes  RpcServerInqCallAttributesA
宏定义 RpcServerInqDefaultPrincName  RpcServerInqDefaultPrincNameA
宏定义 RpcServerRegisterAuthInfo  RpcServerRegisterAuthInfoA
宏定义 RpcServerUseProtseq  RpcServerUseProtseqA
宏定义 RpcServerUseProtseqEp  RpcServerUseProtseqEpA
宏定义 RpcServerUseProtseqEpEx  RpcServerUseProtseqEpExA
宏定义 RpcServerUseProtseqEx  RpcServerUseProtseqExA
宏定义 RpcServerUseProtseqIf  RpcServerUseProtseqIfA
宏定义 RpcServerUseProtseqIfEx  RpcServerUseProtseqIfExA
宏定义 RpcStringBindingCompose  RpcStringBindingComposeA
宏定义 RpcStringBindingParse  RpcStringBindingParseA
宏定义 RpcStringFree  RpcStringFreeA
宏定义 UuidFromString  UuidFromStringA
宏定义 UuidToString  UuidToStringA
}
