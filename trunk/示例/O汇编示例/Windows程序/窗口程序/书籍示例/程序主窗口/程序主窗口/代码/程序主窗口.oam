∥创建简单的窗口

.包含文<*oasm32.oah>
.引用库<*Kernel32.lib>
.引用库<*user32.lib>

结构 窗体结构
{
    双字    结构大小
    双字    窗口风格
    双字    窗口过程
    双字    类名附加空间
    双字    窗口附加空间
    双字    实例句柄
    双字    图标句柄
    双字    光标句柄
    双字    背景颜色
    双字    菜单指针
    双字    类名指针
    双字    附加图标
}

结构 坐标
{
    双字    X轴
    双字    Y轴
}

结构 消息结构
{
    双字    窗口句柄 
    双字    消息标识
    双字    参数一
    双字    参数二
    双字    时间
    坐标    位置    
}


宏定义
{
    垂直重绘  0x1
    水平重绘  0x2
    背景色    0x6
    图标形状  32512
    鼠标形状  32512
    
    边框样式  0x0
    标题栏    0x0C00000
    系统菜单  0x80000
    边界粗细  0x40000
    最小化    0x20000
    最大化    0x10000
    
    默认坐标X 100
    默认坐标Y 200
    默认宽度  300
    默认高度  150
    
    显示方式  10
    
    关闭消息  0x2
}

.只读段
{
    字节 窗口类名.. = "MyFirstWinClass"
    字节 窗口标题.. = "O汇编示例--程序主窗口"
    字节 提醒内容.. = "主窗口创建失败"
    字节 提醒标题.. = "警告"
}

.引用段
{
    //这个段内是引用系统函数,其中英文名是系统内部使用的函数名
    //引用的函数可以省略参数名
    函数 获取模块句柄:GetModuleHandleA(双字)
    函数 载入图标:LoadIconA(双字,双字)
    函数 载入光标:LoadCursorA(双字,双字)
    函数 注册窗口类:RegisterClassExA(双字)
    函数 创建窗口:CreateWindowExA(双字,双字,双字,双字,双字,双字,双字,双字,双字,双字,双字,双字)
    函数 信息窗口:MessageBoxA(双字,双字,双字,双字)
    函数 显示窗口:ShowWindow(双字,双字)
    函数 更新窗口:UpdateWindow(双字)
    函数 获取消息:GetMessageA(双字,双字,双字,双字)
    函数 消息翻译:TranslateMessage(双字)
    函数 消息调度:DispatchMessageA(双字)
    函数 邮送结束消息:PostQuitMessage(双字)
    函数 默认窗口过程:DefWindowProcA(双字,双字,双字,双字)
    函数 退出进程:ExitProcess(双字)
}

.代码段
{
    入口 主函数() //程序从这个函数开始运行
    {
        主窗口()
        退出进程(0)
    }
    
    函数 主窗口()
    {
        双字 模块句柄
        获取模块句柄(0)     //得到模块句柄  GetModuleHandle
        模块句柄 = 累加32   //把模块句柄赋给 模块句柄 变量     mov 模块句柄,eax
        
        /*------------  第一步  注册窗口类 -------------*/
        
        窗体结构  我的窗口类   //这里定义了一个窗口类变量
        
        我的窗口类.结构大小 = 取大小 我的窗口类 ∥这个成员就是这个结构体所占字节数  mov 我的窗口类.结构大小,sizeof 我的窗口类
        我的窗口类.窗口风格 = 垂直重绘 | 水平重绘 //这个成员表示了窗口的风格        mov 我的窗口类.窗口风格,垂直重绘 or 水平重绘
        我的窗口类.窗口过程 = 消息处理程序    //这个成员表示了窗口处理消息的函数    mov 我的窗口类.窗口过程,addr 消息处理程序
        我的窗口类.类名附加空间 = 0  //这个变量暂时不考虑       mov 我的窗口类.类名附加空间,0
        我的窗口类.窗口附加空间 = 0  //这个变量暂时不考虑       mov 我的窗口类.窗口附加空间,0

        压栈  模块句柄    //push 模块句柄
        出栈  我的窗口类.实例句柄  //pop 我的窗口类.实例句柄
        //上面两句表示把模块句柄变量的值赋给实例句柄成员作用相当于:
        //  我的窗口类.实例句柄 = 模块句柄
        //但在汇编中这种写法是错误的

        我的窗口类.背景颜色 = 背景色   //这是设置了窗口的背景色
        我的窗口类.菜单指针 = 0     //这里设置了窗口的菜单指针为0，表示窗口没有菜单
        我的窗口类.类名指针 = 取地址  窗口类名     //这里设置了窗口类的名称    mov 我的窗口类.类名指针,addr  窗口类名

        载入图标(0,图标形状) //LoadIcon
        我的窗口类.图标句柄 = 累加32
        //上面两句代码设置了窗口的图标，就是窗口左上角和在桌面任务栏上显示的图标

        我的窗口类.附加图标 = 累加32   //上面设置了窗口的附加图标，就是窗口有时会被缩小到桌面任务栏最右下角显示的图标

        载入光标(0,鼠标形状) //LoadCursor
        我的窗口类.光标句柄 = 累加32
        //上面两句代码设置了窗口的光标，也就是鼠标移到窗口内所显示的鼠标图案
        
        //下面两句代码注册"我的窗口类"
        累加32 @= 我的窗口类    //得到"我的窗口类"变量地址  lea eax,我的窗口类
        注册窗口类(累加32)  //RegisterClassEx
        
        /*------------ 第二步  使用已注册的窗口类创建窗口 -------------*/
        
        双字  主窗口句柄
        累加32 = 边框样式 | 标题栏 | 系统菜单 | 边界粗细 | 最小化 | 最大化  //生成窗口风格
        创建窗口(0,取地址 窗口类名,取地址 窗口标题,累加32,默认坐标X,默认坐标Y,默认宽度,默认高度,0,0,模块句柄,0)
        主窗口句柄 = 累加32  //保存创建的窗口句柄
        如果(主窗口句柄 == 0)
        {
            信息窗口(0,取地址 提醒内容,取地址 提醒标题,16)  //提醒用户窗口创建失败
            返回 0
        }
        
        /*------------ 第三步  显示窗口 -------------*/
        显示窗口(主窗口句柄,显示方式)  //ShowWindow
        更新窗口(主窗口句柄)           //UpdateWindow
        
        /*------------ 第四步  从消息队列中获取消息 -------------*/
        
        消息结构  消息 //定义一个消息结构变量
        循环(真) //一个无限循环
        {
             累加32 @= 消息   //取"消息"变量地址到累加32寄存器中  lea eax,消息
             获取消息(累加32,0,0,0)   //从消息队列中获取消息 GetMessage
             如果(累加32==0)
             {
                 跳出    //获取消息失败就跳出循环
             }
             累加32 @= 消息     //lea eax,消息
             消息翻译(累加32)  //对消息进行必要的翻译工作 TranslateMessage
             累加32 @= 消息     //lea eax,消息
             消息调度(累加32)  //对消息进行调度  DispatchMessage
        }
                
    }//主窗口函数结束
    
    函数 消息处理程序(双字 句柄,双字 消息,双字 消息参数一,双字 消息参数二)
    {<基数32,的址32,源址32>  //这里是对这些寄存器值进行保护的高级写法  use ebx edi esi
           
        累加32 = 消息
        如果(累加32 == 关闭消息)   //处理窗口关闭
        {
            //由于主窗口关闭就意味着程序结束,所以这里向系统邮送一个程序结束消息,程序将退出
             邮送结束消息(0)  //PostQuitMessage
        }
        否则
        {
             默认窗口过程(句柄,消息,消息参数一,消息参数二)  //其它消息都使用默认窗口过程处理  DefWindowProc
            返回  //ret
        }

        累加32^=累加32 //xor eax,eax
    } 

}//代码段结束
