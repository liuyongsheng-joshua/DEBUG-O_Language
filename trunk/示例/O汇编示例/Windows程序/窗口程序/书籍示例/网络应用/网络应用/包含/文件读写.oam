//文件读写文件



.数据段
{
    字节 文件名缓冲区..260 
    打开文件名结构 文件对话框结构
}

.只读段
{
    字节 打开文件对话框标题.. = "文件读写"
    字节 打开文件对话框过滤.. = "文本文件(*.wwd)","*.wwd","所有文件","*.*",0
    字节 文件太长提示标题..   = "打开文件错误"
    字节 文件太长提示内容..   = "对不起,对本程序来说文件超过32K太大了"
    字节 打开文件状态条提示.. = "打开文件 %d 字节"
    字节 保存文件状态条提示.. = "文件保存 %d 字节"
    字节 保存文件对话框标题.. = "文件读写"
    字节 保存文件对话框过滤.. = "文本文件(*.wwd)","*.wwd","所有文件","*.*",0
    字节 修改保存验证内容..   = "文档已经被修改, 需要保存吗?"
    字节 修改保存验证标题..   = "保存提示"
}

.代码段
{
    函数 获取要打开文件的全名(双字 h父窗口句柄,双字 lp对话框标题,双字 lp扩展名过滤)
    {
        文件对话框结构.lStructSize =        取大小 打开文件名结构
        压栈 h父窗口句柄
        出栈 文件对话框结构.hWndOwner
        压栈 模块句柄
        出栈 文件对话框结构.hInstance
        压栈 lp扩展名过滤
        出栈 文件对话框结构.lpstrFilter
        文件对话框结构.lpstrFile = 取地址 文件名缓冲区
        文件对话框结构.nMaxFile  = 取大小 文件名缓冲区
        压栈 lp对话框标题
        出栈 文件对话框结构.lpstrTitle    
        文件对话框结构.Flags =   OFN_EXPLORER | OFN_FILEMUSTEXIST | OFN_LONGNAMES

        获取打开文件名(取地址 文件对话框结构)
    }
    
    函数 填充缓冲区(双字 lp缓冲区地址,双字 缓冲区大小,双字 要填充的字节值)
    { <的址32>    ∥保护 的址32 寄存器
    
        的址32 = lp缓冲区地址 
        计数32 = 缓冲区大小
        累加32 = 要填充的字节值
        重复 [的址32]  串等于 累加低  //这是串操作指令 "重复"是指令前缀
    }
    
    //读取文件并显示到编辑控件中
    函数 读入文件(双字 lp文件名,双字 h编辑控件句柄)
    {
        双字 h文件句柄
        
         //打开文件 CreateFile
        创建文件(lp文件名,GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0)
        h文件句柄 = 累加32
        
        //获取文件长度
        双字 文件长度
        获取文件大小(h文件句柄,0) //GetFileSize
        文件长度 = 累加32
        
        //如果文件太长了(大于32767字节)就提示并退出
        如果(文件长度 > 32767)
        {
            关闭句柄(h文件句柄) //CloseHandle
            提示框(0,取地址 文件太长提示内容,取地址 文件太长提示标题,信息框_OK)//MessageBox
            累加32 ^= 累加32  //xor eax,eax
            返回  //ret
        }
        
        //为读取文件数据分配内存空间
        双字 h内存缓冲区
        系统分配字符串字节长度(0,文件长度)  //SysAllocStringByteLen
        h内存缓冲区 = 累加32 //mov h内存缓冲区,eax
        
        //读取文件数据
        双字 读取大小
        累加32 @= 读取大小 //lea eax,读取大小
        读文件(h文件句柄,h内存缓冲区,文件长度,累加32,0) //ReadFile
        
        设置窗体文本(h编辑控件句柄,h内存缓冲区)//SetWindowText

        系统释放字符串(h内存缓冲区) //SysFreeString
        关闭句柄(h文件句柄) //CloseHandle
        
        字节 文本缓冲区..128
        累加32 @= 文本缓冲区 //lea eax,文本缓冲区
        字符串格式化(累加32,取地址 打开文件状态条提示,文件长度) //wsprintf
        
        //将第二状态格提示为"打开文件 xxx 字节"
        累加32 @= 文本缓冲区 //lea eax,文本缓冲区
        发送消息(h状态栏句柄,状态条_SETTEXT,1,累加32) //SendMessage
        
        //将第三状态格设为文件名
        发送消息(h状态栏句柄,状态条_SETTEXT,2,lp文件名) //SendMessage
    }
    
    函数 写入文件(双字 lp文件名)
    { 
        ∥ -----------------------------------------
        ∥ 打开文件,如果文件存在设置文件长度为0
        ∥ -----------------------------------------
        双字 h文件句柄
        创建文件(lp文件名,GENERIC_WRITE,NULL,0,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,0)//CreateFile
        h文件句柄 = 累加32 //mov h文件句柄 ,eax
        
        //获取文本长度
        双字 文本长度
        获取窗体文本长度(h编辑框句柄) //GetWindowTextLength
        文本长度 = 累加32 //mov 文本长度,eax
        文本长度 ++  //inc 文本长度   为多分配一个字节空间
        
        //根据文本长度分配内存缓冲区
        双字 h内存缓冲区
        系统分配字符串字节长度(0,文本长度) //SysAllocStringByteLen
        h内存缓冲区 = 累加32 //mov h内存缓冲区,eax

        获取窗体文本(h编辑框句柄,h内存缓冲区,文本长度) //GetWindowText
        
        //数据写入文件
        双字 写入长度
        累加32 @= 写入长度 //lea eax,写入长度
        文本长度 -- //实际写入长度要减去字符串最后一个为0的字节
        写文件(h文件句柄,h内存缓冲区,文本长度,累加32,0)  //WriteFile
        
        //释放所分配的空间和关闭文件句柄
        系统释放字符串(h内存缓冲区) //SysFreeString
        关闭句柄(h文件句柄) //CloseHandle
        
        //向编辑控件发送一个"修改为假"的消息,表示文档在保存后没有被修改
        发送消息(h编辑框句柄,EM_SETMODIFY,假,0) //SendMessage

        字节 文本缓冲区..128
        累加32 @= 文本缓冲区 //lea eax,文本缓冲区
        字符串格式化(累加32,取地址 保存文件状态条提示,写入长度) //wsprintf

        累加32 @= 文本缓冲区
        发送消息(h状态栏句柄,状态条_SETTEXT,1,累加32)//SendMessage
    }
    
    函数 获取要保存文件的全名(双字 h父窗口句柄,双字 lp标题,双字 lp扩展名过滤)
    {
        文件对话框结构.lStructSize = 取大小 打开文件名结构
        压栈 h父窗口句柄
        出栈 文件对话框结构.hWndOwner
        压栈 模块句柄
        出栈 文件对话框结构.hInstance
        压栈 lp扩展名过滤
        出栈 文件对话框结构.lpstrFilter        
        文件对话框结构.lpstrFile =   取地址 文件名缓冲区
        文件对话框结构.nMaxFile  =   取大小 文件名缓冲区
        压栈 lp标题
        出栈 文件对话框结构.lpstrTitle
        文件对话框结构.Flags =              OFN_EXPLORER | OFN_LONGNAMES

        获取保存文件名(取地址 文件对话框结构) //GetSaveFileName
    }
    
    函数 文件另存为(双字 h父窗口句柄)
    {
        填充缓冲区(取地址 文件名缓冲区,取大小 文件名缓冲区,0)
        获取要保存文件的全名(h父窗口句柄,取地址 保存文件对话框标题,取地址 保存文件对话框过滤)
        
        //如果得到保存的文件名则保存文件
        如果(文件名缓冲区:0 != 0)
        {
            写入文件(取地址 文件名缓冲区)
            
            //将第三状态格设为文件名
            发送消息(h状态栏句柄,状态条_SETTEXT,2,取地址 文件名缓冲区) //SendMessage
        }
    }
    
    函数 验证对话框 (双字 h父窗口句柄)
    {    
        //MessageBox  使用 MB_YESNOCANCEL | MB_ICONQUESTION 风格
        提示框(h父窗口句柄,取地址 修改保存验证内容,取地址 修改保存验证标题, ...
         信息框_YESNOCANCEL | 信息框_ICONQUESTION) 
    }
}
