
正数32 typedef fexcept_t;

结构 fenv_t 
{
    fexcept_t control;
    fexcept_t status;
    fexcept_t[5] reserved;
}

/* macros */
宏定义
{
FE_TONEAREST   0x00
FE_DOWNWARD    0x01
FE_UPWARD      0x02
FE_TOWARDZERO  0x03

FE_INVALID     0x01
FE_DIVBYZERO   0x04
FE_OVERFLOW    0x08
FE_UNDERFLOW   0x10
FE_INEXACT     0x20
FE_ALL_EXCEPT()  (FE_INVALID|FE_DIVBYZERO|FE_OVERFLOW|FE_UNDERFLOW|FE_INEXACT)

FE_DFL_ENV()  (&__dfl_fenv)
}

引用段
{
/* floating-point exception handling */
函数 C调用 feclearexcept(整数32)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 fegetexceptflag(地址<fexcept_t>, 整数32)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 feraiseexcept(整数32)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 fesetexceptflag(地址<fexcept_t>, 整数32)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 fetestexcept(整数32)=>整数32;

/* rounding control */
函数 C调用 fegetround()=>整数32;
函数 C调用 fesetround(整数32)=>整数32;

/* floating-point environment */
函数 C调用 fegetenv(地址<fenv_t>)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 fesetenv(地址<fenv_t>)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 feupdateenv(地址<fenv_t>)=>整数32;  /* return type changed to 整数32 in TC1 */
函数 C调用 feholdexcept(地址<fenv_t>)=>整数32;

/* data declarations */
fenv_t __dfl_fenv;
fenv_t __fenv;
}


