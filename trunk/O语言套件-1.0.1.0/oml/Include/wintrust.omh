引用段
{
函数 AddPersonalTrustDBPages(整数32,整数32,整数32)=>整数32;
函数 CatalogCompactHashDatabase(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminAcquireContext(整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminAddCatalog(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminCalcHashFromFileHandle(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminEnumCatalogFromHash(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminPauseServiceForBackup(整数32,整数32)=>整数32;
函数 CryptCATAdminReleaseCatalogContext(整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminReleaseContext(整数32,整数32)=>整数32;
函数 CryptCATAdminRemoveCatalog(整数32,整数32,整数32)=>整数32;
函数 CryptCATAdminResolveCatalogPath(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFClose(整数32)=>整数32;
函数 CryptCATCDFEnumAttributes(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFEnumAttributesWithCDFTag(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFEnumCatAttributes(整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFEnumMembers(整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFEnumMembersByCDFTag(整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFEnumMembersByCDFTagEx(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATCDFOpen(整数32,整数32)=>整数32;
函数 CryptCATCatalogInfoFromContext(整数32,整数32,整数32)=>整数32;
函数 CryptCATClose(整数32)=>整数32;
函数 CryptCATEnumerateAttr(整数32,整数32,整数32)=>整数32;
函数 CryptCATEnumerateCatAttr(整数32,整数32)=>整数32;
函数 CryptCATEnumerateMember(整数32,整数32)=>整数32;
函数 CryptCATGetAttrInfo(整数32,整数32,整数32)=>整数32;
函数 CryptCATGetCatAttrInfo(整数32,整数32)=>整数32;
函数 CryptCATGetMemberInfo(整数32,整数32)=>整数32;
函数 CryptCATHandleFromStore(整数32)=>整数32;
函数 CryptCATOpen(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATPersistStore(整数32)=>整数32;
函数 CryptCATPutAttrInfo(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATPutCatAttrInfo(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATPutMemberInfo(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptCATStoreFromHandle(整数32)=>整数32;
函数 CryptSIPCreateIndirectData(整数32,整数32,整数32)=>整数32;
函数 CryptSIPGetSignedDataMsg(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSIPPutSignedDataMsg(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 CryptSIPRemoveSignedDataMsg(整数32,整数32)=>整数32;
函数 CryptSIPVerifyIndirectData(整数32,整数32)=>整数32;
函数 DriverCleanupPolicy(整数32)=>整数32;
函数 DriverFinalPolicy(整数32)=>整数32;
函数 DriverInitializePolicy(整数32)=>整数32;
函数 FindCertsByIssuer(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 HTTPSFinalProv(整数32)=>整数32;
函数 I_CryptCatAdminMigrateToNewCatDB()=>整数32;
函数 IsCatalogFile(整数32,整数32)=>整数32;
函数 MsCatConstructHashTag(整数32,整数32,整数32)=>整数32;
函数 MsCatFreeHashTag(整数32)=>整数32;
函数 OfficeCleanupPolicy(整数32)=>整数32;
函数 OfficeInitializePolicy(整数32)=>整数32;
函数 OpenPersonalTrustDBDialog(整数32)=>整数32;
函数 OpenPersonalTrustDBDialogEx(整数32,整数32,整数32)=>整数32;
函数 SoftpubAuthenticode(整数32)=>整数32;
函数 SoftpubCheckCert(整数32,整数32,整数32,整数32)=>整数32;
函数 SoftpubCleanup(整数32)=>整数32;
函数 SoftpubDllRegisterServer()=>整数32;
函数 SoftpubDllUnregisterServer()=>整数32;
函数 SoftpubDumpStructure(整数32)=>整数32;
函数 SoftpubInitialize(整数32)=>整数32;
函数 SoftpubLoadMessage(整数32)=>整数32;
函数 SoftpubLoadSignature(整数32)=>整数32;
函数 TrustDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 TrustFindIssuerCertificate(整数32,整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 TrustFreeDecode(整数32,整数32)=>整数32;
函数 TrustIsCertificateSelfSigned(整数32,整数32,整数32)=>整数32;
函数 TrustOpenStores(整数32,整数32,整数32,整数32)=>整数32;
函数 WTHelperCertCheckValidSignature(整数32)=>整数32;
函数 WTHelperCertIsSelfSigned(整数32,整数32)=>整数32;
函数 WTHelperCheckCertUsage(整数32,整数32)=>整数32;
函数 WTHelperGetAgencyInfo(整数32,整数32,整数32)=>整数32;
函数 WTHelperGetFileHandle(整数32)=>整数32;
函数 WTHelperGetFileHash(整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WTHelperGetFileName(整数32)=>整数32;
函数 WTHelperGetKnownUsages(整数32,整数32)=>整数32;
函数 WTHelperGetProvCertFromChain(整数32,整数32)=>整数32;
函数 WTHelperGetProvPrivateDataFromChain(整数32,整数32)=>整数32;
函数 WTHelperGetProvSignerFromChain(整数32,整数32,整数32,整数32)=>整数32;
函数 WTHelperIsInRootStore(整数32,整数32)=>整数32;
函数 WTHelperOpenKnownStores(整数32)=>整数32;
函数 WTHelperProvDataFromStateData(整数32)=>整数32;
函数 WVTAsn1CatMemberInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1CatMemberInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1CatNameValueDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1CatNameValueEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcFinancialCriteriaInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcFinancialCriteriaInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcIndirectDataContentDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcIndirectDataContentEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcLinkDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcLinkEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcMinimalCriteriaInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcMinimalCriteriaInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcPeImageDataDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcPeImageDataEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSigInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSigInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSpAgencyInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSpAgencyInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSpOpusInfoDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcSpOpusInfoEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcStatementTypeDecode(整数32,整数32,整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WVTAsn1SpcStatementTypeEncode(整数32,整数32,整数32,整数32,整数32)=>整数32;
函数 WinVerifyTrust(整数32,整数32,整数32)=>整数32;
函数 WinVerifyTrustEx(整数32,整数32,整数32)=>整数32;
函数 WintrustAddActionID(整数32,整数32,整数32)=>整数32;
函数 WintrustAddDefaultForUsage(整数32,整数32)=>整数32;
函数 WintrustCertificateTrust(整数32)=>整数32;
函数 WintrustGetDefaultForUsage(整数32,整数32,整数32)=>整数32;
函数 WintrustGetRegPolicyFlags(整数32)=>整数32;
函数 WintrustLoadFunctionPointers(整数32,整数32)=>整数32;
函数 WintrustRemoveActionID(整数32)=>整数32;
函数 WintrustSetRegPolicyFlags(整数32)=>整数32;
函数 mscat32DllRegisterServer()=>整数32;
函数 mscat32DllUnregisterServer()=>整数32;
函数 mssip32DllRegisterServer()=>整数32;
函数 mssip32DllUnregisterServer()=>整数32;

}
