
//O汇编语言使用的windows包含头文件
//本文件绝大部分由inc2oah工具从MASM中的windows.inc自动生成
//主要包含了编写windows程序所要用到的define、类型定义、struct体等

//手工主要修改以下内容
//1、删除了文件最前部分内容
//2、注释掉了PROTO STDCALL行
//3、将comment注释文本替换成//行注释
//4、修改了部分带有"<"符号的句子(可通过搜索找到这样的语句)
//5、修改了RECORD的定义
//6、在定义struct体或union体时，对没有名称的struct体和union体增加了名称，没有名称的变量增加了名称
//7、对照windows.inc修改了其它不符合O汇编语法的内容

// ---------------------------
// C and C++ type definitions
// ---------------------------
//PROTO STDCALL  typedef  CALLBACK
//PROTO STDCALL  typedef  WINAPI

// 8 bit   int8
// ~~~~~
int8  typedef  CHAR;
int8  typedef  UCHAR;
////// TBYTE                       typedef int8 // naming conflist with MASM data type
int8  typedef  TCHAR;
int8  typedef  bool;
int8  typedef  BOOLEAN;

// 16 bit  int16
// ~~~~~~
////// SHORT                       typedef int16
int16    typedef  USHORT;
int16    typedef  ATOM;
int16    typedef  WCHAR;
int16    typedef  OLECHAR;
int16    typedef  FILEOP_FLAGS;

// 32 bit  int32
// ~~~~~~
int32  typedef  ABORTPROC;
int32  typedef  ACCESS_MASK;
int32  typedef  ACMDRIVERENUMCB;
int32  typedef  ACMDRIVERPROC;
int32  typedef  ACMFILTERCHOOSEHOOKPROC;
int32  typedef  ACMFILTERENUMCB;
int32  typedef  ACMFILTERTAGENUMCB;
int32  typedef  ACMFORMATCHOOSEHOOKPROC;
int32  typedef  ACMFORMATENUMCB;
int32  typedef  ACMFORMATTAGENUMCB;
int32  typedef  NET_API_STATUS;
int32  typedef  API_RET_TYPE;
int32  typedef  APPLET_PROC;
int32  typedef  BOOL;
int32  typedef  CALINFO_ENUMPROC;
int32  typedef  COLORREF;
////// CONST                       typedef int32   // naming conflist with MASM reserve word
////// CRITICAL_SECTION            typedef int32   // naming conflist with structure
int32  typedef  CTRYID;
int32  typedef  DATEFMT_ENUMPROC;
int32  typedef  DESKTOPENUMPROC;
int32  typedef  DLGPROC;
int32  typedef  DRAWSTATEPROC;
int32  typedef  EDITWORDBREAKPROC;
int32  typedef  ENHMFENUMPROC;
int32  typedef  ENUMRESLANGPROC;
int32  typedef  ENUMRESNAMEPROC;
int32  typedef  ENUMRESTYPEPROC;
int32  typedef  FARPROC;
int32  typedef  FILE_SEGMENT_ELEMENT;
int32  typedef  FONTENUMPROC;
int32  typedef  GOBJENUMPROC;
int32  typedef  GRAYSTRINGPROC;
int32  typedef  HACCEL;
int32  typedef  HANDLE;
int32  typedef  HBITMAP;
int32  typedef  HBRUSH;
int32  typedef  HCOLORSPACE;
int32  typedef  HCONV;
int32  typedef  HCONVLIST;
int32  typedef  HCURSOR;
int32  typedef  HDC;
int32  typedef  HDDEDATA;
int32  typedef  HDESK;
int32  typedef  HDROP;
int32  typedef  HDWP;
int32  typedef  HENHMETAFILE;
int32  typedef  HFILE;
int32  typedef  HFONT;
int32  typedef  HGDIOBJ;
int32  typedef  HGLOBAL;
int32  typedef  HHOOK;
int32  typedef  HICON;
int32  typedef  HIMAGELIST;
int32  typedef  HIMC;
int32  typedef  HINSTANCE;
int32  typedef  HKEY;
int32  typedef  HKL;
int32  typedef  HLOCAL;
int32  typedef  HMENU;
int32  typedef  HMETAFILE;
int32  typedef  HMODULE;
int32  typedef  HMONITOR;
int32  typedef  HOOKPROC;
int32  typedef  HPALETTE;
int32  typedef  HPEN;
int32  typedef  HRGN;
int32  typedef  HRSRC;
int32  typedef  HSZ;
int32  typedef  HTREEITEM;
int32  typedef  HWINSTA;
int32  typedef  HWND;
////// INT                         typedef int32// naming conflist with MASM reserve word
int32  typedef  IPADDR;
int32  typedef  LANGID;
int32  typedef  LCID;
int32  typedef  LCSCSTYPE;
int32  typedef  LCSGAMUTMATCH;
int32  typedef  LCTYPE;
int32  typedef  LINEDDAPROC;
int32  typedef  LOCALE_ENUMPROC;
int32  typedef  LONG;
int32  typedef  LPARAM;
int32  typedef  LPBOOL;
int32  typedef  LPBYTE;
int32  typedef  LPCCHOOKPROC;
int32  typedef  LPCFHOOKPROC;
int32  typedef  LPCOLORREF;
int32  typedef  LPCRITICAL_SECTION;
int32  typedef  LPCSTR;
int32  typedef  LPCTSTR;
int32  typedef  LPCVOID;
int32  typedef  LPCWSTR;
int32  typedef  LPDWORD;
int32  typedef  LPFIBER_START_ROUTINE;
int32  typedef  LPFRHOOKPROC;
int32  typedef  LPHANDLE;
int32  typedef  LPHANDLER_FUNCTION;
int32  typedef  LPINT;
int32  typedef  LPLONG;
int32  typedef  LPOFNHOOKPROC;
int32  typedef  LPOLESTR;
int32  typedef  LPCOLESTR;
int32  typedef  LPPAGEPAINTHOOK;
int32  typedef  LPPAGESETUPHOOK;
int32  typedef  LPPRINTHOOKPROC;
int32  typedef  LPPROGRESS_ROUTINE;
int32  typedef  LPSETUPHOOKPROC;
int32  typedef  LPSTR;
int32  typedef  LPSTREAM;
int32  typedef  LPTHREAD_START_ROUTINE;
int32  typedef  LPTSTR;
int32  typedef  LPVOID;
int32  typedef  LPWORD;
int32  typedef  LPWSTR;
int32  typedef  LRESULT;
////// LUID                        typedef int32   // name conflict with structure
int32  typedef  MCIDEVICEID;
int32  typedef  PBOOL;
int32  typedef  PBOOLEAN;
int32  typedef  PBYTE;
int32  typedef  PCHAR;
int32  typedef  PCRITICAL_SECTION;
int32  typedef  PCSTR;
int32  typedef  PCTSTR;
int32  typedef  PCWCH;
int32  typedef  PCWSTR;
int32  typedef  PDWORD;
int32  typedef  PFLOAT;
int32  typedef  PFNCALLBACK;
int32  typedef  PHANDLE;
int32  typedef  PHANDLER_ROUTINE;
int32  typedef  PHKEY;
int32  typedef  PINT;
int32  typedef  PLCID;
int32  typedef  PLONG;
int32  typedef  PLUID;
int32  typedef  PROPENUMPROC;
int32  typedef  PROPENUMPROCEX;
int32  typedef  PSHORT;
int32  typedef  PSTR;
int32  typedef  PTBYTE;
int32  typedef  PTCHAR;
int32  typedef  PTIMERAPCROUTINE;
int32  typedef  PTSTR;
int32  typedef  PUCHAR;
int32  typedef  PUINT;
int32  typedef  PULONG;
int32  typedef  PUSHORT;
int32  typedef  PVOID;
int32  typedef  PWCHAR;
int32  typedef  PWORD;
int32  typedef  PWSTR;
int32  typedef  REGISTERWORDENUMPROC;
int32  typedef  REGSAM;
int32  typedef  SC_HANDLE;
int32  typedef  SC_LOCK;
int32  typedef  SCODE;
int32  typedef  SENDASYNCPROC;
int32  typedef  SERVICE_STATUS_HANDLE;
int32  typedef  SOCKET;
int32  typedef  TIMEFMT_ENUMPROC;
int32  typedef  TIMERPROC;
int32  typedef  UINT;
int32  typedef  ULONG;
int32  typedef  WINSTAENUMPROC;
int32  typedef  WNDENUMPROC;
int32  typedef  WNDPROC;
int32  typedef  WPARAM;
int32  typedef  YIELDPROC;

// 64 bit
// ~~~~~~
int64   typedef  LONG64;
int64   typedef  ULONG64;
int64   typedef  INT64;
int64   typedef  UINT64;
int64   typedef  WORD64;
int64   typedef  POINTER_64;
int64   typedef  LONGLONG;
int64   typedef  ULONGLONG;

// Floating point
// ~~~~~~~~~~~~~~
float32  typedef  FLOAT;
float64  typedef  DOUBLE;
////// LONG DOUBLE                 typedef REAL10

// ----------------------------------------------

define TRUE()  1
define FALSE()  0
define NULL()  0
define Normal()  0x000000
define ReadOnly()  0x000001
define Hidden()  0x000010
define System()  0x000100
define vLabel()  0x001000
define SubDir()  0x010000
define Archive()  0x100000
define Black()  0x000000
define Blue()  0x0FF0000
define Green()  0x00FF00
define Cyan()  0x0FFFF00
define Red()  0x0000FF
define Magenta()  0x0FF00FF
define Yellow()  0x00FFFF
define White()  0x0FFFFFF
define Gray()  0x080808
define MAXIMUM_SUPPORTED_EXTENSION()  512
define ANYSIZE_ARRAY()  1
define INVALID_HANDLE_VALUE()  -1
define DELETE()  0x10000
define READ_CONTROL()  0x20000
define WRITE_DAC()  0x40000
define WRITE_OWNER()  0x80000
define SYNCHRONIZE()  0x100000
define STANDARD_RIGHTS_READ()  READ_CONTROL
define STANDARD_RIGHTS_WRITE()  READ_CONTROL
define STANDARD_RIGHTS_EXECUTE()  READ_CONTROL
define STANDARD_RIGHTS_REQUIRED()  0x0F0000
define STANDARD_RIGHTS_ALL()  0x1F0000
define SPECIFIC_RIGHTS_ALL()  0x0FFFF
define SID_REVISION()  1
define SID_MAX_SUB_AUTHORITIES()  15
define SID_RECOMMENDED_SUB_AUTHORITIES()  1
define SidTypeUser()  1
define SidTypeGroup()  2
define SidTypeDomain()  3
define SidTypeAlias()  4
define SidTypeWellKnownGroup()  5
define SidTypeDeletedAccount()  6
define SidTypeInvalid()  7
define SidTypeUnknown()  8
define SECURITY_NULL_RID()  0x0
define SECURITY_WORLD_RID()  0x0
define SECURITY_LOCAL_RID()  0x0
define SECURITY_CREATOR_OWNER_RID()  0x0
define SECURITY_CREATOR_GROUP_RID()  0x1
define SECURITY_DIALUP_RID()  0x1
define SECURITY_NETWORK_RID()  0x2
define SECURITY_BATCH_RID()  0x3
define SECURITY_INTERACTIVE_RID()  0x4
define SECURITY_SERVICE_RID()  0x6
define SECURITY_ANONYMOUS_LOGON_RID()  0x7
define SECURITY_LOGON_IDS_RID()  0x5
define SECURITY_LOCAL_SYSTEM_RID()  0x12
define SECURITY_NT_NON_UNIQUE()  0x15
define SECURITY_BUILTIN_DOMAIN_RID()  0x20
define DOMAIN_USER_RID_ADMIN()  0x1F4
define DOMAIN_USER_RID_GUEST()  0x1F5
define DOMAIN_GROUP_RID_ADMINS()  0x200
define DOMAIN_GROUP_RID_USERS()  0x201
define DOMAIN_GROUP_RID_GUESTS()  0x202
define DOMAIN_ALIAS_RID_ADMINS()  0x220
define DOMAIN_ALIAS_RID_USERS()  0x221
define DOMAIN_ALIAS_RID_GUESTS()  0x222
define DOMAIN_ALIAS_RID_POWER_USERS()  0x223
define DOMAIN_ALIAS_RID_ACCOUNT_OPS()  0x224
define DOMAIN_ALIAS_RID_SYSTEM_OPS()  0x225
define DOMAIN_ALIAS_RID_PRINT_OPS()  0x226
define DOMAIN_ALIAS_RID_BACKUP_OPS()  0x227
define DOMAIN_ALIAS_RID_REPLICATOR()  0x228
define SE_GROUP_MANDATORY()  0x1
define SE_GROUP_ENABLED_BY_DEFAULT()  0x2
define SE_GROUP_ENABLED()  0x4
define SE_GROUP_OWNER()  0x8
define SE_GROUP_LOGON_ID()  0x0C0000000
define FILE_BEGIN()  0
define FILE_CURRENT()  1
define FILE_END()  2
define FILE_FLAG_WRITE_THROUGH()  0x80000000
define FILE_FLAG_OVERLAPPED()  0x40000000
define FILE_FLAG_NO_BUFFERING()  0x20000000
define FILE_FLAG_RANDOM_ACCESS()  0x10000000
define FILE_FLAG_SEQUENTIAL_SCAN()  0x8000000
define FILE_FLAG_DELETE_ON_CLOSE()  0x4000000
define FILE_FLAG_BACKUP_SEMANTICS()  0x2000000
define FILE_FLAG_POSIX_SEMANTICS()  0x1000000
define CREATE_NEW()  1
define CREATE_ALWAYS()  2
define OPEN_EXISTING()  3
define OPEN_ALWAYS()  4
define TRUNCATE_EXISTING()  5
define PIPE_ACCESS_INBOUND()  0x1
define PIPE_ACCESS_OUTBOUND()  0x2
define PIPE_ACCESS_DUPLEX()  0x3
define PIPE_CLIENT_END()  0x0
define PIPE_SERVER_END()  0x1
define PIPE_WAIT()  0x0
define PIPE_NOWAIT()  0x1
define PIPE_READMODE_BYTE()  0x0
define PIPE_READMODE_MESSAGE()  0x2
define PIPE_TYPE_BYTE()  0x0
define PIPE_TYPE_MESSAGE()  0x4
define PIPE_UNLIMITED_INSTANCES()  255
define SECURITY_CONTEXT_TRACKING()  0x40000
define SECURITY_EFFECTIVE_ONLY()  0x80000
define SECURITY_SQOS_PRESENT()  0x100000
define SECURITY_VALID_SQOS_FLAGS()  0x1F0000
define SP_SERIALCOMM()  0x1
define PST_UNSPECIFIED()  0x0
define PST_RS232()  0x1
define PST_PARALLELPORT()  0x2
define PST_RS422()  0x3
define PST_RS423()  0x4
define PST_RS449()  0x5
define PST_FAX()  0x21
define PST_SCANNER()  0x22
define PST_NETWORK_BRIDGE()  0x100
define PST_LAT()  0x101
define PST_TCPIP_TELNET()  0x102
define PST_X25()  0x103
define PCF_DTRDSR()  0x1
define PCF_RTSCTS()  0x2
define PCF_RLSD()  0x4
define PCF_PARITY_CHECK()  0x8
define PCF_XONXOFF()  0x10
define PCF_SETXCHAR()  0x20
define PCF_TOTALTIMEOUTS()  0x40
define PCF_INTTIMEOUTS()  0x80
define PCF_SPECIALCHARS()  0x100
define PCF_16BITMODE()  0x200
define DLL_PROCESS_DETACH()  0
define DLL_PROCESS_ATTACH()  1
define DLL_THREAD_ATTACH()  2
define DLL_THREAD_DETACH()  3
define SP_PARITY()  0x1
define SP_BAUD()  0x2
define SP_DATABITS()  0x4
define SP_STOPBITS()  0x8
define SP_HANDSHAKING()  0x10
define SP_PARITY_CHECK()  0x20
define SP_RLSD()  0x40
define BAUD_075()  0x1
define BAUD_110()  0x2
define BAUD_134_5()  0x4
define BAUD_150()  0x8
define BAUD_300()  0x10
define BAUD_600()  0x20
define BAUD_1200()  0x40
define BAUD_1800()  0x80
define BAUD_2400()  0x100
define BAUD_4800()  0x200
define BAUD_7200()  0x400
define BAUD_9600()  0x800
define BAUD_14400()  0x1000
define BAUD_19200()  0x2000
define BAUD_38400()  0x4000
define BAUD_56K()  0x8000
define BAUD_128K()  0x10000
define BAUD_115200()  0x20000
define BAUD_57600()  0x40000
define BAUD_USER()  0x10000000
define DATABITS_5()  0x1
define DATABITS_6()  0x2
define DATABITS_7()  0x4
define DATABITS_8()  0x8
define DATABITS_16()  0x10
define DATABITS_16X()  0x20
define STOPBITS_10()  0x1
define STOPBITS_15()  0x2
define STOPBITS_20()  0x4
define PARITY_NONE()  0x100
define PARITY_ODD()  0x200
define PARITY_EVEN()  0x400
define PARITY_MARK()  0x800
define PARITY_SPACE()  0x1000
define DTR_CONTROL_DISABLE()  0x0
define DTR_CONTROL_ENABLE()  0x1
define DTR_CONTROL_HANDSHAKE()  0x2
define RTS_CONTROL_DISABLE()  0x0
define RTS_CONTROL_ENABLE()  0x1
define RTS_CONTROL_HANDSHAKE()  0x2
define RTS_CONTROL_TOGGLE()  0x3
define GMEM_FIXED()  0x0
define GMEM_MOVEABLE()  0x2
define GMEM_NOCOMPACT()  0x10
define GMEM_NODISCARD()  0x20
define GMEM_ZEROINIT()  0x40
define GMEM_MODIFY()  0x80
define GMEM_DISCARDABLE()  0x100
define GMEM_NOT_BANKED()  0x1000
define GMEM_SHARE()  0x2000
define GMEM_DDESHARE()  0x2000
define GMEM_NOTIFY()  0x4000
define GMEM_LOWER()  GMEM_NOT_BANKED
define GMEM_VALID_FLAGS()  0x7F72
define GMEM_INVALID_HANDLE()  0x8000
define GMEM_DISCARDED()  0x4000
define GMEM_LOCKCOUNT()  0x0FF
define GHND()  GMEM_MOVEABLE | GMEM_ZEROINIT
define GPTR()  GMEM_FIXED | GMEM_ZEROINIT
define LMEM_FIXED()  0x0
define LMEM_MOVEABLE()  0x2
define LMEM_NOCOMPACT()  0x10
define LMEM_NODISCARD()  0x20
define LMEM_ZEROINIT()  0x40
define LMEM_MODIFY()  0x80
define LMEM_DISCARDABLE()  0x0F00
define LMEM_VALID_FLAGS()  0x0F72
define LMEM_INVALID_HANDLE()  0x8000
define LHND()  LMEM_MOVEABLE + LMEM_ZEROINIT
define LPTR()  LMEM_FIXED + LMEM_ZEROINIT
define NONZEROLHND()  LMEM_MOVEABLE
define NONZEROLPTR()  LMEM_FIXED
define LMEM_DISCARDED()  0x4000
define LMEM_LOCKCOUNT()  0x0FF
define DEBUG_PROCESS()  0x1
define DEBUG_ONLY_THIS_PROCESS()  0x2
define CREATE_SUSPENDED()  0x4
define CREATE_SEPARATE_WOW_VDM()  0x800
define DETACHED_PROCESS()  0x8
define CREATE_NEW_CONSOLE()  0x10
define NORMAL_PRIORITY_CLASS()  0x20
define IDLE_PRIORITY_CLASS()  0x40
define HIGH_PRIORITY_CLASS()  0x80
define REALTIME_PRIORITY_CLASS()  0x100
define CREATE_NEW_PROCESS_GROUP()  0x200
define CREATE_NO_WINDOW()  0x8000000
define PROFILE_USER()  0x10000000
define PROFILE_KERNEL()  0x20000000
define PROFILE_SERVER()  0x40000000
define MAXLONG()  0x7FFFFFFF
define THREAD_BASE_PRIORITY_MIN()  -2
define THREAD_BASE_PRIORITY_MAX()  2
define THREAD_BASE_PRIORITY_LOWRT()  15
define THREAD_BASE_PRIORITY_IDLE()  -15
define THREAD_PRIORITY_LOWEST()  THREAD_BASE_PRIORITY_MIN
define THREAD_PRIORITY_BELOW_NORMAL()  THREAD_PRIORITY_LOWEST + 1
define THREAD_PRIORITY_NORMAL()  0
define THREAD_PRIORITY_HIGHEST()  THREAD_BASE_PRIORITY_MAX
define THREAD_PRIORITY_ABOVE_NORMAL()  THREAD_PRIORITY_HIGHEST - 1
define THREAD_PRIORITY_ERROR_RETURN()  MAXLONG
define THREAD_PRIORITY_TIME_CRITICAL()  THREAD_BASE_PRIORITY_LOWRT
define THREAD_PRIORITY_IDLE()  THREAD_BASE_PRIORITY_IDLE
define APPLICATION_ERROR_MASK()  0x20000000
define ERROR_SEVERITY_SUCCESS()  0x0
define ERROR_SEVERITY_INFORMATIONAL()  0x40000000
define ERROR_SEVERITY_WARNING()  0x80000000
define ERROR_SEVERITY_ERROR()  0x0C0000000
define MINCHAR()  0x80
define MAXCHAR()  0x7F
define MINSHORT()  0x8000
define MAXSHORT()  0x7FFF
define MINLONG()  0x80000000
define MAXBYTE()  0x0FF
define MAXWORD()  0x0FFFF
define MAXDWORD()  0x0FFFFFFFF
define LANG_NEUTRAL()  0x0
define LANG_BULGARIAN()  0x2
define LANG_CHINESE()  0x4
define LANG_CROATIAN()  0x1A
define LANG_CZECH()  0x5
define LANG_DANISH()  0x6
define LANG_DUTCH()  0x13
define LANG_ENGLISH()  0x9
define LANG_FINNISH()  0x0B
define LANG_FRENCH()  0x0C
define LANG_GERMAN()  0x7
define LANG_GREEK()  0x8
define LANG_HUNGARIAN()  0x0E
define LANG_ICELANDIC()  0x0F
define LANG_ITALIAN()  0x10
define LANG_JAPANESE()  0x11
define LANG_KOREAN()  0x12
define LANG_NORWEGIAN()  0x14
define LANG_POLISH()  0x15
define LANG_PORTUGUESE()  0x16
define LANG_ROMANIAN()  0x18
define LANG_RUSSIAN()  0x19
define LANG_SLOVAK()  0x1B
define LANG_SLOVENIAN()  0x24
define LANG_SPANISH()  0x0A
define LANG_SWEDISH()  0x1D
define LANG_TURKISH()  0x1F
define SUBLANG_NEUTRAL()  0x0
define SUBLANG_DEFAULT()  0x1
define SUBLANG_SYS_DEFAULT()  0x2
define SUBLANG_CHINESE_TRADITIONAL()  0x1
define SUBLANG_CHINESE_SIMPLIFIED()  0x2
define SUBLANG_CHINESE_HONGKONG()  0x3
define SUBLANG_CHINESE_SINGAPORE()  0x4
define SUBLANG_DUTCH()  0x1
define SUBLANG_DUTCH_BELGIAN()  0x2
define SUBLANG_ENGLISH_US()  0x1
define SUBLANG_ENGLISH_UK()  0x2
define SUBLANG_ENGLISH_AUS()  0x3
define SUBLANG_ENGLISH_CAN()  0x4
define SUBLANG_ENGLISH_NZ()  0x5
define SUBLANG_ENGLISH_EIRE()  0x6
define SUBLANG_FRENCH()  0x1
define SUBLANG_FRENCH_BELGIAN()  0x2
define SUBLANG_FRENCH_CANADIAN()  0x3
define SUBLANG_FRENCH_SWISS()  0x4
define SUBLANG_GERMAN()  0x1
define SUBLANG_GERMAN_SWISS()  0x2
define SUBLANG_GERMAN_AUSTRIAN()  0x3
define SUBLANG_ITALIAN()  0x1
define SUBLANG_ITALIAN_SWISS()  0x2
define SUBLANG_NORWEGIAN_BOKMAL()  0x1
define SUBLANG_NORWEGIAN_NYNORSK()  0x2
define SUBLANG_PORTUGUESE()  0x2
define SUBLANG_PORTUGUESE_BRAZILIAN()  0x1
define SUBLANG_SPANISH()  0x1
define SUBLANG_SPANISH_MEXICAN()  0x2
define SUBLANG_SPANISH_MODERN()  0x3
define SORT_DEFAULT()  0x0
define SORT_JAPANESE_XJIS()  0x0
define SORT_JAPANESE_UNICODE()  0x1
define SORT_CHINESE_BIG5()  0x0
define SORT_CHINESE_UNICODE()  0x1
define SORT_KOREAN_KSC()  0x0
define SORT_KOREAN_UNICODE()  0x1
define FILE_READ_DATA()  0x1
define FILE_LIST_DIRECTORY()  0x1
define FILE_WRITE_DATA()  0x2
define FILE_ADD_FILE()  0x2
define FILE_APPEND_DATA()  0x4
define FILE_ADD_SUBDIRECTORY()  0x4
define FILE_CREATE_PIPE_INSTANCE()  0x4
define FILE_READ_EA()  0x8
define FILE_READ_PROPERTIES()  FILE_READ_EA
define FILE_WRITE_EA()  0x10
define FILE_WRITE_PROPERTIES()  FILE_WRITE_EA
define FILE_EXECUTE()  0x20
define FILE_TRAVERSE()  0x20
define FILE_DELETE_CHILD()  0x40
define FILE_READ_ATTRIBUTES()  0x80
define FILE_WRITE_ATTRIBUTES()  0x100
define FILE_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1FF
define FILE_GENERIC_READ()  STANDARD_RIGHTS_READ | FILE_READ_DATA | FILE_READ_ATTRIBUTES | FILE_READ_EA | SYNCHRONIZE
define FILE_GENERIC_WRITE()  STANDARD_RIGHTS_WRITE | FILE_WRITE_DATA | FILE_WRITE_ATTRIBUTES | FILE_WRITE_EA | FILE_APPEND_DATA | SYNCHRONIZE
define FILE_GENERIC_EXECUTE()  STANDARD_RIGHTS_EXECUTE | FILE_READ_ATTRIBUTES | FILE_EXECUTE | SYNCHRONIZE
define FILE_SHARE_READ()  0x1
define FILE_SHARE_WRITE()  0x2
define FILE_ATTRIBUTE_READONLY()  0x1
define FILE_ATTRIBUTE_HIDDEN()  0x2
define FILE_ATTRIBUTE_SYSTEM()  0x4
define FILE_ATTRIBUTE_DIRECTORY()  0x10
define FILE_ATTRIBUTE_ARCHIVE()  0x20
define FILE_ATTRIBUTE_NORMAL()  0x80
define FILE_ATTRIBUTE_TEMPORARY()  0x100
define FILE_ATTRIBUTE_COMPRESSED()  0x800
define FILE_NOTIFY_CHANGE_FILE_NAME()  0x1
define FILE_NOTIFY_CHANGE_DIR_NAME()  0x2
define FILE_NOTIFY_CHANGE_ATTRIBUTES()  0x4
define FILE_NOTIFY_CHANGE_SIZE()  0x8
define FILE_NOTIFY_CHANGE_LAST_WRITE()  0x10
define FILE_NOTIFY_CHANGE_SECURITY()  0x100
define MAILSLOT_NO_MESSAGE()  -1
define MAILSLOT_WAIT_FOREVER()  -1
define FILE_CASE_SENSITIVE_SEARCH()  0x1
define FILE_CASE_PRESERVED_NAMES()  0x2
define FILE_UNICODE_ON_DISK()  0x4
define FILE_PERSISTENT_ACLS()  0x8
define FILE_FILE_COMPRESSION()  0x10
define FILE_VOLUME_IS_COMPRESSED()  0x8000
define IO_COMPLETION_MODIFY_STATE()  0x2
define IO_COMPLETION_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x3
define DUPLICATE_CLOSE_SOURCE()  0x1
define DUPLICATE_SAME_ACCESS()  0x2
define ACCESS_SYSTEM_SECURITY()  0x1000000
define MAXIMUM_ALLOWED()  0x2000000
define GENERIC_READ()  0x80000000
define GENERIC_WRITE()  0x40000000
define GENERIC_EXECUTE()  0x20000000
define GENERIC_ALL()  0x10000000
define ACL_REVISION()  2
define ACL_REVISION1()  1
define ACL_REVISION2()  2
define ACCESS_ALLOWED_ACE_TYPE()  0x0
define ACCESS_DENIED_ACE_TYPE()  0x1
define SYSTEM_AUDIT_ACE_TYPE()  0x2
define SYSTEM_ALARM_ACE_TYPE()  0x3
define HELPINFO_WINDOW()  1
define HELPINFO_MENUITEM()  2
define OBJECT_INHERIT_ACE()  0x1
define CONTAINER_INHERIT_ACE()  0x2
define NO_PROPAGATE_INHERIT_ACE()  0x4
define INHERIT_ONLY_ACE()  0x8
define VALID_INHERIT_FLAGS()  0x0F
define SUCCESSFUL_ACCESS_ACE_FLAG()  0x40
define FAILED_ACCESS_ACE_FLAG()  0x80
define AclRevisionInformation()  1
define AclSizeInformation()  2
define SECURITY_DESCRIPTOR_REVISION()  1
define SECURITY_DESCRIPTOR_REVISION1()  1
define SECURITY_DESCRIPTOR_MIN_LENGTH()  20
define SE_OWNER_DEFAULTED()  0x1
define SE_GROUP_DEFAULTED()  0x2
define SE_DACL_PRESENT()  0x4
define SE_DACL_DEFAULTED()  0x8
define SE_SACL_PRESENT()  0x10
define SE_SACL_DEFAULTED()  0x20
define SE_SELF_RELATIVE()  0x8000
define SE_PRIVILEGE_ENABLED_BY_DEFAULT()  0x1
define SE_PRIVILEGE_ENABLED()  0x2
define SE_PRIVILEGE_USED_FOR_ACCESS()  0x80000000
define PRIVILEGE_SET_ALL_NECESSARY()  1
define SecurityAnonymous()  1
define SecurityIdentification()  2
define REG_OPTION_RESERVED()  0
define REG_OPTION_NON_VOLATILE()  0
define REG_OPTION_VOLATILE()  1
define REG_OPTION_CREATE_LINK()  2
define REG_OPTION_BACKUP_RESTORE()  4
define REG_NONE()  0
define REG_SZ()  1
define REG_EXPAND_SZ()  2
define REG_BINARY()  3
define REG_DWORD()  4
define REG_DWORD_LITTLE_ENDIAN()  4
define REG_DWORD_BIG_ENDIAN()  5
define REG_LINK()  6
define REG_MULTI_SZ()  7
define REG_RESOURCE_LIST()  8
define REG_FULL_RESOURCE_DESCRIPTOR()  9
define REG_RESOURCE_REQUIREMENTS_LIST()  10
define REG_CREATED_NEW_KEY()  0x1
define REG_OPENED_EXISTING_KEY()  0x2
define REG_WHOLE_HIVE_VOLATILE()  0x1
define REG_REFRESH_HIVE()  0x2
define REG_NOTIFY_CHANGE_NAME()  0x1
define REG_NOTIFY_CHANGE_ATTRIBUTES()  0x2
define REG_NOTIFY_CHANGE_LAST_SET()  0x4
define REG_NOTIFY_CHANGE_SECURITY()  0x8
define REG_LEGAL_CHANGE_FILTER()  REG_NOTIFY_CHANGE_NAME | REG_NOTIFY_CHANGE_ATTRIBUTES | REG_NOTIFY_CHANGE_LAST_SET | REG_NOTIFY_CHANGE_SECURITY
define REG_LEGAL_OPTION()  REG_OPTION_RESERVED | REG_OPTION_NON_VOLATILE | REG_OPTION_VOLATILE | REG_OPTION_CREATE_LINK | REG_OPTION_BACKUP_RESTORE
define KEY_QUERY_VALUE()  0x1
define KEY_SET_VALUE()  0x2
define KEY_CREATE_SUB_KEY()  0x4
define KEY_ENUMERATE_SUB_KEYS()  0x8
define KEY_NOTIFY()  0x10
define KEY_CREATE_LINK()  0x20
define KEY_READ()  (STANDARD_RIGHTS_READ | KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY) & (!SYNCHRONIZE)
define KEY_WRITE()  (STANDARD_RIGHTS_WRITE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY) & (!SYNCHRONIZE)
define KEY_EXECUTE()  KEY_READ
define KEY_ALL_ACCESS()  (STANDARD_RIGHTS_ALL | KEY_QUERY_VALUE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY | KEY_CREATE_LINK) & (!SYNCHRONIZE)
define EXCEPTION_DEBUG_EVENT()  1
define CREATE_THREAD_DEBUG_EVENT()  2
define CREATE_PROCESS_DEBUG_EVENT()  3
define EXIT_THREAD_DEBUG_EVENT()  4
define EXIT_PROCESS_DEBUG_EVENT()  5
define LOAD_DLL_DEBUG_EVENT()  6
define UNLOAD_DLL_DEBUG_EVENT()  7
define OUTPUT_DEBUG_STRING_EVENT()  8
define RIP_EVENT()  9
define EXCEPTION_MAXIMUM_PARAMETERS()  15
define DRIVE_REMOVABLE()  2
define DRIVE_FIXED()  3
define DRIVE_REMOTE()  4
define DRIVE_CDROM()  5
define DRIVE_RAMDISK()  6
define FILE_TYPE_UNKNOWN()  0x0
define FILE_TYPE_DISK()  0x1
define FILE_TYPE_CHAR()  0x2
define FILE_TYPE_PIPE()  0x3
define FILE_TYPE_REMOTE()  0x8000
define STD_INPUT_HANDLE()  -10
define STD_OUTPUT_HANDLE()  -11
define STD_ERROR_HANDLE()  -12
define NOPARITY()  0
define ODDPARITY()  1
define EVENPARITY()  2
define MARKPARITY()  3
define SPACEPARITY()  4
define ONESTOPBIT()  0
define ONE5STOPBITS()  1
define TWOSTOPBITS()  2
define IGNORE()  0
define INFINITE()  -1
define CBR_110()  110
define CBR_300()  300
define CBR_600()  600
define CBR_1200()  1200
define CBR_2400()  2400
define CBR_4800()  4800
define CBR_9600()  9600
define CBR_14400()  14400
define CBR_19200()  19200
define CBR_38400()  38400
define CBR_56000()  56000
define CBR_57600()  57600
define CBR_115200()  115200
define CBR_128000()  128000
define CBR_256000()  256000
define CE_RXOVER()  0x1
define CE_OVERRUN()  0x2
define CE_RXPARITY()  0x4
define CE_FRAME()  0x8
define CE_BREAK()  0x10
define CE_TXFULL()  0x100
define CE_PTO()  0x200
define CE_IOE()  0x400
define CE_DNS()  0x800
define CE_OOP()  0x1000
define CE_MODE()  0x8000
define IE_BADID()  -1
define IE_OPEN()  -2
define IE_NOPEN()  -3
define IE_MEMORY()  -4
define IE_DEFAULT()  -5
define IE_HARDWARE()  -10
define IE_BYTESIZE()  -11
define IE_BAUDRATE()  -12
define EV_RXCHAR()  0x1
define EV_RXFLAG()  0x2
define EV_TXEMPTY()  0x4
define EV_CTS()  0x8
define EV_DSR()  0x10
define EV_RLSD()  0x20
define EV_BREAK()  0x40
define EV_ERR()  0x80
define EV_RING()  0x100
define EV_PERR()  0x200
define EV_RX80FULL()  0x400
define EV_EVENT1()  0x800
define EV_EVENT2()  0x1000
define SETXOFF()  1
define SETXON()  2
define SETRTS()  3
define CLRRTS()  4
define SETDTR()  5
define CLRDTR()  6
define RESETDEV()  7
define SETBREAK()  8
define CLRBREAK()  9
define PURGE_TXABORT()  0x1
define PURGE_RXABORT()  0x2
define PURGE_TXCLEAR()  0x4
define PURGE_RXCLEAR()  0x8
define LPTx()  0x80
define MS_CTS_ON()  0x10
define MS_DSR_ON()  0x20
define MS_RING_ON()  0x40
define MS_RLSD_ON()  0x80
define S_QUEUEEMPTY()  0
define S_THRESHOLD()  1
define S_ALLTHRESHOLD()  2
define S_NORMAL()  0
define S_LEGATO()  1
define S_STACCATO()  2
define S_PERIOD512()  0
define S_PERIOD1024()  1
define S_PERIOD2048()  2
define S_PERIODVOICE()  3
define S_WHITE512()  4
define S_WHITE1024()  5
define S_WHITE2048()  6
define S_WHITEVOICE()  7
define S_SERDVNA()  -1
define S_SEROFM()  -2
define S_SERMACT()  -3
define S_SERQFUL()  -4
define S_SERBDNT()  -5
define S_SERDLN()  -6
define S_SERDCC()  -7
define S_SERDTP()  -8
define S_SERDVL()  -9
define S_SERDMD()  -10
define S_SERDSH()  -11
define S_SERDPT()  -12
define S_SERDFQ()  -13
define S_SERDDR()  -14
define S_SERDSR()  -15
define S_SERDST()  -16
define NMPWAIT_WAIT_FOREVER()  0x0FFFF
define NMPWAIT_NOWAIT()  0x1
define NMPWAIT_USE_DEFAULT_WAIT()  0x0
define FS_CASE_IS_PRESERVED()  FILE_CASE_PRESERVED_NAMES
define FS_CASE_SENSITIVE()  FILE_CASE_SENSITIVE_SEARCH
define FS_UNICODE_STORED_ON_DISK()  FILE_UNICODE_ON_DISK
define FS_PERSISTENT_ACLS()  FILE_PERSISTENT_ACLS
define SECTION_QUERY()  0x1
define SECTION_MAP_WRITE()  0x2
define SECTION_MAP_READ()  0x4
define SECTION_MAP_EXECUTE()  0x8
define SECTION_EXTEND_SIZE()  0x10
define SECTION_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SECTION_QUERY | SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE | SECTION_EXTEND_SIZE
define FILE_MAP_COPY()  SECTION_QUERY
define FILE_MAP_WRITE()  SECTION_MAP_WRITE
define FILE_MAP_READ()  SECTION_MAP_READ
define FILE_MAP_ALL_ACCESS()  SECTION_ALL_ACCESS
define OF_READ()  0x0
define OF_WRITE()  0x1
define OF_READWRITE()  0x2
define OF_SHARE_COMPAT()  0x0
define OF_SHARE_EXCLUSIVE()  0x10
define OF_SHARE_DENY_WRITE()  0x20
define OF_SHARE_DENY_READ()  0x30
define OF_SHARE_DENY_NONE()  0x40
define OF_PARSE()  0x100
define OF_DELETE()  0x200
define OF_VERIFY()  0x400
define OF_CANCEL()  0x800
define OF_CREATE()  0x1000
define OF_PROMPT()  0x2000
define OF_EXIST()  0x4000
define OF_REOPEN()  0x8000
define OFS_MAXPATHNAME()  128
define DONT_RESOLVE_DLL_REFERENCES()  0x1
define TC_NORMAL()  0
define TC_HARDERR()  1
define TC_GP_TRAP()  2
define TC_SIGNAL()  3
define MAX_LEADBYTES()  12
define MB_PRECOMPOSED()  0x1
define MB_COMPOSITE()  0x2
define MB_USEGLYPHCHARS()  0x4
define WC_DEFAULTCHECK()  0x100
define WC_COMPOSITECHECK()  0x200
define WC_DISCARDNS()  0x10
define WC_SEPCHARS()  0x20
define WC_DEFAULTCHAR()  0x40
define CT_CTYPE1()  0x1
define CT_CTYPE2()  0x2
define CT_CTYPE3()  0x4
define C1_UPPER()  0x1
define C1_LOWER()  0x2
define C1_DIGIT()  0x4
define C1_SPACE()  0x8
define C1_PUNCT()  0x10
define C1_CNTRL()  0x20
define C1_BLANK()  0x40
define C1_XDIGIT()  0x80
define C1_ALPHA()  0x100
define C2_LEFTTORIGHT()  0x1
define C2_RIGHTTOLEFT()  0x2
define C2_EUROPENUMBER()  0x3
define C2_EUROPESEPARATOR()  0x4
define C2_EUROPETERMINATOR()  0x5
define C2_ARABICNUMBER()  0x6
define C2_COMMONSEPARATOR()  0x7
define C2_BLOCKSEPARATOR()  0x8
define C2_SEGMENTSEPARATOR()  0x9
define C2_WHITESPACE()  0x0A
define C2_OTHERNEUTRAL()  0x0B
define C2_NOTAPPLICABLE()  0x0
define C3_NONSPACING()  0x1
define C3_DIACRITIC()  0x2
define C3_VOWELMARK()  0x4
define C3_SYMBOL()  0x8
define C3_NOTAPPLICABLE()  0x0
define NORM_IGNORECASE()  0x1
define NORM_IGNORENONSPACE()  0x2
define NORM_IGNORESYMBOLS()  0x4
define MAP_FOLDCZONE()  0x10
define MAP_PRECOMPOSED()  0x20
define MAP_COMPOSITE()  0x40
define MAP_FOLDDIGITS()  0x80
define LCMAP_LOWERCASE()  0x100
define LCMAP_UPPERCASE()  0x200
define LCMAP_SORTKEY()  0x400
define LCMAP_BYTEREV()  0x800
define SORT_STRINGSORT()  0x1000
define CP_ACP()  0
define CP_OEMCP()  1
define CTRY_DEFAULT()  0
define CTRY_AUSTRALIA()  61
define CTRY_AUSTRIA()  43
define CTRY_BELGIUM()  32
define CTRY_BRAZIL()  55
define CTRY_CANADA()  2
define CTRY_DENMARK()  45
define CTRY_FINLAND()  358
define CTRY_FRANCE()  33
define CTRY_GERMANY()  49
define CTRY_ICELAND()  354
define CTRY_IRELAND()  353
define CTRY_ITALY()  39
define CTRY_JAPAN()  81
define CTRY_MEXICO()  52
define CTRY_NETHERLANDS()  31
define CTRY_NEW_ZEALAND()  64
define CTRY_NORWAY()  47
define CTRY_PORTUGAL()  351
define CTRY_PRCHINA()  86
define CTRY_SOUTH_KOREA()  82
define CTRY_SPAIN()  34
define CTRY_SWEDEN()  46
define CTRY_SWITZERLAND()  41
define CTRY_TAIWAN()  886
define CTRY_UNITED_KINGDOM()  44
define CTRY_UNITED_STATES()  1
define LOCALE_NOUSEROVERRIDE()  0x80000000
define LOCALE_USER_DEFAULT()  0x0400
define LOCALE_ILANGUAGE()  0x1
define LOCALE_SLANGUAGE()  0x2
define LOCALE_SENGLANGUAGE()  0x1001
define LOCALE_SABBREVLANGNAME()  0x3
define LOCALE_SNATIVELANGNAME()  0x4
define LOCALE_ICOUNTRY()  0x5
define LOCALE_SCOUNTRY()  0x6
define LOCALE_SENGCOUNTRY()  0x1002
define LOCALE_SABBREVCTRYNAME()  0x7
define LOCALE_SNATIVECTRYNAME()  0x8
define LOCALE_IDEFAULTLANGUAGE()  0x9
define LOCALE_IDEFAULTCOUNTRY()  0x0A
define LOCALE_IDEFAULTCODEPAGE()  0x0B
define LOCALE_SLIST()  0x0C
define LOCALE_IMEASURE()  0x0D
define LOCALE_SDECIMAL()  0x0E
define LOCALE_STHOUSAND()  0x0F
define LOCALE_SGROUPING()  0x10
define LOCALE_IDIGITS()  0x11
define LOCALE_ILZERO()  0x12
define LOCALE_SNATIVEDIGITS()  0x13
define LOCALE_SCURRENCY()  0x14
define LOCALE_SINTLSYMBOL()  0x15
define LOCALE_SMONDECIMALSEP()  0x16
define LOCALE_SMONTHOUSANDSEP()  0x17
define LOCALE_SMONGROUPING()  0x18
define LOCALE_ICURRDIGITS()  0x19
define LOCALE_IINTLCURRDIGITS()  0x1A
define LOCALE_ICURRENCY()  0x1B
define LOCALE_INEGCURR()  0x1C
define LOCALE_SDATE()  0x1D
define LOCALE_STIME()  0x1E
define LOCALE_SSHORTDATE()  0x1F
define LOCALE_SLONGDATE()  0x20
define LOCALE_STIMEFORMAT()  0x1003
define LOCALE_IDATE()  0x21
define LOCALE_ILDATE()  0x22
define LOCALE_ITIME()  0x23
define LOCALE_ICENTURY()  0x24
define LOCALE_ITLZERO()  0x25
define LOCALE_IDAYLZERO()  0x26
define LOCALE_IMONLZERO()  0x27
define LOCALE_S1159()  0x28
define LOCALE_S2359()  0x29
define LOCALE_SDAYNAME1()  0x2A
define LOCALE_SDAYNAME2()  0x2B
define LOCALE_SDAYNAME3()  0x2C
define LOCALE_SDAYNAME4()  0x2D
define LOCALE_SDAYNAME5()  0x2E
define LOCALE_SDAYNAME6()  0x2F
define LOCALE_SDAYNAME7()  0x30
define LOCALE_SABBREVDAYNAME1()  0x31
define LOCALE_SABBREVDAYNAME2()  0x32
define LOCALE_SABBREVDAYNAME3()  0x33
define LOCALE_SABBREVDAYNAME4()  0x34
define LOCALE_SABBREVDAYNAME5()  0x35
define LOCALE_SABBREVDAYNAME6()  0x36
define LOCALE_SABBREVDAYNAME7()  0x37
define LOCALE_SMONTHNAME1()  0x38
define LOCALE_SMONTHNAME2()  0x39
define LOCALE_SMONTHNAME3()  0x3A
define LOCALE_SMONTHNAME4()  0x3B
define LOCALE_SMONTHNAME5()  0x3C
define LOCALE_SMONTHNAME6()  0x3D
define LOCALE_SMONTHNAME7()  0x3E
define LOCALE_SMONTHNAME8()  0x3F
define LOCALE_SMONTHNAME9()  0x40
define LOCALE_SMONTHNAME10()  0x41
define LOCALE_SMONTHNAME11()  0x42
define LOCALE_SMONTHNAME12()  0x43
define LOCALE_SABBREVMONTHNAME1()  0x44
define LOCALE_SABBREVMONTHNAME2()  0x45
define LOCALE_SABBREVMONTHNAME3()  0x46
define LOCALE_SABBREVMONTHNAME4()  0x47
define LOCALE_SABBREVMONTHNAME5()  0x48
define LOCALE_SABBREVMONTHNAME6()  0x49
define LOCALE_SABBREVMONTHNAME7()  0x4A
define LOCALE_SABBREVMONTHNAME8()  0x4B
define LOCALE_SABBREVMONTHNAME9()  0x4C
define LOCALE_SABBREVMONTHNAME10()  0x4D
define LOCALE_SABBREVMONTHNAME11()  0x4E
define LOCALE_SABBREVMONTHNAME12()  0x4F
define LOCALE_SABBREVMONTHNAME13()  0x100F
define LOCALE_SPOSITIVESIGN()  0x50
define LOCALE_SNEGATIVESIGN()  0x51
define LOCALE_IPOSSIGNPOSN()  0x52
define LOCALE_INEGSIGNPOSN()  0x53
define LOCALE_IPOSSYMPRECEDES()  0x54
define LOCALE_IPOSSEPBYSPACE()  0x55
define LOCALE_INEGSYMPRECEDES()  0x56
define LOCALE_INEGSEPBYSPACE()  0x57
define TIME_NOMINUTESORSECONDS()  0x1
define TIME_NOSECONDS()  0x2
define TIME_NOTIMEMARKER()  0x4
define TIME_FORCE24HOURFORMAT()  0x8
define DATE_SHORTDATE()  0x1
define DATE_LONGDATE()  0x2
define TF_FORCEDRIVE()  0x80
define LOCKFILE_FAIL_IMMEDIATELY()  0x1
define LOCKFILE_EXCLUSIVE_LOCK()  0x2
define LNOTIFY_OUTOFMEM()  0
define LNOTIFY_MOVE()  1
define LNOTIFY_DISCARD()  2
define SLE_ERROR()  0x1
define SLE_MINORERROR()  0x2
define SLE_WARNING()  0x3
define SEM_FAILCRITICALERRORS()  0x1
define SEM_NOGPFAULTERRORBOX()  0x2
define SEM_NOOPENFILEERRORBOX()  0x8000
define RT_CURSOR()  1
define RT_BITMAP()  2
define RT_ICON()  3
define RT_MENU()  4
define RT_DIALOG()  5
define RT_STRING()  6
define RT_FONTDIR()  7
define RT_FONT()  8
define RT_ACCELERATOR()  9
define RT_RCDATA()  10
define DFC_CAPTION()  1
define DFC_MENU()  2
define DFC_SCROLL()  3
define DFC_BUTTON()  4
define DFC_POPUPMENU()  5
define DFCS_CAPTIONCLOSE()  0x0000
define DFCS_CAPTIONMIN()  0x0001
define DFCS_CAPTIONMAX()  0x0002
define DFCS_CAPTIONRESTORE()  0x0003
define DFCS_CAPTIONHELP()  0x0004
define DFCS_MENUARROW()  0x0000
define DFCS_MENUCHECK()  0x0001
define DFCS_MENUBULLET()  0x0002
define DFCS_MENUARROWRIGHT()  0x0004
define DFCS_SCROLLUP()  0x0000
define DFCS_SCROLLDOWN()  0x0001
define DFCS_SCROLLLEFT()  0x0002
define DFCS_SCROLLRIGHT()  0x0003
define DFCS_SCROLLCOMBOBOX()  0x0005
define DFCS_SCROLLSIZEGRIP()  0x0008
define DFCS_SCROLLSIZEGRIPRIGHT()  0x0010
define DFCS_BUTTONCHECK()  0x0000
define DFCS_BUTTONRADIOIMAGE()  0x0001
define DFCS_BUTTONRADIOMASK()  0x0002
define DFCS_BUTTONRADIO()  0x0004
define DFCS_BUTTON3STATE()  0x0008
define DFCS_BUTTONPUSH()  0x0010
define DFCS_INACTIVE()  0x0100
define DFCS_PUSHED()  0x0200
define DFCS_CHECKED()  0x0400
define DFCS_TRANSPARENT()  0x0800
define DFCS_HOT()  0x1000
define DFCS_ADJUSTRECT()  0x2000
define DFCS_FLAT()  0x4000
define DFCS_MONO()  0x8000
define DDD_RAW_TARGET_PATH()  0x1
define DDD_REMOVE_DEFINITION()  0x2
define DDD_EXACT_MATCH_ON_REMOVE()  0x4
define MAX_PATH()  260
define MOVEFILE_REPLACE_EXISTING()  0x1
define MOVEFILE_COPY_ALLOWED()  0x2
define MOVEFILE_DELAY_UNTIL_REBOOT()  0x4
define TokenUser()  1
define TokenGroups()  2
define TokenPrivileges()  3
define TokenOwner()  4
define TokenPrimaryGroup()  5
define TokenDefaultDacl()  6
define TokenSource()  7
define TokenType()  8
define TokenImpersonationLevel()  9
define TokenStatistics()  10
define TOKEN_ADJUST_PRIVILEGES()  0x20
define GET_TAPE_MEDIA_INFORMATION()  0
define GET_TAPE_DRIVE_INFORMATION()  1
define SET_TAPE_MEDIA_INFORMATION()  0
define SET_TAPE_DRIVE_INFORMATION()  1
define FORMAT_MESSAGE_ALLOCATE_BUFFER()  0x100
define FORMAT_MESSAGE_IGNORE_INSERTS()  0x200
define FORMAT_MESSAGE_FROM_STRING()  0x400
define FORMAT_MESSAGE_FROM_HMODULE()  0x800
define FORMAT_MESSAGE_FROM_SYSTEM()  0x1000
define FORMAT_MESSAGE_ARGUMENT_ARRAY()  0x2000
define FORMAT_MESSAGE_MAX_WIDTH_MASK()  0x0FF
define TLS_OUT_OF_INDEXES()  0x0FFFF
define BACKUP_DATA()  0x1
define BACKUP_EA_DATA()  0x2
define BACKUP_SECURITY_DATA()  0x3
define BACKUP_ALTERNATE_DATA()  0x4
define BACKUP_LINK()  0x5
define STREAM_MODIFIED_WHEN_READ()  0x1
define STREAM_CONTAINS_SECURITY()  0x2
define STARTF_USESHOWWINDOW()  0x1
define STARTF_USESIZE()  0x2
define STARTF_USEPOSITION()  0x4
define STARTF_USECOUNTCHARS()  0x8
define STARTF_USEFILLATTRIBUTE()  0x10
define STARTF_RUNFULLSCREEN()  0x20
define STARTF_FORCEONFEEDBACK()  0x40
define STARTF_FORCEOFFFEEDBACK()  0x80
define STARTF_USESTDHANDLES()  0x100
define SHUTDOWN_NORETRY()  0x1
define MAX_DEFAULTCHAR()  2
define CAL_ICALINTVALUE()  0x1
define CAL_SCALNAME()  0x2
define CAL_IYEAROFFSETRANGE()  0x3
define CAL_SERASTRING()  0x4
define CAL_SSHORTDATE()  0x5
define CAL_SLONGDATE()  0x6
define CAL_SDAYNAME1()  0x7
define CAL_SDAYNAME2()  0x8
define CAL_SDAYNAME3()  0x9
define CAL_SDAYNAME4()  0x0A
define CAL_SDAYNAME5()  0x0B
define CAL_SDAYNAME6()  0x0C
define CAL_SDAYNAME7()  0x0D
define CAL_SABBREVDAYNAME1()  0x0E
define CAL_SABBREVDAYNAME2()  0x0F
define CAL_SABBREVDAYNAME3()  0x10
define CAL_SABBREVDAYNAME4()  0x11
define CAL_SABBREVDAYNAME5()  0x12
define CAL_SABBREVDAYNAME6()  0x13
define CAL_SABBREVDAYNAME7()  0x14
define CAL_SMONTHNAME1()  0x15
define CAL_SMONTHNAME2()  0x16
define CAL_SMONTHNAME3()  0x17
define CAL_SMONTHNAME4()  0x18
define CAL_SMONTHNAME5()  0x19
define CAL_SMONTHNAME6()  0x1A
define CAL_SMONTHNAME7()  0x1B
define CAL_SMONTHNAME8()  0x1C
define CAL_SMONTHNAME9()  0x1D
define CAL_SMONTHNAME10()  0x1E
define CAL_SMONTHNAME11()  0x1F
define CAL_SMONTHNAME12()  0x20
define CAL_SMONTHNAME13()  0x21
define CAL_SABBREVMONTHNAME1()  0x22
define CAL_SABBREVMONTHNAME2()  0x23
define CAL_SABBREVMONTHNAME3()  0x24
define CAL_SABBREVMONTHNAME4()  0x25
define CAL_SABBREVMONTHNAME5()  0x26
define CAL_SABBREVMONTHNAME6()  0x27
define CAL_SABBREVMONTHNAME7()  0x28
define CAL_SABBREVMONTHNAME8()  0x29
define CAL_SABBREVMONTHNAME9()  0x2A
define CAL_SABBREVMONTHNAME10()  0x2B
define CAL_SABBREVMONTHNAME11()  0x2C
define CAL_SABBREVMONTHNAME12()  0x2D
define CAL_SABBREVMONTHNAME13()  0x2E
define ENUM_ALL_CALENDARS()  0x0FFFF
define CAL_GREGORIAN()  1
define CAL_GREGORIAN_US()  2
define CAL_JAPAN()  3
define CAL_TAIWAN()  4
define CAL_KOREA()  5
define RIGHT_ALT_PRESSED()  0x1
define LEFT_ALT_PRESSED()  0x2
define RIGHT_CTRL_PRESSED()  0x4
define LEFT_CTRL_PRESSED()  0x8
define SHIFT_PRESSED()  0x10
define NUMLOCK_ON()  0x20
define SCROLLLOCK_ON()  0x40
define CAPSLOCK_ON()  0x80
define ENHANCED_KEY()  0x100
define FROM_LEFT_1ST_BUTTON_PRESSED()  0x1
define RIGHTMOST_BUTTON_PRESSED()  0x2
define FROM_LEFT_2ND_BUTTON_PRESSED()  0x4
define FROM_LEFT_3RD_BUTTON_PRESSED()  0x8
define FROM_LEFT_4TH_BUTTON_PRESSED()  0x10
define MOUSE_MOVED()  0x1
define DOUBLE_CLICK()  0x2
define KEY_EVENT()  0x1
define mouse_eventC()  0x2
define WINDOW_BUFFER_SIZE_EVENT()  0x4
define MENU_EVENT()  0x8
define FOCUS_EVENT()  0x10
define FOREGROUND_BLUE()  0x1
define FOREGROUND_GREEN()  0x2
define FOREGROUND_RED()  0x4
define FOREGROUND_INTENSITY()  0x8
define BACKGROUND_BLUE()  0x10
define BACKGROUND_GREEN()  0x20
define BACKGROUND_RED()  0x40
define BACKGROUND_INTENSITY()  0x80
define CTRL_C_EVENT()  0
define CTRL_BREAK_EVENT()  1
define CTRL_CLOSE_EVENT()  2
define CTRL_LOGOFF_EVENT()  5
define CTRL_SHUTDOWN_EVENT()  6
define ENABLE_PROCESSED_INPUT()  0x1
define ENABLE_LINE_INPUT()  0x2
define ENABLE_ECHO_INPUT()  0x4
define ENABLE_WINDOW_INPUT()  0x8
define ENABLE_MOUSE_INPUT()  0x10
define ENABLE_PROCESSED_OUTPUT()  0x1
define ENABLE_WRAP_AT_EOL_OUTPUT()  0x2
define CONSOLE_TEXTMODE_BUFFER()  1
define R2_BLACK()  1
define R2_NOTMERGEPEN()  2
define R2_MASKNOTPEN()  3
define R2_NOTCOPYPEN()  4
define R2_MASKPENNOT()  5
define R2_NOT()  6
define R2_XORPEN()  7
define R2_NOTMASKPEN()  8
define R2_MASKPEN()  9
define R2_NOTXORPEN()  10
define R2_NOP()  11
define R2_MERGENOTPEN()  12
define R2_COPYPEN()  13
define R2_MERGEPENNOT()  14
define R2_MERGEPEN()  15
define R2_WHITE()  16
define R2_LAST()  16
define SRCCOPY()  0x0CC0020
define SRCPAINT()  0x0EE0086
define SRCAND()  0x8800C6
define SRCINVERT()  0x660046
define SRCERASE()  0x440328
define NOTSRCCOPY()  0x330008
define NOTSRCERASE()  0x1100A6
define MERGECOPY()  0x0C000CA
define MERGEPAINT()  0x0BB0226
define PATCOPY()  0x0F00021
define PATPAINT()  0x0FB0A09
define PATINVERT()  0x5A0049
define DSTINVERT()  0x550009
define BLACKNESS()  0x42
define WHITENESS()  0x0FF0062
define GDI_ERROR()  0x0FFFF
define HGDI_ERROR()  0x0FFFF
define ERRORAPI()  0
define NULLREGION()  1
define SIMPLEREGION()  2
define COMPLEXREGION()  3
define RGN_AND()  1
define RGN_OR()  2
define RGN_XOR()  3
define RGN_DIFF()  4
define RGN_COPY()  5
define RGN_MIN()  RGN_AND
define RGN_MAX()  RGN_COPY
define BLACKONWHITE()  1
define WHITEONBLACK()  2
define COLORONCOLOR()  3
define HALFTONE()  4
define MAXSTRETCHBLTMODE()  4
define ALTERNATE()  1
define WINDING()  2
define POLYFILL_LAST()  2
define TA_NOUPDATECP()  0
define TA_UPDATECP()  1
define TA_LEFT()  0
define TA_RIGHT()  2
define TA_CENTER()  6
define TA_TOP()  0
define TA_BOTTOM()  8
define TA_BASELINE()  24
define TA_MASK()  TA_BASELINE + TA_CENTER + TA_UPDATECP
define VTA_BASELINE()  TA_BASELINE
define VTA_LEFT()  TA_BOTTOM
define VTA_RIGHT()  TA_TOP
define VTA_CENTER()  TA_CENTER
define VTA_BOTTOM()  TA_RIGHT
define VTA_TOP()  TA_LEFT
define ETO_GRAYED()  1
define ETO_OPAQUE()  2
define ETO_CLIPPED()  4
define ASPECT_FILTERING()  0x1
define DCB_RESET()  0x1
define DCB_ACCUMULATE()  0x2
define DCB_DIRTY()  DCB_ACCUMULATE
define DCB_SET()  DCB_RESET | DCB_ACCUMULATE
define DCB_ENABLE()  0x4
define DCB_DISABLE()  0x8
define META_SETBKCOLOR()  0x201
define META_SETBKMODE()  0x102
define META_SETMAPMODE()  0x103
define META_SETROP2()  0x104
define META_SETRELABS()  0x105
define META_SETPOLYFILLMODE()  0x106
define META_SETSTRETCHBLTMODE()  0x107
define META_SETTEXTCHAREXTRA()  0x108
define META_SETTEXTCOLOR()  0x209
define META_SETTEXTJUSTIFICATION()  0x20A
define META_SETWINDOWORG()  0x20B
define META_SETWINDOWEXT()  0x20C
define META_SETVIEWPORTORG()  0x20D
define META_SETVIEWPORTEXT()  0x20E
define META_OFFSETWINDOWORG()  0x20F
define META_SCALEWINDOWEXT()  0x410
define META_OFFSETVIEWPORTORG()  0x211
define META_SCALEVIEWPORTEXT()  0x412
define META_LINETO()  0x213
define META_MOVETO()  0x214
define META_EXCLUDECLIPRECT()  0x415
define META_INTERSECTCLIPRECT()  0x416
define META_ARC()  0x817
define META_ELLIPSE()  0x418
define META_FLOODFILL()  0x419
define META_PIE()  0x81A
define META_RECTANGLE()  0x41B
define META_ROUNDRECT()  0x61C
define META_PATBLT()  0x61D
define META_SAVEDC()  0x1E
define META_SETPIXEL()  0x41F
define META_OFFSETCLIPRGN()  0x220
define META_TEXTOUT()  0x521
define META_BITBLT()  0x922
define META_STRETCHBLT()  0x0B23
define META_POLYGON()  0x324
define META_POLYLINE()  0x325
define META_ESCAPE()  0x626
define META_RESTOREDC()  0x127
define META_FILLREGION()  0x228
define META_FRAMEREGION()  0x429
define META_INVERTREGION()  0x12A
define META_PAINTREGION()  0x12B
define META_SELECTCLIPREGION()  0x12C
define META_SELECTOBJECT()  0x12D
define META_SETTEXTALIGN()  0x12E
define META_CHORD()  0x830
define META_SETMAPPERFLAGS()  0x231
define META_EXTTEXTOUT()  0x0A32
define META_SETDIBTODEV()  0x0D33
define META_SELECTPALETTE()  0x234
define META_REALIZEPALETTE()  0x35
define META_ANIMATEPALETTE()  0x436
define META_SETPALENTRIES()  0x37
define META_POLYPOLYGON()  0x538
define META_RESIZEPALETTE()  0x139
define META_DIBBITBLT()  0x940
define META_DIBSTRETCHBLT()  0x0B41
define META_DIBCREATEPATTERNBRUSH()  0x142
define META_STRETCHDIB()  0x0F43
define META_EXTFLOODFILL()  0x548
define META_DELETEOBJECT()  0x1F0
define META_CREATEPALETTE()  0x0F7
define META_CREATEPATTERNBRUSH()  0x1F9
define META_CREATEPENINDIRECT()  0x2FA
define META_CREATEFONTINDIRECT()  0x2FB
define META_CREATEBRUSHINDIRECT()  0x2FC
define META_CREATEREGION()  0x6FF
define NEWFRAME()  1
define AbortDocC()  2
define NEXTBAND()  3
define SETCOLORTABLE()  4
define GETCOLORTABLE()  5
define FLUSHOUTPUT()  6
define DRAFTMODE()  7
define QUERYESCSUPPORT()  8
define SETABORTPROC()  9
define StartDocC()  10
define EndDocC()  11
define GETPHYSPAGESIZE()  12
define GETPRINTINGOFFSET()  13
define GETSCALINGFACTOR()  14
define MFCOMMENT()  15
define GETPENWIDTH()  16
define SETCOPYCOUNT()  17
define SELECTPAPERSOURCE()  18
define DEVICEDATA()  19
define PASSTHROUGH()  19
define GETTECHNOLGY()  20
define GETTECHNOLOGY()  20
define SETLINECAP()  21
define SETLINEJOIN()  22
define SetMiterLimitC()  23
define BANDINFO()  24
define DRAWPATTERNRECT()  25
define GETVECTORPENSIZE()  26
define GETVECTORBRUSHSIZE()  27
define ENABLEDUPLEX()  28
define GETSETPAPERBINS()  29
define GETSETPRINTORIENT()  30
define ENUMPAPERBINS()  31
define SETDIBSCALING()  32
define EPSPRINTING()  33
define ENUMPAPERMETRICS()  34
define GETSETPAPERMETRICS()  35
define POSTSCRIPT_DATA()  37
define POSTSCRIPT_IGNORE()  38
define MOUSETRAILS()  39
define GETDEVICEUNITS()  42
define GETEXTENDEDTEXTMETRICS()  256
define GETEXTENTTABLE()  257
define GETPAIRKERNTABLE()  258
define GETTRACKKERNTABLE()  259
define ExtTextOutC()  512
define GETFACENAME()  513
define DOWNLOADFACE()  514
define ENABLERELATIVEWIDTHS()  768
define ENABLEPAIRKERNING()  769
define SETKERNTRACK()  770
define SETALLJUSTVALUES()  771
define SETCHARSET()  772
define StretchBltC()  2048
define GETSETSCREENPARAMS()  3072
define BEGIN_PATH()  4096
define CLIP_TO_PATH()  4097
define END_PATH()  4098
define EXT_DEVICE_CAPS()  4099
define RESTORE_CTM()  4100
define SAVE_CTM()  4101
define SET_ARC_DIRECTION()  4102
define SET_BACKGROUND_COLOR()  4103
define SET_POLY_MODE()  4104
define SET_SCREEN_ANGLE()  4105
define SET_SPREAD()  4106
define TRANSFORM_CTM()  4107
define SET_CLIP_BOX()  4108
define SET_BOUNDS()  4109
define SET_MIRROR_MODE()  4110
define OPENCHANNEL()  4110
define DOWNLOADHEADER()  4111
define CLOSECHANNEL()  4112
define POSTSCRIPT_PASSTHROUGH()  4115
define ENCAPSULATED_POSTSCRIPT()  4116
define SP_NOTREPORTED()  0x4000
define SP_ERROR()  -1
define SP_APPABORT()  -2
define SP_USERABORT()  -3
define SP_OUTOFDISK()  -4
define SP_OUTOFMEMORY()  -5
define PR_JOBSTATUS()  0x0
define OBJ_PEN()  1
define OBJ_BRUSH()  2
define OBJ_DC()  3
define OBJ_METADC()  4
define OBJ_PAL()  5
define OBJ_FONT()  6
define OBJ_BITMAP()  7
define OBJ_REGION()  8
define OBJ_METAFILE()  9
define OBJ_MEMDC()  10
define OBJ_EXTPEN()  11
define OBJ_ENHMETADC()  12
define OBJ_ENHMETAFILE()  13
define MWT_IDENTITY()  1
define MWT_LEFTMULTIPLY()  2
define MWT_RIGHTMULTIPLY()  3
define MWT_MIN()  MWT_IDENTITY
define MWT_MAX()  MWT_RIGHTMULTIPLY
define BI_RGB()  0
define BI_RLE8()  1
define BI_RLE4()  2
define BI_BITFIELDS()  3
define NTM_REGULAR()  0x40
define NTM_BOLD()  0x20
define NTM_ITALIC()  0x1
define TMPF_FIXED_PITCH()  0x1
define TMPF_VECTOR()  0x2
define TMPF_DEVICE()  0x8
define TMPF_TRUETYPE()  0x4
define LF_FACESIZE()  32
define LF_FULLFACESIZE()  64
define OUT_DEFAULT_PRECIS()  0
define OUT_STRING_PRECIS()  1
define OUT_CHARACTER_PRECIS()  2
define OUT_STROKE_PRECIS()  3
define OUT_TT_PRECIS()  4
define OUT_DEVICE_PRECIS()  5
define OUT_RASTER_PRECIS()  6
define OUT_TT_ONLY_PRECIS()  7
define OUT_OUTLINE_PRECIS()  8
define CLIP_DEFAULT_PRECIS()  0
define CLIP_CHARACTER_PRECIS()  1
define CLIP_STROKE_PRECIS()  2
define CLIP_MASK()  0x0F
define CLIP_LH_ANGLES()  16
define CLIP_TT_ALWAYS()  32
define CLIP_EMBEDDED()  128
define DEFAULT_QUALITY()  0
define DRAFT_QUALITY()  1
define PROOF_QUALITY()  2
define DEFAULT_PITCH()  0
define FIXED_PITCH()  1
define VARIABLE_PITCH()  2
define ANSI_CHARSET()  0
define DEFAULT_CHARSET()  1
define SYMBOL_CHARSET()  2
define SHIFTJIS_CHARSET()  128
define GB2312_CHARSET()  134
define HANGEUL_CHARSET()  129
define CHINESEBIG5_CHARSET()  136
define OEM_CHARSET()  255
define FF_DONTCARE()  0
define FF_ROMAN()  16
define FF_SWISS()  32
define FF_MODERN()  48
define FF_SCRIPT()  64
define FF_DECORATIVE()  80
define FW_DONTCARE()  0
define FW_THIN()  100
define FW_EXTRALIGHT()  200
define FW_LIGHT()  300
define FW_NORMAL()  400
define FW_MEDIUM()  500
define FW_SEMIBOLD()  600
define FW_BOLD()  700
define FW_EXTRABOLD()  800
define FW_HEAVY()  900
define FW_ULTRALIGHT()  FW_EXTRALIGHT
define FW_REGULAR()  FW_NORMAL
define FW_DEMIBOLD()  FW_SEMIBOLD
define FW_ULTRABOLD()  FW_EXTRABOLD
define FW_BLACK()  FW_HEAVY
define PANOSE_COUNT()  10
define PAN_FAMILYTYPE_INDEX()  0
define PAN_SERIFSTYLE_INDEX()  1
define PAN_WEIGHT_INDEX()  2
define PAN_PROPORTION_INDEX()  3
define PAN_CONTRAST_INDEX()  4
define PAN_STROKEVARIATION_INDEX()  5
define PAN_ARMSTYLE_INDEX()  6
define PAN_LETTERFORM_INDEX()  7
define PAN_MIDLINE_INDEX()  8
define PAN_XHEIGHT_INDEX()  9
define PAN_CULTURE_LATIN()  0
define PAN_ANY()  0
define PAN_NO_FIT()  1
define PAN_FAMILY_TEXT_DISPLAY()  2
define PAN_FAMILY_SCRIPT()  3
define PAN_FAMILY_DECORATIVE()  4
define PAN_FAMILY_PICTORIAL()  5
define PAN_SERIF_COVE()  2
define PAN_SERIF_OBTUSE_COVE()  3
define PAN_SERIF_SQUARE_COVE()  4
define PAN_SERIF_OBTUSE_SQUARE_COVE()  5
define PAN_SERIF_SQUARE()  6
define PAN_SERIF_THIN()  7
define PAN_SERIF_BONE()  8
define PAN_SERIF_EXAGGERATED()  9
define PAN_SERIF_TRIANGLE()  10
define PAN_SERIF_NORMAL_SANS()  11
define PAN_SERIF_OBTUSE_SANS()  12
define PAN_SERIF_PERP_SANS()  13
define PAN_SERIF_FLARED()  14
define PAN_SERIF_ROUNDED()  15
define PAN_WEIGHT_VERY_LIGHT()  2
define PAN_WEIGHT_LIGHT()  3
define PAN_WEIGHT_THIN()  4
define PAN_WEIGHT_BOOK()  5
define PAN_WEIGHT_MEDIUM()  6
define PAN_WEIGHT_DEMI()  7
define PAN_WEIGHT_BOLD()  8
define PAN_WEIGHT_HEAVY()  9
define PAN_WEIGHT_BLACK()  10
define PAN_WEIGHT_NORD()  11
define PAN_PROP_OLD_STYLE()  2
define PAN_PROP_MODERN()  3
define PAN_PROP_EVEN_WIDTH()  4
define PAN_PROP_EXPANDED()  5
define PAN_PROP_CONDENSED()  6
define PAN_PROP_VERY_EXPANDED()  7
define PAN_PROP_VERY_CONDENSED()  8
define PAN_PROP_MONOSPACED()  9
define PAN_CONTRAST_NONE()  2
define PAN_CONTRAST_VERY_LOW()  3
define PAN_CONTRAST_LOW()  4
define PAN_CONTRAST_MEDIUM_LOW()  5
define PAN_CONTRAST_MEDIUM()  6
define PAN_CONTRAST_MEDIUM_HIGH()  7
define PAN_CONTRAST_HIGH()  8
define PAN_CONTRAST_VERY_HIGH()  9
define PAN_STROKE_GRADUAL_DIAG()  2
define PAN_STROKE_GRADUAL_TRAN()  3
define PAN_STROKE_GRADUAL_VERT()  4
define PAN_STROKE_GRADUAL_HORZ()  5
define PAN_STROKE_RAPID_VERT()  6
define PAN_STROKE_RAPID_HORZ()  7
define PAN_STROKE_INSTANT_VERT()  8
define PAN_STRAIGHT_ARMS_HORZ()  2
define PAN_STRAIGHT_ARMS_WEDGE()  3
define PAN_STRAIGHT_ARMS_VERT()  4
define PAN_STRAIGHT_ARMS_SINGLE_SERIF()  5
define PAN_STRAIGHT_ARMS_DOUBLE_SERIF()  6
define PAN_BENT_ARMS_HORZ()  7
define PAN_BENT_ARMS_WEDGE()  8
define PAN_BENT_ARMS_VERT()  9
define PAN_BENT_ARMS_SINGLE_SERIF()  10
define PAN_BENT_ARMS_DOUBLE_SERIF()  11
define PAN_LETT_NORMAL_CONTACT()  2
define PAN_LETT_NORMAL_WEIGHTED()  3
define PAN_LETT_NORMAL_BOXED()  4
define PAN_LETT_NORMAL_FLATTENED()  5
define PAN_LETT_NORMAL_ROUNDED()  6
define PAN_LETT_NORMAL_OFF_CENTER()  7
define PAN_LETT_NORMAL_SQUARE()  8
define PAN_LETT_OBLIQUE_CONTACT()  9
define PAN_LETT_OBLIQUE_WEIGHTED()  10
define PAN_LETT_OBLIQUE_BOXED()  11
define PAN_LETT_OBLIQUE_FLATTENED()  12
define PAN_LETT_OBLIQUE_ROUNDED()  13
define PAN_LETT_OBLIQUE_OFF_CENTER()  14
define PAN_LETT_OBLIQUE_SQUARE()  15
define PAN_MIDLINE_STANDARD_TRIMMED()  2
define PAN_MIDLINE_STANDARD_POINTED()  3
define PAN_MIDLINE_STANDARD_SERIFED()  4
define PAN_MIDLINE_HIGH_TRIMMED()  5
define PAN_MIDLINE_HIGH_POINTED()  6
define PAN_MIDLINE_HIGH_SERIFED()  7
define PAN_MIDLINE_CONSTANT_TRIMMED()  8
define PAN_MIDLINE_CONSTANT_POINTED()  9
define PAN_MIDLINE_CONSTANT_SERIFED()  10
define PAN_MIDLINE_LOW_TRIMMED()  11
define PAN_MIDLINE_LOW_POINTED()  12
define PAN_MIDLINE_LOW_SERIFED()  13
define PAN_XHEIGHT_CONSTANT_SMALL()  2
define PAN_XHEIGHT_CONSTANT_STD()  3
define PAN_XHEIGHT_CONSTANT_LARGE()  4
define PAN_XHEIGHT_DUCKING_SMALL()  5
define PAN_XHEIGHT_DUCKING_STD()  6
define PAN_XHEIGHT_DUCKING_LARGE()  7
define ELF_VENDOR_SIZE()  4
define ELF_VERSION()  0
define ELF_CULTURE_LATIN()  0
define RASTER_FONTTYPE()  0x1
define DEVICE_FONTTYPE()  0x2
define TRUETYPE_FONTTYPE()  0x4
define PC_RESERVED()  0x1
define PC_EXPLICIT()  0x2
define PC_NOCOLLAPSE()  0x4
define TRANSPARENT()  1
define OPAQUE()  2
define BKMODE_LAST()  2
define GM_COMPATIBLE()  1
define GM_ADVANCED()  2
define GM_LAST()  2
define PT_CLOSEFIGURE()  0x1
define PT_LINETO()  0x2
define PT_BEZIERTO()  0x4
define PT_MOVETO()  0x6
define MM_TEXT()  1
define MM_LOMETRIC()  2
define MM_HIMETRIC()  3
define MM_LOENGLISH()  4
define MM_HIENGLISH()  5
define MM_TWIPS()  6
define MM_ISOTROPIC()  7
define MM_ANISOTROPIC()  8
define MM_MIN()  MM_TEXT
define MM_MAX()  MM_ANISOTROPIC
define MM_MAX_FIXEDSCALE()  MM_TWIPS
define ABSOLUTE()  1
define RELATIVE()  2
define WHITE_BRUSH()  0
define LTGRAY_BRUSH()  1
define GRAY_BRUSH()  2
define DKGRAY_BRUSH()  3
define BLACK_BRUSH()  4
define NULL_BRUSH()  5
define HOLLOW_BRUSH()  NULL_BRUSH
define WHITE_PEN()  6
define BLACK_PEN()  7
define NULL_PEN()  8
define OEM_FIXED_FONT()  10
define ANSI_FIXED_FONT()  11
define ANSI_VAR_FONT()  12
define SYSTEM_FONT()  13
define DEVICE_DEFAULT_FONT()  14
define DEFAULT_PALETTE()  15
define SYSTEM_FIXED_FONT()  16
define STOCK_LAST()  16
define CLR_INVALID()  0x0FFFF
define BS_SOLID()  0
define BS_NULL()  1
define BS_HOLLOW()  BS_NULL
define BS_HATCHED()  2
define BS_PATTERN()  3
define BS_INDEXED()  4
define BS_DIBPATTERN()  5
define BS_DIBPATTERNPT()  6
define BS_PATTERN8X8()  7
define BS_DIBPATTERN8X8()  8
define HS_HORIZONTAL()  0
define HS_VERTICAL()  1
define HS_FDIAGONAL()  2
define HS_BDIAGONAL()  3
define HS_CROSS()  4
define HS_DIAGCROSS()  5
define HS_FDIAGONAL1()  6
define HS_BDIAGONAL1()  7
define HS_SOLID()  8
define HS_DENSE1()  9
define HS_DENSE2()  10
define HS_DENSE3()  11
define HS_DENSE4()  12
define HS_DENSE5()  13
define HS_DENSE6()  14
define HS_DENSE7()  15
define HS_DENSE8()  16
define HS_NOSHADE()  17
define HS_HALFTONE()  18
define HS_SOLIDCLR()  19
define HS_DITHEREDCLR()  20
define HS_SOLIDTEXTCLR()  21
define HS_DITHEREDTEXTCLR()  22
define HS_SOLIDBKCLR()  23
define HS_DITHEREDBKCLR()  24
define HS_API_MAX()  25
define PS_SOLID()  0
define PS_DASH()  1
define PS_DOT()  2
define PS_DASHDOT()  3
define PS_DASHDOTDOT()  4
define PS_NULL()  5
define PS_INSIDEFRAME()  6
define PS_USERSTYLE()  7
define PS_ALTERNATE()  8
define PS_STYLE_MASK()  0x0F
define PS_ENDCAP_ROUND()  0x0
define PS_ENDCAP_SQUARE()  0x100
define PS_ENDCAP_FLAT()  0x200
define PS_ENDCAP_MASK()  0x0F00
define PS_JOIN_ROUND()  0x0
define PS_JOIN_BEVEL()  0x1000
define PS_JOIN_MITER()  0x2000
define PS_JOIN_MASK()  0x0F000
define PS_COSMETIC()  0x0
define PS_GEOMETRIC()  0x10000
define PS_TYPE_MASK()  0x0F0000
define AD_COUNTERCLOCKWISE()  1
define AD_CLOCKWISE()  2
define PRF_CHECKVISIBLE()  0x00000001
define PRF_NONCLIENT()  0x00000002
define PRF_CLIENT()  0x00000004
define PRF_ERASEBKGND()  0x00000008
define PRF_CHILDREN()  0x00000010
define PRF_OWNED()  0x00000020
define BDR_RAISEDOUTER()  0x0001
define BDR_SUNKENOUTER()  0x0002
define BDR_RAISEDINNER()  0x0004
define BDR_SUNKENINNER()  0x0008
define BDR_OUTER()  0x0003
define BDR_INNER()  0x000C
define BDR_RAISED()  0x0005
define BDR_SUNKEN()  0x000A
define EDGE_RAISED()  BDR_RAISEDOUTER | BDR_RAISEDINNER
define EDGE_SUNKEN()  BDR_SUNKENOUTER | BDR_SUNKENINNER
define EDGE_ETCHED()  BDR_SUNKENOUTER | BDR_RAISEDINNER
define EDGE_BUMP()  BDR_RAISEDOUTER | BDR_SUNKENINNER
define BF_LEFT()  0x0001
define BF_TOP()  0x0002
define BF_RIGHT()  0x0004
define BF_BOTTOM()  0x0008
define BF_TOPLEFT()  BF_TOP | BF_LEFT
define BF_TOPRIGHT()  BF_TOP | BF_RIGHT
define BF_BOTTOMLEFT()  BF_BOTTOM | BF_LEFT
define BF_BOTTOMRIGHT()  BF_BOTTOM | BF_RIGHT
define BF_RECT()  BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM
define BF_DIAGONAL()  0x0010
define BF_DIAGONAL_ENDTOPRIGHT()  BF_DIAGONAL | BF_TOP | BF_RIGHT
define BF_DIAGONAL_ENDTOPLEFT()  BF_DIAGONAL | BF_TOP | BF_LEFT
define BF_DIAGONAL_ENDBOTTOMLEFT()  BF_DIAGONAL | BF_BOTTOM | BF_LEFT
define BF_DIAGONAL_ENDBOTTOMRIGHT()  BF_DIAGONAL | BF_BOTTOM | BF_RIGHT
define BF_MIDDLE()  0x0800
define BF_SOFT()  0x1000
define BF_ADJUST()  0x2000
define BF_FLAT()  0x4000
define BF_MONO()  0x8000
define DRIVERVERSION()  0
define TECHNOLOGY()  2
define HORZSIZE()  4
define VERTSIZE()  6
define HORZRES()  8
define VERTRES()  10
define BITSPIXEL()  12
define PLANES()  14
define NUMBRUSHES()  16
define NUMPENS()  18
define NUMMARKERS()  20
define NUMFONTS()  22
define NUMCOLORS()  24
define PDEVICESIZE()  26
define CURVECAPS()  28
define LINECAPS()  30
define POLYGONALCAPS()  32
define TEXTCAPS()  34
define CLIPCAPS()  36
define RASTERCAPS()  38
define ASPECTX()  40
define ASPECTY()  42
define ASPECTXY()  44
define LOGPIXELSX()  88
define LOGPIXELSY()  90
define SIZEPALETTE()  104
define NUMRESERVED()  106
define COLORRES()  108
define PHYSICALWIDTH()  110
define PHYSICALHEIGHT()  111
define PHYSICALOFFSETX()  112
define PHYSICALOFFSETY()  113
define SCALINGFACTORX()  114
define SCALINGFACTORY()  115
define DT_PLOTTER()  0
define DT_RASDISPLAY()  1
define DT_RASPRINTER()  2
define DT_RASCAMERA()  3
define DT_CHARSTREAM()  4
define DT_METAFILE()  5
define DT_DISPFILE()  6
define CC_NONE()  0
define CC_CIRCLES()  1
define CC_PIE()  2
define CC_CHORD()  4
define CC_ELLIPSES()  8
define CC_WIDE()  16
define CC_STYLED()  32
define CC_WIDESTYLED()  64
define CC_INTERIORS()  128
define CC_ROUNDRECT()  256
define LC_NONE()  0
define LC_POLYLINE()  2
define LC_MARKER()  4
define LC_POLYMARKER()  8
define LC_WIDE()  16
define LC_STYLED()  32
define LC_WIDESTYLED()  64
define LC_INTERIORS()  128
define PC_NONE()  0
define PC_POLYGON()  1
define PC_RECTANGLE()  2
define PC_WINDPOLYGON()  4
define PC_TRAPEZOID()  4
define PC_SCANLINE()  8
define PC_WIDE()  16
define PC_STYLED()  32
define PC_WIDESTYLED()  64
define PC_INTERIORS()  128
define CP_NONE()  0
define CP_RECTANGLE()  1
define CP_REGION()  2
define TC_OP_CHARACTER()  0x1
define TC_OP_STROKE()  0x2
define TC_CP_STROKE()  0x4
define TC_CR_90()  0x8
define TC_CR_ANY()  0x10
define TC_SF_X_YINDEP()  0x20
define TC_SA_DOUBLE()  0x40
define TC_SA_INTEGER()  0x80
define TC_SA_CONTIN()  0x100
define TC_EA_DOUBLE()  0x200
define TC_IA_ABLE()  0x400
define TC_UA_ABLE()  0x800
define TC_SO_ABLE()  0x1000
define TC_RA_ABLE()  0x2000
define TC_VA_ABLE()  0x4000
define TC_RESERVED()  0x8000
define TC_SCROLLBLT()  0x10000
define RC_NONE()  0
define RC_BITBLT()  1
define RC_BANDING()  2
define RC_SCALING()  4
define RC_BITMAP64()  8
define RC_GDI20_OUTPUT()  0x10
define RC_GDI20_STATE()  0x20
define RC_SAVEBITMAP()  0x40
define RC_DI_BITMAP()  0x80
define RC_PALETTE()  0x100
define RC_DIBTODEV()  0x200
define RC_BIGFONT()  0x400
define RC_STRETCHBLT()  0x800
define RC_FLOODFILL()  0x1000
define RC_STRETCHDIB()  0x2000
define RC_OP_DX_OUTPUT()  0x4000
define RC_DEVBITS()  0x8000
define DIB_RGB_COLORS()  0
define DIB_PAL_COLORS()  1
define DIB_PAL_INDICES()  2
define DIB_PAL_PHYSINDICES()  2
define DIB_PAL_LOGINDICES()  4
define SYSPAL_ERROR()  0
define SYSPAL_STATIC()  1
define SYSPAL_NOSTATIC()  2
define CBM_CREATEDIB()  0x2
define CBM_INIT()  0x4
define FLOODFILLBORDER()  0
define FLOODFILLSURFACE()  1
define CCHDEVICENAME()  32
define CCHFORMNAME()  32
define DM_SPECVERSION()  0x320
define DM_ORIENTATION()  0x1
define DM_PAPERSIZE()  0x2
define DM_PAPERLENGTH()  0x4
define DM_PAPERWIDTH()  0x8
define DM_SCALE()  0x10
define DM_COPIES()  0x100
define DM_DEFAULTSOURCE()  0x200
define DM_PRINTQUALITY()  0x400
define DM_COLOR()  0x800
define DM_DUPLEX()  0x1000
define DM_YRESOLUTION()  0x2000
define DM_TTOPTION()  0x4000
define DM_COLLATE()  0x8000
define DM_FORMNAME()  0x10000
define DMORIENT_PORTRAIT()  1
define DMORIENT_LANDSCAPE()  2
define DMPAPER_LETTER()  1
define DMPAPER_FIRST()  DMPAPER_LETTER
define DMPAPER_LETTERSMALL()  2
define DMPAPER_TABLOID()  3
define DMPAPER_LEDGER()  4
define DMPAPER_LEGAL()  5
define DMPAPER_STATEMENT()  6
define DMPAPER_EXECUTIVE()  7
define DMPAPER_A3()  8
define DMPAPER_A4()  9
define DMPAPER_A4SMALL()  10
define DMPAPER_A5()  11
define DMPAPER_B4()  12
define DMPAPER_B5()  13
define DMPAPER_FOLIO()  14
define DMPAPER_QUARTO()  15
define DMPAPER_10X14()  16
define DMPAPER_11X17()  17
define DMPAPER_NOTE()  18
define DMPAPER_ENV_9()  19
define DMPAPER_ENV_10()  20
define DMPAPER_ENV_11()  21
define DMPAPER_ENV_12()  22
define DMPAPER_ENV_14()  23
define DMPAPER_CSHEET()  24
define DMPAPER_DSHEET()  25
define DMPAPER_ESHEET()  26
define DMPAPER_ENV_DL()  27
define DMPAPER_ENV_C5()  28
define DMPAPER_ENV_C3()  29
define DMPAPER_ENV_C4()  30
define DMPAPER_ENV_C6()  31
define DMPAPER_ENV_C65()  32
define DMPAPER_ENV_B4()  33
define DMPAPER_ENV_B5()  34
define DMPAPER_ENV_B6()  35
define DMPAPER_ENV_ITALY()  36
define DMPAPER_ENV_MONARCH()  37
define DMPAPER_ENV_PERSONAL()  38
define DMPAPER_FANFOLD_US()  39
define DMPAPER_FANFOLD_STD_GERMAN()  40
define DMPAPER_FANFOLD_LGL_GERMAN()  41
define DMPAPER_LAST()  DMPAPER_FANFOLD_LGL_GERMAN
define DMPAPER_USER()  256
define DMBIN_UPPER()  1
define DMBIN_FIRST()  DMBIN_UPPER
define DMBIN_ONLYONE()  1
define DMBIN_LOWER()  2
define DMBIN_MIDDLE()  3
define DMBIN_MANUAL()  4
define DMBIN_ENVELOPE()  5
define DMBIN_ENVMANUAL()  6
define DMBIN_AUTO()  7
define DMBIN_TRACTOR()  8
define DMBIN_SMALLFMT()  9
define DMBIN_LARGEFMT()  10
define DMBIN_LARGECAPACITY()  11
define DMBIN_CASSETTE()  14
define DMBIN_LAST()  DMBIN_CASSETTE
define DMBIN_USER()  256
define DMRES_DRAFT()  -1
define DMRES_LOW()  -2
define DMRES_MEDIUM()  -3
define DMRES_HIGH()  -4
define DMCOLOR_MONOCHROME()  1
define DMCOLOR_COLOR()  2
define DMDUP_SIMPLEX()  1
define DMDUP_VERTICAL()  2
define DMDUP_HORIZONTAL()  3
define DMTT_BITMAP()  1
define DMTT_DOWNLOAD()  2
define DMTT_SUBDEV()  3
define DMCOLLATE_FALSE()  0
define DMCOLLATE_TRUE()  1
define DM_GRAYSCALE()  0x1
define DM_INTERLACED()  0x2
define RDH_RECTANGLES()  1
define GGO_METRICS()  0
define GGO_BITMAP()  1
define GGO_NATIVE()  2
define TT_POLYGON_TYPE()  24
define TT_PRIM_LINE()  1
define TT_PRIM_QSPLINE()  2
define TT_AVAILABLE()  0x1
define TT_ENABLED()  0x2
define DM_UPDATE()  1
define DM_COPY()  2
define DM_PROMPT()  4
define DM_MODIFY()  8
define DM_IN_BUFFER()  DM_MODIFY
define DM_IN_PROMPT()  DM_PROMPT
define DM_OUT_BUFFER()  DM_COPY
define DM_OUT_DEFAULT()  DM_UPDATE
define DC_FIELDS()  1
define DC_PAPERS()  2
define DC_PAPERSIZE()  3
define DC_MINEXTENT()  4
define DC_MAXEXTENT()  5
define DC_BINS()  6
define DC_DUPLEX()  7
define DC_SIZE()  8
define DC_EXTRA()  9
define DC_VERSION()  10
define DC_DRIVER()  11
define DC_BINNAMES()  12
define DC_ENUMRESOLUTIONS()  13
define DC_FILEDEPENDENCIES()  14
define DC_TRUETYPE()  15
define DC_PAPERNAMES()  16
define DC_ORIENTATION()  17
define DC_COPIES()  18
define DCTT_BITMAP()  0x1
define DCTT_DOWNLOAD()  0x2
define DCTT_SUBDEV()  0x4
define CA_NEGATIVE()  0x1
define CA_LOG_FILTER()  0x2
define ILLUMINANT_DEVICE_DEFAULT()  0
define ILLUMINANT_A()  1
define ILLUMINANT_B()  2
define ILLUMINANT_C()  3
define ILLUMINANT_D50()  4
define ILLUMINANT_D55()  5
define ILLUMINANT_D65()  6
define ILLUMINANT_D75()  7
define ILLUMINANT_F2()  8
define ILLUMINANT_MAX_INDEX()  ILLUMINANT_F2
define ILLUMINANT_TUNGSTEN()  ILLUMINANT_A
define ILLUMINANT_DAYLIGHT()  ILLUMINANT_C
define ILLUMINANT_FLUORESCENT()  ILLUMINANT_F2
define ILLUMINANT_NTSC()  ILLUMINANT_C
define RGB_GAMMA_MIN()  2500
define RGB_GAMMA_MAX()  65000
define REFERENCE_WHITE_MIN()  6000
define REFERENCE_WHITE_MAX()  10000
define REFERENCE_BLACK_MIN()  0
define REFERENCE_BLACK_MAX()  4000
define COLOR_ADJ_MIN()  -100
define COLOR_ADJ_MAX()  100
define FONTMAPPER_MAX()  10
define ENHMETA_SIGNATURE()  0x464D4520
define ENHMETA_STOCK_OBJECT()  0x80000000
define EMR_HEADER()  1
define EMR_POLYBEZIER()  2
define EMR_POLYGON()  3
define EMR_POLYLINE()  4
define EMR_POLYBEZIERTO()  5
define EMR_POLYLINETO()  6
define EMR_POLYPOLYLINE()  7
define EMR_POLYPOLYGON()  8
define EMR_SETWINDOWEXTEX()  9
define EMR_SETWINDOWORGEX()  10
define EMR_SETVIEWPORTEXTEX()  11
define EMR_SETVIEWPORTORGEX()  12
define EMR_SETBRUSHORGEX()  13
define EMR_EOF()  14
define EMR_SETPIXELV()  15
define EMR_SETMAPPERFLAGS()  16
define EMR_SETMAPMODE()  17
define EMR_SETBKMODE()  18
define EMR_SETPOLYFILLMODE()  19
define EMR_SETROP2()  20
define EMR_SETSTRETCHBLTMODE()  21
define EMR_SETTEXTALIGN()  22
define EMR_SETCOLORADJUSTMENT()  23
define EMR_SETTEXTCOLOR()  24
define EMR_SETBKCOLOR()  25
define EMR_OFFSETCLIPRGN()  26
define EMR_MOVETOEX()  27
define EMR_SETMETARGN()  28
define EMR_EXCLUDECLIPRECT()  29
define EMR_INTERSECTCLIPRECT()  30
define EMR_SCALEVIEWPORTEXTEX()  31
define EMR_SCALEWINDOWEXTEX()  32
define EMR_SAVEDC()  33
define EMR_RESTOREDC()  34
define EMR_SETWORLDTRANSFORM()  35
define EMR_MODIFYWORLDTRANSFORM()  36
define EMR_SELECTOBJECT()  37
define EMR_CREATEPEN()  38
define EMR_CREATEBRUSHINDIRECT()  39
define EMR_DELETEOBJECT()  40
define EMR_ANGLEARC()  41
define EMR_ELLIPSE()  42
define EMR_RECTANGLE()  43
define EMR_ROUNDRECT()  44
define EMR_ARC()  45
define EMR_CHORD()  46
define EMR_PIE()  47
define EMR_SELECTPALETTE()  48
define EMR_CREATEPALETTE()  49
define EMR_SETPALETTEENTRIES()  50
define EMR_RESIZEPALETTE()  51
define EMR_REALIZEPALETTE()  52
define EMR_EXTFLOODFILL()  53
define EMR_LINETO()  54
define EMR_ARCTO()  55
define EMR_POLYDRAW()  56
define EMR_SETARCDIRECTION()  57
define EMR_SETMITERLIMIT()  58
define EMR_BEGINPATH()  59
define EMR_ENDPATH()  60
define EMR_CLOSEFIGURE()  61
define EMR_FILLPATH()  62
define EMR_STROKEANDFILLPATH()  63
define EMR_STROKEPATH()  64
define EMR_FLATTENPATH()  65
define EMR_WIDENPATH()  66
define EMR_SELECTCLIPPATH()  67
define EMR_ABORTPATH()  68
define EMR_GDICOMMENT()  70
define EMR_FILLRGN()  71
define EMR_FRAMERGN()  72
define EMR_INVERTRGN()  73
define EMR_PAINTRGN()  74
define EMR_EXTSELECTCLIPRGN()  75
define EMR_BITBLT()  76
define EMR_STRETCHBLT()  77
define EMR_MASKBLT()  78
define EMR_PLGBLT()  79
define EMR_SETDIBITSTODEVICE()  80
define EMR_STRETCHDIBITS()  81
define EMR_EXTCREATEFONTINDIRECTW()  82
define EMR_EXTTEXTOUTA()  83
define EMR_EXTTEXTOUTW()  84
define EMR_POLYBEZIER16()  85
define EMR_POLYGON16()  86
define EMR_POLYLINE16()  87
define EMR_POLYBEZIERTO16()  88
define EMR_POLYLINETO16()  89
define EMR_POLYPOLYLINE16()  90
define EMR_POLYPOLYGON16()  91
define EMR_POLYDRAW16()  92
define EMR_CREATEMONOBRUSH()  93
define EMR_CREATEDIBPATTERNBRUSHPT()  94
define EMR_EXTCREATEPEN()  95
define EMR_POLYTEXTOUTA()  96
define EMR_POLYTEXTOUTW()  97
define EMR_MIN()  1
define EMR_MAX()  97
define STRETCH_ANDSCANS()  1
define STRETCH_ORSCANS()  2
define STRETCH_DELETESCANS()  3
define STRETCH_HALFTONE()  4
define TCI_SRCCHARSET()  1
define TCI_SRCCODEPAGE()  2
define TCI_SRCFONTSIG()  3
define MONO_FONT()  8
define JOHAB_CHARSET()  130
define HEBREW_CHARSET()  177
define ARABIC_CHARSET()  178
define GREEK_CHARSET()  161
define TURKISH_CHARSET()  162
define THAI_CHARSET()  222
define EASTEUROPE_CHARSET()  238
define RUSSIAN_CHARSET()  204
define MAC_CHARSET()  77
define BALTIC_CHARSET()  186
define FS_LATIN1()  0x1
define FS_LATIN2()  0x2
define FS_CYRILLIC()  0x4
define FS_GREEK()  0x8
define FS_TURKISH()  0x10
define FS_HEBREW()  0x20
define FS_ARABIC()  0x40
define FS_BALTIC()  0x80
define FS_THAI()  0x10000
define FS_JISJAPAN()  0x20000
define FS_CHINESESIMP()  0x40000
define FS_WANSUNG()  0x80000
define FS_CHINESETRAD()  0x100000
define FS_JOHAB()  0x200000
define FS_SYMBOL()  0x80000000
define DEFAULT_GUI_FONT()  17
define DM_RESERVED1()  0x800000
define DM_RESERVED2()  0x1000000
define DM_ICMMETHOD()  0x2000000
define DM_ICMINTENT()  0x4000000
define DM_MEDIATYPE()  0x8000000
define DM_DITHERTYPE()  0x10000000
define DMPAPER_ISO_B4()  42
define DMPAPER_JAPANESE_POSTCARD()  43
define DMPAPER_9X11()  44
define DMPAPER_10X11()  45
define DMPAPER_15X11()  46
define DMPAPER_ENV_INVITE()  47
define DMPAPER_RESERVED_48()  48
define DMPAPER_RESERVED_49()  49
define DMPAPER_LETTER_EXTRA()  50
define DMPAPER_LEGAL_EXTRA()  51
define DMPAPER_TABLOID_EXTRA()  52
define DMPAPER_A4_EXTRA()  53
define DMPAPER_LETTER_TRANSVERSE()  54
define DMPAPER_A4_TRANSVERSE()  55
define DMPAPER_LETTER_EXTRA_TRANSVERSE()  56
define DMPAPER_A_PLUS()  57
define DMPAPER_B_PLUS()  58
define DMPAPER_LETTER_PLUS()  59
define DMPAPER_A4_PLUS()  60
define DMPAPER_A5_TRANSVERSE()  61
define DMPAPER_B5_TRANSVERSE()  62
define DMPAPER_A3_EXTRA()  63
define DMPAPER_A5_EXTRA()  64
define DMPAPER_B5_EXTRA()  65
define DMPAPER_A2()  66
define DMPAPER_A3_TRANSVERSE()  67
define DMPAPER_A3_EXTRA_TRANSVERSE()  68
define DMTT_DOWNLOAD_OUTLINE()  4
define DMICMMETHOD_NONE()  1
define DMICMMETHOD_SYSTEM()  2
define DMICMMETHOD_DRIVER()  3
define DMICMMETHOD_DEVICE()  4
define DMICMMETHOD_USER()  256
define DMICM_SATURATE()  1
define DMICM_CONTRAST()  2
define DMICM_COLORMETRIC()  3
define DMICM_USER()  256
define DMMEDIA_STANDARD()  1
define DMMEDIA_GLOSSY()  2
define DMMEDIA_TRANSPARENCY()  3
define DMMEDIA_USER()  256
define DMDITHER_NONE()  1
define DMDITHER_COARSE()  2
define DMDITHER_FINE()  3
define DMDITHER_LINEART()  4
define DMDITHER_GRAYSCALE()  5
define DMDITHER_USER()  256
define GGO_GRAY2_BITMAP()  4
define GGO_GRAY4_BITMAP()  5
define GGO_GRAY8_BITMAP()  6
define GGO_GLYPH_INDEX()  0x80
define GCP_DBCS()  0x1
define GCP_REORDER()  0x2
define GCP_USEKERNING()  0x8
define GCP_GLYPHSHAPE()  0x10
define GCP_LIGATE()  0x20
define GCP_DIACRITIC()  0x100
define GCP_KASHIDA()  0x400
define GCP_ERROR()  0x8000
define FLI_MASK()  0x103B
define GCP_JUSTIFY()  0x10000
define GCP_NODIACRITICS()  0x20000
define FLI_GLYPHS()  0x40000
define GCP_CLASSIN()  0x80000
define GCP_MAXEXTENT()  0x100000
define GCP_JUSTIFYIN()  0x200000
define GCP_DISPLAYZWG()  0x400000
define GCP_SYMSWAPOFF()  0x800000
define GCP_NUMERICOVERRIDE()  0x1000000
define GCP_NEUTRALOVERRIDE()  0x2000000
define GCP_NUMERICSLATIN()  0x4000000
define GCP_NUMERICSLOCAL()  0x8000000
define GCPCLASS_LATIN()  1
define GCPCLASS_HEBREW()  2
define GCPCLASS_ARABIC()  2
define GCPCLASS_NEUTRAL()  3
define GCPCLASS_LOCALNUMBER()  4
define GCPCLASS_LATINNUMBER()  5
define GCPCLASS_LATINNUMERICTERMINATOR()  6
define GCPCLASS_LATINNUMERICSEPARATOR()  7
define GCPCLASS_NUMERICSEPARATOR()  8
define GCPCLASS_PREBOUNDRTL()  0x80
define GCPCLASS_PREBOUNDLTR()  0x40
define DC_BINADJUST()  19
define DC_EMF_COMPLIANT()  20
define DC_DATATYPE_PRODUCED()  21
define DC_COLLATE()  22
define DCTT_DOWNLOAD_OUTLINE()  0x8
define DCBA_FACEUPNONE()  0x0
define DCBA_FACEUPCENTER()  0x1
define DCBA_FACEUPLEFT()  0x2
define DCBA_FACEUPRIGHT()  0x3
define DCBA_FACEDOWNNONE()  0x100
define DCBA_FACEDOWNCENTER()  0x101
define DCBA_FACEDOWNLEFT()  0x102
define DCBA_FACEDOWNRIGHT()  0x103
define ICM_OFF()  1
define ICM_ON()  2
define ICM_QUERY()  3
define EMR_SETICMMODE()  98
define EMR_CREATECOLORSPACE()  99
define EMR_SETCOLORSPACE()  100
define EMR_DELETECOLORSPACE()  101
define SB_HORZ()  0
define SB_VERT()  1
define SB_CTL()  2
define SB_BOTH()  3
define SB_LINEUP()  0
define SB_LINELEFT()  0
define SB_LINEDOWN()  1
define SB_LINERIGHT()  1
define SB_PAGEUP()  2
define SB_PAGELEFT()  2
define SB_PAGEDOWN()  3
define SB_PAGERIGHT()  3
define SB_THUMBPOSITION()  4
define SB_THUMBTRACK()  5
define SB_TOP()  6
define SB_LEFT()  6
define SB_BOTTOM()  7
define SB_RIGHT()  7
define SB_ENDSCROLL()  8
define SBM_SETSCROLLINFO()  0x00E9
define SBM_GETSCROLLINFO()  0x00EA
define SIF_RANGE()  0x0001
define SIF_PAGE()  0x0002
define SIF_POS()  0x0004
define SIF_DISABLENOSCROLL()  0x0008
define SIF_TRACKPOS()  0x0010
define SIF_ALL()  SIF_RANGE | SIF_PAGE | SIF_POS | SIF_TRACKPOS
define SW_HIDE()  0
define SW_SHOWNORMAL()  1
define SW_NORMAL()  1
define SW_SHOWMINIMIZED()  2
define SW_SHOWMAXIMIZED()  3
define SW_MAXIMIZE()  3
define SW_SHOWNOACTIVATE()  4
define SW_SHOW()  5
define SW_MINIMIZE()  6
define SW_SHOWMINNOACTIVE()  7
define SW_SHOWNA()  8
define SW_RESTORE()  9
define SW_SHOWDEFAULT()  10
define SW_MAX()  10
define HIDE_WINDOW()  0
define SHOW_OPENWINDOW()  1
define SHOW_ICONWINDOW()  2
define SHOW_FULLSCREEN()  3
define SHOW_OPENNOACTIVATE()  4
define SW_PARENTCLOSING()  1
define SW_OTHERZOOM()  2
define SW_PARENTOPENING()  3
define SW_OTHERUNZOOM()  4
define KF_EXTENDED()  0x100
define KF_DLGMODE()  0x800
define KF_MENUMODE()  0x1000
define KF_ALTDOWN()  0x2000
define KF_REPEAT()  0x4000
define KF_UP()  0x8000
define VK_BACK()  0x8
define VK_CANCEL()  0x3
define VK_CAPITAL()  0x14
define VK_CLEAR()  0x0C
define VK_CONTROL()  0x11
define VK_DELETE()  0x2E
define VK_DOWN()  0x28
define VK_END()  0x23
define VK_ESCAPE()  0x1B
define VK_EXECUTE()  0x2B
define VK_HELP()  0x2F
define VK_HOME()  0x24
define VK_INSERT()  0x2D
define VK_LBUTTON()  0x1
define VK_LEFT()  0x25
define VK_MBUTTON()  0x4
define VK_MENU()  0x12
define VK_NEXT()  0x22
define VK_PAUSE()  0x13
define VK_PGDN()  0x22
define VK_PGUP()  0x21
define VK_PRINT()  0x2A
define VK_PRIOR()  0x21
define VK_RBUTTON()  0x2
define VK_RETURN()  0x0D
define VK_RIGHT()  0x27
define VK_SELECT()  0x29
define VK_SHIFT()  0x10
define VK_SNAPSHOT()  0x2C
define VK_SPACE()  0x20
define VK_TAB()  0x9
define VK_UP()  0x26
define VK_NUMPAD0()  0x60
define VK_NUMPAD1()  0x61
define VK_NUMPAD2()  0x62
define VK_NUMPAD3()  0x63
define VK_NUMPAD4()  0x64
define VK_NUMPAD5()  0x65
define VK_NUMPAD6()  0x66
define VK_NUMPAD7()  0x67
define VK_NUMPAD8()  0x68
define VK_NUMPAD9()  0x69
define VK_MULTIPLY()  0x6A
define VK_ADD()  0x6B
define VK_SEPARATOR()  0x6C
define VK_SUBTRACT()  0x6D
define VK_DECIMAL()  0x6E
define VK_DIVIDE()  0x6F
define VK_F1()  0x70
define VK_F2()  0x71
define VK_F3()  0x72
define VK_F4()  0x73
define VK_F5()  0x74
define VK_F6()  0x75
define VK_F7()  0x76
define VK_F8()  0x77
define VK_F9()  0x78
define VK_F10()  0x79
define VK_F11()  0x7A
define VK_F12()  0x7B
define VK_F13()  0x7C
define VK_F14()  0x7D
define VK_F15()  0x7E
define VK_F16()  0x7F
define VK_F17()  0x80
define VK_F18()  0x81
define VK_F19()  0x82
define VK_F20()  0x83
define VK_F21()  0x84
define VK_F22()  0x85
define VK_F23()  0x86
define VK_F24()  0x87
define VK_NUMLOCK()  0x90
define VK_SCROLL()  0x91
define VK_LSHIFT()  0x0A0
define VK_RSHIFT()  0x0A1
define VK_LCONTROL()  0x0A2
define VK_RCONTROL()  0x0A3
define VK_LMENU()  0x0A4
define VK_RMENU()  0x0A5
define VK_ATTN()  0x0F6
define VK_CRSEL()  0x0F7
define VK_EXSEL()  0x0F8
define VK_EREOF()  0x0F9
define VK_PLAY()  0x0FA
define VK_ZOOM()  0x0FB
define VK_NONAME()  0x0FC
define VK_PA1()  0x0FD
define VK_OEM_CLEAR()  0x0FE
define VK_0()  0x30
define VK_1()  0x31
define VK_2()  0x32
define VK_3()  0x33
define VK_4()  0x34
define VK_5()  0x35
define VK_6()  0x36
define VK_7()  0x37
define VK_8()  0x38
define VK_9()  0x39
define VK_A()  0x41
define VK_B()  0x42
define VK_C()  0x43
define VK_D()  0x44
define VK_E()  0x45
define VK_F()  0x46
define VK_G()  0x47
define VK_H()  0x48
define VK_I()  0x49
define VK_J()  0x4A
define VK_K()  0x4B
define VK_L()  0x4C
define VK_M()  0x4D
define VK_N()  0x4E
define VK_O()  0x4F
define VK_P()  0x50
define VK_Q()  0x51
define VK_R()  0x52
define VK_S()  0x53
define VK_T()  0x54
define VK_U()  0x55
define VK_V()  0x56
define VK_W()  0x57
define VK_X()  0x58
define VK_Y()  0x59
define VK_Z()  0x5A
define WH_MIN()  -1
define WH_MSGFILTER()  -1
define WH_JOURNALRECORD()  0
define WH_JOURNALPLAYBACK()  1
define WH_KEYBOARD()  2
define WH_GETMESSAGE()  3
define WH_CALLWNDPROC()  4
define WH_CBT()  5
define WH_SYSMSGFILTER()  6
define WH_MOUSE()  7
define WH_HARDWARE()  8
define WH_DEBUG()  9
define WH_SHELL()  10
define WH_FOREGROUNDIDLE()  11
define WH_MAX()  11
define HC_ACTION()  0
define HC_GETNEXT()  1
define HC_SKIP()  2
define HC_NOREMOVE()  3
define HC_NOREM()  HC_NOREMOVE
define HC_SYSMODALON()  4
define HC_SYSMODALOFF()  5
define HCBT_MOVESIZE()  0
define HCBT_MINMAX()  1
define HCBT_QS()  2
define HCBT_CREATEWND()  3
define HCBT_DESTROYWND()  4
define HCBT_ACTIVATE()  5
define HCBT_CLICKSKIPPED()  6
define HCBT_KEYSKIPPED()  7
define HCBT_SYSCOMMAND()  8
define HCBT_SETFOCUS()  9
define HSHELL_WINDOWCREATED()  1
define HSHELL_WINDOWDESTROYED()  2
define HSHELL_ACTIVATESHELLWINDOW()  3
define HKL_PREV()  0
define HKL_NEXT()  1
define KLF_ACTIVATE()  0x1
define KLF_SUBSTITUTE_OK()  0x2
define KLF_UNLOADPREVIOUS()  0x4
define KLF_REORDER()  0x8
define KL_NAMELENGTH()  9
define DESKTOP_READOBJECTS()  0x1
define DESKTOP_CREATEWINDOW()  0x2
define DESKTOP_CREATEMENU()  0x4
define DESKTOP_HOOKCONTROL()  0x8
define DESKTOP_JOURNALRECORD()  0x10
define DESKTOP_JOURNALPLAYBACK()  0x20
define DESKTOP_ENUMERATE()  0x40
define DESKTOP_WRITEOBJECTS()  0x80
define WINSTA_ENUMDESKTOPS()  0x1
define WINSTA_READATTRIBUTES()  0x2
define WINSTA_ACCESSCLIPBOARD()  0x4
define WINSTA_CREATEDESKTOP()  0x8
define WINSTA_WRITEATTRIBUTES()  0x10
define WINSTA_ACCESSGLOBALATOMS()  0x20
define WINSTA_EXITWINDOWS()  0x40
define WINSTA_ENUMERATE()  0x100
define WINSTA_READSCREEN()  0x200
define GWL_WNDPROC()  -4
define GWL_HINSTANCE()  -6
define GWL_HWNDPARENT()  -8
define GWL_STYLE()  -16
define GWL_EXSTYLE()  -20
define GWL_USERDATA()  -21
define GWL_ID()  -12
define GCL_MENUNAME()  -8
define GCL_HBRBACKGROUND()  -10
define GCL_HCURSOR()  -12
define GCL_HICON()  -14
define GCL_HMODULE()  -16
define GCL_CBWNDEXTRA()  -18
define GCL_CBCLSEXTRA()  -20
define GCL_WNDPROC()  -24
define GCL_STYLE()  -26
define GCW_ATOM()  -32
define WM_USER()  0x400
define WM_NULL()  0x0
define WM_CREATE()  0x1
define WM_DESTROY()  0x2
define WM_MOVE()  0x3
define WM_SIZE()  0x5
define WM_ACTIVATE()  0x6
define WA_INACTIVE()  0
define WA_ACTIVE()  1
define WA_CLICKACTIVE()  2
define WM_SETFOCUS()  0x7
define WM_KILLFOCUS()  0x08
define WM_ENABLE()  0x0A
define WM_SETREDRAW()  0x0B
define WM_SETTEXT()  0x0C
define WM_GETTEXT()  0x0D
define WM_GETTEXTLENGTH()  0x0E
define WM_PAINT()  0x0F
define WM_CLOSE()  0x10
define WM_QUERYENDSESSION()  0x11
define WM_QUIT()  0x12
define WM_QUERYOPEN()  0x13
define WM_ERASEBKGND()  0x14
define WM_SYSCOLORCHANGE()  0x15
define WM_ENDSESSION()  0x16
define WM_SHOWWINDOW()  0x18
define WM_WININICHANGE()  0x1A
define WM_SETTINGCHANGE()  WM_WININICHANGE
define WM_DEVMODECHANGE()  0x1B
define WM_ACTIVATEAPP()  0x1C
define WM_FONTCHANGE()  0x1D
define WM_TIMECHANGE()  0x1E
define WM_CANCELMODE()  0x1F
define WM_SETCURSOR()  0x20
define WM_MOUSEACTIVATE()  0x21
define WM_CHILDACTIVATE()  0x22
define WM_QUEUESYNC()  0x23
define WM_GETMINMAXINFO()  0x24
define WM_PAINTICON()  0x26
define WM_ICONERASEBKGND()  0x27
define WM_NEXTDLGCTL()  0x28
define WM_SPOOLERSTATUS()  0x2A
define WM_DRAWITEM()  0x2B
define WM_MEASUREITEM()  0x2C
define WM_DELETEITEM()  0x2D
define WM_VKEYTOITEM()  0x2E
define WM_CHARTOITEM()  0x2F
define WM_SETFONT()  0x30
define WM_GETFONT()  0x31
define WM_SETHOTKEY()  0x32
define WM_GETHOTKEY()  0x33
define WM_QUERYDRAGICON()  0x37
define WM_COMPAREITEM()  0x39
define WM_GETOBJECT()  0x3D
define WM_COMPACTING()  0x41
define WM_OTHERWINDOWCREATED()  0x42
define WM_OTHERWINDOWDESTROYED()  0x43
define WM_COMMNOTIFY()  0x44
define CN_RECEIVE()  0x1
define CN_TRANSMIT()  0x2
define CN_EVENT()  0x4
define WM_WINDOWPOSCHANGING()  0x46
define WM_WINDOWPOSCHANGED()  0x47
define WM_POWER()  0x48
define PWR_OK()  1
define PWR_FAIL()  -1
define PWR_SUSPENDREQUEST()  1
define PWR_SUSPENDRESUME()  2
define PWR_CRITICALRESUME()  3
define WM_COPYDATA()  0x4A
define WM_CANCELJOURNAL()  0x4B
define WM_NOTIFY()  0x4E
define WM_INPUTLANGCHANGEREQUEST()  0x50
define WM_INPUTLANGCHANGE()  0x51
define WM_TCARD()  0x52
define WM_HELP()  0x53
define WM_USERCHANGED()  0x54
define WM_NOTIFYFORMAT()  0x55
define WM_CONTEXTMENU()  0x7B
define WM_STYLECHANGING()  0x7C
define WM_STYLECHANGED()  0x7D
define WM_DISPLAYCHANGE()  0x7E
define WM_GETICON()  0x7F
define WM_SETICON()  0x80
define WM_NCCREATE()  0x81
define WM_NCDESTROY()  0x82
define WM_NCCALCSIZE()  0x83
define WM_NCHITTEST()  0x84
define WM_NCPAINT()  0x85
define WM_NCACTIVATE()  0x86
define WM_GETDLGCODE()  0x87
define WM_SYNCPAINT()  0x88
define WM_NCMOUSEMOVE()  0x0A0
define WM_NCLBUTTONDOWN()  0x0A1
define WM_NCLBUTTONUP()  0x0A2
define WM_NCLBUTTONDBLCLK()  0x0A3
define WM_NCRBUTTONDOWN()  0x0A4
define WM_NCRBUTTONUP()  0x0A5
define WM_NCRBUTTONDBLCLK()  0x0A6
define WM_NCMBUTTONDOWN()  0x0A7
define WM_NCMBUTTONUP()  0x0A8
define WM_NCMBUTTONDBLCLK()  0x0A9
define WM_KEYFIRST()  0x100
define WM_KEYDOWN()  0x100
define WM_KEYUP()  0x101
define WM_CHAR()  0x102
define WM_DEADCHAR()  0x103
define WM_SYSKEYDOWN()  0x104
define WM_SYSKEYUP()  0x105
define WM_SYSCHAR()  0x106
define WM_SYSDEADCHAR()  0x107
define WM_KEYLAST()  0x108
define WM_INITDIALOG()  0x110
define WM_COMMAND()  0x111
define WM_SYSCOMMAND()  0x112
define WM_TIMER()  0x113
define WM_HSCROLL()  0x114
define WM_VSCROLL()  0x115
define WM_INITMENU()  0x116
define WM_INITMENUPOPUP()  0x117
define WM_MENUSELECT()  0x11F
define WM_MENUCHAR()  0x120
define WM_ENTERIDLE()  0x121
define WM_CTLCOLORMSGBOX()  0x132
define WM_CTLCOLOREDIT()  0x133
define WM_CTLCOLORLISTBOX()  0x134
define WM_CTLCOLORBTN()  0x135
define WM_CTLCOLORDLG()  0x136
define WM_CTLCOLORSCROLLBAR()  0x137
define WM_CTLCOLORSTATIC()  0x138
define WM_MOUSEFIRST()  0x200
define WM_MOUSEMOVE()  0x200
define WM_LBUTTONDOWN()  0x201
define WM_LBUTTONUP()  0x202
define WM_LBUTTONDBLCLK()  0x203
define WM_RBUTTONDOWN()  0x204
define WM_RBUTTONUP()  0x205
define WM_RBUTTONDBLCLK()  0x206
define WM_MBUTTONDOWN()  0x207
define WM_MBUTTONUP()  0x208
define WM_MBUTTONDBLCLK()  0x209
define WM_MOUSELAST()  0x209
define WM_PARENTNOTIFY()  0x210
define WM_ENTERMENULOOP()  0x211
define WM_EXITMENULOOP()  0x212
define WM_MDICREATE()  0x220
define WM_MDIDESTROY()  0x221
define WM_MDIACTIVATE()  0x222
define WM_MDIRESTORE()  0x223
define WM_MDINEXT()  0x224
define WM_MDIMAXIMIZE()  0x225
define WM_MDITILE()  0x226
define WM_MDICASCADE()  0x227
define WM_MDIICONARRANGE()  0x228
define WM_MDIGETACTIVE()  0x229
define WM_MDISETMENU()  0x230
define WM_DROPFILES()  0x233
define WM_MDIREFRESHMENU()  0x234
define WM_CUT()  0x300
define WM_COPY()  0x301
define WM_PASTE()  0x302
define WM_CLEAR()  0x303
define WM_UNDO()  0x304
define WM_RENDERFORMAT()  0x305
define WM_RENDERALLFORMATS()  0x306
define WM_DESTROYCLIPBOARD()  0x307
define WM_DRAWCLIPBOARD()  0x308
define WM_PAINTCLIPBOARD()  0x309
define WM_VSCROLLCLIPBOARD()  0x30A
define WM_SIZECLIPBOARD()  0x30B
define WM_ASKCBFORMATNAME()  0x30C
define WM_CHANGECBCHAIN()  0x30D
define WM_HSCROLLCLIPBOARD()  0x30E
define WM_QUERYNEWPALETTE()  0x30F
define WM_PALETTEISCHANGING()  0x310
define WM_PALETTECHANGED()  0x311
define WM_HOTKEY()  0x312
define WM_PRINT()  0x317
define WM_PRINTCLIENT()  0x318
define WM_PENWINFIRST()  0x380
define WM_PENWINLAST()  0x38F
define ST_BEGINSWP()  0
define ST_ENDSWP()  1
define HTERROR()  -2
define HTTRANSPARENT()  -1
define HTNOWHERE()  0
define HTCLIENT()  1
define HTCAPTION()  2
define HTSYSMENU()  3
define HTGROWBOX()  4
define HTSIZE()  HTGROWBOX
define HTMENU()  5
define HTHSCROLL()  6
define HTVSCROLL()  7
define HTMINBUTTON()  8
define HTMAXBUTTON()  9
define HTLEFT()  10
define HTRIGHT()  11
define HTTOP()  12
define HTTOPLEFT()  13
define HTTOPRIGHT()  14
define HTBOTTOM()  15
define HTBOTTOMLEFT()  16
define HTBOTTOMRIGHT()  17
define HTBORDER()  18
define HTREDUCE()  HTMINBUTTON
define HTZOOM()  HTMAXBUTTON
define HTSIZEFIRST()  HTLEFT
define HTSIZELAST()  HTBOTTOMRIGHT
define HTOBJECT()  19
define HTCLOSE()  20
define HTHELP()  21
define SMTO_NORMAL()  0x0
define SMTO_BLOCK()  0x1
define SMTO_ABORTIFHUNG()  0x2
define SMTO_NOTIMEOUTIFNOTHUNG()  8
define MA_ACTIVATE()  1
define MA_ACTIVATEANDEAT()  2
define MA_NOACTIVATE()  3
define MA_NOACTIVATEANDEAT()  4
define SIZE_RESTORED()  0
define SIZE_MINIMIZED()  1
define SIZE_MAXIMIZED()  2
define SIZE_MAXSHOW()  3
define SIZE_MAXHIDE()  4
define SIZENORMAL()  SIZE_RESTORED
define SIZEICONIC()  SIZE_MINIMIZED
define SIZEFULLSCREEN()  SIZE_MAXIMIZED
define SIZEZOOMSHOW()  SIZE_MAXSHOW
define SIZEZOOMHIDE()  SIZE_MAXHIDE
define WVR_ALIGNTOP()  0x10
define WVR_ALIGNLEFT()  0x20
define WVR_ALIGNBOTTOM()  0x40
define WVR_ALIGNRIGHT()  0x80
define WVR_HREDRAW()  0x100
define WVR_VREDRAW()  0x200
define WVR_REDRAW()  WVR_HREDRAW | WVR_VREDRAW
define WVR_VALIDRECTS()  0x400
define MK_LBUTTON()  0x1
define MK_RBUTTON()  0x2
define MK_SHIFT()  0x4
define MK_CONTROL()  0x8
define MK_MBUTTON()  0x10
define WS_OVERLAPPED()  0x0
define WS_POPUP()  0x80000000
define WS_CHILD()  0x40000000
define WS_MINIMIZE()  0x20000000
define WS_VISIBLE()  0x10000000
define WS_DISABLED()  0x8000000
define WS_CLIPSIBLINGS()  0x4000000
define WS_CLIPCHILDREN()  0x2000000
define WS_MAXIMIZE()  0x1000000
define WS_CAPTION()  0x0C00000
define WS_BORDER()  0x800000
define WS_DLGFRAME()  0x400000
define WS_VSCROLL()  0x200000
define WS_HSCROLL()  0x100000
define WS_SYSMENU()  0x80000
define WS_THICKFRAME()  0x40000
define WS_GROUP()  0x20000
define WS_TABSTOP()  0x10000
define WS_MINIMIZEBOX()  0x20000
define WS_MAXIMIZEBOX()  0x10000
define WS_TILED()  WS_OVERLAPPED
define WS_ICONIC()  WS_MINIMIZE
define WS_SIZEBOX()  WS_THICKFRAME
define WS_OVERLAPPEDWINDOW()  WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX
define WS_TILEDWINDOW()  WS_OVERLAPPEDWINDOW
define WS_POPUPWINDOW()  WS_POPUP | WS_BORDER | WS_SYSMENU
define WS_CHILDWINDOW()  WS_CHILD
define WS_EX_DLGMODALFRAME()  0x1
define WS_EX_NOPARENTNOTIFY()  0x4
define WS_EX_TOPMOST()  0x8
define WS_EX_ACCEPTFILES()  0x10
define WS_EX_TRANSPARENT()  0x20
define WS_EX_MDICHILD()  0x00000040
define WS_EX_TOOLWINDOW()  0x00000080
define WS_EX_WINDOWEDGE()  0x00000100
define WS_EX_CLIENTEDGE()  0x00000200
define WS_EX_CONTEXTHELP()  0x00000400
define WS_EX_RIGHT()  0x00001000
define WS_EX_LEFT()  0x00000000
define WS_EX_RTLREADING()  0x00002000
define WS_EX_LTRREADING()  0x00000000
define WS_EX_LEFTSCROLLBAR()  0x00004000
define WS_EX_RIGHTSCROLLBAR()  0x00000000
define WS_EX_CONTROLPARENT()  0x00010000
define WS_EX_STATICEDGE()  0x00020000
define WS_EX_APPWINDOW()  0x00040000
define WS_EX_OVERLAPPEDWINDOW()  WS_EX_WINDOWEDGE | WS_EX_CLIENTEDGE
define WS_EX_PALETTEWINDOW()  WS_EX_WINDOWEDGE | WS_EX_TOOLWINDOW | WS_EX_TOPMOST
define CS_VREDRAW()  0x1
define CS_HREDRAW()  0x2
define CS_KEYCVTWINDOW()  0x4
define CS_DBLCLKS()  0x8
define CS_OWNDC()  0x20
define CS_CLASSDC()  0x40
define CS_PARENTDC()  0x80
define CS_NOKEYCVT()  0x100
define CS_NOCLOSE()  0x200
define CS_SAVEBITS()  0x800
define CS_BYTEALIGNCLIENT()  0x1000
define CS_BYTEALIGNWINDOW()  0x2000
define CS_PUBLICCLASS()  0x4000
define CS_GLOBALCLASS()  CS_PUBLICCLASS
define CS_IME()  0x10000
define CF_TEXT()  1
define CF_BITMAP()  2
define CF_METAFILEPICT()  3
define CF_SYLK()  4
define CF_DIF()  5
define CF_TIFF()  6
define CF_OEMTEXT()  7
define CF_DIB()  8
define CF_PALETTE()  9
define CF_PENDATA()  10
define CF_RIFF()  11
define CF_WAVE()  12
define CF_UNICODETEXT()  13
define CF_ENHMETAFILE()  14
define CF_HDROP()  15
define CF_LOCALE()  16
define CF_MAX()  17
define CF_OWNERDISPLAY()  0x80
define CF_DSPTEXT()  0x81
define CF_DSPBITMAP()  0x82
define CF_DSPMETAFILEPICT()  0x83
define CF_DSPENHMETAFILE()  0x8E
define CF_PRIVATEFIRST()  0x200
define CF_PRIVATELAST()  0x2FF
define CF_GDIOBJFIRST()  0x300
define CF_GDIOBJLAST()  0x3FF
define FVIRTKEY()  0x1
define FNOINVERT()  0x2
define FSHIFT()  0x4
define FCONTROL()  0x8
define FALT()  0x10
define WPF_SETMINPOSITION()  0x1
define WPF_RESTORETOMAXIMIZED()  0x2
define ODT_MENU()  1
define ODT_LISTBOX()  2
define ODT_COMBOBOX()  3
define ODT_BUTTON()  4
define ODT_STATIC()  5
define ODA_DRAWENTIRE()  0x1
define ODA_SELECT()  0x2
define ODA_FOCUS()  0x4
define ODS_SELECTED()  0x1
define ODS_GRAYED()  0x2
define ODS_DISABLED()  0x4
define ODS_CHECKED()  0x8
define ODS_FOCUS()  0x10
define ODS_DEFAULT()  0x20
define ODS_COMBOBOXEDIT()  0x1000
define ODS_HOTLIGHT()  0x40
define ODS_INACTIVE()  0x80
define PM_NOREMOVE()  0x0
define PM_REMOVE()  0x1
define PM_NOYIELD()  0x2
define MOD_ALT()  0x1
define MOD_CONTROL()  0x2
define MOD_SHIFT()  0x4
define MOD_WIN()  0x8
define IDHOT_SNAPWINDOW()  -1
define IDHOT_SNAPDESKTOP()  -2
define EWX_LOGOFF()  0
define EWX_SHUTDOWN()  1
define EWX_REBOOT()  2
define EWX_FORCE()  4
define EWX_POWEROFF()  8
define EWX_FORCEIFHUNG()  0x10
define EW_RESTARTWINDOWS()  0x42
define READAPI()  0
define WRITEAPI()  1
define READ_WRITE()  2
define HWND_BROADCAST()  0x0FFFF
define CW_USEDEFAULT()  0x80000000
define HWND_MESSAGE()  -3
define HWND_DESKTOP()  0
define SWP_NOSIZE()  0x1
define SWP_NOMOVE()  0x2
define SWP_NOZORDER()  0x4
define SWP_NOREDRAW()  0x8
define SWP_NOACTIVATE()  0x10
define SWP_FRAMECHANGED()  0x20
define SWP_SHOWWINDOW()  0x40
define SWP_HIDEWINDOW()  0x80
define SWP_NOCOPYBITS()  0x100
define SWP_NOOWNERZORDER()  0x200
define SWP_DRAWFRAME()  SWP_FRAMECHANGED
define SWP_NOREPOSITION()  SWP_NOOWNERZORDER
define SWP_DEFERERASE()  0x2000
define SWP_ASYNCWINDOWPOS()  0x4000
define HWND_TOP()  0
define HWND_BOTTOM()  1
define HWND_TOPMOST()  -1
define HWND_NOTOPMOST()  -2
define DLGWINDOWEXTRA()  30
define KEYEVENTF_EXTENDEDKEY()  0x1
define KEYEVENTF_KEYUP()  0x2
define MOUSEEVENTF_MOVE()  0x1
define MOUSEEVENTF_LEFTDOWN()  0x2
define MOUSEEVENTF_LEFTUP()  0x4
define MOUSEEVENTF_RIGHTDOWN()  0x8
define MOUSEEVENTF_RIGHTUP()  0x10
define MOUSEEVENTF_MIDDLEDOWN()  0x20
define MOUSEEVENTF_MIDDLEUP()  0x40
define MOUSEEVENTF_WHEEL()  0x800
define MOUSEEVENTF_ABSOLUTE()  0x8000
define QS_KEY()  0x1
define QS_MOUSEMOVE()  0x2
define QS_MOUSEBUTTON()  0x4
define QS_POSTMESSAGE()  0x8
define QS_TIMER()  0x10
define QS_PAINT()  0x20
define QS_SENDMESSAGE()  0x40
define QS_HOTKEY()  0x80
define QS_ALLPOSTMESSAGE()  0x100
define QS_MOUSE()  QS_MOUSEMOVE | QS_MOUSEBUTTON
define QS_INPUT()  QS_MOUSE | QS_KEY
define QS_ALLEVENTS()  QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY
define QS_ALLINPUT()  QS_SENDMESSAGE | QS_PAINT | QS_TIMER | QS_POSTMESSAGE | QS_MOUSEBUTTON | QS_MOUSEMOVE | QS_HOTKEY | QS_KEY
define SM_CXSCREEN()  0
define SM_CYSCREEN()  1
define SM_CXVSCROLL()  2
define SM_CYHSCROLL()  3
define SM_CYCAPTION()  4
define SM_CXBORDER()  5
define SM_CYBORDER()  6
define SM_CXDLGFRAME()  7
define SM_CYDLGFRAME()  8
define SM_CYVTHUMB()  9
define SM_CXHTHUMB()  10
define SM_CXICON()  11
define SM_CYICON()  12
define SM_CXCURSOR()  13
define SM_CYCURSOR()  14
define SM_CYMENU()  15
define SM_CXFULLSCREEN()  16
define SM_CYFULLSCREEN()  17
define SM_CYKANJIWINDOW()  18
define SM_MOUSEPRESENT()  19
define SM_CYVSCROLL()  20
define SM_CXHSCROLL()  21
define SM_DEBUG()  22
define SM_SWAPBUTTON()  23
define SM_RESERVED1()  24
define SM_RESERVED2()  25
define SM_RESERVED3()  26
define SM_RESERVED4()  27
define SM_CXMIN()  28
define SM_CYMIN()  29
define SM_CXSIZE()  30
define SM_CYSIZE()  31
define SM_CXFRAME()  32
define SM_CYFRAME()  33
define SM_CXMINTRACK()  34
define SM_CYMINTRACK()  35
define SM_CXDOUBLECLK()  36
define SM_CYDOUBLECLK()  37
define SM_CXICONSPACING()  38
define SM_CYICONSPACING()  39
define SM_MENUDROPALIGNMENT()  40
define SM_PENWINDOWS()  41
define SM_DBCSENABLED()  42
define SM_CMOUSEBUTTONS()  43
define SM_CXFIXEDFRAME()  SM_CXDLGFRAME
define SM_CYFIXEDFRAME()  SM_CYDLGFRAME
define SM_CXSIZEFRAME()  SM_CXFRAME
define SM_CYSIZEFRAME()  SM_CYFRAME
define SM_SECURE()  44
define SM_CXEDGE()  45
define SM_CYEDGE()  46
define SM_CXMINSPACING()  47
define SM_CYMINSPACING()  48
define SM_CXSMICON()  49
define SM_CYSMICON()  50
define SM_CYSMCAPTION()  51
define SM_CXSMSIZE()  52
define SM_CYSMSIZE()  53
define SM_CXMENUSIZE()  54
define SM_CYMENUSIZE()  55
define SM_ARRANGE()  56
define SM_CXMINIMIZED()  57
define SM_CYMINIMIZED()  58
define SM_CXMAXTRACK()  59
define SM_CYMAXTRACK()  60
define SM_CXMAXIMIZED()  61
define SM_CYMAXIMIZED()  62
define SM_NETWORK()  63
define SM_CLEANBOOT()  67
define SM_CXDRAG()  68
define SM_CYDRAG()  69
define SM_SHOWSOUNDS()  70
define SM_CXMENUCHECK()  71
define SM_CYMENUCHECK()  72
define SM_SLOWMACHINE()  73
define SM_MIDEASTENABLED()  74
define SM_MOUSEWHEELPRESENT()  75
define SM_CMETRICS()  75
define SM_XVIRTUALSCREEN()  76
define SM_YVIRTUALSCREEN()  77
define SM_CXVIRTUALSCREEN()  78
define SM_CYVIRTUALSCREEN()  79
define SM_CMONITORS()  80
define SM_SAMEDISPLAYFORMAT()  81
define TPM_LEFTBUTTON()  0x0
define TPM_RIGHTBUTTON()  0x2
define TPM_LEFTALIGN()  0x0
define TPM_CENTERALIGN()  0x4
define TPM_RIGHTALIGN()  0x8
define TPM_TOPALIGN()  0
define TPM_VCENTERALIGN()  0x10
define TPM_BOTTOMALIGN()  0x20
define TPM_HORIZONTAL()  0
define TPM_VERTICAL()  0x40
define TPM_NONOTIFY()  0x80
define TPM_RETURNCMD()  0x100
define TPM_RECURSE()  1
define DT_TOP()  0x0
define DT_LEFT()  0x0
define DT_CENTER()  0x1
define DT_RIGHT()  0x2
define DT_VCENTER()  0x4
define DT_BOTTOM()  0x8
define DT_WORDBREAK()  0x10
define DT_SINGLELINE()  0x20
define DT_EXPANDTABS()  0x40
define DT_TABSTOP()  0x80
define DT_NOCLIP()  0x100
define DT_EXTERNALLEADING()  0x200
define DT_CALCRECT()  0x400
define DT_NOPREFIX()  0x800
define DT_INTERNAL()  0x1000
define DT_EDITCONTROL()  0x2000
define DT_PATH_ELLIPSIS()  0x4000
define DT_END_ELLIPSIS()  0x8000
define DT_MODIFYSTRING()  0x10000
define DT_RTLREADING()  0x20000
define DT_WORD_ELLIPSIS()  0x40000
define DCX_WINDOW()  0x1
define DCX_CACHE()  0x2
define DCX_NORESETATTRS()  0x4
define DCX_CLIPCHILDREN()  0x8
define DCX_CLIPSIBLINGS()  0x10
define DCX_PARENTCLIP()  0x20
define DCX_EXCLUDERGN()  0x40
define DCX_INTERSECTRGN()  0x80
define DCX_EXCLUDEUPDATE()  0x100
define DCX_INTERSECTUPDATE()  0x200
define DCX_LOCKWINDOWUPDATE()  0x400
define DCX_NORECOMPUTE()  0x100000
define DCX_VALIDATE()  0x200000
define RDW_INVALIDATE()  0x1
define RDW_INTERNALPAINT()  0x2
define RDW_ERASE()  0x4
define RDW_VALIDATE()  0x8
define RDW_NOINTERNALPAINT()  0x10
define RDW_NOERASE()  0x20
define RDW_NOCHILDREN()  0x40
define RDW_ALLCHILDREN()  0x80
define RDW_UPDATENOW()  0x100
define RDW_ERASENOW()  0x200
define RDW_FRAME()  0x400
define RDW_NOFRAME()  0x800
define SW_SCROLLCHILDREN()  0x1
define SW_INVALIDATE()  0x2
define SW_ERASE()  0x4
define SW_SMOOTHSCROLL()  0x10
define ESB_ENABLE_BOTH()  0x0
define ESB_DISABLE_BOTH()  0x3
define ESB_DISABLE_LEFT()  0x1
define ESB_DISABLE_RIGHT()  0x2
define ESB_DISABLE_UP()  0x1
define ESB_DISABLE_DOWN()  0x2
define ESB_DISABLE_LTUP()  ESB_DISABLE_LEFT
define ESB_DISABLE_RTDN()  ESB_DISABLE_RIGHT
define MB_OK()  0x0
define MB_OKCANCEL()  0x1
define MB_ABORTRETRYIGNORE()  0x2
define MB_YESNOCANCEL()  0x3
define MB_YESNO()  0x4
define MB_RETRYCANCEL()  0x5
define MB_ICONHAND()  0x10
define MB_ICONQUESTION()  0x20
define MB_ICONEXCLAMATION()  0x30
define MB_ICONASTERISK()  0x40
define MB_USERICON()  0x80
define MB_ICONERROR()  MB_ICONHAND
define MB_ICONINFORMATION()  MB_ICONASTERISK
define MB_ICONSTOP()  MB_ICONHAND
define MB_ICONWARNING()  MB_ICONEXCLAMATION
define MB_DEFBUTTON1()  0x0
define MB_DEFBUTTON2()  0x100
define MB_DEFBUTTON3()  0x200
define MB_DEFBUTTON4()  0x300
define MB_APPLMODAL()  0x0
define MB_SYSTEMMODAL()  0x1000
define MB_TASKMODAL()  0x2000
define MB_HELP()  0x4000
define MB_NOFOCUS()  0x8000
define MB_SETFOREGROUND()  0x10000
define MB_DEFAULT_DESKTOP_ONLY()  0x20000
define MB_TYPEMASK()  0x0F
define MB_ICONMASK()  0x0F0
define MB_DEFMASK()  0x0F00
define MB_MODEMASK()  0x3000
define MB_MISCMASK()  0x0C000
define MB_TOPMOST()  0x40000
define MB_RIGHT()  0x80000
define MB_RTLREADING()  0x100000
define MB_SERVICE_NOTIFICATION()  0x200000
define CTLCOLOR_MSGBOX()  0
define CTLCOLOR_EDIT()  1
define CTLCOLOR_LISTBOX()  2
define CTLCOLOR_BTN()  3
define CTLCOLOR_DLG()  4
define CTLCOLOR_SCROLLBAR()  5
define CTLCOLOR_STATIC()  6
define CTLCOLOR_MAX()  8
define COLOR_SCROLLBAR()  0
define COLOR_BACKGROUND()  1
define COLOR_ACTIVECAPTION()  2
define COLOR_INACTIVECAPTION()  3
define COLOR_MENU()  4
define COLOR_WINDOW()  5
define COLOR_WINDOWFRAME()  6
define COLOR_MENUTEXT()  7
define COLOR_WINDOWTEXT()  8
define COLOR_CAPTIONTEXT()  9
define COLOR_ACTIVEBORDER()  10
define COLOR_INACTIVEBORDER()  11
define COLOR_APPWORKSPACE()  12
define COLOR_HIGHLIGHT()  13
define COLOR_HIGHLIGHTTEXT()  14
define COLOR_BTNFACE()  15
define COLOR_BTNSHADOW()  16
define COLOR_GRAYTEXT()  17
define COLOR_BTNTEXT()  18
define COLOR_INACTIVECAPTIONTEXT()  19
define COLOR_BTNHIGHLIGHT()  20
define COLOR_3DDKSHADOW()  21
define COLOR_3DLIGHT()  22
define COLOR_INFOTEXT()  23
define COLOR_INFOBK()  24
define COLOR_DESKTOP()  COLOR_BACKGROUND
define COLOR_3DFACE()  COLOR_BTNFACE
define COLOR_3DSHADOW()  COLOR_BTNSHADOW
define COLOR_3DHIGHLIGHT()  COLOR_BTNHIGHLIGHT
define COLOR_3DHILIGHT()  COLOR_BTNHIGHLIGHT
define COLOR_BTNHILIGHT()  COLOR_BTNHIGHLIGHT
define COLOR_HOTLIGHT()  26
define COLOR_GRADIENTACTIVECAPTION()  27
define COLOR_GRADIENTINACTIVECAPTION()  28
define GW_HWNDFIRST()  0
define GW_HWNDLAST()  1
define GW_HWNDNEXT()  2
define GW_HWNDPREV()  3
define GW_OWNER()  4
define GW_CHILD()  5
define GW_MAX()  5
define GW_ENABLEDPOPUP()  6
define MF_INSERT()  0x0
define MF_CHANGE()  0x80
define MF_APPEND()  0x100
define MF_DELETE()  0x200
define MF_REMOVE()  0x1000
define MF_BYCOMMAND()  0x0
define MF_BYPOSITION()  0x400
define MF_SEPARATOR()  0x800
define MF_ENABLED()  0x0
define MF_GRAYED()  0x1
define MF_DISABLED()  0x2
define MF_UNCHECKED()  0x0
define MF_CHECKED()  0x8
define MF_USECHECKBITMAPS()  0x200
define MF_STRING()  0x0
define MF_BITMAP()  0x4
define MF_OWNERDRAW()  0x100
define MF_POPUP()  0x10
define MF_MENUBARBREAK()  0x20
define MF_MENUBREAK()  0x40
define MF_UNHILITE()  0x0
define MF_HILITE()  0x80
define MF_SYSMENU()  0x2000
define MF_HELP()  0x4000
define MF_MOUSESELECT()  0x8000
define MF_END()  0x80
define MF_DEFAULT()  0x1000
define MF_RIGHTJUSTIFY()  0x4000
define SC_SIZE()  0x0F000
define SC_MOVE()  0x0F010
define SC_MINIMIZE()  0x0F020
define SC_MAXIMIZE()  0x0F030
define SC_NEXTWINDOW()  0x0F040
define SC_PREVWINDOW()  0x0F050
define SC_CLOSE()  0x0F060
define SC_VSCROLL()  0x0F070
define SC_HSCROLL()  0x0F080
define SC_MOUSEMENU()  0x0F090
define SC_KEYMENU()  0x0F100
define SC_ARRANGE()  0x0F110
define SC_RESTORE()  0x0F120
define SC_TASKLIST()  0x0F130
define SC_SCREENSAVE()  0x0F140
define SC_HOTKEY()  0x0F150
define SC_ICON()  SC_MINIMIZE
define SC_ZOOM()  SC_MAXIMIZE
define SC_DEFAULT()  0x0F160
define SC_MONITORPOWER()  0x0F170
define SC_CONTEXTHELP()  0x0F180
define SC_SEPARATOR()  0x0F00F
define IDC_ARROW()  32512
define IDC_IBEAM()  32513
define IDC_WAIT()  32514
define IDC_CROSS()  32515
define IDC_UPARROW()  32516
define IDC_SIZE()  32640
define IDC_ICON()  32641
define IDC_SIZENWSE()  32642
define IDC_SIZENESW()  32643
define IDC_SIZEWE()  32644
define IDC_SIZENS()  32645
define IDC_SIZEALL()  32646
define IDC_NO()  32648
define IDC_HAND()  32649
define IDC_APPSTARTING()  32650
define IDC_HELP()  32651
define OBM_CLOSE()  32754
define OBM_UPARROW()  32753
define OBM_DNARROW()  32752
define OBM_RGARROW()  32751
define OBM_LFARROW()  32750
define OBM_REDUCE()  32749
define OBM_ZOOM()  32748
define OBM_RESTORE()  32747
define OBM_REDUCED()  32746
define OBM_ZOOMD()  32745
define OBM_RESTORED()  32744
define OBM_UPARROWD()  32743
define OBM_DNARROWD()  32742
define OBM_RGARROWD()  32741
define OBM_LFARROWD()  32740
define OBM_MNARROW()  32739
define OBM_COMBO()  32738
define OBM_UPARROWI()  32737
define OBM_DNARROWI()  32736
define OBM_RGARROWI()  32735
define OBM_LFARROWI()  32734
define OBM_OLD_CLOSE()  32767
define OBM_SIZE()  32766
define OBM_OLD_UPARROW()  32765
define OBM_OLD_DNARROW()  32764
define OBM_OLD_RGARROW()  32763
define OBM_OLD_LFARROW()  32762
define OBM_BTSIZE()  32761
define OBM_CHECK()  32760
define OBM_CHECKBOXES()  32759
define OBM_BTNCORNERS()  32758
define OBM_OLD_REDUCE()  32757
define OBM_OLD_ZOOM()  32756
define OBM_OLD_RESTORE()  32755
define OCR_NORMAL()  32512
define OCR_IBEAM()  32513
define OCR_WAIT()  32514
define OCR_CROSS()  32515
define OCR_UP()  32516
define OCR_SIZE()  32640
define OCR_ICON()  32641
define OCR_SIZENWSE()  32642
define OCR_SIZENESW()  32643
define OCR_SIZEWE()  32644
define OCR_SIZENS()  32645
define OCR_SIZEALL()  32646
define OCR_ICOCUR()  32647
define OCR_NO()  32648
define OCR_HAND()  32649
define OCR_APPSTARTING()  32650
define OIC_SAMPLE()  32512
define OIC_HAND()  32513
define OIC_QUES()  32514
define OIC_BANG()  32515
define OIC_NOTE()  32516
define OIC_WINLOGO()  32517
define OIC_WARNING()  OIC_BANG
define OIC_ERROR()  OIC_HAND
define OIC_INFORMATION()  OIC_NOTE
define ORD_LANGDRIVER()  1
define IDI_APPLICATION()  32512
define IDI_HAND()  32513
define IDI_QUESTION()  32514
define IDI_EXCLAMATION()  32515
define IDI_ASTERISK()  32516
define IDI_WINLOGO()  32517
define IDI_WARNING()  IDI_EXCLAMATION
define IDI_ERROR()  IDI_HAND
define IDI_INFORMATION()  IDI_ASTERISK
define IDOK()  1
define IDCANCEL()  2
define IDABORT()  3
define IDRETRY()  4
define IDIGNORE()  5
define IDYES()  6
define IDNO()  7
define IDCLOSE()  8
define IDHELP()  9
define ES_LEFT()  0x0
define ES_CENTER()  0x1
define ES_RIGHT()  0x2
define ES_MULTILINE()  0x4
define ES_UPPERCASE()  0x8
define ES_LOWERCASE()  0x10
define ES_PASSWORD()  0x20
define ES_AUTOVSCROLL()  0x40
define ES_AUTOHSCROLL()  0x80
define ES_NOHIDESEL()  0x100
define ES_OEMCONVERT()  0x400
define ES_READONLY()  0x800
define ES_WANTRETURN()  0x1000
define ES_NUMBER()  0x2000

define WB_LEFT()  0
define WB_RIGHT()  1
define WB_ISDELIMITER()  2
define BS_PUSHBUTTON()  0x0
define BS_DEFPUSHBUTTON()  0x1
define BS_CHECKBOX()  0x2
define BS_AUTOCHECKBOX()  0x3
define BS_RADIOBUTTON()  0x4
define BS_3STATE()  0x5
define BS_AUTO3STATE()  0x6
define BS_GROUPBOX()  0x7
define BS_USERBUTTON()  0x8
define BS_AUTORADIOBUTTON()  0x9
define BS_OWNERDRAW()  0x0B
define BS_LEFTTEXT()  0x20
define BS_BITMAP()  0x80
define BS_ICON()  0x40
define BS_TEXT()  0
define BS_LEFT()  0x100
define BS_RIGHT()  0x200
define BS_CENTER()  0x300
define BS_TOP()  0x400
define BS_BOTTOM()  0x800
define BS_VCENTER()  0x0C00
define BS_PUSHLIKE()  0x1000
define BS_MULTILINE()  0x2000
define BS_NOTIFY()  0x4000
define BS_FLAT()  0x8000
define BS_RIGHTBUTTON()  BS_LEFTTEXT
define BN_CLICKED()  0
define BN_PAINT()  1
define BN_HILITE()  2
define BN_UNHILITE()  3
define BN_DISABLE()  4
define BN_DOUBLECLICKED()  5
define BN_SETFOCUS()  6
define BN_KILLFOCUS()  7
define BN_PUSHED()  BN_HILITE
define BN_UNPUSHED()  BN_UNHILITE
define BN_DBLCLK()  BN_DOUBLECLICKED
define BST_UNCHECKED()  0x00
define BST_CHECKED()  1
define BST_INDETERMINATE()  2
define BST_PUSHED()  4
define BST_FOCUS()  8
define BM_GETCHECK()  0x0F0
define BM_SETCHECK()  0x0F1
define BM_GETSTATE()  0x0F2
define BM_SETSTATE()  0x0F3
define BM_SETSTYLE()  0x0F4
define BM_CLICK()  0x0F5
define BM_GETIMAGE()  0x0F6
define BM_SETIMAGE()  0x0F7
define SS_LEFT()  0x0
define SS_CENTER()  0x1
define SS_RIGHT()  0x2
define SS_ICON()  0x3
define SS_BLACKRECT()  0x4
define SS_GRAYRECT()  0x5
define SS_WHITERECT()  0x6
define SS_BLACKFRAME()  0x7
define SS_GRAYFRAME()  0x8
define SS_WHITEFRAME()  0x9
define SS_USERITEM()  0x0A
define SS_SIMPLE()  0x0B
define SS_LEFTNOWORDWRAP()  0x0C
define SS_NOPREFIX()  0x80
define STM_SETICON()  0x170
define STM_GETICON()  0x171
define STM_MSGMAX()  0x172
define WC_DIALOG()  0x8002
define DWL_MSGRESULT()  0
define DWL_DLGPROC()  4
define DWL_USER()  8
define DDL_READWRITE()  0x0
define DDL_READONLY()  0x1
define DDL_HIDDEN()  0x2
define DDL_SYSTEM()  0x4
define DDL_DIRECTORY()  0x10
define DDL_ARCHIVE()  0x20
define DDL_POSTMSGS()  0x2000
define DDL_DRIVES()  0x4000
define DDL_EXCLUSIVE()  0x8000
define DS_ABSALIGN()  0x0001
define DS_SYSMODAL()  0x0002
define DS_3DLOOK()  0x0004
define DS_FIXEDSYS()  0x0008
define DS_NOFAILCREATE()  0x0010
define DS_LOCALEDIT()  0x0020
define DS_SETFONT()  0x0040
define DS_MODALFRAME()  0x0080
define DS_NOIDLEMSG()  0x0100
define DS_SETFOREGROUND()  0x0200
define DS_CONTROL()  0x0400
define DS_CENTER()  0x0800
define DS_CENTERMOUSE()  0x1000
define DS_CONTEXTHELP()  0x2000
define DM_GETDEFID()  WM_USER + 0
define DM_SETDEFID()  WM_USER + 1
define DC_HASDEFID()  0x534
define DLGC_WANTARROWS()  0x1
define DLGC_WANTTAB()  0x2
define DLGC_WANTALLKEYS()  0x4
define DLGC_WANTMESSAGE()  0x4
define DLGC_HASSETSEL()  0x8
define DLGC_DEFPUSHBUTTON()  0x10
define DLGC_UNDEFPUSHBUTTON()  0x20
define DLGC_RADIOBUTTON()  0x40
define DLGC_WANTCHARS()  0x80
define DLGC_STATIC()  0x100
define DLGC_BUTTON()  0x2000
define LB_CTLCODE()  0
define LB_OKAY()  0
define LB_ERR()  -1
define LB_ERRSPACE()  -2
define LBN_ERRSPACE()  -2
define LBN_SELCHANGE()  1
define LBN_DBLCLK()  2
define LBN_SELCANCEL()  3
define LBN_SETFOCUS()  4
define LBN_KILLFOCUS()  5
define LB_ADDSTRING()  0x180
define LB_INSERTSTRING()  0x181
define LB_DELETESTRING()  0x182
define LB_SELITEMRANGEEX()  0x183
define LB_RESETCONTENT()  0x184
define LB_SETSEL()  0x185
define LB_SETCURSEL()  0x186
define LB_GETSEL()  0x187
define LB_GETCURSEL()  0x188
define LB_GETTEXT()  0x189
define LB_GETTEXTLEN()  0x18A
define LB_GETCOUNT()  0x18B
define LB_SELECTSTRING()  0x18C
define LB_DIR()  0x18D
define LB_GETTOPINDEX()  0x18E
define LB_FINDSTRING()  0x18F
define LB_GETSELCOUNT()  0x190
define LB_GETSELITEMS()  0x191
define LB_SETTABSTOPS()  0x192
define LB_GETHORIZONTALEXTENT()  0x193
define LB_SETHORIZONTALEXTENT()  0x194
define LB_SETCOLUMNWIDTH()  0x195
define LB_ADDFILE()  0x196
define LB_SETTOPINDEX()  0x197
define LB_GETITEMRECT()  0x198
define LB_GETITEMDATA()  0x199
define LB_SETITEMDATA()  0x19A
define LB_SELITEMRANGE()  0x19B
define LB_SETANCHORINDEX()  0x19C
define LB_GETANCHORINDEX()  0x19D
define LB_SETCARETINDEX()  0x19E
define LB_GETCARETINDEX()  0x19F
define LB_SETITEMHEIGHT()  0x1A0
define LB_GETITEMHEIGHT()  0x1A1
define LB_FINDSTRINGEXACT()  0x1A2
define LB_SETLOCALE()  0x1A5
define LB_GETLOCALE()  0x1A6
define LB_SETCOUNT()  0x1A7
define LB_MSGMAX()  0x1A8
define LBS_NOTIFY()  0x1
define LBS_SORT()  0x2
define LBS_NOREDRAW()  0x4
define LBS_MULTIPLESEL()  0x8
define LBS_OWNERDRAWFIXED()  0x10
define LBS_OWNERDRAWVARIABLE()  0x20
define LBS_HASSTRINGS()  0x40
define LBS_USETABSTOPS()  0x80
define LBS_NOINTEGRALHEIGHT()  0x100
define LBS_MULTICOLUMN()  0x200
define LBS_WANTKEYBOARDINPUT()  0x400
define LBS_EXTENDEDSEL()  0x800
define LBS_DISABLENOSCROLL()  0x1000
define LBS_NODATA()  0x2000
define LBS_STANDARD()  LBS_NOTIFY | LBS_SORT | WS_VSCROLL | WS_BORDER
define CB_OKAY()  0
define CB_ERR()  -1
define CB_ERRSPACE()  -2
define CBN_ERRSPACE()  -1
define CBN_SELCHANGE()  1
define CBN_DBLCLK()  2
define CBN_SETFOCUS()  3
define CBN_KILLFOCUS()  4
define CBN_EDITCHANGE()  5
define CBN_EDITUPDATE()  6
define CBN_DROPDOWN()  7
define CBN_CLOSEUP()  8
define CBN_SELENDOK()  9
define CBN_SELENDCANCEL()  10
define CBS_SIMPLE()  0x1
define CBS_DROPDOWN()  0x2
define CBS_DROPDOWNLIST()  0x3
define CBS_OWNERDRAWFIXED()  0x10
define CBS_OWNERDRAWVARIABLE()  0x20
define CBS_AUTOHSCROLL()  0x40
define CBS_OEMCONVERT()  0x80
define CBS_SORT()  0x100
define CBS_HASSTRINGS()  0x200
define CBS_NOINTEGRALHEIGHT()  0x400
define CBS_DISABLENOSCROLL()  0x800
define CB_GETEDITSEL()  0x140
define CB_LIMITTEXT()  0x141
define CB_SETEDITSEL()  0x142
define CB_ADDSTRING()  0x143
define CB_DELETESTRING()  0x144
define CB_DIR()  0x145
define CB_GETCOUNT()  0x146
define CB_GETCURSEL()  0x147
define CB_GETLBTEXT()  0x148
define CB_GETLBTEXTLEN()  0x149
define CB_INSERTSTRING()  0x14A
define CB_RESETCONTENT()  0x14B
define CB_FINDSTRING()  0x14C
define CB_SELECTSTRING()  0x14D
define CB_SETCURSEL()  0x14E
define CB_SHOWDROPDOWN()  0x14F
define CB_GETITEMDATA()  0x150
define CB_SETITEMDATA()  0x151
define CB_GETDROPPEDCONTROLRECT()  0x152
define CB_SETITEMHEIGHT()  0x153
define CB_GETITEMHEIGHT()  0x154
define CB_SETEXTENDEDUI()  0x155
define CB_GETEXTENDEDUI()  0x156
define CB_GETDROPPEDSTATE()  0x157
define CB_FINDSTRINGEXACT()  0x158
define CB_SETLOCALE()  0x159
define CB_GETLOCALE()  0x15A
define CB_GETTOPINDEX()  0x15B
define CB_SETTOPINDEX()  0x15C
define CB_GETHORIZONTALEXTENT()  0x15D
define CB_SETHORIZONTALEXTENT()  0x15E
define CB_GETDROPPEDWIDTH()  0x15F
define CB_SETDROPPEDWIDTH()  0x160
define CB_INITSTORAGE()  0x161
define CB_MSGMAX()  0x162
define SBS_HORZ()  0x0
define SBS_VERT()  0x1
define SBS_TOPALIGN()  0x2
define SBS_LEFTALIGN()  0x2
define SBS_BOTTOMALIGN()  0x4
define SBS_RIGHTALIGN()  0x4
define SBS_SIZEBOXTOPLEFTALIGN()  0x2
define SBS_SIZEBOXBOTTOMRIGHTALIGN()  0x4
define SBS_SIZEBOX()  0x8
define SBS_SIZEGRIP()  0x10
define SBM_SETPOS()  0x0E0
define SBM_GETPOS()  0x0E1
define SBM_SETRANGE()  0x0E2
define SBM_SETRANGEREDRAW()  0x0E6
define SBM_GETRANGE()  0x0E3
define SBM_ENABLE_ARROWS()  0x0E4
define MDIS_ALLCHILDSTYLES()  0x1
define MDITILE_VERTICAL()  0x0
define MDITILE_HORIZONTAL()  0x1
define MDITILE_SKIPDISABLED()  0x2
define HELP_CONTEXT()  0x1
define HELP_QUIT()  0x2
define HELP_INDEX()  0x3
define HELP_CONTENTS()  0x3
define HELP_HELPONHELP()  0x4
define HELP_SETINDEX()  0x5
define HELP_SETCONTENTS()  0x5
define HELP_CONTEXTPOPUP()  0x8
define HELP_FORCEFILE()  0x9
define HELP_KEY()  0x101
define HELP_COMMAND()  0x102
define HELP_PARTIALKEY()  0x105
define HELP_MULTIKEY()  0x201
define HELP_SETWINPOS()  0x203
define HELP_CONTEXTMENU()  0x000A
define HELP_FINDER()  0x000B
define HELP_WM_HELP()  0x000C
define HELP_SETPOPUP_POS()  0x000D
define HELP_TCARD()  0x8000
define HELP_TCARD_DATA()  0x0010
define HELP_TCARD_OTHER_CALLER()  0x0011
define IDH_NO_HELP()  28440
define IDH_MISSING_CONTEXT()  28441
define IDH_GENERIC_HELP_BUTTON()  28442
define IDH_OK()  28443
define IDH_CANCEL()  28444
define IDH_HELP()  28445
define SPI_GETBEEP()  1
define SPI_SETBEEP()  2
define SPI_GETMOUSE()  3
define SPI_SETMOUSE()  4
define SPI_GETBORDER()  5
define SPI_SETBORDER()  6
define SPI_GETKEYBOARDSPEED()  10
define SPI_SETKEYBOARDSPEED()  11
define SPI_LANGDRIVER()  12
define SPI_ICONHORIZONTALSPACING()  13
define SPI_GETSCREENSAVETIMEOUT()  14
define SPI_SETSCREENSAVETIMEOUT()  15
define SPI_GETSCREENSAVEACTIVE()  16
define SPI_SETSCREENSAVEACTIVE()  17
define SPI_GETGRIDGRANULARITY()  18
define SPI_SETGRIDGRANULARITY()  19
define SPI_SETDESKWALLPAPER()  20
define SPI_SETDESKPATTERN()  21
define SPI_GETKEYBOARDDELAY()  22
define SPI_SETKEYBOARDDELAY()  23
define SPI_ICONVERTICALSPACING()  24
define SPI_GETICONTITLEWRAP()  25
define SPI_SETICONTITLEWRAP()  26
define SPI_GETMENUDROPALIGNMENT()  27
define SPI_SETMENUDROPALIGNMENT()  28
define SPI_SETDOUBLECLKWIDTH()  29
define SPI_SETDOUBLECLKHEIGHT()  30
define SPI_GETICONTITLELOGFONT()  31
define SPI_SETDOUBLECLICKTIME()  32
define SPI_SETMOUSEBUTTONSWAP()  33
define SPI_SETICONTITLELOGFONT()  34
define SPI_GETFASTTASKSWITCH()  35
define SPI_SETFASTTASKSWITCH()  36
define SPI_SETDRAGFULLWINDOWS()  37
define SPI_GETDRAGFULLWINDOWS()  38
define SPI_GETNONCLIENTMETRICS()  41
define SPI_SETNONCLIENTMETRICS()  42
define SPI_GETMINIMIZEDMETRICS()  43
define SPI_SETMINIMIZEDMETRICS()  44
define SPI_GETICONMETRICS()  45
define SPI_SETICONMETRICS()  46
define SPI_SETWORKAREA()  47
define SPI_GETWORKAREA()  48
define SPI_SETPENWINDOWS()  49
define SPI_GETFILTERKEYS()  50
define SPI_SETFILTERKEYS()  51
define SPI_GETTOGGLEKEYS()  52
define SPI_SETTOGGLEKEYS()  53
define SPI_GETMOUSEKEYS()  54
define SPI_SETMOUSEKEYS()  55
define SPI_GETSHOWSOUNDS()  56
define SPI_SETSHOWSOUNDS()  57
define SPI_GETSTICKYKEYS()  58
define SPI_SETSTICKYKEYS()  59
define SPI_GETACCESSTIMEOUT()  60
define SPI_SETACCESSTIMEOUT()  61
define SPI_GETSERIALKEYS()  62
define SPI_SETSERIALKEYS()  63
define SPI_GETSOUNDSENTRY()  64
define SPI_SETSOUNDSENTRY()  65
define SPI_GETHIGHCONTRAST()  66
define SPI_SETHIGHCONTRAST()  67
define SPI_GETKEYBOARDPREF()  68
define SPI_SETKEYBOARDPREF()  69
define SPI_GETSCREENREADER()  70
define SPI_SETSCREENREADER()  71
define SPI_GETANIMATION()  72
define SPI_SETANIMATION()  73
define SPI_GETFONTSMOOTHING()  74
define SPI_SETFONTSMOOTHING()  75
define SPI_SETDRAGWIDTH()  76
define SPI_SETDRAGHEIGHT()  77
define SPI_SETHANDHELD()  78
define SPI_GETLOWPOWERTIMEOUT()  79
define SPI_GETPOWEROFFTIMEOUT()  80
define SPI_SETLOWPOWERTIMEOUT()  81
define SPI_SETPOWEROFFTIMEOUT()  82
define SPI_GETLOWPOWERACTIVE()  83
define SPI_GETPOWEROFFACTIVE()  84
define SPI_SETLOWPOWERACTIVE()  85
define SPI_SETPOWEROFFACTIVE()  86
define SPI_SETCURSORS()  87
define SPI_SETICONS()  88
define SPI_GETDEFAULTINPUTLANG()  89
define SPI_SETDEFAULTINPUTLANG()  90
define SPI_SETLANGTOGGLE()  91
define SPI_GETWINDOWSEXTENSION()  92
define SPI_SETMOUSETRAILS()  93
define SPI_GETMOUSETRAILS()  94
define SPI_SCREENSAVERRUNNING()  97
define SPIF_UPDATEINIFILE()  0x1
define SPIF_SENDWININICHANGE()  0x2
define WM_DDE_FIRST()  0x3E0
define WM_DDE_INITIATE()  WM_DDE_FIRST
define WM_DDE_TERMINATE()  WM_DDE_FIRST + 1
define WM_DDE_ADVISE()  WM_DDE_FIRST + 2
define WM_DDE_UNADVISE()  WM_DDE_FIRST + 3
define WM_DDE_ACK()  WM_DDE_FIRST + 4
define WM_DDE_DATA()  WM_DDE_FIRST + 5
define WM_DDE_REQUEST()  WM_DDE_FIRST + 6
define WM_DDE_POKE()  WM_DDE_FIRST + 7
define WM_DDE_EXECUTE()  WM_DDE_FIRST + 8
define WM_DDE_LAST()  WM_DDE_FIRST + 8
define XST_NULL()  0
define XST_INCOMPLETE()  1
define XST_CONNECTED()  2
define XST_INIT1()  3
define XST_INIT2()  4
define XST_REQSENT()  5
define XST_DATARCVD()  6
define XST_POKESENT()  7
define XST_POKEACKRCVD()  8
define XST_EXECSENT()  9
define XST_EXECACKRCVD()  10
define XST_ADVSENT()  11
define XST_UNADVSENT()  12
define XST_ADVACKRCVD()  13
define XST_UNADVACKRCVD()  14
define XST_ADVDATASENT()  15
define XST_ADVDATAACKRCVD()  16
define CADV_LATEACK()  0x0FFFF
define ST_CONNECTED()  0x1
define ST_ADVISE()  0x2
define ST_ISLOCAL()  0x4
define ST_BLOCKED()  0x8
define ST_CLIENT()  0x10
define ST_TERMINATED()  0x20
define ST_INLIST()  0x40
define ST_BLOCKNEXT()  0x80
define ST_ISSELF()  0x100
define DDE_FACK()  0x8000
define DDE_FBUSY()  0x4000
define DDE_FDEFERUPD()  0x4000
define DDE_FACKREQ()  0x8000
define DDE_FRELEASE()  0x2000
define DDE_FREQUESTED()  0x1000
define DDE_FAPPSTATUS()  0x0FF
define DDE_FNOTPROCESSED()  0x0
define DDE_FACKRESERVED()  (!DDE_FACK) | DDE_FBUSY | DDE_FAPPSTATUS
define DDE_FADVRESERVED()  (!DDE_FACKREQ) | DDE_FDEFERUPD
define DDE_FDATRESERVED()  (!DDE_FACKREQ) | DDE_FRELEASE | DDE_FREQUESTED
define DDE_FPOKRESERVED()  (!DDE_FRELEASE)
define CP_WINANSI()  1004
define CP_WINUNICODE()  1200
define XTYPF_NOBLOCK()  0x2
define XTYPF_NODATA()  0x4
define XTYPF_ACKREQ()  0x8
define XCLASS_MASK()  0x0FC00
define XCLASS_BOOL()  0x1000
define XCLASS_DATA()  0x2000
define XCLASS_FLAGS()  0x4000
define XCLASS_NOTIFICATION()  0x8000
define XTYP_ERROR()  0x0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define XTYP_ADVDATA()  0x10 | XCLASS_FLAGS
define XTYP_ADVREQ()  0x20 | XCLASS_DATA | XTYPF_NOBLOCK
define XTYP_ADVSTART()  0x30 | XCLASS_BOOL
define XTYP_ADVSTOP()  0x40 | XCLASS_NOTIFICATION
define XTYP_EXECUTE()  0x50 | XCLASS_FLAGS
define XTYP_CONNECT()  0x60 | XCLASS_BOOL | XTYPF_NOBLOCK
define XTYP_CONNECT_CONFIRM()  0x70 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define XTYP_XACT_COMPLETE()  0x80 | XCLASS_NOTIFICATION
define XTYP_POKE()  0x90 | XCLASS_FLAGS
define XTYP_REGISTER()  0x0A0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define XTYP_REQUEST()  0x0B0 | XCLASS_DATA
define XTYP_DISCONNECT()  0x0C0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define XTYP_UNREGISTER()  0x0D0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define XTYP_WILDCONNECT()  0x0E0 | XCLASS_DATA | XTYPF_NOBLOCK
define XTYP_MASK()  0x0F0
define XTYP_SHIFT()  4
define TIMEOUT_ASYNC()  0x0FFFF
define QID_SYNC()  0x0FFFF
define CBR_BLOCK()  0x0FFFF
define CBF_FAIL_SELFCONNECTIONS()  0x1000
define CBF_FAIL_CONNECTIONS()  0x2000
define CBF_FAIL_ADVISES()  0x4000
define CBF_FAIL_EXECUTES()  0x8000
define CBF_FAIL_POKES()  0x10000
define CBF_FAIL_REQUESTS()  0x20000
define CBF_FAIL_ALLSVRXACTIONS()  0x3F000
define CBF_SKIP_CONNECT_CONFIRMS()  0x40000
define CBF_SKIP_REGISTRATIONS()  0x80000
define CBF_SKIP_UNREGISTRATIONS()  0x100000
define CBF_SKIP_DISCONNECTS()  0x200000
define CBF_SKIP_ALLNOTIFICATIONS()  0x3C0000
define APPCMD_CLIENTONLY()  0x10
define APPCMD_FILTERINITS()  0x20
define APPCMD_MASK()  0x0FF0
define APPCLASS_STANDARD()  0x0
define APPCLASS_MASK()  0x0F
define EC_ENABLEALL()  0
define EC_ENABLEONE()  ST_BLOCKNEXT
define EC_DISABLE()  ST_BLOCKED
define EC_QUERYWAITING()  2
define DNS_REGISTER()  0x1
define DNS_UNREGISTER()  0x2
define DNS_FILTERON()  0x4
define DNS_FILTEROFF()  0x8
define HDATA_APPOWNED()  0x1
define DMLERR_NO_ERROR()  0
define DMLERR_FIRST()  0x4000
define DMLERR_ADVACKTIMEOUT()  0x4000
define DMLERR_BUSY()  0x4001
define DMLERR_DATAACKTIMEOUT()  0x4002
define DMLERR_DLL_NOT_INITIALIZED()  0x4003
define DMLERR_DLL_USAGE()  0x4004
define DMLERR_EXECACKTIMEOUT()  0x4005
define DMLERR_INVALIDPARAMETER()  0x4006
define DMLERR_LOW_MEMORY()  0x4007
define DMLERR_MEMORY_ERROR()  0x4008
define DMLERR_NOTPROCESSED()  0x4009
define DMLERR_NO_CONV_ESTABLISHED()  0x400A
define DMLERR_POKEACKTIMEOUT()  0x400B
define DMLERR_POSTMSG_FAILED()  0x400C
define DMLERR_REENTRANCY()  0x400D
define DMLERR_SERVER_DIED()  0x400E
define DMLERR_SYS_ERROR()  0x400F
define DMLERR_UNADVACKTIMEOUT()  0x4010
define DMLERR_UNFOUND_QUEUE_ID()  0x4011
define DMLERR_LAST()  0x4011
define MH_CREATE()  1
define MH_KEEP()  2
define MH_DELETE()  3
define MH_CLEANUP()  4
define MAX_MONITORS()  4
define APPCLASS_MONITOR()  0x1
define XTYP_MONITOR()  0x0F0 | XCLASS_NOTIFICATION | XTYPF_NOBLOCK
define MF_HSZ_INFO()  0x1000000
define MF_SENDMSGS()  0x2000000
define MF_POSTMSGS()  0x4000000
define MF_CALLBACKS()  0x8000000
define MF_ERRORS()  0x10000000
define MF_LINKS()  0x20000000
define MF_CONV()  0x40000000
define MF_MASK()  0x0FF000000
define NO_ERROR()  0
define ERROR_SUCCESS()  0
define ERROR_INVALID_FUNCTION()  1
define ERROR_FILE_NOT_FOUND()  2
define ERROR_PATH_NOT_FOUND()  3
define ERROR_TOO_MANY_OPEN_FILES()  4
define ERROR_ACCESS_DENIED()  5
define ERROR_INVALID_HANDLE()  6
define ERROR_ARENA_TRASHED()  7
define ERROR_NOT_ENOUGH_MEMORY()  8
define ERROR_INVALID_BLOCK()  9
define ERROR_BAD_ENVIRONMENT()  10
define ERROR_BAD_FORMAT()  11
define ERROR_INVALID_ACCESS()  12
define ERROR_INVALID_DATA()  13
define ERROR_OUTOFMEMORY()  14
define ERROR_INVALID_DRIVE()  15
define ERROR_CURRENT_DIRECTORY()  16
define ERROR_NOT_SAME_DEVICE()  17
define ERROR_NO_MORE_FILES()  18
define ERROR_WRITE_PROTECT()  19
define ERROR_BAD_UNIT()  20
define ERROR_NOT_READY()  21
define ERROR_BAD_COMMAND()  22
define ERROR_CRC()  23
define ERROR_BAD_LENGTH()  24
define ERROR_SEEK()  25
define ERROR_NOT_DOS_DISK()  26
define ERROR_SECTOR_NOT_FOUND()  27
define ERROR_OUT_OF_PAPER()  28
define ERROR_WRITE_FAULT()  29
define ERROR_READ_FAULT()  30
define ERROR_GEN_FAILURE()  31
define ERROR_SHARING_VIOLATION()  32
define ERROR_LOCK_VIOLATION()  33
define ERROR_WRONG_DISK()  34
define ERROR_SHARING_BUFFER_EXCEEDED()  36
define ERROR_HANDLE_EOF()  38
define ERROR_HANDLE_DISK_FULL()  39
define ERROR_NOT_SUPPORTED()  50
define ERROR_REM_NOT_LIST()  51
define ERROR_DUP_NAME()  52
define ERROR_BAD_NETPATH()  53
define ERROR_NETWORK_BUSY()  54
define ERROR_DEV_NOT_EXIST()  55
define ERROR_TOO_MANY_CMDS()  56
define ERROR_ADAP_HDW_ERR()  57
define ERROR_BAD_NET_RESP()  58
define ERROR_UNEXP_NET_ERR()  59
define ERROR_BAD_REM_ADAP()  60
define ERROR_PRINTQ_FULL()  61
define ERROR_NO_SPOOL_SPACE()  62
define ERROR_PRINT_CANCELLED()  63
define ERROR_NETNAME_DELETED()  64
define ERROR_NETWORK_ACCESS_DENIED()  65
define ERROR_BAD_DEV_TYPE()  66
define ERROR_BAD_NET_NAME()  67
define ERROR_TOO_MANY_NAMES()  68
define ERROR_TOO_MANY_SESS()  69
define ERROR_SHARING_PAUSED()  70
define ERROR_REQ_NOT_ACCEP()  71
define ERROR_REDIR_PAUSED()  72
define ERROR_FILE_EXISTS()  80
define ERROR_CANNOT_MAKE()  82
define ERROR_FAIL_I24()  83
define ERROR_OUT_OF_STRUCTURES()  84
define ERROR_ALREADY_ASSIGNED()  85
define ERROR_INVALID_PASSWORD()  86
define ERROR_INVALID_PARAMETER()  87
define ERROR_NET_WRITE_FAULT()  88
define ERROR_NO_PROC_SLOTS()  89
define ERROR_TOO_MANY_SEMAPHORES()  100
define ERROR_EXCL_SEM_ALREADY_OWNED()  101
define ERROR_SEM_IS_SET()  102
define ERROR_TOO_MANY_SEM_REQUESTS()  103
define ERROR_INVALID_AT_INTERRUPT_TIME()  104
define ERROR_SEM_OWNER_DIED()  105
define ERROR_SEM_USER_LIMIT()  106
define ERROR_DISK_CHANGE()  107
define ERROR_DRIVE_LOCKED()  108
define ERROR_BROKEN_PIPE()  109
define ERROR_OPEN_FAILED()  110
define ERROR_BUFFER_OVERFLOW()  111
define ERROR_DISK_FULL()  112
define ERROR_NO_MORE_SEARCH_HANDLES()  113
define ERROR_INVALID_TARGET_HANDLE()  114
define ERROR_INVALID_CATEGORY()  117
define ERROR_INVALID_VERIFY_SWITCH()  118
define ERROR_BAD_DRIVER_LEVEL()  119
define ERROR_CALL_NOT_IMPLEMENTED()  120
define ERROR_SEM_TIMEOUT()  121
define ERROR_INSUFFICIENT_BUFFER()  122
define ERROR_INVALID_NAME()  123
define ERROR_INVALID_LEVEL()  124
define ERROR_NO_VOLUME_LABEL()  125
define ERROR_MOD_NOT_FOUND()  126
define ERROR_PROC_NOT_FOUND()  127
define ERROR_WAIT_NO_CHILDREN()  128
define ERROR_CHILD_NOT_COMPLETE()  129
define ERROR_DIRECT_ACCESS_HANDLE()  130
define ERROR_NEGATIVE_SEEK()  131
define ERROR_SEEK_ON_DEVICE()  132
define ERROR_IS_JOIN_TARGET()  133
define ERROR_IS_JOINED()  134
define ERROR_IS_SUBSTED()  135
define ERROR_NOT_JOINED()  136
define ERROR_NOT_SUBSTED()  137
define ERROR_JOIN_TO_JOIN()  138
define ERROR_SUBST_TO_SUBST()  139
define ERROR_JOIN_TO_SUBST()  140
define ERROR_SUBST_TO_JOIN()  141
define ERROR_BUSY_DRIVE()  142
define ERROR_SAME_DRIVE()  143
define ERROR_DIR_NOT_ROOT()  144
define ERROR_DIR_NOT_EMPTY()  145
define ERROR_IS_SUBST_PATH()  146
define ERROR_IS_JOIN_PATH()  147
define ERROR_PATH_BUSY()  148
define ERROR_IS_SUBST_TARGET()  149
define ERROR_SYSTEM_TRACE()  150
define ERROR_INVALID_EVENT_COUNT()  151
define ERROR_TOO_MANY_MUXWAITERS()  152
define ERROR_INVALID_LIST_FORMAT()  153
define ERROR_LABEL_TOO_LONG()  154
define ERROR_TOO_MANY_TCBS()  155
define ERROR_SIGNAL_REFUSED()  156
define ERROR_DISCARDED()  157
define ERROR_NOT_LOCKED()  158
define ERROR_BAD_THREADID_ADDR()  159
define ERROR_BAD_ARGUMENTS()  160
define ERROR_BAD_PATHNAME()  161
define ERROR_SIGNAL_PENDING()  162
define ERROR_MAX_THRDS_REACHED()  164
define ERROR_LOCK_FAILED()  167
define ERROR_BUSY()  170
define ERROR_CANCEL_VIOLATION()  173
define ERROR_ATOMIC_LOCKS_NOT_SUPPORTED()  174
define ERROR_INVALID_SEGMENT_NUMBER()  180
define ERROR_INVALID_ORDINAL()  182
define ERROR_ALREADY_EXISTS()  183
define ERROR_INVALID_FLAG_NUMBER()  186
define ERROR_SEM_NOT_FOUND()  187
define ERROR_INVALID_STARTING_CODESEG()  188
define ERROR_INVALID_STACKSEG()  189
define ERROR_INVALID_MODULETYPE()  190
define ERROR_INVALID_EXE_SIGNATURE()  191
define ERROR_EXE_MARKED_INVALID()  192
define ERROR_BAD_EXE_FORMAT()  193
define ERROR_ITERATED_DATA_EXCEEDS_64k()  194
define ERROR_INVALID_MINALLOCSIZE()  195
define ERROR_DYNLINK_FROM_INVALID_RING()  196
define ERROR_IOPL_NOT_ENABLED()  197
define ERROR_INVALID_SEGDPL()  198
define ERROR_AUTODATASEG_EXCEEDS_64k()  199
define ERROR_RING2SEG_MUST_BE_MOVABLE()  200
define ERROR_RELOC_CHAIN_XEEDS_SEGLIM()  201
define ERROR_INFLOOP_IN_RELOC_CHAIN()  202
define ERROR_ENVVAR_NOT_FOUND()  203
define ERROR_NO_SIGNAL_SENT()  205
define ERROR_FILENAME_EXCED_RANGE()  206
define ERROR_RING2_STACK_IN_USE()  207
define ERROR_META_EXPANSION_TOO_LONG()  208
define ERROR_INVALID_SIGNAL_NUMBER()  209
define ERROR_THREAD_1_INACTIVE()  210
define ERROR_LOCKED()  212
define ERROR_TOO_MANY_MODULES()  214
define ERROR_NESTING_NOT_ALLOWED()  215
define ERROR_BAD_PIPE()  230
define ERROR_PIPE_BUSY()  231
define ERROR_NO_DATA()  232
define ERROR_PIPE_NOT_CONNECTED()  233
define ERROR_MORE_DATA()  234
define ERROR_VC_DISCONNECTED()  240
define ERROR_INVALID_EA_NAME()  254
define ERROR_EA_LIST_INCONSISTENT()  255
define ERROR_NO_MORE_ITEMS()  259
define ERROR_CANNOT_COPY()  266
define ERROR_DIRECTORY()  267
define ERROR_EAS_DIDNT_FIT()  275
define ERROR_EA_FILE_CORRUPT()  276
define ERROR_EA_TABLE_FULL()  277
define ERROR_INVALID_EA_HANDLE()  278
define ERROR_EAS_NOT_SUPPORTED()  282
define ERROR_NOT_OWNER()  288
define ERROR_TOO_MANY_POSTS()  298
define ERROR_MR_MID_NOT_FOUND()  317
define ERROR_INVALID_ADDRESS()  487
define ERROR_ARITHMETIC_OVERFLOW()  534
define ERROR_PIPE_CONNECTED()  535
define ERROR_PIPE_LISTENING()  536
define ERROR_EA_ACCESS_DENIED()  994
define ERROR_OPERATION_ABORTED()  995
define ERROR_IO_INCOMPLETE()  996
define ERROR_IO_PENDING()  997
define ERROR_NOACCESS()  998
define ERROR_SWAPERROR()  999
define ERROR_STACK_OVERFLOW()  1001
define ERROR_INVALID_MESSAGE()  1002
define ERROR_CAN_NOT_COMPLETE()  1003
define ERROR_INVALID_FLAGS()  1004
define ERROR_UNRECOGNIZED_VOLUME()  1005
define ERROR_FILE_INVALID()  1006
define ERROR_FULLSCREEN_MODE()  1007
define ERROR_NO_TOKEN()  1008
define ERROR_BADDB()  1009
define ERROR_BADKEY()  1010
define ERROR_CANTOPEN()  1011
define ERROR_CANTREAD()  1012
define ERROR_CANTWRITE()  1013
define ERROR_REGISTRY_RECOVERED()  1014
define ERROR_REGISTRY_CORRUPT()  1015
define ERROR_REGISTRY_IO_FAILED()  1016
define ERROR_NOT_REGISTRY_FILE()  1017
define ERROR_KEY_DELETED()  1018
define ERROR_NO_LOG_SPACE()  1019
define ERROR_KEY_HAS_CHILDREN()  1020
define ERROR_CHILD_MUST_BE_VOLATILE()  1021
define ERROR_NOTIFY_ENUM_DIR()  1022
define ERROR_DEPENDENT_SERVICES_RUNNING()  1051
define ERROR_INVALID_SERVICE_CONTROL()  1052
define ERROR_SERVICE_REQUEST_TIMEOUT()  1053
define ERROR_SERVICE_NO_THREAD()  1054
define ERROR_SERVICE_DATABASE_LOCKED()  1055
define ERROR_SERVICE_ALREADY_RUNNING()  1056
define ERROR_INVALID_SERVICE_ACCOUNT()  1057
define ERROR_SERVICE_DISABLED()  1058
define ERROR_CIRCULAR_DEPENDENCY()  1059
define ERROR_SERVICE_DOES_NOT_EXIST()  1060
define ERROR_SERVICE_CANNOT_ACCEPT_CTRL()  1061
define ERROR_SERVICE_NOT_ACTIVE()  1062
define ERROR_FAILED_SERVICE_CONTROLLER_CONNECT()  1063
define ERROR_EXCEPTION_IN_SERVICE()  1064
define ERROR_DATABASE_DOES_NOT_EXIST()  1065
define ERROR_SERVICE_SPECIFIC_ERROR()  1066
define ERROR_PROCESS_ABORTED()  1067
define ERROR_SERVICE_DEPENDENCY_FAIL()  1068
define ERROR_SERVICE_LOGON_FAILED()  1069
define ERROR_SERVICE_START_HANG()  1070
define ERROR_INVALID_SERVICE_LOCK()  1071
define ERROR_SERVICE_MARKED_FOR_DELETE()  1072
define ERROR_SERVICE_EXISTS()  1073
define ERROR_ALREADY_RUNNING_LKG()  1074
define ERROR_SERVICE_DEPENDENCY_DELETED()  1075
define ERROR_BOOT_ALREADY_ACCEPTED()  1076
define ERROR_SERVICE_NEVER_STARTED()  1077
define ERROR_DUPLICATE_SERVICE_NAME()  1078
define ERROR_END_OF_MEDIA()  1100
define ERROR_FILEMARK_DETECTED()  1101
define ERROR_BEGINNING_OF_MEDIA()  1102
define ERROR_SETMARK_DETECTED()  1103
define ERROR_NO_DATA_DETECTED()  1104
define ERROR_PARTITION_FAILURE()  1105
define ERROR_INVALID_BLOCK_LENGTH()  1106
define ERROR_DEVICE_NOT_PARTITIONED()  1107
define ERROR_UNABLE_TO_LOCK_MEDIA()  1108
define ERROR_UNABLE_TO_UNLOAD_MEDIA()  1109
define ERROR_MEDIA_CHANGED()  1110
define ERROR_BUS_RESET()  1111
define ERROR_NO_MEDIA_IN_DRIVE()  1112
define ERROR_NO_UNICODE_TRANSLATION()  1113
define ERROR_DLL_INIT_FAILED()  1114
define ERROR_SHUTDOWN_IN_PROGRESS()  1115
define ERROR_NO_SHUTDOWN_IN_PROGRESS()  1116
define ERROR_IO_DEVICE()  1117
define ERROR_SERIAL_NO_DEVICE()  1118
define ERROR_IRQ_BUSY()  1119
define ERROR_MORE_WRITES()  1120
define ERROR_COUNTER_TIMEOUT()  1121
define ERROR_FLOPPY_ID_MARK_NOT_FOUND()  1122
define ERROR_FLOPPY_WRONG_CYLINDER()  1123
define ERROR_FLOPPY_UNKNOWN_ERROR()  1124
define ERROR_FLOPPY_BAD_REGISTERS()  1125
define ERROR_DISK_RECALIBRATE_FAILED()  1126
define ERROR_DISK_OPERATION_FAILED()  1127
define ERROR_DISK_RESET_FAILED()  1128
define ERROR_EOM_OVERFLOW()  1129
define ERROR_NOT_ENOUGH_SERVER_MEMORY()  1130
define ERROR_POSSIBLE_DEADLOCK()  1131
define ERROR_MAPPED_ALIGNMENT()  1132
define ERROR_INVALID_PIXEL_FORMAT()  2000
define ERROR_BAD_DRIVER()  2001
define ERROR_INVALID_WINDOW_STYLE()  2002
define ERROR_METAFILE_NOT_SUPPORTED()  2003
define ERROR_TRANSFORM_NOT_SUPPORTED()  2004
define ERROR_CLIPPING_NOT_SUPPORTED()  2005
define ERROR_UNKNOWN_PRINT_MONITOR()  3000
define ERROR_PRINTER_DRIVER_IN_USE()  3001
define ERROR_SPOOL_FILE_NOT_FOUND()  3002
define ERROR_SPL_NO_STARTDOC()  3003
define ERROR_SPL_NO_ADDJOB()  3004
define ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED()  3005
define ERROR_PRINT_MONITOR_ALREADY_INSTALLED()  3006
define ERROR_WINS_INTERNAL()  4000
define ERROR_CAN_NOT_DEL_LOCAL_WINS()  4001
define ERROR_STATIC_INIT()  4002
define ERROR_INC_BACKUP()  4003
define ERROR_FULL_BACKUP()  4004
define ERROR_REC_NON_EXISTENT()  4005
define ERROR_RPL_NOT_ALLOWED()  4006
define SEVERITY_SUCCESS()  0
define SEVERITY_ERROR()  1
define FACILITY_NT_BIT()  0x10000000
define NOERROR()  0
define E_UNEXPECTED()  0x8000FFFF
define E_NOTIMPL()  0x80004001
define E_OUTOFMEMORY()  0x8007000E
define E_INVALIDARG()  0x80070057
define E_NOINTERFACE()  0x80004002
define E_POINTER()  0x80004003
define E_HANDLE()  0x80070006
define E_ABORT()  0x80004004
define E_FAIL()  0x80004005
define E_ACCESSDENIED()  0x80070005
define CO_E_INIT_TLS()  0x80004006
define CO_E_INIT_SHARED_ALLOCATOR()  0x80004007
define CO_E_INIT_MEMORY_ALLOCATOR()  0x80004008
define CO_E_INIT_CLASS_CACHE()  0x80004009
define CO_E_INIT_RPC_CHANNEL()  0x8000400A
define CO_E_INIT_TLS_SET_CHANNEL_CONTROL()  0x8000400B
define CO_E_INIT_TLS_CHANNEL_CONTROL()  0x8000400C
define CO_E_INIT_UNACCEPTED_USER_ALLOCATOR()  0x8000400D
define CO_E_INIT_SCM_MUTEX_EXISTS()  0x8000400E
define CO_E_INIT_SCM_FILE_MAPPING_EXISTS()  0x8000400F
define CO_E_INIT_SCM_MAP_VIEW_OF_FILE()  0x80004010
define CO_E_INIT_SCM_EXEC_FAILURE()  0x80004011
define CO_E_INIT_ONLY_SINGLE_THREADED()  0x80004012
define S_OK()  0x0
define S_FALSE()  0x1
define OLE_E_FIRST()  0x80040000
define OLE_E_LAST()  0x800400FF
define OLE_S_FIRST()  0x40000
define OLE_S_LAST()  0x400FF
define OLE_E_OLEVERB()  0x80040000
define OLE_E_ADVF()  0x80040001
define OLE_E_ENUM_NOMORE()  0x80040002
define OLE_E_ADVISENOTSUPPORTED()  0x80040003
define OLE_E_NOCONNECTION()  0x80040004
define OLE_E_NOTRUNNING()  0x80040005
define OLE_E_NOCACHE()  0x80040006
define OLE_E_BLANK()  0x80040007
define OLE_E_CLASSDIFF()  0x80040008
define OLE_E_CANT_GETMONIKER()  0x80040009
define OLE_E_CANT_BINDTOSOURCE()  0x8004000A
define OLE_E_STATIC()  0x8004000B
define OLE_E_PROMPTSAVECANCELLED()  0x8004000C
define OLE_E_INVALIDRECT()  0x8004000D
define OLE_E_WRONGCOMPOBJ()  0x8004000E
define OLE_E_INVALIDHWND()  0x8004000F
define OLE_E_NOT_INPLACEACTIVE()  0x80040010
define OLE_E_CANTCONVERT()  0x80040011
define OLE_E_NOSTORAGE()  0x80040012
define DV_E_FORMATETC()  0x80040064
define DV_E_DVTARGETDEVICE()  0x80040065
define DV_E_STGMEDIUM()  0x80040066
define DV_E_STATDATA()  0x80040067
define DV_E_LINDEX()  0x80040068
define DV_E_TYMED()  0x80040069
define DV_E_CLIPFORMAT()  0x8004006A
define DV_E_DVASPECT()  0x8004006B
define DV_E_DVTARGETDEVICE_SIZE()  0x8004006C
define DV_E_NOIVIEWOBJECT()  0x8004006D
define DRAGDROP_E_FIRST()  0x80040100
define DRAGDROP_E_LAST()  0x8004010F
define DRAGDROP_S_FIRST()  0x40100
define DRAGDROP_S_LAST()  0x4010F
define DRAGDROP_E_NOTREGISTERED()  0x80040100
define DRAGDROP_E_ALREADYREGISTERED()  0x80040101
define DRAGDROP_E_INVALIDHWND()  0x80040102
define CLASSFACTORY_E_FIRST()  0x80040110
define CLASSFACTORY_E_LAST()  0x8004011F
define CLASSFACTORY_S_FIRST()  0x40110
define CLASSFACTORY_S_LAST()  0x4011F
define CLASS_E_NOAGGREGATION()  0x80040110
define CLASS_E_CLASSNOTAVAILABLE()  0x80040111
define MARSHAL_E_FIRST()  0x80040120
define MARSHAL_E_LAST()  0x8004012F
define MARSHAL_S_FIRST()  0x40120
define MARSHAL_S_LAST()  0x4012F
define DATA_E_FIRST()  0x80040130
define DATA_E_LAST()  0x8004013F
define DATA_S_FIRST()  0x40130
define DATA_S_LAST()  0x4013F
define VIEW_E_FIRST()  0x80040140
define VIEW_E_LAST()  0x8004014F
define VIEW_S_FIRST()  0x40140
define VIEW_S_LAST()  0x4014F
define VIEW_E_DRAW()  0x80040140
define REGDB_E_FIRST()  0x80040150
define REGDB_E_LAST()  0x8004015F
define REGDB_S_FIRST()  0x40150
define REGDB_S_LAST()  0x4015F
define REGDB_E_READREGDB()  0x80040150
define REGDB_E_WRITEREGDB()  0x80040151
define REGDB_E_KEYMISSING()  0x80040152
define REGDB_E_INVALIDVALUE()  0x80040153
define REGDB_E_CLASSNOTREG()  0x80040154
define REGDB_E_IIDNOTREG()  0x80040155
define CACHE_E_FIRST()  0x80040170
define CACHE_E_LAST()  0x8004017F
define CACHE_S_FIRST()  0x40170
define CACHE_S_LAST()  0x4017F
define CACHE_E_NOCACHE_UPDATED()  0x80040170
define OLEOBJ_E_FIRST()  0x80040180
define OLEOBJ_E_LAST()  0x8004018F
define OLEOBJ_S_FIRST()  0x40180
define OLEOBJ_S_LAST()  0x4018F
define OLEOBJ_E_NOVERBS()  0x80040180
define OLEOBJ_E_INVALIDVERB()  0x80040181
define CLIENTSITE_E_FIRST()  0x80040190
define CLIENTSITE_E_LAST()  0x8004019F
define CLIENTSITE_S_FIRST()  0x40190
define CLIENTSITE_S_LAST()  0x4019F
define INPLACE_E_NOTUNDOABLE()  0x800401A0
define INPLACE_E_NOTOOLSPACE()  0x800401A1
define INPLACE_E_FIRST()  0x800401A0
define INPLACE_E_LAST()  0x800401AF
define INPLACE_S_FIRST()  0x401A0
define INPLACE_S_LAST()  0x401AF
define ENUM_E_FIRST()  0x800401B0
define ENUM_E_LAST()  0x800401BF
define ENUM_S_FIRST()  0x401B0
define ENUM_S_LAST()  0x401BF
define CONVERT10_E_FIRST()  0x800401C0
define CONVERT10_E_LAST()  0x800401CF
define CONVERT10_S_FIRST()  0x401C0
define CONVERT10_S_LAST()  0x401CF
define CONVERT10_E_OLESTREAM_GET()  0x800401C0
define CONVERT10_E_OLESTREAM_PUT()  0x800401C1
define CONVERT10_E_OLESTREAM_FMT()  0x800401C2
define CONVERT10_E_OLESTREAM_BITMAP_TO_DIB()  0x800401C3
define CONVERT10_E_STG_FMT()  0x800401C4
define CONVERT10_E_STG_NO_STD_STREAM()  0x800401C5
define CONVERT10_E_STG_DIB_TO_BITMAP()  0x800401C6
define CLIPBRD_E_FIRST()  0x800401D0
define CLIPBRD_E_LAST()  0x800401DF
define CLIPBRD_S_FIRST()  0x401D0
define CLIPBRD_S_LAST()  0x401DF
define CLIPBRD_E_CANT_OPEN()  0x800401D0
define CLIPBRD_E_CANT_EMPTY()  0x800401D1
define CLIPBRD_E_CANT_SET()  0x800401D2
define CLIPBRD_E_BAD_DATA()  0x800401D3
define CLIPBRD_E_CANT_CLOSE()  0x800401D4
define MK_E_FIRST()  0x800401E0
define MK_E_LAST()  0x800401EF
define MK_S_FIRST()  0x401E0
define MK_S_LAST()  0x401EF
define MK_E_CONNECTMANUALLY()  0x800401E0
define MK_E_EXCEEDEDDEADLINE()  0x800401E1
define MK_E_NEEDGENERIC()  0x800401E2
define MK_E_UNAVAILABLE()  0x800401E3
define MK_E_SYNTAX()  0x800401E4
define MK_E_NOOBJECT()  0x800401E5
define MK_E_INVALIDEXTENSION()  0x800401E6
define MK_E_INTERMEDIATEINTERFACENOTSUPPORTED()  0x800401E7
define MK_E_NOTBINDABLE()  0x800401E8
define MK_E_NOTBOUND()  0x800401E9
define MK_E_CANTOPENFILE()  0x800401EA
define MK_E_MUSTBOTHERUSER()  0x800401EB
define MK_E_NOINVERSE()  0x800401EC
define MK_E_NOSTORAGE()  0x800401ED
define MK_E_NOPREFIX()  0x800401EE
define MK_E_ENUMERATION_FAILED()  0x800401EF
define CO_E_FIRST()  0x800401F0
define CO_E_LAST()  0x800401FF
define CO_S_FIRST()  0x401F0
define CO_S_LAST()  0x401FF
define CO_E_NOTINITIALIZED()  0x800401F0
define CO_E_ALREADYINITIALIZED()  0x800401F1
define CO_E_CANTDETERMINECLASS()  0x800401F2
define CO_E_CLASSSTRING()  0x800401F3
define CO_E_IIDSTRING()  0x800401F4
define CO_E_APPNOTFOUND()  0x800401F5
define CO_E_APPSINGLEUSE()  0x800401F6
define CO_E_ERRORINAPP()  0x800401F7
define CO_E_DLLNOTFOUND()  0x800401F8
define CO_E_ERRORINDLL()  0x800401F9
define CO_E_WRONGOSFORAPP()  0x800401FA
define CO_E_OBJNOTREG()  0x800401FB
define CO_E_OBJISREG()  0x800401FC
define CO_E_OBJNOTCONNECTED()  0x800401FD
define CO_E_APPDIDNTREG()  0x800401FE
define CO_E_RELEASED()  0x800401FF
define OLE_S_USEREG()  0x40000
define OLE_S_STATIC()  0x40001
define OLE_S_MAC_CLIPFORMAT()  0x40002
define DRAGDROP_S_DROP()  0x40100
define DRAGDROP_S_CANCEL()  0x40101
define DRAGDROP_S_USEDEFAULTCURSORS()  0x40102
define DATA_S_SAMEFORMATETC()  0x40130
define VIEW_S_ALREADY_FROZEN()  0x40140
define CACHE_S_FORMATETC_NOTSUPPORTED()  0x40170
define CACHE_S_SAMECACHE()  0x40171
define CACHE_S_SOMECACHES_NOTUPDATED()  0x40172
define OLEOBJ_S_INVALIDVERB()  0x40180
define OLEOBJ_S_CANNOT_DOVERB_NOW()  0x40181
define OLEOBJ_S_INVALIDHWND()  0x40182
define INPLACE_S_TRUNCATED()  0x401A0
define CONVERT10_S_NO_PRESENTATION()  0x401C0
define MK_S_REDUCED_TO_SELF()  0x401E2
define MK_S_ME()  0x401E4
define MK_S_HIM()  0x401E5
define MK_S_US()  0x401E6
define MK_S_MONIKERALREADYREGISTERED()  0x401E7
define CO_E_CLASS_CREATE_FAILED()  0x80080001
define CO_E_SCM_ERROR()  0x80080002
define CO_E_SCM_RPC_FAILURE()  0x80080003
define CO_E_BAD_PATH()  0x80080004
define CO_E_SERVER_EXEC_FAILURE()  0x80080005
define CO_E_OBJSRV_RPC_FAILURE()  0x80080006
define MK_E_NO_NORMALIZED()  0x80080007
define CO_E_SERVER_STOPPING()  0x80080008
define MEM_E_INVALID_ROOT()  0x80080009
define MEM_E_INVALID_LINK()  0x80080010
define MEM_E_INVALID_SIZE()  0x80080011
define DISP_E_UNKNOWNINTERFACE()  0x80020001
define DISP_E_MEMBERNOTFOUND()  0x80020003
define DISP_E_PARAMNOTFOUND()  0x80020004
define DISP_E_TYPEMISMATCH()  0x80020005
define DISP_E_UNKNOWNNAME()  0x80020006
define DISP_E_NONAMEDARGS()  0x80020007
define DISP_E_BADVARTYPE()  0x80020008
define DISP_E_EXCEPTION()  0x80020009
define DISP_E_OVERFLOW()  0x8002000A
define DISP_E_BADINDEX()  0x8002000B
define DISP_E_UNKNOWNLCID()  0x8002000C
define DISP_E_ARRAYISLOCKED()  0x8002000D
define DISP_E_BADPARAMCOUNT()  0x8002000E
define DISP_E_PARAMNOTOPTIONAL()  0x8002000F
define DISP_E_BADCALLEE()  0x80020010
define DISP_E_NOTACOLLECTION()  0x80020011
define TYPE_E_BUFFERTOOSMALL()  0x80028016
define TYPE_E_INVDATAREAD()  0x80028018
define TYPE_E_UNSUPFORMAT()  0x80028019
define TYPE_E_REGISTRYACCESS()  0x8002801C
define TYPE_E_LIBNOTREGISTERED()  0x8002801D
define TYPE_E_UNDEFINEDTYPE()  0x80028027
define TYPE_E_QUALIFIEDNAMEDISALLOWED()  0x80028028
define TYPE_E_INVALIDSTATE()  0x80028029
define TYPE_E_WRONGTYPEKIND()  0x8002802A
define TYPE_E_ELEMENTNOTFOUND()  0x8002802B
define TYPE_E_AMBIGUOUSNAME()  0x8002802C
define TYPE_E_NAMECONFLICT()  0x8002802D
define TYPE_E_UNKNOWNLCID()  0x8002802E
define TYPE_E_DLLFUNCTIONNOTFOUND()  0x8002802F
define TYPE_E_BADMODULEKIND()  0x800288BD
define TYPE_E_SIZETOOBIG()  0x800288C5
define TYPE_E_DUPLICATEID()  0x800288C6
define TYPE_E_INVALIDID()  0x800288CF
define TYPE_E_TYPEMISMATCH()  0x80028CA0
define TYPE_E_OUTOFBOUNDS()  0x80028CA1
define TYPE_E_IOERROR()  0x80028CA2
define TYPE_E_CANTCREATETMPFILE()  0x80028CA3
define TYPE_E_CANTLOADLIBRARY()  0x80029C4A
define TYPE_E_INCONSISTENTPROPFUNCS()  0x80029C83
define TYPE_E_CIRCULARTYPE()  0x80029C84
define STG_E_INVALIDFUNCTION()  0x80030001
define STG_E_FILENOTFOUND()  0x80030002
define STG_E_PATHNOTFOUND()  0x80030003
define STG_E_TOOMANYOPENFILES()  0x80030004
define STG_E_ACCESSDENIED()  0x80030005
define STG_E_INVALIDHANDLE()  0x80030006
define STG_E_INSUFFICIENTMEMORY()  0x80030008
define STG_E_INVALIDPOINTER()  0x80030009
define STG_E_NOMOREFILES()  0x80030012
define STG_E_DISKISWRITEPROTECTED()  0x80030013
define STG_E_SEEKERROR()  0x80030019
define STG_E_WRITEFAULT()  0x8003001D
define STG_E_READFAULT()  0x8003001E
define STG_E_SHAREVIOLATION()  0x80030020
define STG_E_LOCKVIOLATION()  0x80030021
define STG_E_FILEALREADYEXISTS()  0x80030050
define STG_E_INVALIDPARAMETER()  0x80030057
define STG_E_MEDIUMFULL()  0x80030070
define STG_E_ABNORMALAPIEXIT()  0x800300FA
define STG_E_INVALIDHEADER()  0x800300FB
define STG_E_INVALIDNAME()  0x800300FC
define STG_E_UNKNOWN()  0x800300FD
define STG_E_UNIMPLEMENTEDFUNCTION()  0x800300FE
define STG_E_INVALIDFLAG()  0x800300FF
define STG_E_INUSE()  0x80030100
define STG_E_NOTCURRENT()  0x80030101
define STG_E_REVERTED()  0x80030102
define STG_E_CANTSAVE()  0x80030103
define STG_E_OLDFORMAT()  0x80030104
define STG_E_OLDDLL()  0x80030105
define STG_E_SHAREREQUIRED()  0x80030106
define STG_E_NOTFILEBASEDSTORAGE()  0x80030107
define STG_E_EXTANTMARSHALLINGS()  0x80030108
define STG_S_CONVERTED()  0x30200
define RPC_E_CALL_REJECTED()  0x80010001
define RPC_E_CALL_CANCELED()  0x80010002
define RPC_E_CANTPOST_INSENDCALL()  0x80010003
define RPC_E_CANTCALLOUT_INASYNCCALL()  0x80010004
define RPC_E_CANTCALLOUT_INEXTERNALCALL()  0x80010005
define RPC_E_CONNECTION_TERMINATED()  0x80010006
define RPC_E_SERVER_DIED()  0x80010007
define RPC_E_CLIENT_DIED()  0x80010008
define RPC_E_INVALID_DATAPACKET()  0x80010009
define RPC_E_CANTTRANSMIT_CALL()  0x8001000A
define RPC_E_CLIENT_CANTMARSHAL_DATA()  0x8001000B
define RPC_E_CLIENT_CANTUNMARSHAL_DATA()  0x8001000C
define RPC_E_SERVER_CANTMARSHAL_DATA()  0x8001000D
define RPC_E_SERVER_CANTUNMARSHAL_DATA()  0x8001000E
define RPC_E_INVALID_DATA()  0x8001000F
define RPC_E_INVALID_PARAMETER()  0x80010010
define RPC_E_CANTCALLOUT_AGAIN()  0x80010011
define RPC_E_SERVER_DIED_DNE()  0x80010012
define RPC_E_SYS_CALL_FAILED()  0x80010100
define RPC_E_OUT_OF_RESOURCES()  0x80010101
define RPC_E_ATTEMPTED_MULTITHREAD()  0x80010102
define RPC_E_NOT_REGISTERED()  0x80010103
define RPC_E_FAULT()  0x80010104
define RPC_E_SERVERFAULT()  0x80010105
define RPC_E_CHANGED_MODE()  0x80010106
define RPC_E_INVALIDMETHOD()  0x80010107
define RPC_E_DISCONNECTED()  0x80010108
define RPC_E_RETRY()  0x80010109
define RPC_E_SERVERCALL_RETRYLATER()  0x8001010A
define RPC_E_SERVERCALL_REJECTED()  0x8001010B
define RPC_E_INVALID_CALLDATA()  0x8001010C
define RPC_E_CANTCALLOUT_ININPUTSYNCCALL()  0x8001010D
define RPC_E_WRONG_THREAD()  0x8001010E
define RPC_E_THREAD_NOT_INIT()  0x8001010F
define RPC_E_UNEXPECTED()  0x8001FFFF
define ERROR_BAD_USERNAME()  2202
define ERROR_NOT_CONNECTED()  2250
define ERROR_OPEN_FILES()  2401
define ERROR_DEVICE_IN_USE()  2404
define ERROR_BAD_DEVICE()  1200
define ERROR_CONNECTION_UNAVAIL()  1201
define ERROR_DEVICE_ALREADY_REMEMBERED()  1202
define ERROR_NO_NET_OR_BAD_PATH()  1203
define ERROR_BAD_PROVIDER()  1204
define ERROR_CANNOT_OPEN_PROFILE()  1205
define ERROR_BAD_PROFILE()  1206
define ERROR_NOT_CONTAINER()  1207
define ERROR_EXTENDED_ERROR()  1208
define ERROR_INVALID_GROUPNAME()  1209
define ERROR_INVALID_COMPUTERNAME()  1210
define ERROR_INVALID_EVENTNAME()  1211
define ERROR_INVALID_DOMAINNAME()  1212
define ERROR_INVALID_SERVICENAME()  1213
define ERROR_INVALID_NETNAME()  1214
define ERROR_INVALID_SHARENAME()  1215
define ERROR_INVALID_PASSWORDNAME()  1216
define ERROR_INVALID_MESSAGENAME()  1217
define ERROR_INVALID_MESSAGEDEST()  1218
define ERROR_SESSION_CREDENTIAL_CONFLICT()  1219
define ERROR_REMOTE_SESSION_LIMIT_EXCEEDED()  1220
define ERROR_DUP_DOMAINNAME()  1221
define ERROR_NO_NETWORK()  1222
define ERROR_NOT_ALL_ASSIGNED()  1300
define ERROR_SOME_NOT_MAPPED()  1301
define ERROR_NO_QUOTAS_FOR_ACCOUNT()  1302
define ERROR_LOCAL_USER_SESSION_KEY()  1303
define ERROR_NULL_LM_PASSWORD()  1304
define ERROR_UNKNOWN_REVISION()  1305
define ERROR_REVISION_MISMATCH()  1306
define ERROR_INVALID_OWNER()  1307
define ERROR_INVALID_PRIMARY_GROUP()  1308
define ERROR_NO_IMPERSONATION_TOKEN()  1309
define ERROR_CANT_DISABLE_MANDATORY()  1310
define ERROR_NO_LOGON_SERVERS()  1311
define ERROR_NO_SUCH_LOGON_SESSION()  1312
define ERROR_NO_SUCH_PRIVILEGE()  1313
define ERROR_PRIVILEGE_NOT_HELD()  1314
define ERROR_INVALID_ACCOUNT_NAME()  1315
define ERROR_USER_EXISTS()  1316
define ERROR_NO_SUCH_USER()  1317
define ERROR_GROUP_EXISTS()  1318
define ERROR_NO_SUCH_GROUP()  1319
define ERROR_MEMBER_IN_GROUP()  1320
define ERROR_MEMBER_NOT_IN_GROUP()  1321
define ERROR_LAST_ADMIN()  1322
define ERROR_WRONG_PASSWORD()  1323
define ERROR_ILL_FORMED_PASSWORD()  1324
define ERROR_PASSWORD_RESTRICTION()  1325
define ERROR_LOGON_FAILURE()  1326
define ERROR_ACCOUNT_RESTRICTION()  1327
define ERROR_INVALID_LOGON_HOURS()  1328
define ERROR_INVALID_WORKSTATION()  1329
define ERROR_PASSWORD_EXPIRED()  1330
define ERROR_ACCOUNT_DISABLED()  1331
define ERROR_NONE_MAPPED()  1332
define ERROR_TOO_MANY_LUIDS_REQUESTED()  1333
define ERROR_LUIDS_EXHAUSTED()  1334
define ERROR_INVALID_SUB_AUTHORITY()  1335
define ERROR_INVALID_ACL()  1336
define ERROR_INVALID_SID()  1337
define ERROR_INVALID_SECURITY_DESCR()  1338
define ERROR_BAD_INHERITANCE_ACL()  1340
define ERROR_SERVER_DISABLED()  1341
define ERROR_SERVER_NOT_DISABLED()  1342
define ERROR_INVALID_ID_AUTHORITY()  1343
define ERROR_ALLOTTED_SPACE_EXCEEDED()  1344
define ERROR_INVALID_GROUP_ATTRIBUTES()  1345
define ERROR_BAD_IMPERSONATION_LEVEL()  1346
define ERROR_CANT_OPEN_ANONYMOUS()  1347
define ERROR_BAD_VALIDATION_CLASS()  1348
define ERROR_BAD_TOKEN_TYPE()  1349
define ERROR_NO_SECURITY_ON_OBJECT()  1350
define ERROR_CANT_ACCESS_DOMAIN_INFO()  1351
define ERROR_INVALID_SERVER_STATE()  1352
define ERROR_INVALID_DOMAIN_STATE()  1353
define ERROR_INVALID_DOMAIN_ROLE()  1354
define ERROR_NO_SUCH_DOMAIN()  1355
define ERROR_DOMAIN_EXISTS()  1356
define ERROR_DOMAIN_LIMIT_EXCEEDED()  1357
define ERROR_INTERNAL_DB_CORRUPTION()  1358
define ERROR_INTERNAL_ERROR()  1359
define ERROR_GENERIC_NOT_MAPPED()  1360
define ERROR_BAD_DESCRIPTOR_FORMAT()  1361
define ERROR_NOT_LOGON_PROCESS()  1362
define ERROR_LOGON_SESSION_EXISTS()  1363
define ERROR_NO_SUCH_PACKAGE()  1364
define ERROR_BAD_LOGON_SESSION_STATE()  1365
define ERROR_LOGON_SESSION_COLLISION()  1366
define ERROR_INVALID_LOGON_TYPE()  1367
define ERROR_CANNOT_IMPERSONATE()  1368
define ERROR_RXACT_INVALID_STATE()  1369
define ERROR_RXACT_COMMIT_FAILURE()  1370
define ERROR_SPECIAL_ACCOUNT()  1371
define ERROR_SPECIAL_GROUP()  1372
define ERROR_SPECIAL_USER()  1373
define ERROR_MEMBERS_PRIMARY_GROUP()  1374
define ERROR_TOKEN_ALREADY_IN_USE()  1375
define ERROR_NO_SUCH_ALIAS()  1376
define ERROR_MEMBER_NOT_IN_ALIAS()  1377
define ERROR_MEMBER_IN_ALIAS()  1378
define ERROR_ALIAS_EXISTS()  1379
define ERROR_LOGON_NOT_GRANTED()  1380
define ERROR_TOO_MANY_SECRETS()  1381
define ERROR_SECRET_TOO_LONG()  1382
define ERROR_INTERNAL_DB_ERROR()  1383
define ERROR_TOO_MANY_CONTEXT_IDS()  1384
define ERROR_LOGON_TYPE_NOT_GRANTED()  1385
define ERROR_NT_CROSS_ENCRYPTION_REQUIRED()  1386
define ERROR_NO_SUCH_MEMBER()  1387
define ERROR_INVALID_MEMBER()  1388
define ERROR_TOO_MANY_SIDS()  1389
define ERROR_LM_CROSS_ENCRYPTION_REQUIRED()  1390
define ERROR_NO_INHERITANCE()  1391
define ERROR_FILE_CORRUPT()  1392
define ERROR_DISK_CORRUPT()  1393
define ERROR_NO_USER_SESSION_KEY()  1394
define ERROR_INVALID_WINDOW_HANDLE()  1400
define ERROR_INVALID_MENU_HANDLE()  1401
define ERROR_INVALID_CURSOR_HANDLE()  1402
define ERROR_INVALID_ACCEL_HANDLE()  1403
define ERROR_INVALID_HOOK_HANDLE()  1404
define ERROR_INVALID_DWP_HANDLE()  1405
define ERROR_TLW_WITH_WSCHILD()  1406
define ERROR_CANNOT_FIND_WND_CLASS()  1407
define ERROR_WINDOW_OF_OTHER_THREAD()  1408
define ERROR_HOTKEY_ALREADY_REGISTERED()  1409
define ERROR_CLASS_ALREADY_EXISTS()  1410
define ERROR_CLASS_DOES_NOT_EXIST()  1411
define ERROR_CLASS_HAS_WINDOWS()  1412
define ERROR_INVALID_INDEX()  1413
define ERROR_INVALID_ICON_HANDLE()  1414
define ERROR_PRIVATE_DIALOG_INDEX()  1415
define ERROR_LISTBOX_ID_NOT_FOUND()  1416
define ERROR_NO_WILDCARD_CHARACTERS()  1417
define ERROR_CLIPBOARD_NOT_OPEN()  1418
define ERROR_HOTKEY_NOT_REGISTERED()  1419
define ERROR_WINDOW_NOT_DIALOG()  1420
define ERROR_CONTROL_ID_NOT_FOUND()  1421
define ERROR_INVALID_COMBOBOX_MESSAGE()  1422
define ERROR_WINDOW_NOT_COMBOBOX()  1423
define ERROR_INVALID_EDIT_HEIGHT()  1424
define ERROR_DC_NOT_FOUND()  1425
define ERROR_INVALID_HOOK_FILTER()  1426
define ERROR_INVALID_FILTER_PROC()  1427
define ERROR_HOOK_NEEDS_HMOD()  1428
define ERROR_PUBLIC_ONLY_HOOK()  1429
define ERROR_JOURNAL_HOOK_SET()  1430
define ERROR_HOOK_NOT_INSTALLED()  1431
define ERROR_INVALID_LB_MESSAGE()  1432
define ERROR_SETCOUNT_ON_BAD_LB()  1433
define ERROR_LB_WITHOUT_TABSTOPS()  1434
define ERROR_DESTROY_OBJECT_OF_OTHER_THREAD()  1435
define ERROR_CHILD_WINDOW_MENU()  1436
define ERROR_NO_SYSTEM_MENU()  1437
define ERROR_INVALID_MSGBOX_STYLE()  1438
define ERROR_INVALID_SPI_VALUE()  1439
define ERROR_SCREEN_ALREADY_LOCKED()  1440
define ERROR_HWNDS_HAVE_DIFF_PARENT()  1441
define ERROR_NOT_CHILD_WINDOW()  1442
define ERROR_INVALID_GW_COMMAND()  1443
define ERROR_INVALID_THREAD_ID()  1444
define ERROR_NON_MDICHILD_WINDOW()  1445
define ERROR_POPUP_ALREADY_ACTIVE()  1446
define ERROR_NO_SCROLLBARS()  1447
define ERROR_INVALID_SCROLLBAR_RANGE()  1448
define ERROR_INVALID_SHOWWIN_COMMAND()  1449
define ERROR_EVENTLOG_FILE_CORRUPT()  1500
define ERROR_EVENTLOG_CANT_START()  1501
define ERROR_LOG_FILE_FULL()  1502
define ERROR_EVENTLOG_FILE_CHANGED()  1503
define RPC_S_INVALID_STRING_BINDING()  1700
define RPC_S_WRONG_KIND_OF_BINDING()  1701
define RPC_S_INVALID_BINDING()  1702
define RPC_S_PROTSEQ_NOT_SUPPORTED()  1703
define RPC_S_INVALID_RPC_PROTSEQ()  1704
define RPC_S_INVALID_STRING_UUID()  1705
define RPC_S_INVALID_ENDPOINT_FORMAT()  1706
define RPC_S_INVALID_NET_ADDR()  1707
define RPC_S_NO_ENDPOINT_FOUND()  1708
define RPC_S_INVALID_TIMEOUT()  1709
define RPC_S_OBJECT_NOT_FOUND()  1710
define RPC_S_ALREADY_REGISTERED()  1711
define RPC_S_TYPE_ALREADY_REGISTERED()  1712
define RPC_S_ALREADY_LISTENING()  1713
define RPC_S_NO_PROTSEQS_REGISTERED()  1714
define RPC_S_NOT_LISTENING()  1715
define RPC_S_UNKNOWN_MGR_TYPE()  1716
define RPC_S_UNKNOWN_IF()  1717
define RPC_S_NO_BINDINGS()  1718
define RPC_S_NO_PROTSEQS()  1719
define RPC_S_CANT_CREATE_ENDPOINT()  1720
define RPC_S_OUT_OF_RESOURCES()  1721
define RPC_S_SERVER_UNAVAILABLE()  1722
define RPC_S_SERVER_TOO_BUSY()  1723
define RPC_S_INVALID_NETWORK_OPTIONS()  1724
define RPC_S_NO_CALL_ACTIVE()  1725
define RPC_S_CALL_FAILED()  1726
define RPC_S_CALL_FAILED_DNE()  1727
define RPC_S_PROTOCOL_ERROR()  1728
define RPC_S_UNSUPPORTED_TRANS_SYN()  1730
define RPC_S_UNSUPPORTED_TYPE()  1732
define RPC_S_INVALID_TAG()  1733
define RPC_S_INVALID_BOUND()  1734
define RPC_S_NO_ENTRY_NAME()  1735
define RPC_S_INVALID_NAME_SYNTAX()  1736
define RPC_S_UNSUPPORTED_NAME_SYNTAX()  1737
define RPC_S_UUID_NO_ADDRESS()  1739
define RPC_S_DUPLICATE_ENDPOINT()  1740
define RPC_S_UNKNOWN_AUTHN_TYPE()  1741
define RPC_S_MAX_CALLS_TOO_SMALL()  1742
define RPC_S_STRING_TOO_LONG()  1743
define RPC_S_PROTSEQ_NOT_FOUND()  1744
define RPC_S_PROCNUM_OUT_OF_RANGE()  1745
define RPC_S_BINDING_HAS_NO_AUTH()  1746
define RPC_S_UNKNOWN_AUTHN_SERVICE()  1747
define RPC_S_UNKNOWN_AUTHN_LEVEL()  1748
define RPC_S_INVALID_AUTH_IDENTITY()  1749
define RPC_S_UNKNOWN_AUTHZ_SERVICE()  1750
define EPT_S_INVALID_ENTRY()  1751
define EPT_S_CANT_PERFORM_OP()  1752
define EPT_S_NOT_REGISTERED()  1753
define RPC_S_NOTHING_TO_EXPORT()  1754
define RPC_S_INCOMPLETE_NAME()  1755
define RPC_S_INVALID_VERS_OPTION()  1756
define RPC_S_NO_MORE_MEMBERS()  1757
define RPC_S_NOT_ALL_OBJS_UNEXPORTED()  1758
define RPC_S_INTERFACE_NOT_FOUND()  1759
define RPC_S_ENTRY_ALREADY_EXISTS()  1760
define RPC_S_ENTRY_NOT_FOUND()  1761
define RPC_S_NAME_SERVICE_UNAVAILABLE()  1762
define RPC_S_INVALID_NAF_ID()  1763
define RPC_S_CANNOT_SUPPORT()  1764
define RPC_S_NO_CONTEXT_AVAILABLE()  1765
define RPC_S_INTERNAL_ERROR()  1766
define RPC_S_ZERO_DIVIDE()  1767
define RPC_S_ADDRESS_ERROR()  1768
define RPC_S_FP_DIV_ZERO()  1769
define RPC_S_FP_UNDERFLOW()  1770
define RPC_S_FP_OVERFLOW()  1771
define RPC_X_NO_MORE_ENTRIES()  1772
define RPC_X_SS_CHAR_TRANS_OPEN_FAIL()  1773
define RPC_X_SS_CHAR_TRANS_SHORT_FILE()  1774
define RPC_X_SS_IN_NULL_CONTEXT()  1775
define RPC_X_SS_CONTEXT_DAMAGED()  1777
define RPC_X_SS_HANDLES_MISMATCH()  1778
define RPC_X_SS_CANNOT_GET_CALL_HANDLE()  1779
define RPC_X_NULL_REF_POINTER()  1780
define RPC_X_ENUM_VALUE_OUT_OF_RANGE()  1781
define RPC_X_BYTE_COUNT_TOO_SMALL()  1782
define RPC_X_BAD_STUB_DATA()  1783
define ERROR_INVALID_USER_BUFFER()  1784
define ERROR_UNRECOGNIZED_MEDIA()  1785
define ERROR_NO_TRUST_LSA_SECRET()  1786
define ERROR_NO_TRUST_SAM_ACCOUNT()  1787
define ERROR_TRUSTED_DOMAIN_FAILURE()  1788
define ERROR_TRUSTED_RELATIONSHIP_FAILURE()  1789
define ERROR_TRUST_FAILURE()  1790
define RPC_S_CALL_IN_PROGRESS()  1791
define ERROR_NETLOGON_NOT_STARTED()  1792
define ERROR_ACCOUNT_EXPIRED()  1793
define ERROR_REDIRECTOR_HAS_OPEN_HANDLES()  1794
define ERROR_PRINTER_DRIVER_ALREADY_INSTALLED()  1795
define ERROR_UNKNOWN_PORT()  1796
define ERROR_UNKNOWN_PRINTER_DRIVER()  1797
define ERROR_UNKNOWN_PRINTPROCESSOR()  1798
define ERROR_INVALID_SEPARATOR_FILE()  1799
define ERROR_INVALID_PRIORITY()  1800
define ERROR_INVALID_PRINTER_NAME()  1801
define ERROR_PRINTER_ALREADY_EXISTS()  1802
define ERROR_INVALID_PRINTER_COMMAND()  1803
define ERROR_INVALID_DATATYPE()  1804
define ERROR_INVALID_ENVIRONMENT()  1805
define RPC_S_NO_MORE_BINDINGS()  1806
define ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT()  1807
define ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT()  1808
define ERROR_NOLOGON_SERVER_TRUST_ACCOUNT()  1809
define ERROR_DOMAIN_TRUST_INCONSISTENT()  1810
define ERROR_SERVER_HAS_OPEN_HANDLES()  1811
define ERROR_RESOURCE_DATA_NOT_FOUND()  1812
define ERROR_RESOURCE_TYPE_NOT_FOUND()  1813
define ERROR_RESOURCE_NAME_NOT_FOUND()  1814
define ERROR_RESOURCE_LANG_NOT_FOUND()  1815
define ERROR_NOT_ENOUGH_QUOTA()  1816
define RPC_S_GROUP_MEMBER_NOT_FOUND()  1898
define EPT_S_CANT_CREATE()  1899
define RPC_S_INVALID_OBJECT()  1900
define ERROR_INVALID_TIME()  1901
define ERROR_INVALID_FORM_NAME()  1902
define ERROR_INVALID_FORM_SIZE()  1903
define ERROR_ALREADY_WAITING()  1904
define ERROR_PRINTER_DELETED()  1905
define ERROR_INVALID_PRINTER_STATE()  1906
define ERROR_NO_BROWSER_SERVERS_FOUND()  6118
define MAXPNAMELEN()  32
define MAXERRORLENGTH()  128
define TIME_MS()  0x1
define TIME_SAMPLES()  0x2
define TIME_BYTES()  0x4
define TIME_SMPTE()  0x8
define TIME_MIDI()  0x10
define TIME_TICKS()  0x20
define MM_JOY1MOVE()  0x3A0
define MM_JOY2MOVE()  0x3A1
define MM_JOY1ZMOVE()  0x3A2
define MM_JOY2ZMOVE()  0x3A3
define MM_JOY1BUTTONDOWN()  0x3B5
define MM_JOY2BUTTONDOWN()  0x3B6
define MM_JOY1BUTTONUP()  0x3B7
define MM_JOY2BUTTONUP()  0x3B8
define MM_MCINOTIFY()  0x3B9
define MM_MCISYSTEM_STRING()  0x3CA
define MM_WOM_OPEN()  0x3BB
define MM_WOM_CLOSE()  0x3BC
define MM_WOM_DONE()  0x3BD
define MM_WIM_OPEN()  0x3BE
define MM_WIM_CLOSE()  0x3BF
define MM_WIM_DATA()  0x3C0
define MM_MIM_OPEN()  0x3C1
define MM_MIM_CLOSE()  0x3C2
define MM_MIM_DATA()  0x3C3
define MM_MIM_LONGDATA()  0x3C4
define MM_MIM_ERROR()  0x3C5
define MM_MIM_LONGERROR()  0x3C6
define MM_MOM_OPEN()  0x3C7
define MM_MOM_CLOSE()  0x3C8
define MM_MOM_DONE()  0x3C9
define MMSYSERR_BASE()  0
define WAVERR_BASE()  32
define MIDIERR_BASE()  64
define TIMERR_BASE()  96
define JOYERR_BASE()  160
define MCIERR_BASE()  256
define MIXERR_BASE()  1024
define MCI_STRING_OFFSET()  512
define MCI_VD_OFFSET()  1024
define MCI_CD_OFFSET()  1088
define MCI_WAVE_OFFSET()  1152
define MCI_SEQ_OFFSET()  1216
define MMSYSERR_NOERROR()  0
define MMSYSERR_ERROR()  MMSYSERR_BASE + 1
define MMSYSERR_BADDEVICEID()  MMSYSERR_BASE + 2
define MMSYSERR_NOTENABLED()  MMSYSERR_BASE + 3
define MMSYSERR_ALLOCATED()  MMSYSERR_BASE + 4
define MMSYSERR_INVALHANDLE()  MMSYSERR_BASE + 5
define MMSYSERR_NODRIVER()  MMSYSERR_BASE + 6
define MMSYSERR_NOMEM()  MMSYSERR_BASE + 7
define MMSYSERR_NOTSUPPORTED()  MMSYSERR_BASE + 8
define MMSYSERR_BADERRNUM()  MMSYSERR_BASE + 9
define MMSYSERR_INVALFLAG()  MMSYSERR_BASE + 10
define MMSYSERR_INVALPARAM()  MMSYSERR_BASE + 11
define MMSYSERR_HANDLEBUSY()  MMSYSERR_BASE + 12
define MMSYSERR_INVALIDALIAS()  MMSYSERR_BASE + 13
define MMSYSERR_LASTERROR()  MMSYSERR_BASE + 13
define MM_MOM_POSITIONCB()  0x3CA
define MM_MCISIGNAL()  0x3CB
define MM_MIM_MOREDATA()  0x3CC
define MIDICAPS_STREAM()  0x8
define MEVT_F_SHORT()  0x0
define MEVT_F_LONG()  0x80000000
define MEVT_F_CALLBACK()  0x40000000
define MIDISTRM_ERROR()  -2
define MIDIPROP_SET()  0x80000000
define MIDIPROP_GET()  0x40000000
define MIDIPROP_TIMEDIV()  0x1
define MIDIPROP_TEMPO()  0x2
define MIXER_SHORT_NAME_CHARS()  16
define MIXER_LONG_NAME_CHARS()  64
define MIXERR_INVALLINE()  MIXERR_BASE + 0
define MIXERR_INVALCONTROL()  MIXERR_BASE + 1
define MIXERR_INVALVALUE()  MIXERR_BASE + 2
define MIXERR_LASTERROR()  MIXERR_BASE + 2
define MIXER_OBJECTF_HANDLE()  0x80000000
define MIXER_OBJECTF_MIXER()  0x0
define MIXER_OBJECTF_HMIXER()  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIXER
define MIXER_OBJECTF_WAVEOUT()  0x10000000
define MIXER_OBJECTF_HWAVEOUT()  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_WAVEOUT
define MIXER_OBJECTF_WAVEIN()  0x20000000
define MIXER_OBJECTF_HWAVEIN()  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_WAVEIN
define MIXER_OBJECTF_MIDIOUT()  0x30000000
define MIXER_OBJECTF_HMIDIOUT()  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIDIOUT
define MIXER_OBJECTF_MIDIIN()  0x40000000
define MIXER_OBJECTF_HMIDIIN()  MIXER_OBJECTF_HANDLE | MIXER_OBJECTF_MIDIIN
define MIXER_OBJECTF_AUX()  0x50000000
define MIXERLINE_LINEF_ACTIVE()  0x1
define MIXERLINE_LINEF_DISCONNECTED()  0x8000
define MIXERLINE_LINEF_SOURCE()  0x80000000
define MIXERLINE_COMPONENTTYPE_DST_FIRST()  0x0
define MIXERLINE_COMPONENTTYPE_DST_UNDEFINED()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 0
define MIXERLINE_COMPONENTTYPE_DST_DIGITAL()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 1
define MIXERLINE_COMPONENTTYPE_DST_LINE()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 2
define MIXERLINE_COMPONENTTYPE_DST_MONITOR()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 3
define MIXERLINE_COMPONENTTYPE_DST_SPEAKERS()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 4
define MIXERLINE_COMPONENTTYPE_DST_HEADPHONES()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 5
define MIXERLINE_COMPONENTTYPE_DST_TELEPHONE()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 6
define MIXERLINE_COMPONENTTYPE_DST_WAVEIN()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 7
define MIXERLINE_COMPONENTTYPE_DST_VOICEIN()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 8
define MIXERLINE_COMPONENTTYPE_DST_LAST()  MIXERLINE_COMPONENTTYPE_DST_FIRST + 8
define MIXERLINE_COMPONENTTYPE_SRC_FIRST()  0x1000
define MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 0
define MIXERLINE_COMPONENTTYPE_SRC_DIGITAL()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 1
define MIXERLINE_COMPONENTTYPE_SRC_LINE()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 2
define MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 3
define MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 4
define MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 5
define MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 6
define MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 7
define MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 8
define MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 9
define MIXERLINE_COMPONENTTYPE_SRC_ANALOG()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10
define MIXERLINE_COMPONENTTYPE_SRC_LAST()  MIXERLINE_COMPONENTTYPE_SRC_FIRST + 10
define MIXERLINE_TARGETTYPE_UNDEFINED()  0
define MIXERLINE_TARGETTYPE_WAVEOUT()  1
define MIXERLINE_TARGETTYPE_WAVEIN()  2
define MIXERLINE_TARGETTYPE_MIDIOUT()  3
define MIXERLINE_TARGETTYPE_MIDIIN()  4
define MIXERLINE_TARGETTYPE_AUX()  5
define MIXER_GETLINEINFOF_DESTINATION()  0x0
define MIXER_GETLINEINFOF_SOURCE()  0x1
define MIXER_GETLINEINFOF_LINEID()  0x2
define MIXER_GETLINEINFOF_COMPONENTTYPE()  0x3
define MIXER_GETLINEINFOF_TARGETTYPE()  0x4
define MIXER_GETLINEINFOF_QUERYMASK()  0x0F
define MIXERCONTROL_CONTROLF_UNIFORM()  0x1
define MIXERCONTROL_CONTROLF_MULTIPLE()  0x2
define MIXERCONTROL_CONTROLF_DISABLED()  0x80000000
define MIXERCONTROL_CT_CLASS_MASK()  0x0F0000000
define MIXERCONTROL_CT_CLASS_CUSTOM()  0x0
define MIXERCONTROL_CT_CLASS_METER()  0x10000000
define MIXERCONTROL_CT_CLASS_SWITCH()  0x20000000
define MIXERCONTROL_CT_CLASS_NUMBER()  0x30000000
define MIXERCONTROL_CT_CLASS_SLIDER()  0x40000000
define MIXERCONTROL_CT_CLASS_FADER()  0x50000000
define MIXERCONTROL_CT_CLASS_TIME()  0x60000000
define MIXERCONTROL_CT_CLASS_LIST()  0x70000000
define MIXERCONTROL_CT_SUBCLASS_MASK()  0x0F000000
define MIXERCONTROL_CT_SC_SWITCH_BOOLEAN()  0x0
define MIXERCONTROL_CT_SC_SWITCH_BUTTON()  0x1000000
define MIXERCONTROL_CT_SC_METER_POLLED()  0x0
define MIXERCONTROL_CT_SC_TIME_MICROSECS()  0x0
define MIXERCONTROL_CT_SC_TIME_MILLISECS()  0x1000000
define MIXERCONTROL_CT_SC_LIST_SINGLE()  0x0
define MIXERCONTROL_CT_SC_LIST_MULTIPLE()  0x1000000
define MIXERCONTROL_CT_UNITS_MASK()  0x0FF0000
define MIXERCONTROL_CT_UNITS_CUSTOM()  0x0
define MIXERCONTROL_CT_UNITS_BOOLEAN()  0x10000
define MIXERCONTROL_CT_UNITS_SIGNED()  0x20000
define MIXERCONTROL_CT_UNITS_UNSIGNED()  0x30000
define MIXERCONTROL_CT_UNITS_DECIBELS()  0x40000
define MIXERCONTROL_CT_UNITS_PERCENT()  0x50000
define MIXERCONTROL_CONTROLTYPE_CUSTOM()  MIXERCONTROL_CT_CLASS_CUSTOM | MIXERCONTROL_CT_UNITS_CUSTOM
define MIXERCONTROL_CONTROLTYPE_BOOLEANMETER()  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_BOOLEAN
define MIXERCONTROL_CONTROLTYPE_SIGNEDMETER()  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_SIGNED
define MIXERCONTROL_CONTROLTYPE_PEAKMETER()  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER + 1
define MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER()  MIXERCONTROL_CT_CLASS_METER | MIXERCONTROL_CT_SC_METER_POLLED | MIXERCONTROL_CT_UNITS_UNSIGNED
define MIXERCONTROL_CONTROLTYPE_BOOLEAN()  MIXERCONTROL_CT_CLASS_SWITCH | MIXERCONTROL_CT_SC_SWITCH_BOOLEAN | MIXERCONTROL_CT_UNITS_BOOLEAN
define MIXERCONTROL_CONTROLTYPE_ONOFF()  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 1
define MIXERCONTROL_CONTROLTYPE_MUTE()  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 2
define MIXERCONTROL_CONTROLTYPE_MONO()  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 3
define MIXERCONTROL_CONTROLTYPE_LOUDNESS()  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 4
define MIXERCONTROL_CONTROLTYPE_STEREOENH()  MIXERCONTROL_CONTROLTYPE_BOOLEAN + 5
define MIXERCONTROL_CONTROLTYPE_BUTTON()  MIXERCONTROL_CT_CLASS_SWITCH | MIXERCONTROL_CT_SC_SWITCH_BUTTON | MIXERCONTROL_CT_UNITS_BOOLEAN
define MIXERCONTROL_CONTROLTYPE_DECIBELS()  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_DECIBELS
define MIXERCONTROL_CONTROLTYPE_SIGNED()  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_SIGNED
define MIXERCONTROL_CONTROLTYPE_UNSIGNED()  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_UNSIGNED
define MIXERCONTROL_CONTROLTYPE_PERCENT()  MIXERCONTROL_CT_CLASS_NUMBER | MIXERCONTROL_CT_UNITS_PERCENT
define MIXERCONTROL_CONTROLTYPE_SLIDER()  MIXERCONTROL_CT_CLASS_SLIDER | MIXERCONTROL_CT_UNITS_SIGNED
define MIXERCONTROL_CONTROLTYPE_PAN()  MIXERCONTROL_CONTROLTYPE_SLIDER + 1
define MIXERCONTROL_CONTROLTYPE_QSOUNDPAN()  MIXERCONTROL_CONTROLTYPE_SLIDER + 2
define MIXERCONTROL_CONTROLTYPE_FADER()  MIXERCONTROL_CT_CLASS_FADER | MIXERCONTROL_CT_UNITS_UNSIGNED
define MIXERCONTROL_CONTROLTYPE_VOLUME()  MIXERCONTROL_CONTROLTYPE_FADER + 1
define MIXERCONTROL_CONTROLTYPE_BASS()  MIXERCONTROL_CONTROLTYPE_FADER + 2
define MIXERCONTROL_CONTROLTYPE_TREBLE()  MIXERCONTROL_CONTROLTYPE_FADER + 3
define MIXERCONTROL_CONTROLTYPE_EQUALIZER()  MIXERCONTROL_CONTROLTYPE_FADER + 4
define MIXERCONTROL_CONTROLTYPE_SINGLESELECT()  MIXERCONTROL_CT_CLASS_LIST | MIXERCONTROL_CT_SC_LIST_SINGLE | MIXERCONTROL_CT_UNITS_BOOLEAN
define MIXERCONTROL_CONTROLTYPE_MUX()  MIXERCONTROL_CONTROLTYPE_SINGLESELECT + 1
define MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT()  MIXERCONTROL_CT_CLASS_LIST | MIXERCONTROL_CT_SC_LIST_MULTIPLE | MIXERCONTROL_CT_UNITS_BOOLEAN
define MIXERCONTROL_CONTROLTYPE_MIXER()  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT + 1
define MIXERCONTROL_CONTROLTYPE_MICROTIME()  MIXERCONTROL_CT_CLASS_TIME | MIXERCONTROL_CT_SC_TIME_MICROSECS | MIXERCONTROL_CT_UNITS_UNSIGNED
define MIXERCONTROL_CONTROLTYPE_MILLITIME()  MIXERCONTROL_CT_CLASS_TIME | MIXERCONTROL_CT_SC_TIME_MILLISECS | MIXERCONTROL_CT_UNITS_UNSIGNED
define MIXER_GETLINECONTROLSF_ALL()  0x0
define MIXER_GETLINECONTROLSF_ONEBYID()  0x1
define MIXER_GETLINECONTROLSF_ONEBYTYPE()  0x2
define MIXER_GETLINECONTROLSF_QUERYMASK()  0x0F
define MIXER_GETCONTROLDETAILSF_VALUE()  0x0
define MIXER_GETCONTROLDETAILSF_LISTTEXT()  0x1
define MIXER_GETCONTROLDETAILSF_QUERYMASK()  0x0F
define MIXER_SETCONTROLDETAILSF_VALUE()  0x0
define MIXER_SETCONTROLDETAILSF_CUSTOM()  0x1
define MIXER_SETCONTROLDETAILSF_QUERYMASK()  0x0F
define JOY_BUTTON5()  0x10
define JOY_BUTTON6()  0x20
define JOY_BUTTON7()  0x40
define JOY_BUTTON8()  0x80
define JOY_BUTTON9()  0x100
define JOY_BUTTON10()  0x200
define JOY_BUTTON11()  0x400
define JOY_BUTTON12()  0x800
define JOY_BUTTON13()  0x1000
define JOY_BUTTON14()  0x2000
define JOY_BUTTON15()  0x4000
define JOY_BUTTON16()  0x8000
define JOY_BUTTON17()  0x10000
define JOY_BUTTON18()  0x20000
define JOY_BUTTON19()  0x40000
define JOY_BUTTON20()  0x80000
define JOY_BUTTON21()  0x100000
define JOY_BUTTON22()  0x200000
define JOY_BUTTON23()  0x400000
define JOY_BUTTON24()  0x800000
define JOY_BUTTON25()  0x1000000
define JOY_BUTTON26()  0x2000000
define JOY_BUTTON27()  0x4000000
define JOY_BUTTON28()  0x8000000
define JOY_BUTTON29()  0x10000000
define JOY_BUTTON30()  0x20000000
define JOY_BUTTON31()  0x40000000
define JOY_BUTTON32()  0x80000000
define JOY_POVCENTERED()  -1
define JOY_POVFORWARD()  0
define JOY_POVRIGHT()  9000
define JOY_POVBACKWARD()  18000
define JOY_POVLEFT()  27000
define JOY_RETURNX()  0x1
define JOY_RETURNY()  0x2
define JOY_RETURNZ()  0x4
define JOY_RETURNR()  0x8
define JOY_RETURNU()  0x10
define JOY_RETURNV()  0x20
define JOY_RETURNPOV()  0x40
define JOY_RETURNBUTTONS()  0x80
define JOY_RETURNRAWDATA()  0x100
define JOY_RETURNPOVCTS()  0x200
define JOY_RETURNCENTERED()  0x400
define JOY_USEDEADZONE()  0x800
define JOY_RETURNALL()  JOY_RETURNX | JOY_RETURNY | JOY_RETURNZ | JOY_RETURNR | JOY_RETURNU | JOY_RETURNV | JOY_RETURNPOV | JOY_RETURNBUTTONS
define JOY_CAL_READALWAYS()  0x10000
define JOY_CAL_READXYONLY()  0x20000
define JOY_CAL_READ3()  0x40000
define JOY_CAL_READ4()  0x80000
define JOY_CAL_READXONLY()  0x100000
define JOY_CAL_READYONLY()  0x200000
define JOY_CAL_READ5()  0x400000
define JOY_CAL_READ6()  0x800000
define JOY_CAL_READZONLY()  0x1000000
define JOY_CAL_READRONLY()  0x2000000
define JOY_CAL_READUONLY()  0x4000000
define JOY_CAL_READVONLY()  0x8000000
define WAVE_FORMAT_QUERY()  0x1
define SND_PURGE()  0x40
define SND_APPLICATION()  0x80
define WAVE_MAPPED()  0x4
define WAVE_FORMAT_DIRECT()  0x8
define WAVE_FORMAT_DIRECT_QUERY()  WAVE_FORMAT_QUERY | WAVE_FORMAT_DIRECT
define MIM_MOREDATA()  MM_MIM_MOREDATA
define MOM_POSITIONCB()  MM_MOM_POSITIONCB
define MIDI_IO_STATUS()  0x20
define DRV_LOAD()  0x1
define DRV_ENABLE()  0x2
define DRV_OPEN()  0x3
define DRV_CLOSE()  0x4
define DRV_DISABLE()  0x5
define DRV_FREE()  0x6
define DRV_CONFIGURE()  0x7
define DRV_QUERYCONFIGURE()  0x8
define DRV_INSTALL()  0x9
define DRV_REMOVE()  0x0A
define DRV_EXITSESSION()  0x0B
define DRV_POWER()  0x0F
define DRV_RESERVED()  0x800
define DRV_USER()  0x4000
define DRVCNF_CANCEL()  0x0
define DRVCNF_OK()  0x1
define DRVCNF_RESTART()  0x2
define DRV_CANCEL()  DRVCNF_CANCEL
define DRV_OK()  DRVCNF_OK
define DRV_RESTART()  DRVCNF_RESTART
define DRV_MCI_FIRST()  DRV_RESERVED
define DRV_MCI_LAST()  DRV_RESERVED + 0x0FFF
define CALLBACK_TYPEMASK()  0x70000
define CALLBACK_NULL()  0x0
define CALLBACK_WINDOW()  0x10000
define CALLBACK_TASK()  0x20000
define CALLBACK_FUNCTION()  0x30000
define MM_MICROSOFT()  1
define MM_MIDI_MAPPER()  1
define MM_WAVE_MAPPER()  2
define MM_SNDBLST_MIDIOUT()  3
define MM_SNDBLST_MIDIIN()  4
define MM_SNDBLST_SYNTH()  5
define MM_SNDBLST_WAVEOUT()  6
define MM_SNDBLST_WAVEIN()  7
define MM_ADLIB()  9
define MM_MPU401_MIDIOUT()  10
define MM_MPU401_MIDIIN()  11
define MM_PC_JOYSTICK()  12
define SND_SYNC()  0x0
define SND_ASYNC()  0x1
define SND_NODEFAULT()  0x2
define SND_MEMORY()  0x4
define SND_ALIAS()  0x10000
define SND_FILENAME()  0x20000
define SND_RESOURCE()  0x40004
define SND_ALIAS_ID()  0x110000
define SND_ALIAS_START()  0
define SND_LOOP()  0x8
define SND_NOSTOP()  0x10
define SND_VALID()  0x1F
define SND_NOWAIT()  0x2000
define SND_VALIDFLAGS()  0x17201F
define SND_RESERVED()  0x0FF000000
define SND_TYPE_MASK()  0x170007
define WAVERR_BADFORMAT()  WAVERR_BASE + 0
define WAVERR_STILLPLAYING()  WAVERR_BASE + 1
define WAVERR_UNPREPARED()  WAVERR_BASE + 2
define WAVERR_SYNC()  WAVERR_BASE + 3
define WAVERR_LASTERROR()  WAVERR_BASE + 3
define WOM_OPEN()  MM_WOM_OPEN
define WOM_CLOSE()  MM_WOM_CLOSE
define WOM_DONE()  MM_WOM_DONE
define WIM_OPEN()  MM_WIM_OPEN
define WIM_CLOSE()  MM_WIM_CLOSE
define WIM_DATA()  MM_WIM_DATA
define WAVE_MAPPER()  -1
define WAVE_ALLOWSYNC()  0x2
define WAVE_VALID()  0x3
define WHDR_DONE()  0x1
define WHDR_PREPARED()  0x2
define WHDR_BEGINLOOP()  0x4
define WHDR_ENDLOOP()  0x8
define WHDR_INQUEUE()  0x10
define WHDR_VALID()  0x1F
define WAVECAPS_PITCH()  0x1
define WAVECAPS_PLAYBACKRATE()  0x2
define WAVECAPS_VOLUME()  0x4
define WAVECAPS_LRVOLUME()  0x8
define WAVECAPS_SYNC()  0x10
define WAVE_INVALIDFORMAT()  0x0
define WAVE_FORMAT_1M08()  0x1
define WAVE_FORMAT_1S08()  0x2
define WAVE_FORMAT_1M16()  0x4
define WAVE_FORMAT_1S16()  0x8
define WAVE_FORMAT_2M08()  0x10
define WAVE_FORMAT_2S08()  0x20
define WAVE_FORMAT_2M16()  0x40
define WAVE_FORMAT_2S16()  0x80
define WAVE_FORMAT_4M08()  0x100
define WAVE_FORMAT_4S08()  0x200
define WAVE_FORMAT_4M16()  0x400
define WAVE_FORMAT_4S16()  0x800
define WAVE_FORMAT_PCM()  1
define MIDIERR_UNPREPARED()  MIDIERR_BASE + 0
define MIDIERR_STILLPLAYING()  MIDIERR_BASE + 1
define MIDIERR_NOMAP()  MIDIERR_BASE + 2
define MIDIERR_NOTREADY()  MIDIERR_BASE + 3
define MIDIERR_NODEVICE()  MIDIERR_BASE + 4
define MIDIERR_INVALIDSETUP()  MIDIERR_BASE + 5
define MIDIERR_LASTERROR()  MIDIERR_BASE + 5
define MIM_OPEN()  MM_MIM_OPEN
define MIM_CLOSE()  MM_MIM_CLOSE
define MIM_DATA()  MM_MIM_DATA
define MIM_LONGDATA()  MM_MIM_LONGDATA
define MIM_ERROR()  MM_MIM_ERROR
define MIM_LONGERROR()  MM_MIM_LONGERROR
define MOM_OPEN()  MM_MOM_OPEN
define MOM_CLOSE()  MM_MOM_CLOSE
define MOM_DONE()  MM_MOM_DONE
define MIDIMAPPER()  -1
define MIDI_MAPPER()  -1
define MIDI_CACHE_ALL()  1
define MIDI_CACHE_BESTFIT()  2
define MIDI_CACHE_QUERY()  3
define MIDI_UNCACHE()  4
define MIDI_CACHE_VALID()  MIDI_CACHE_ALL | MIDI_CACHE_BESTFIT | MIDI_CACHE_QUERY | MIDI_UNCACHE
define MOD_MIDIPORT()  1
define MOD_SYNTH()  2
define MOD_SQSYNTH()  3
define MOD_FMSYNTH()  4
define MOD_MAPPER()  5
define MIDICAPS_VOLUME()  1
define MIDICAPS_LRVOLUME()  2
define MIDICAPS_CACHE()  4
define MHDR_DONE()  1
define MHDR_PREPARED()  2
define MHDR_INQUEUE()  4
define MHDR_VALID()  7
define MHDR_ISSTRM()  8
define AUX_MAPPER()  -1
define AUXCAPS_CDAUDIO()  1
define AUXCAPS_AUXIN()  2
define AUXCAPS_VOLUME()  0x1
define AUXCAPS_LRVOLUME()  0x2
define TIMERR_NOERROR()  0
define TIMERR_NOCANDO()  TIMERR_BASE + 1
define TIMERR_STRUCT()  TIMERR_BASE + 33
define TIME_ONESHOT()  0
define TIME_PERIODIC()  1
define JOYERR_NOERROR()  0
define JOYERR_PARMS()  JOYERR_BASE + 5
define JOYERR_NOCANDO()  JOYERR_BASE + 6
define JOYERR_UNPLUGGED()  JOYERR_BASE + 7
define JOY_BUTTON1()  0x1
define JOY_BUTTON2()  0x2
define JOY_BUTTON3()  0x4
define JOY_BUTTON4()  0x8
define JOY_BUTTON1CHG()  0x100
define JOY_BUTTON2CHG()  0x200
define JOY_BUTTON3CHG()  0x400
define JOY_BUTTON4CHG()  0x800
define JOYSTICKID1()  0
define JOYSTICKID2()  1
define MMIOERR_BASE()  256
define MMIOERR_FILENOTFOUND()  MMIOERR_BASE + 1
define MMIOERR_OUTOFMEMORY()  MMIOERR_BASE + 2
define MMIOERR_CANNOTOPEN()  MMIOERR_BASE + 3
define MMIOERR_CANNOTCLOSE()  MMIOERR_BASE + 4
define MMIOERR_CANNOTREAD()  MMIOERR_BASE + 5
define MMIOERR_CANNOTWRITE()  MMIOERR_BASE + 6
define MMIOERR_CANNOTSEEK()  MMIOERR_BASE + 7
define MMIOERR_CANNOTEXPAND()  MMIOERR_BASE + 8
define MMIOERR_CHUNKNOTFOUND()  MMIOERR_BASE + 9
define MMIOERR_UNBUFFERED()  MMIOERR_BASE + 10
define MMIO_RWMODE()  0x3
define MMIO_SHAREMODE()  0x70
define MMIO_CREATE()  0x1000
define MMIO_PARSE()  0x100
define MMIO_DELETE()  0x200
define MMIO_EXIST()  0x4000
define MMIO_ALLOCBUF()  0x10000
define MMIO_GETTEMP()  0x20000
define MMIO_DIRTY()  0x10000000
define MMIO_OPEN_VALID()  0x3FFFF
define MMIO_READ()  0x0
define MMIO_WRITE()  0x1
define MMIO_READWRITE()  0x2
define MMIO_COMPAT()  0x0
define MMIO_EXCLUSIVE()  0x10
define MMIO_DENYWRITE()  0x20
define MMIO_DENYREAD()  0x30
define MMIO_DENYNONE()  0x40
define MMIO_FHOPEN()  0x10
define MMIO_EMPTYBUF()  0x10
define MMIO_TOUPPER()  0x10
define MMIO_INSTALLPROC()  0x10000
define MMIO_GLOBALPROC()  0x10000000
define MMIO_UNICODEPROC()  0x1000000
define MMIO_REMOVEPROC()  0x20000
define MMIO_FINDPROC()  0x40000
define MMIO_FINDCHUNK()  0x10
define MMIO_FINDRIFF()  0x20
define MMIO_FINDLIST()  0x40
define MMIO_CREATERIFF()  0x20
define MMIO_CREATELIST()  0x40
define MMIO_VALIDPROC()  0x11070000
define MMIOM_READ()  MMIO_READ
define MMIOM_WRITE()  MMIO_WRITE
define MMIOM_SEEK()  2
define MMIOM_OPEN()  3
define MMIOM_CLOSE()  4
define MMIOM_WRITEFLUSH()  5
define MMIOM_RENAME()  6
define MMIOM_USER()  0x8000
define SEEK_SET()  0
define SEEK_CUR()  1
define SEEK_END()  2
define MMIO_DEFAULTBUFFER()  8192
define MCIERR_INVALID_DEVICE_ID()  MCIERR_BASE + 1
define MCIERR_UNRECOGNIZED_KEYWORD()  MCIERR_BASE + 3
define MCIERR_UNRECOGNIZED_COMMAND()  MCIERR_BASE + 5
define MCIERR_HARDWARE()  MCIERR_BASE + 6
define MCIERR_INVALID_DEVICE_NAME()  MCIERR_BASE + 7
define MCIERR_OUT_OF_MEMORY()  MCIERR_BASE + 8
define MCIERR_DEVICE_OPEN()  MCIERR_BASE + 9
define MCIERR_CANNOT_LOAD_DRIVER()  MCIERR_BASE + 10
define MCIERR_MISSING_COMMAND_STRING()  MCIERR_BASE + 11
define MCIERR_PARAM_OVERFLOW()  MCIERR_BASE + 12
define MCIERR_MISSING_STRING_ARGUMENT()  MCIERR_BASE + 13
define MCIERR_BAD_INTEGER()  MCIERR_BASE + 14
define MCIERR_PARSER_INTERNAL()  MCIERR_BASE + 15
define MCIERR_DRIVER_INTERNAL()  MCIERR_BASE + 16
define MCIERR_MISSING_PARAMETER()  MCIERR_BASE + 17
define MCIERR_UNSUPPORTED_FUNCTION()  MCIERR_BASE + 18
define MCIERR_FILE_NOT_FOUND()  MCIERR_BASE + 19
define MCIERR_DEVICE_NOT_READY()  MCIERR_BASE + 20
define MCIERR_INTERNAL()  MCIERR_BASE + 21
define MCIERR_DRIVER()  MCIERR_BASE + 22
define MCIERR_CANNOT_USE_ALL()  MCIERR_BASE + 23
define MCIERR_MULTIPLE()  MCIERR_BASE + 24
define MCIERR_EXTENSION_NOT_FOUND()  MCIERR_BASE + 25
define MCIERR_OUTOFRANGE()  MCIERR_BASE + 26
define MCIERR_FLAGS_NOT_COMPATIBLE()  MCIERR_BASE + 28
define MCIERR_FILE_NOT_SAVED()  MCIERR_BASE + 30
define MCIERR_DEVICE_TYPE_REQUIRED()  MCIERR_BASE + 31
define MCIERR_DEVICE_LOCKED()  MCIERR_BASE + 32
define MCIERR_DUPLICATE_ALIAS()  MCIERR_BASE + 33
define MCIERR_BAD_CONSTANT()  MCIERR_BASE + 34
define MCIERR_MUST_USE_SHAREABLE()  MCIERR_BASE + 35
define MCIERR_MISSING_DEVICE_NAME()  MCIERR_BASE + 36
define MCIERR_BAD_TIME_FORMAT()  MCIERR_BASE + 37
define MCIERR_NO_CLOSING_QUOTE()  MCIERR_BASE + 38
define MCIERR_DUPLICATE_FLAGS()  MCIERR_BASE + 39
define MCIERR_INVALID_FILE()  MCIERR_BASE + 40
define MCIERR_NULL_PARAMETER_BLOCK()  MCIERR_BASE + 41
define MCIERR_UNNAMED_RESOURCE()  MCIERR_BASE + 42
define MCIERR_NEW_REQUIRES_ALIAS()  MCIERR_BASE + 43
define MCIERR_NOTIFY_ON_AUTO_OPEN()  MCIERR_BASE + 44
define MCIERR_NO_ELEMENT_ALLOWED()  MCIERR_BASE + 45
define MCIERR_NONAPPLICABLE_FUNCTION()  MCIERR_BASE + 46
define MCIERR_ILLEGAL_FOR_AUTO_OPEN()  MCIERR_BASE + 47
define MCIERR_FILENAME_REQUIRED()  MCIERR_BASE + 48
define MCIERR_EXTRA_CHARACTERS()  MCIERR_BASE + 49
define MCIERR_DEVICE_NOT_INSTALLED()  MCIERR_BASE + 50
define MCIERR_GET_CD()  MCIERR_BASE + 51
define MCIERR_SET_CD()  MCIERR_BASE + 52
define MCIERR_SET_DRIVE()  MCIERR_BASE + 53
define MCIERR_DEVICE_LENGTH()  MCIERR_BASE + 54
define MCIERR_DEVICE_ORD_LENGTH()  MCIERR_BASE + 55
define MCIERR_NO_INTEGER()  MCIERR_BASE + 56
define MCIERR_WAVE_OUTPUTSINUSE()  MCIERR_BASE + 64
define MCIERR_WAVE_SETOUTPUTINUSE()  MCIERR_BASE + 65
define MCIERR_WAVE_INPUTSINUSE()  MCIERR_BASE + 66
define MCIERR_WAVE_SETINPUTINUSE()  MCIERR_BASE + 67
define MCIERR_WAVE_OUTPUTUNSPECIFIED()  MCIERR_BASE + 68
define MCIERR_WAVE_INPUTUNSPECIFIED()  MCIERR_BASE + 69
define MCIERR_WAVE_OUTPUTSUNSUITABLE()  MCIERR_BASE + 70
define MCIERR_WAVE_SETOUTPUTUNSUITABLE()  MCIERR_BASE + 71
define MCIERR_WAVE_INPUTSUNSUITABLE()  MCIERR_BASE + 72
define MCIERR_WAVE_SETINPUTUNSUITABLE()  MCIERR_BASE + 73
define MCIERR_SEQ_DIV_INCOMPATIBLE()  MCIERR_BASE + 80
define MCIERR_SEQ_PORT_INUSE()  MCIERR_BASE + 81
define MCIERR_SEQ_PORT_NONEXISTENT()  MCIERR_BASE + 82
define MCIERR_SEQ_PORT_MAPNODEVICE()  MCIERR_BASE + 83
define MCIERR_SEQ_PORT_MISCERROR()  MCIERR_BASE + 84
define MCIERR_SEQ_TIMER()  MCIERR_BASE + 85
define MCIERR_SEQ_PORTUNSPECIFIED()  MCIERR_BASE + 86
define MCIERR_SEQ_NOMIDIPRESENT()  MCIERR_BASE + 87
define MCIERR_NO_WINDOW()  MCIERR_BASE + 90
define MCIERR_CREATEWINDOW()  MCIERR_BASE + 91
define MCIERR_FILE_READ()  MCIERR_BASE + 92
define MCIERR_FILE_WRITE()  MCIERR_BASE + 93
define MCIERR_CUSTOM_DRIVER_BASE()  MCIERR_BASE + 256
define MCI_FIRST()  0x800
define MCI_OPEN()  0x803
define MCI_CLOSE()  0x804
define MCI_ESCAPE()  0x805
define MCI_PLAY()  0x806
define MCI_SEEK()  0x807
define MCI_STOP()  0x808
define MCI_PAUSE()  0x809
define MCI_INFO()  0x80A
define MCI_GETDEVCAPS()  0x80B
define MCI_SPIN()  0x80C
define MCI_SET()  0x80D
define MCI_STEP()  0x80E
define MCI_RECORD()  0x80F
define MCI_SYSINFO()  0x810
define MCI_BREAK()  0x811
define MCI_SOUND()  0x812
define MCI_SAVE()  0x813
define MCI_STATUS()  0x814
define MCI_CUE()  0x830
define MCI_REALIZE()  0x840
define MCI_WINDOW()  0x841
define MCI_PUT()  0x842
define MCI_WHERE()  0x843
define MCI_FREEZE()  0x844
define MCI_UNFREEZE()  0x845
define MCI_LOAD()  0x850
define MCI_CUT()  0x851
define MCI_COPY()  0x852
define MCI_PASTE()  0x853
define MCI_UPDATE()  0x854
define MCI_RESUME()  0x855
define MCI_DELETE()  0x856
define MCI_LAST()  0x0FFF
define MCI_USER_MESSAGES()  0x400 + MCI_FIRST
define MCI_ALL_DEVICE_ID()  -1
define MCI_DEVTYPE_VCR()  513
define MCI_DEVTYPE_VIDEODISC()  514
define MCI_DEVTYPE_OVERLAY()  515
define MCI_DEVTYPE_CD_AUDIO()  516
define MCI_DEVTYPE_DAT()  517
define MCI_DEVTYPE_SCANNER()  518
define MCI_DEVTYPE_ANIMATION()  519
define MCI_DEVTYPE_DIGITAL_VIDEO()  520
define MCI_DEVTYPE_OTHER()  521
define MCI_DEVTYPE_WAVEFORM_AUDIO()  522
define MCI_DEVTYPE_SEQUENCER()  523
define MCI_DEVTYPE_FIRST()  MCI_DEVTYPE_VCR
define MCI_DEVTYPE_LAST()  MCI_DEVTYPE_SEQUENCER
define MCI_DEVTYPE_FIRST_USER()  0x1000
define MCI_MODE_NOT_READY()  MCI_STRING_OFFSET + 12
define MCI_MODE_STOP()  MCI_STRING_OFFSET + 13
define MCI_MODE_PLAY()  MCI_STRING_OFFSET + 14
define MCI_MODE_RECORD()  MCI_STRING_OFFSET + 15
define MCI_MODE_SEEK()  MCI_STRING_OFFSET + 16
define MCI_MODE_PAUSE()  MCI_STRING_OFFSET + 17
define MCI_MODE_OPEN()  MCI_STRING_OFFSET + 18
define MCI_FORMAT_MILLISECONDS()  0
define MCI_FORMAT_HMS()  1
define MCI_FORMAT_MSF()  2
define MCI_FORMAT_FRAMES()  3
define MCI_FORMAT_SMPTE_24()  4
define MCI_FORMAT_SMPTE_25()  5
define MCI_FORMAT_SMPTE_30()  6
define MCI_FORMAT_SMPTE_30DROP()  7
define MCI_FORMAT_BYTES()  8
define MCI_FORMAT_SAMPLES()  9
define MCI_FORMAT_TMSF()  10
define MCI_NOTIFY_SUCCESSFUL()  0x1
define MCI_NOTIFY_SUPERSEDED()  0x2
define MCI_NOTIFY_ABORTED()  0x4
define MCI_NOTIFY_FAILURE()  0x8
define MCI_NOTIFY()  0x1
define MCI_WAIT()  0x2
define MCI_FROM()  0x4
define MCI_TO()  0x8
define MCI_TRACK()  0x10
define MCI_OPEN_SHAREABLE()  0x100
define MCI_OPEN_ELEMENT()  0x200
define MCI_OPEN_ALIAS()  0x400
define MCI_OPEN_ELEMENT_ID()  0x800
define MCI_OPEN_TYPE_ID()  0x1000
define MCI_OPEN_TYPE()  0x2000
define MCI_SEEK_TO_START()  0x100
define MCI_SEEK_TO_END()  0x200
define MCI_STATUS_ITEM()  0x100
define MCI_STATUS_START()  0x200
define MCI_STATUS_LENGTH()  0x1
define MCI_STATUS_POSITION()  0x2
define MCI_STATUS_NUMBER_OF_TRACKS()  0x3
define MCI_STATUS_MODE()  0x4
define MCI_STATUS_MEDIA_PRESENT()  0x5
define MCI_STATUS_TIME_FORMAT()  0x6
define MCI_STATUS_READY()  0x7
define MCI_STATUS_CURRENT_TRACK()  0x8
define MCI_INFO_PRODUCT()  0x100
define MCI_INFO_FILE()  0x200
define MCI_GETDEVCAPS_ITEM()  0x100
define MCI_GETDEVCAPS_CAN_RECORD()  0x1
define MCI_GETDEVCAPS_HAS_AUDIO()  0x2
define MCI_GETDEVCAPS_HAS_VIDEO()  0x3
define MCI_GETDEVCAPS_DEVICE_TYPE()  0x4
define MCI_GETDEVCAPS_USES_FILES()  0x5
define MCI_GETDEVCAPS_COMPOUND_DEVICE()  0x6
define MCI_GETDEVCAPS_CAN_EJECT()  0x7
define MCI_GETDEVCAPS_CAN_PLAY()  0x8
define MCI_GETDEVCAPS_CAN_SAVE()  0x9
define MCI_SYSINFO_QUANTITY()  0x100
define MCI_SYSINFO_OPEN()  0x200
define MCI_SYSINFO_NAME()  0x400
define MCI_SYSINFO_INSTALLNAME()  0x800
define MCI_SET_DOOR_OPEN()  0x100
define MCI_SET_DOOR_CLOSED()  0x200
define MCI_SET_TIME_FORMAT()  0x400
define MCI_SET_AUDIO()  0x800
define MCI_SET_VIDEO()  0x1000
define MCI_SET_ON()  0x2000
define MCI_SET_OFF()  0x4000
define MCI_SET_AUDIO_ALL()  0x4001
define MCI_SET_AUDIO_LEFT()  0x4002
define MCI_SET_AUDIO_RIGHT()  0x4003
define MCI_BREAK_KEY()  0x100
define MCI_BREAK_HWND()  0x200
define MCI_BREAK_OFF()  0x400
define MCI_RECORD_INSERT()  0x100
define MCI_RECORD_OVERWRITE()  0x200
define MCI_SOUND_NAME()  0x100
define MCI_SAVE_FILE()  0x100
define MCI_LOAD_FILE()  0x100
define MCI_VD_MODE_PARK()  MCI_VD_OFFSET + 1
define MCI_VD_MEDIA_CLV()  MCI_VD_OFFSET + 2
define MCI_VD_MEDIA_CAV()  MCI_VD_OFFSET + 3
define MCI_VD_MEDIA_OTHER()  MCI_VD_OFFSET + 4
define MCI_VD_FORMAT_TRACK()  0x4001
define MCI_VD_PLAY_REVERSE()  0x10000
define MCI_VD_PLAY_FAST()  0x20000
define MCI_VD_PLAY_SPEED()  0x40000
define MCI_VD_PLAY_SCAN()  0x80000
define MCI_VD_PLAY_SLOW()  0x100000
define MCI_VD_SEEK_REVERSE()  0x10000
define MCI_VD_STATUS_SPEED()  0x4002
define MCI_VD_STATUS_FORWARD()  0x4003
define MCI_VD_STATUS_MEDIA_TYPE()  0x4004
define MCI_VD_STATUS_SIDE()  0x4005
define MCI_VD_STATUS_DISC_SIZE()  0x4006
define MCI_VD_GETDEVCAPS_CLV()  0x10000
define MCI_VD_GETDEVCAPS_CAV()  0x20000
define MCI_VD_SPIN_UP()  0x10000
define MCI_VD_SPIN_DOWN()  0x20000
define MCI_VD_GETDEVCAPS_CAN_REVERSE()  0x4002
define MCI_VD_GETDEVCAPS_FAST_RATE()  0x4003
define MCI_VD_GETDEVCAPS_SLOW_RATE()  0x4004
define MCI_VD_GETDEVCAPS_NORMAL_RATE()  0x4005
define MCI_VD_STEP_FRAMES()  0x10000
define MCI_VD_STEP_REVERSE()  0x20000
define MCI_VD_ESCAPE_STRING()  0x100
define MCI_WAVE_PCM()  MCI_WAVE_OFFSET + 0
define MCI_WAVE_MAPPER()  MCI_WAVE_OFFSET + 1
define MCI_WAVE_OPEN_BUFFER()  0x10000
define MCI_WAVE_SET_FORMATTAG()  0x10000
define MCI_WAVE_SET_CHANNELS()  0x20000
define MCI_WAVE_SET_SAMPLESPERSEC()  0x40000
define MCI_WAVE_SET_AVGBYTESPERSEC()  0x80000
define MCI_WAVE_SET_BLOCKALIGN()  0x100000
define MCI_WAVE_SET_BITSPERSAMPLE()  0x200000
define MCI_WAVE_INPUT()  0x400000
define MCI_WAVE_OUTPUT()  0x800000
define MCI_WAVE_STATUS_FORMATTAG()  0x4001
define MCI_WAVE_STATUS_CHANNELS()  0x4002
define MCI_WAVE_STATUS_SAMPLESPERSEC()  0x4003
define MCI_WAVE_STATUS_AVGBYTESPERSEC()  0x4004
define MCI_WAVE_STATUS_BLOCKALIGN()  0x4005
define MCI_WAVE_STATUS_BITSPERSAMPLE()  0x4006
define MCI_WAVE_STATUS_LEVEL()  0x4007
define MCI_WAVE_SET_ANYINPUT()  0x4000000
define MCI_WAVE_SET_ANYOUTPUT()  0x8000000
define MCI_WAVE_GETDEVCAPS_INPUTS()  0x4001
define MCI_WAVE_GETDEVCAPS_OUTPUTS()  0x4002
define MCI_SEQ_DIV_PPQN()  0 + MCI_SEQ_OFFSET
define MCI_SEQ_DIV_SMPTE_24()  1 + MCI_SEQ_OFFSET
define MCI_SEQ_DIV_SMPTE_25()  2 + MCI_SEQ_OFFSET
define MCI_SEQ_DIV_SMPTE_30DROP()  3 + MCI_SEQ_OFFSET
define MCI_SEQ_DIV_SMPTE_30()  4 + MCI_SEQ_OFFSET
define MCI_SEQ_FORMAT_SONGPTR()  0x4001
define MCI_SEQ_FILE()  0x4002
define MCI_SEQ_MIDI()  0x4003
define MCI_SEQ_SMPTE()  0x4004
define MCI_SEQ_NONE()  65533
define MCI_SEQ_MAPPER()  65535
define MCI_SEQ_STATUS_TEMPO()  0x4002
define MCI_SEQ_STATUS_PORT()  0x4003
define MCI_SEQ_STATUS_SLAVE()  0x4007
define MCI_SEQ_STATUS_MASTER()  0x4008
define MCI_SEQ_STATUS_OFFSET()  0x4009
define MCI_SEQ_STATUS_DIVTYPE()  0x400A
define MCI_SEQ_SET_TEMPO()  0x10000
define MCI_SEQ_SET_PORT()  0x20000
define MCI_SEQ_SET_SLAVE()  0x40000
define MCI_SEQ_SET_MASTER()  0x80000
define MCI_SEQ_SET_OFFSET()  0x1000000
define MCI_ANIM_OPEN_WS()  0x10000
define MCI_ANIM_OPEN_PARENT()  0x20000
define MCI_ANIM_OPEN_NOSTATIC()  0x40000
define MCI_ANIM_PLAY_SPEED()  0x10000
define MCI_ANIM_PLAY_REVERSE()  0x20000
define MCI_ANIM_PLAY_FAST()  0x40000
define MCI_ANIM_PLAY_SLOW()  0x80000
define MCI_ANIM_PLAY_SCAN()  0x100000
define MCI_ANIM_STEP_REVERSE()  0x10000
define MCI_ANIM_STEP_FRAMES()  0x20000
define MCI_ANIM_STATUS_SPEED()  0x4001
define MCI_ANIM_STATUS_FORWARD()  0x4002
define MCI_ANIM_STATUS_HWND()  0x4003
define MCI_ANIM_STATUS_HPAL()  0x4004
define MCI_ANIM_STATUS_STRETCH()  0x4005
define MCI_ANIM_INFO_TEXT()  0x10000
define MCI_ANIM_GETDEVCAPS_CAN_REVERSE()  0x4001
define MCI_ANIM_GETDEVCAPS_FAST_RATE()  0x4002
define MCI_ANIM_GETDEVCAPS_SLOW_RATE()  0x4003
define MCI_ANIM_GETDEVCAPS_NORMAL_RATE()  0x4004
define MCI_ANIM_GETDEVCAPS_PALETTES()  0x4006
define MCI_ANIM_GETDEVCAPS_CAN_STRETCH()  0x4007
define MCI_ANIM_GETDEVCAPS_MAX_WINDOWS()  0x4008
define MCI_ANIM_REALIZE_NORM()  0x10000
define MCI_ANIM_REALIZE_BKGD()  0x20000
define MCI_ANIM_WINDOW_HWND()  0x10000
define MCI_ANIM_WINDOW_STATE()  0x40000
define MCI_ANIM_WINDOW_TEXT()  0x80000
define MCI_ANIM_WINDOW_ENABLE_STRETCH()  0x100000
define MCI_ANIM_WINDOW_DISABLE_STRETCH()  0x200000
define MCI_ANIM_WINDOW_DEFAULT()  0x0
define MCI_ANIM_RECT()  0x10000
define MCI_ANIM_PUT_SOURCE()  0x20000
define MCI_ANIM_PUT_DESTINATION()  0x40000
define MCI_ANIM_WHERE_SOURCE()  0x20000
define MCI_ANIM_WHERE_DESTINATION()  0x40000
define MCI_ANIM_UPDATE_HDC()  0x20000
define MCI_OVLY_OPEN_WS()  0x10000
define MCI_OVLY_OPEN_PARENT()  0x20000
define MCI_OVLY_STATUS_HWND()  0x4001
define MCI_OVLY_STATUS_STRETCH()  0x4002
define MCI_OVLY_INFO_TEXT()  0x10000
define MCI_OVLY_GETDEVCAPS_CAN_STRETCH()  0x4001
define MCI_OVLY_GETDEVCAPS_CAN_FREEZE()  0x4002
define MCI_OVLY_GETDEVCAPS_MAX_WINDOWS()  0x4003
define MCI_OVLY_WINDOW_HWND()  0x10000
define MCI_OVLY_WINDOW_STATE()  0x40000
define MCI_OVLY_WINDOW_TEXT()  0x80000
define MCI_OVLY_WINDOW_ENABLE_STRETCH()  0x100000
define MCI_OVLY_WINDOW_DISABLE_STRETCH()  0x200000
define MCI_OVLY_WINDOW_DEFAULT()  0x0
define MCI_OVLY_RECT()  0x10000
define MCI_OVLY_PUT_SOURCE()  0x20000
define MCI_OVLY_PUT_DESTINATION()  0x40000
define MCI_OVLY_PUT_FRAME()  0x80000
define MCI_OVLY_PUT_VIDEO()  0x100000
define MCI_OVLY_WHERE_SOURCE()  0x20000
define MCI_OVLY_WHERE_DESTINATION()  0x40000
define MCI_OVLY_WHERE_FRAME()  0x80000
define MCI_OVLY_WHERE_VIDEO()  0x100000
define CAPS1()  94
define C1_TRANSPARENT()  0x1
define NEWTRANSPARENT()  3
define QUERYROPSUPPORT()  40
define SELECTDIB()  41
define SE_ERR_SHARE()  26
define SE_ERR_ASSOCINCOMPLETE()  27
define SE_ERR_DDETIMEOUT()  28
define SE_ERR_DDEFAIL()  29
define SE_ERR_DDEBUSY()  30
define SE_ERR_NOASSOC()  31
define PRINTER_CONTROL_PAUSE()  1
define PRINTER_CONTROL_RESUME()  2
define PRINTER_CONTROL_PURGE()  3
define PRINTER_STATUS_PAUSED()  0x1
define PRINTER_STATUS_ERROR()  0x2
define PRINTER_STATUS_PENDING_DELETION()  0x4
define PRINTER_STATUS_PAPER_JAM()  0x8
define PRINTER_STATUS_PAPER_OUT()  0x10
define PRINTER_STATUS_MANUAL_FEED()  0x20
define PRINTER_STATUS_PAPER_PROBLEM()  0x40
define PRINTER_STATUS_OFFLINE()  0x80
define PRINTER_STATUS_IO_ACTIVE()  0x100
define PRINTER_STATUS_BUSY()  0x200
define PRINTER_STATUS_PRINTING()  0x400
define PRINTER_STATUS_OUTPUT_BIN_FULL()  0x800
define PRINTER_STATUS_NOT_AVAILABLE()  0x1000
define PRINTER_STATUS_WAITING()  0x2000
define PRINTER_STATUS_PROCESSING()  0x4000
define PRINTER_STATUS_INITIALIZING()  0x8000
define PRINTER_STATUS_WARMING_UP()  0x10000
define PRINTER_STATUS_TONER_LOW()  0x20000
define PRINTER_STATUS_NO_TONER()  0x40000
define PRINTER_STATUS_PAGE_PUNT()  0x80000
define PRINTER_STATUS_USER_INTERVENTION()  0x100000
define PRINTER_STATUS_OUT_OF_MEMORY()  0x200000
define PRINTER_STATUS_DOOR_OPEN()  0x400000
define PRINTER_ATTRIBUTE_QUEUED()  0x1
define PRINTER_ATTRIBUTE_DIRECT()  0x2
define PRINTER_ATTRIBUTE_DEFAULT()  0x4
define PRINTER_ATTRIBUTE_SHARED()  0x8
define PRINTER_ATTRIBUTE_NETWORK()  0x10
define PRINTER_ATTRIBUTE_HIDDEN()  0x20
define PRINTER_ATTRIBUTE_LOCAL()  0x40
define NO_PRIORITY()  0
define MAX_PRIORITY()  99
define MIN_PRIORITY()  1
define DEF_PRIORITY()  1
define JOB_CONTROL_PAUSE()  1
define JOB_CONTROL_RESUME()  2
define JOB_CONTROL_CANCEL()  3
define JOB_CONTROL_RESTART()  4
define JOB_STATUS_PAUSED()  0x1
define JOB_STATUS_ERROR()  0x2
define JOB_STATUS_DELETING()  0x4
define JOB_STATUS_SPOOLING()  0x8
define JOB_STATUS_PRINTING()  0x10
define JOB_STATUS_OFFLINE()  0x20
define JOB_STATUS_PAPEROUT()  0x40
define JOB_STATUS_PRINTED()  0x80
define JOB_POSITION_UNSPECIFIED()  0
define FORM_BUILTIN()  0x1
define PRINTER_CONTROL_SET_STATUS()  4
define PRINTER_ATTRIBUTE_WORK_OFFLINE()  0x400
define PRINTER_ATTRIBUTE_ENABLE_BIDI()  0x800
define JOB_CONTROL_DELETE()  5
define JOB_STATUS_USER_INTERVENTION()  0x10000
define DI_CHANNEL()  1
define DI_READ_SPOOL_JOB()  3
define PORT_TYPE_WRITE()  0x1
define PORT_TYPE_READ()  0x2
define PORT_TYPE_REDIRECTED()  0x4
define PORT_TYPE_NET_ATTACHED()  0x8
define PRINTER_ENUM_DEFAULT()  0x1
define PRINTER_ENUM_LOCAL()  0x2
define PRINTER_ENUM_CONNECTIONS()  0x4
define PRINTER_ENUM_FAVORITE()  0x4
define PRINTER_ENUM_NAME()  0x8
define PRINTER_ENUM_REMOTE()  0x10
define PRINTER_ENUM_SHARED()  0x20
define PRINTER_ENUM_NETWORK()  0x40
define PRINTER_ENUM_EXPAND()  0x4000
define PRINTER_ENUM_CONTAINER()  0x8000
define PRINTER_ENUM_ICONMASK()  0x0FF0000
define PRINTER_ENUM_ICON1()  0x10000
define PRINTER_ENUM_ICON2()  0x20000
define PRINTER_ENUM_ICON3()  0x40000
define PRINTER_ENUM_ICON4()  0x80000
define PRINTER_ENUM_ICON5()  0x100000
define PRINTER_ENUM_ICON6()  0x200000
define PRINTER_ENUM_ICON7()  0x400000
define PRINTER_ENUM_ICON8()  0x800000
define PRINTER_CHANGE_ADD_PRINTER()  0x1
define PRINTER_CHANGE_SET_PRINTER()  0x2
define PRINTER_CHANGE_DELETE_PRINTER()  0x4
define PRINTER_CHANGE_PRINTER()  0x0FF
define PRINTER_CHANGE_ADD_JOB()  0x100
define PRINTER_CHANGE_SET_JOB()  0x200
define PRINTER_CHANGE_DELETE_JOB()  0x400
define PRINTER_CHANGE_WRITE_JOB()  0x800
define PRINTER_CHANGE_JOB()  0x0FF00
define PRINTER_CHANGE_ADD_FORM()  0x10000
define PRINTER_CHANGE_SET_FORM()  0x20000
define PRINTER_CHANGE_DELETE_FORM()  0x40000
define PRINTER_CHANGE_FORM()  0x70000
define PRINTER_CHANGE_ADD_PORT()  0x100000
define PRINTER_CHANGE_CONFIGURE_PORT()  0x200000
define PRINTER_CHANGE_DELETE_PORT()  0x400000
define PRINTER_CHANGE_PORT()  0x700000
define PRINTER_CHANGE_ADD_PRINT_PROCESSOR()  0x1000000
define PRINTER_CHANGE_DELETE_PRINT_PROCESSOR()  0x4000000
define PRINTER_CHANGE_PRINT_PROCESSOR()  0x7000000
define PRINTER_CHANGE_ADD_PRINTER_DRIVER()  0x10000000
define PRINTER_CHANGE_DELETE_PRINTER_DRIVER()  0x40000000
define PRINTER_CHANGE_PRINTER_DRIVER()  0x70000000
define PRINTER_CHANGE_TIMEOUT()  0x80000000
define PRINTER_CHANGE_ALL()  0x7777FFFF
define PRINTER_ERROR_INFORMATION()  0x80000000
define PRINTER_ERROR_WARNING()  0x40000000
define PRINTER_ERROR_SEVERE()  0x20000000
define PRINTER_ERROR_OUTOFPAPER()  0x1
define PRINTER_ERROR_JAM()  0x2
define PRINTER_ERROR_OUTOFTONER()  0x4
define SERVER_ACCESS_ADMINISTER()  0x1
define SERVER_ACCESS_ENUMERATE()  0x2
define PRINTER_ACCESS_ADMINISTER()  0x4
define PRINTER_ACCESS_USE()  0x8
define JOB_ACCESS_ADMINISTER()  0x10
define SERVER_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SERVER_ACCESS_ADMINISTER | SERVER_ACCESS_ENUMERATE
define SERVER_READ()  STANDARD_RIGHTS_READ | SERVER_ACCESS_ENUMERATE
define SERVER_WRITE()  STANDARD_RIGHTS_WRITE | SERVER_ACCESS_ADMINISTER | SERVER_ACCESS_ENUMERATE
define SERVER_EXECUTE()  STANDARD_RIGHTS_EXECUTE | SERVER_ACCESS_ENUMERATE
define PRINTER_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | PRINTER_ACCESS_ADMINISTER | PRINTER_ACCESS_USE
define PRINTER_READ()  STANDARD_RIGHTS_READ | PRINTER_ACCESS_USE
define PRINTER_WRITE()  STANDARD_RIGHTS_WRITE | PRINTER_ACCESS_USE
define PRINTER_EXECUTE()  STANDARD_RIGHTS_EXECUTE | PRINTER_ACCESS_USE
define JOB_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | JOB_ACCESS_ADMINISTER
define JOB_READ()  STANDARD_RIGHTS_READ | JOB_ACCESS_ADMINISTER
define JOB_WRITE()  STANDARD_RIGHTS_WRITE | JOB_ACCESS_ADMINISTER
define JOB_EXECUTE()  STANDARD_RIGHTS_EXECUTE | JOB_ACCESS_ADMINISTER
define RESOURCE_CONNECTED()  0x1
define RESOURCE_PUBLICNET()  0x2
define RESOURCE_GLOBALNET()  0x2
define RESOURCE_REMEMBERED()  0x3
define RESOURCE_RECENT()  0x4
define RESOURCE_CONTEXT()  0x5
define RESOURCETYPE_ANY()  0x0
define RESOURCETYPE_DISK()  0x1
define RESOURCETYPE_PRINT()  0x2
define RESOURCETYPE_UNKNOWN()  0x0FFFF
define RESOURCEUSAGE_CONNECTABLE()  0x1
define RESOURCEUSAGE_CONTAINER()  0x2
define RESOURCEUSAGE_RESERVED()  0x80000000
define RESOURCEDISPLAYTYPE_GENERIC()  0x0
define RESOURCEDISPLAYTYPE_DOMAIN()  0x1
define RESOURCEDISPLAYTYPE_SERVER()  0x2
define RESOURCEDISPLAYTYPE_SHARE()  0x3
define RESOURCEDISPLAYTYPE_FILE()  0x4
define RESOURCEDISPLAYTYPE_GROUP()  0x5
define CONNECT_UPDATE_PROFILE()  0x1
define WN_SUCCESS()  NO_ERROR
define WN_NOT_SUPPORTED()  ERROR_NOT_SUPPORTED
define WN_NET_ERROR()  ERROR_UNEXP_NET_ERR
define WN_MORE_DATA()  ERROR_MORE_DATA
define WN_BAD_POINTER()  ERROR_INVALID_ADDRESS
define WN_BAD_VALUE()  ERROR_INVALID_PARAMETER
define WN_BAD_PASSWORD()  ERROR_INVALID_PASSWORD
define WN_ACCESS_DENIED()  ERROR_ACCESS_DENIED
define WN_FUNCTION_BUSY()  ERROR_BUSY
define WN_WINDOWS_ERROR()  ERROR_UNEXP_NET_ERR
define WN_BAD_USER()  ERROR_BAD_USERNAME
define WN_OUT_OF_MEMORY()  ERROR_NOT_ENOUGH_MEMORY
define WN_NO_NETWORK()  ERROR_NO_NETWORK
define WN_EXTENDED_ERROR()  ERROR_EXTENDED_ERROR
define WN_NOT_CONNECTED()  ERROR_NOT_CONNECTED
define WN_OPEN_FILES()  ERROR_OPEN_FILES
define WN_DEVICE_IN_USE()  ERROR_DEVICE_IN_USE
define WN_BAD_NETNAME()  ERROR_BAD_NET_NAME
define WN_BAD_LOCALNAME()  ERROR_BAD_DEVICE
define WN_ALREADY_CONNECTED()  ERROR_ALREADY_ASSIGNED
define WN_DEVICE_ERROR()  ERROR_GEN_FAILURE
define WN_CONNECTION_CLOSED()  ERROR_CONNECTION_UNAVAIL
define WN_NO_NET_OR_BAD_PATH()  ERROR_NO_NET_OR_BAD_PATH
define WN_BAD_PROVIDER()  ERROR_BAD_PROVIDER
define WN_CANNOT_OPEN_PROFILE()  ERROR_CANNOT_OPEN_PROFILE
define WN_BAD_PROFILE()  ERROR_BAD_PROFILE
define WN_BAD_HANDLE()  ERROR_INVALID_HANDLE
define WN_NO_MORE_ENTRIES()  ERROR_NO_MORE_ITEMS
define WN_NOT_CONTAINER()  ERROR_NOT_CONTAINER
define WN_NO_ERROR()  NO_ERROR
define NCBNAMSZ()  16
define MAX_LANA()  254
define NAME_FLAGS_MASK()  0x87
define GROUP_NAME()  0x80
define UNIQUE_NAME()  0x0
define REGISTERING()  0x0
define REGISTERED()  0x4
define DEREGISTERED()  0x5
define DUPLICATE()  0x6
define DUPLICATE_DEREG()  0x7
define LISTEN_OUTSTANDING()  0x1
define CALL_PENDING()  0x2
define SESSION_ESTABLISHED()  0x3
define HANGUP_PENDING()  0x4
define HANGUP_COMPLETE()  0x5
define SESSION_ABORTED()  0x6
define NCBCALL()  0x10
define NCBLISTEN()  0x11
define NCBHANGUP()  0x12
define NCBSEND()  0x14
define NCBRECV()  0x15
define NCBRECVANY()  0x16
define NCBCHAINSEND()  0x17
define NCBDGSEND()  0x20
define NCBDGRECV()  0x21
define NCBDGSENDBC()  0x22
define NCBDGRECVBC()  0x23
define NCBADDNAME()  0x30
define NCBDELNAME()  0x31
define NCBRESET()  0x32
define NCBASTAT()  0x33
define NCBSSTAT()  0x34
define NCBCANCEL()  0x35
define NCBADDGRNAME()  0x36
define NCBENUM()  0x37
define NCBUNLINK()  0x70
define NCBSENDNA()  0x71
define NCBCHAINSENDNA()  0x72
define NCBLANSTALERT()  0x73
define NCBACTION()  0x77
define NCBFINDNAME()  0x78
define NCBTRACE()  0x79
define ASYNCH()  0x80
define NRC_GOODRET()  0x0
define NRC_BUFLEN()  0x1
define NRC_ILLCMD()  0x3
define NRC_CMDTMO()  0x5
define NRC_INCOMP()  0x6
define NRC_BADDR()  0x7
define NRC_SNUMOUT()  0x8
define NRC_NORES()  0x9
define NRC_SCLOSED()  0x0A
define NRC_CMDCAN()  0x0B
define NRC_DUPNAME()  0x0D
define NRC_NAMTFUL()  0x0E
define NRC_ACTSES()  0x0F
define NRC_LOCTFUL()  0x11
define NRC_REMTFUL()  0x12
define NRC_ILLNN()  0x13
define NRC_NOCALL()  0x14
define NRC_NOWILD()  0x15
define NRC_INUSE()  0x16
define NRC_NAMERR()  0x17
define NRC_SABORT()  0x18
define NRC_NAMCONF()  0x19
define NRC_IFBUSY()  0x21
define NRC_TOOMANY()  0x22
define NRC_BRIDGE()  0x23
define NRC_CANOCCR()  0x24
define NRC_CANCEL()  0x26
define NRC_DUPENV()  0x30
define NRC_ENVNOTDEF()  0x34
define NRC_OSRESNOTAV()  0x35
define NRC_MAXAPPS()  0x36
define NRC_NOSAPS()  0x37
define NRC_NORESOURCES()  0x38
define NRC_INVADDRESS()  0x39
define NRC_INVDDID()  0x3B
define NRC_LOCKFAIL()  0x3C
define NRC_OPENERR()  0x3F
define NRC_SYSTEM()  0x40
define NRC_PENDING()  0x0FF
define EXCEPTION_EXECUTE_HANDLER()  1
define EXCEPTION_CONTINUE_SEARCH()  0
define EXCEPTION_CONTINUE_EXECUTION()  -1
define ctlFirst()  0x400
define ctlLast()  0x4FF
define psh1()  0x400
define psh2()  0x401
define psh3()  0x402
define psh4()  0x403
define psh5()  0x404
define psh6()  0x405
define psh7()  0x406
define psh8()  0x407
define psh9()  0x408
define psh10()  0x409
define psh11()  0x40A
define psh12()  0x40B
define psh13()  0x40C
define psh14()  0x40D
define psh15()  0x40E
define pshHelp()  psh15
define psh16()  0x40F
define chx1()  0x410
define chx2()  0x411
define chx3()  0x412
define chx4()  0x413
define chx5()  0x414
define chx6()  0x415
define chx7()  0x416
define chx8()  0x417
define chx9()  0x418
define chx10()  0x419
define chx11()  0x41A
define chx12()  0x41B
define chx13()  0x41C
define chx14()  0x41D
define chx15()  0x41E
define chx16()  0x41D
define rad1()  0x420
define rad2()  0x421
define rad3()  0x422
define rad4()  0x423
define rad5()  0x424
define rad6()  0x425
define rad7()  0x426
define rad8()  0x427
define rad9()  0x428
define rad10()  0x429
define rad11()  0x42A
define rad12()  0x42B
define rad13()  0x42C
define rad14()  0x42D
define rad15()  0x42E
define rad16()  0x42F
define grp1()  0x430
define grp2()  0x431
define grp3()  0x432
define grp4()  0x433
define frm1()  0x434
define frm2()  0x435
define frm3()  0x436
define frm4()  0x437
define rct1()  0x438
define rct2()  0x439
define rct3()  0x43A
define rct4()  0x43B
define ico1()  0x43C
define ico2()  0x43D
define ico3()  0x43E
define ico4()  0x43F
define stc1()  0x440
define stc2()  0x441
define stc3()  0x442
define stc4()  0x443
define stc5()  0x444
define stc6()  0x445
define stc7()  0x446
define stc8()  0x447
define stc9()  0x448
define stc10()  0x449
define stc11()  0x44A
define stc12()  0x44B
define stc13()  0x44C
define stc14()  0x44D
define stc15()  0x44E
define stc16()  0x44F
define stc17()  0x450
define stc18()  0x451
define stc19()  0x452
define stc20()  0x453
define stc21()  0x454
define stc22()  0x455
define stc23()  0x456
define stc24()  0x457
define stc25()  0x458
define stc26()  0x459
define stc27()  0x45A
define stc28()  0x45B
define stc29()  0x45C
define stc30()  0x45D
define stc31()  0x45E
define stc32()  0x45F
define lst1()  0x460
define lst2()  0x461
define lst3()  0x462
define lst4()  0x463
define lst5()  0x464
define lst6()  0x465
define lst7()  0x466
define lst8()  0x467
define lst9()  0x468
define lst10()  0x469
define lst11()  0x46A
define lst12()  0x46B
define lst13()  0x46C
define lst14()  0x46D
define lst15()  0x46E
define lst16()  0x46F
define cmb1()  0x470
define cmb2()  0x471
define cmb3()  0x472
define cmb4()  0x473
define cmb5()  0x474
define cmb6()  0x475
define cmb7()  0x476
define cmb8()  0x477
define cmb9()  0x478
define cmb10()  0x479
define cmb11()  0x47A
define cmb12()  0x47B
define cmb13()  0x47C
define cmb14()  0x47D
define cmb15()  0x47E
define cmb16()  0x47F
define edt1()  0x480
define edt2()  0x481
define edt3()  0x482
define edt4()  0x483
define edt5()  0x484
define edt6()  0x485
define edt7()  0x486
define edt8()  0x487
define edt9()  0x488
define edt10()  0x489
define edt11()  0x48A
define edt12()  0x48B
define edt13()  0x48C
define edt14()  0x48D
define edt15()  0x48E
define edt16()  0x48F
define scr1()  0x490
define scr2()  0x491
define scr3()  0x492
define scr4()  0x493
define scr5()  0x494
define scr6()  0x495
define scr7()  0x496
define scr8()  0x497
define FILEOPENORD()  1536
define MULTIFILEOPENORD()  1537
define PRINTDLGORD()  1538
define PRNSETUPDLGORD()  1539
define FINDDLGORD()  1540
define REPLACEDLGORD()  1541
define FONTDLGORD()  1542
define FORMATDLGORD31()  1543
define FORMATDLGORD30()  1544
define HKEY_CLASSES_ROOT()  0x80000000
define HKEY_CURRENT_USER()  0x80000001
define HKEY_LOCAL_MACHINE()  0x80000002
define HKEY_USERS()  0x80000003
define HKEY_PERFORMANCE_DATA()  0x80000004
define HKEY_CURRENT_CONFIG()  0x80000005
define HKEY_DYN_DATA()  0x80000006
define SERVICE_NO_CHANGE()  0x0FFFFFFFF
define SERVICE_ACTIVE()  0x1
define SERVICE_INACTIVE()  0x2
define SERVICE_STATE_ALL()  SERVICE_ACTIVE | SERVICE_INACTIVE
define SERVICE_CONTROL_STOP()  0x1
define SERVICE_CONTROL_PAUSE()  0x2
define SERVICE_CONTROL_CONTINUE()  0x3
define SERVICE_CONTROL_INTERROGATE()  0x4
define SERVICE_CONTROL_SHUTDOWN()  0x5
define SERVICE_STOPPED()  0x1
define SERVICE_START_PENDING()  0x2
define SERVICE_STOP_PENDING()  0x3
define SERVICE_RUNNING()  0x4
define SERVICE_CONTINUE_PENDING()  0x5
define SERVICE_PAUSE_PENDING()  0x6
define SERVICE_PAUSED()  0x7
define SERVICE_ACCEPT_STOP()  0x1
define SERVICE_ACCEPT_PAUSE_CONTINUE()  0x2
define SERVICE_ACCEPT_SHUTDOWN()  0x4
define SC_MANAGER_CONNECT()  0x1
define SC_MANAGER_CREATE_SERVICE()  0x2
define SC_MANAGER_ENUMERATE_SERVICE()  0x4
define SC_MANAGER_LOCK()  0x8
define SC_MANAGER_QUERY_LOCK_STATUS()  0x10
define SC_MANAGER_MODIFY_BOOT_CONFIG()  0x20
define SC_MANAGER_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SC_MANAGER_CONNECT | SC_MANAGER_CREATE_SERVICE | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_LOCK | SC_MANAGER_QUERY_LOCK_STATUS | SC_MANAGER_MODIFY_BOOT_CONFIG
define SERVICE_QUERY_CONFIG()  0x1
define SERVICE_CHANGE_CONFIG()  0x2
define SERVICE_QUERY_STATUS()  0x4
define SERVICE_ENUMERATE_DEPENDENTS()  0x8
define SERVICE_START()  0x10
define SERVICE_STOP()  0x20
define SERVICE_PAUSE_CONTINUE()  0x40
define SERVICE_INTERROGATE()  0x80
define SERVICE_USER_DEFINED_CONTROL()  0x100
define SERVICE_ALL_ACCESS()  STANDARD_RIGHTS_REQUIRED | SERVICE_QUERY_CONFIG | SERVICE_CHANGE_CONFIG | SERVICE_QUERY_STATUS | SERVICE_ENUMERATE_DEPENDENTS | SERVICE_START | SERVICE_STOP | SERVICE_PAUSE_CONTINUE | SERVICE_INTERROGATE | SERVICE_USER_DEFINED_CONTROL
define PERF_DATA_VERSION()  1
define PERF_DATA_REVISION()  1
define PERF_NO_INSTANCES()  -1
define PERF_SIZE_DWORD()  0x0
define PERF_SIZE_LARGE()  0x100
define PERF_SIZE_ZERO()  0x200
define PERF_SIZE_VARIABLE_LEN()  0x300
define PERF_TYPE_NUMBER()  0x0
define PERF_TYPE_COUNTER()  0x400
define PERF_TYPE_TEXT()  0x800
define PERF_TYPE_ZERO()  0x0C00
define PERF_NUMBER_HEX()  0x0
define PERF_NUMBER_DECIMAL()  0x10000
define PERF_NUMBER_DEC_1000()  0x20000
define PERF_COUNTER_VALUE()  0x0
define PERF_COUNTER_RATE()  0x10000
define PERF_COUNTER_FRACTION()  0x20000
define PERF_COUNTER_BASE()  0x30000
define PERF_COUNTER_ELAPSED()  0x40000
define PERF_COUNTER_QUEUELEN()  0x50000
define PERF_COUNTER_HISTOGRAM()  0x60000
define PERF_TEXT_UNICODE()  0x0
define PERF_TEXT_ASCII()  0x10000
define PERF_TIMER_TICK()  0x0
define PERF_TIMER_100NS()  0x100000
define PERF_OBJECT_TIMER()  0x200000
define PERF_DELTA_COUNTER()  0x400000
define PERF_DELTA_BASE()  0x800000
define PERF_INVERSE_COUNTER()  0x1000000
define PERF_MULTI_COUNTER()  0x2000000
define PERF_DISPLAY_NO_SUFFIX()  0x0
define PERF_DISPLAY_PER_SEC()  0x10000000
define PERF_DISPLAY_PERCENT()  0x20000000
define PERF_DISPLAY_SECONDS()  0x30000000
define PERF_DISPLAY_NOSHOW()  0x40000000
define PERF_COUNTER_COUNTER()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PER_SEC
define PERF_COUNTER_TIMER()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PERCENT
define PERF_COUNTER_QUEUELEN_TYPE()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_QUEUELEN | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_NO_SUFFIX
define PERF_COUNTER_BULK_COUNT()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_PER_SEC
define PERF_COUNTER_TEXT()  PERF_SIZE_VARIABLE_LEN | PERF_TYPE_TEXT | PERF_TEXT_UNICODE | PERF_DISPLAY_NO_SUFFIX
define PERF_COUNTER_RAWCOUNT()  PERF_SIZE_DWORD | PERF_TYPE_NUMBER | PERF_NUMBER_DECIMAL | PERF_DISPLAY_NO_SUFFIX
define PERF_SAMPLE_FRACTION()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DELTA_COUNTER | PERF_DELTA_BASE | PERF_DISPLAY_PERCENT
define PERF_SAMPLE_COUNTER()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_DISPLAY_NO_SUFFIX
define PERF_COUNTER_NODATA()  PERF_SIZE_ZERO | PERF_DISPLAY_NOSHOW
define PERF_COUNTER_TIMER_INV()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_TICK | PERF_DELTA_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT
define PERF_SAMPLE_BASE()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | 0x1
define PERF_AVERAGE_TIMER()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_SECONDS
define PERF_AVERAGE_BASE()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | 0x2
define PERF_AVERAGE_BULK()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_NOSHOW
define PERF_100NSEC_TIMER()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER | PERF_DISPLAY_PERCENT
define PERF_100NSEC_TIMER_INV()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_DELTA_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT
define PERF_COUNTER_MULTI_TIMER()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_TIMER_TICK | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT
define PERF_COUNTER_MULTI_TIMER_INV()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_RATE | PERF_DELTA_COUNTER | PERF_MULTI_COUNTER | PERF_TIMER_TICK | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT
define PERF_COUNTER_MULTI_BASE()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_MULTI_COUNTER | PERF_DISPLAY_NOSHOW
define PERF_100NSEC_MULTI_TIMER()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_MULTI_COUNTER | PERF_DISPLAY_PERCENT
define PERF_100NSEC_MULTI_TIMER_INV()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_DELTA_COUNTER | PERF_COUNTER_RATE | PERF_TIMER_100NS | PERF_MULTI_COUNTER | PERF_INVERSE_COUNTER | PERF_DISPLAY_PERCENT
define PERF_RAW_FRACTION()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_FRACTION | PERF_DISPLAY_PERCENT
define PERF_RAW_BASE()  PERF_SIZE_DWORD | PERF_TYPE_COUNTER | PERF_COUNTER_BASE | PERF_DISPLAY_NOSHOW | 0x3
define PERF_ELAPSED_TIME()  PERF_SIZE_LARGE | PERF_TYPE_COUNTER | PERF_COUNTER_ELAPSED | PERF_OBJECT_TIMER | PERF_DISPLAY_SECONDS
define PERF_COUNTER_HISTOGRAM_TYPE()  0x80000000
define PERF_DETAIL_NOVICE()  100
define PERF_DETAIL_ADVANCED()  200
define PERF_DETAIL_EXPERT()  300
define PERF_DETAIL_WIZARD()  400
define PERF_NO_UNIQUE_ID()  -1
define LZERROR_BADINHANDLE()  -1
define LZERROR_BADOUTHANDLE()  -2
define LZERROR_READ()  -3
define LZERROR_WRITE()  -4
define LZERROR_PUBLICLOC()  -5
define LZERROR_GLOBLOCK()  -6
define LZERROR_BADVALUE()  -7
define LZERROR_UNKNOWNALG()  -8
define VK_PROCESSKEY()  0x0E5
define STYLE_DESCRIPTION_SIZE()  32
define WM_CONVERTREQUESTEX()  0x108

define WM_IME_REQUEST()  0x288
define WM_IME_STARTCOMPOSITION()  0x10D
define WM_IME_ENDCOMPOSITION()  0x10E
define WM_IME_COMPOSITION()  0x10F
define WM_IME_KEYLAST()  0x10F
define WM_IME_SETCONTEXT()  0x281
define WM_IME_NOTIFY()  0x282
define WM_IME_CONTROL()  0x283
define WM_IME_COMPOSITIONFULL()  0x284
define WM_IME_SELECT()  0x285
define WM_IME_CHAR()  0x286
define WM_IME_KEYDOWN()  0x290
define WM_IME_KEYUP()  0x291
define IMC_GETCANDIDATEPOS()  0x7
define IMC_SETCANDIDATEPOS()  0x8
define IMC_GETCOMPOSITIONFONT()  0x9
define IMC_SETCOMPOSITIONFONT()  0x0A
define IMC_GETCOMPOSITIONWINDOW()  0x0B
define IMC_SETCOMPOSITIONWINDOW()  0x0C
define IMC_GETSTATUSWINDOWPOS()  0x0F
define IMC_SETSTATUSWINDOWPOS()  0x10
define IMC_CLOSESTATUSWINDOW()  0x21
define IMC_OPENSTATUSWINDOW()  0x22
define NI_OPENCANDIDATE()  0x10
define NI_CLOSECANDIDATE()  0x11
define NI_SELECTCANDIDATESTR()  0x12
define NI_CHANGECANDIDATELIST()  0x13
define NI_FINALIZECONVERSIONRESULT()  0x14
define NI_COMPOSITIONSTR()  0x15
define NI_SETCANDIDATE_PAGESTART()  0x16
define NI_SETCANDIDATE_PAGESIZE()  0x17
define ISC_SHOWUICANDIDATEWINDOW()  0x1
define ISC_SHOWUICOMPOSITIONWINDOW()  0x80000000
define ISC_SHOWUIGUIDELINE()  0x40000000
define ISC_SHOWUIALLCANDIDATEWINDOW()  0x0F
define ISC_SHOWUIALL()  0x0C000000F
define CPS_COMPLETE()  0x1
define CPS_CONVERT()  0x2
define CPS_REVERT()  0x3
define CPS_CANCEL()  0x4
define IME_CHOTKEY_IME_NONIME_TOGGLE()  0x10
define IME_CHOTKEY_SHAPE_TOGGLE()  0x11
define IME_CHOTKEY_SYMBOL_TOGGLE()  0x12
define IME_JHOTKEY_CLOSE_OPEN()  0x30
define IME_KHOTKEY_SHAPE_TOGGLE()  0x50
define IME_KHOTKEY_HANJACONVERT()  0x51
define IME_KHOTKEY_ENGLISH()  0x52
define IME_THOTKEY_IME_NONIME_TOGGLE()  0x70
define IME_THOTKEY_SHAPE_TOGGLE()  0x71
define IME_THOTKEY_SYMBOL_TOGGLE()  0x72
define IME_HOTKEY_DSWITCH_FIRST()  0x100
define IME_HOTKEY_DSWITCH_LAST()  0x11F
define IME_ITHOTKEY_RESEND_RESULTSTR()  0x200
define IME_ITHOTKEY_PREVIOUS_COMPOSITION()  0x201
define IME_ITHOTKEY_UISTYLE_TOGGLE()  0x202
define GCS_COMPREADSTR()  0x1
define GCS_COMPREADATTR()  0x2
define GCS_COMPREADCLAUSE()  0x4
define GCS_COMPSTR()  0x8
define GCS_COMPATTR()  0x10
define GCS_COMPCLAUSE()  0x20
define GCS_CURSORPOS()  0x80
define GCS_DELTASTART()  0x100
define GCS_RESULTREADSTR()  0x200
define GCS_RESULTREADCLAUSE()  0x400
define GCS_RESULTSTR()  0x800
define GCS_RESULTCLAUSE()  0x1000
define CS_INSERTCHAR()  0x2000
define CS_NOMOVECARET()  0x4000
define IME_PROP_AT_CARET()  0x10000
define IME_PROP_SPECIAL_UI()  0x20000
define IME_PROP_CANDLIST_START_FROM_1()  0x40000
define IME_PROP_UNICODE()  0x80000
define UI_CAP_2700()  0x1
define UI_CAP_ROT90()  0x2
define UI_CAP_ROTANY()  0x4
define SCS_CAP_COMPSTR()  0x1
define SCS_CAP_MAKEREAD()  0x2
define SELECT_CAP_CONVERSION()  0x1
define SELECT_CAP_SENTENCE()  0x2
define GGL_LEVEL()  0x1
define GGL_INDEX()  0x2
define GGL_STRING()  0x3
define GGL_PRIVATE()  0x4
define GL_LEVEL_NOGUIDELINE()  0x0
define GL_LEVEL_FATAL()  0x1
define GL_LEVEL_ERROR()  0x2
define GL_LEVEL_WARNING()  0x3
define GL_LEVEL_INFORMATION()  0x4
define GL_ID_UNKNOWN()  0x0
define GL_ID_NOMODULE()  0x1
define GL_ID_NODICTIONARY()  0x10
define GL_ID_CANNOTSAVE()  0x11
define GL_ID_NOCONVERT()  0x20
define GL_ID_TYPINGERROR()  0x21
define GL_ID_TOOMANYSTROKE()  0x22
define GL_ID_READINGCONFLICT()  0x23
define GL_ID_INPUTREADING()  0x24
define GL_ID_INPUTRADICAL()  0x25
define GL_ID_INPUTCODE()  0x26
define GL_ID_INPUTSYMBOL()  0x27
define GL_ID_CHOOSECANDIDATE()  0x28
define GL_ID_REVERSECONVERSION()  0x29
define GL_ID_PRIVATE_FIRST()  0x8000
define GL_ID_PRIVATE_LAST()  0x0FFFF
define IGP_PROPERTY()  0x4
define IGP_CONVERSION()  0x8
define IGP_SENTENCE()  0x0C
define IGP_UI()  0x10
define IGP_SETCOMPSTR()  0x14
define IGP_SELECT()  0x18
define SCS_SETSTR()  GCS_COMPREADSTR | GCS_COMPSTR
define SCS_CHANGEATTR()  GCS_COMPREADATTR | GCS_COMPATTR
define SCS_CHANGECLAUSE()  GCS_COMPREADCLAUSE | GCS_COMPCLAUSE
define ATTR_INPUT()  0x0
define ATTR_TARGET_CONVERTED()  0x1
define ATTR_CONVERTED()  0x2
define ATTR_TARGET_NOTCONVERTED()  0x3
define ATTR_INPUT_ERROR()  0x4
define CFS_DEFAULT()  0x0
define CFS_RECT()  0x1
define CFS_POINT()  0x2
define CFS_SCREEN()  0x4
define CFS_FORCE_POSITION()  0x20
define CFS_CANDIDATEPOS()  0x40
define CFS_EXCLUDE()  0x80
define GCL_CONVERSION()  0x1
define GCL_REVERSECONVERSION()  0x2
define GCL_REVERSE_LENGTH()  0x3
define IME_CMODE_ALPHANUMERIC()  0x0
define IME_CMODE_NATIVE()  0x1
define IME_CMODE_CHINESE()  IME_CMODE_NATIVE
define IME_CMODE_HANGEUL()  IME_CMODE_NATIVE
define IME_CMODE_JAPANESE()  IME_CMODE_NATIVE
define IME_CMODE_KATAKANA()  0x2
define IME_CMODE_LANGUAGE()  0x3
define IME_CMODE_FULLSHAPE()  0x8
define IME_CMODE_ROMAN()  0x10
define IME_CMODE_CHARCODE()  0x20
define IME_CMODE_HANJACONVERT()  0x40
define IME_CMODE_SOFTKBD()  0x80
define IME_CMODE_NOCONVERSION()  0x100
define IME_CMODE_EUDC()  0x200
define IME_CMODE_SYMBOL()  0x400
define IME_SMODE_NONE()  0x0
define IME_SMODE_PLAURALCLAUSE()  0x1
define IME_SMODE_SINGLECONVERT()  0x2
define IME_SMODE_AUTOMATIC()  0x4
define IME_SMODE_PHRASEPREDICT()  0x8
define IME_CAND_UNKNOWN()  0x0
define IME_CAND_READ()  0x1
define IME_CAND_CODE()  0x2
define IME_CAND_MEANING()  0x3
define IME_CAND_RADICAL()  0x4
define IME_CAND_STROKE()  0x5
define IMN_CLOSESTATUSWINDOW()  0x1
define IMN_OPENSTATUSWINDOW()  0x2
define IMN_CHANGECANDIDATE()  0x3
define IMN_CLOSECANDIDATE()  0x4
define IMN_OPENCANDIDATE()  0x5
define IMN_SETCONVERSIONMODE()  0x6
define IMN_SETSENTENCEMODE()  0x7
define IMN_SETOPENSTATUS()  0x8
define IMN_SETCANDIDATEPOS()  0x9
define IMN_SETCOMPOSITIONFONT()  0x0A
define IMN_SETCOMPOSITIONWINDOW()  0x0B
define IMN_SETSTATUSWINDOWPOS()  0x0C
define IMN_GUIDELINE()  0x0D
define IMN_PRIVATE()  0x0E
define IMM_ERROR_NODATA()  -1
define IMM_ERROR_GENERAL()  -2
define IME_CONFIG_GENERAL()  1
define IME_CONFIG_REGISTERWORD()  2
define IME_CONFIG_SELECTDICTIONARY()  3
define IME_ESC_QUERY_SUPPORT()  0x3
define IME_ESC_RESERVED_FIRST()  0x4
define IME_ESC_RESERVED_LAST()  0x7FF
define IME_ESC_PRIVATE_FIRST()  0x800
define IME_ESC_PRIVATE_LAST()  0x0FFF
define IME_ESC_SEQUENCE_TO_INTERNAL()  0x1001
define IME_ESC_GET_EUDC_DICTIONARY()  0x1003
define IME_ESC_SET_EUDC_DICTIONARY()  0x1004
define IME_ESC_MAX_KEY()  0x1005
define IME_ESC_IME_NAME()  0x1006
define IME_ESC_SYNC_HOTKEY()  0x1007
define IME_ESC_HANJA_MODE()  0x1008
define IME_REGWORD_STYLE_EUDC()  0x1
define IME_REGWORD_STYLE_USER_FIRST()  0x80000000
define IME_REGWORD_STYLE_USER_LAST()  0x0FFFF
define SOFTKEYBOARD_TYPE_T1()  0x1
define SOFTKEYBOARD_TYPE_C1()  0x2
define DIALOPTION_BILLING()  0x40
define DIALOPTION_QUIET()  0x80
define DIALOPTION_DIALTONE()  0x100
define MDMVOLFLAG_LOW()  0x1
define MDMVOLFLAG_MEDIUM()  0x2
define MDMVOLFLAG_HIGH()  0x4
define MDMVOL_LOW()  0x0
define MDMVOL_MEDIUM()  0x1
define MDMVOL_HIGH()  0x2
define MDMSPKRFLAG_OFF()  0x1
define MDMSPKRFLAG_DIAL()  0x2
define MDMSPKRFLAG_ON()  0x4
define MDMSPKRFLAG_CALLSETUP()  0x8
define MDMSPKR_OFF()  0x0
define MDMSPKR_DIAL()  0x1
define MDMSPKR_ON()  0x2
define MDMSPKR_CALLSETUP()  0x3
define MDM_COMPRESSION()  0x1
define MDM_ERROR_CONTROL()  0x2
define MDM_FORCED_EC()  0x4
define MDM_CELLULAR()  0x8
define MDM_FLOWCONTROL_HARD()  0x10
define MDM_FLOWCONTROL_SOFT()  0x20
define MDM_CCITT_OVERRIDE()  0x40
define MDM_SPEED_ADJUST()  0x80
define MDM_TONE_DIAL()  0x100
define MDM_BLIND_DIAL()  0x200
define MDM_V23_OVERRIDE()  0x400
define ABM_NEW()  0x0
define ABM_REMOVE()  0x1
define ABM_QUERYPOS()  0x2
define ABM_SETPOS()  0x3
define ABM_GETSTATE()  0x4
define ABM_GETTASKBARPOS()  0x5
define ABM_ACTIVATE()  0x6
define ABM_GETAUTOHIDEBAR()  0x7
define ABM_SETAUTOHIDEBAR()  0x8
define ABM_WINDOWPOSCHANGED()  0x9
define ABN_STATECHANGE()  0x0
define ABN_POSCHANGED()  0x1
define ABN_FULLSCREENAPP()  0x2
define ABN_WINDOWARRANGE()  0x3
define ABS_AUTOHIDE()  0x1
define ABS_ALWAYSONTOP()  0x2
define ABE_LEFT()  0
define ABE_TOP()  1
define ABE_RIGHT()  2
define ABE_BOTTOM()  3
define EIRESID()  -1
define FO_MOVE()  0x1
define FO_COPY()  0x2
define FO_DELETE()  0x3
define FO_RENAME()  0x4
define FOF_MULTIDESTFILES()  0x1
define FOF_CONFIRMMOUSE()  0x2
define FOF_SILENT()  0x4
define FOF_RENAMEONCOLLISION()  0x8
define FOF_NOCONFIRMATION()  0x10
define FOF_WANTMAPPINGHANDLE()  0x20
define FOF_ALLOWUNDO()  0x40
define FOF_FILESONLY()  0x80
define FOF_SIMPLEPROGRESS()  0x100
define FOF_NOCONFIRMMKDIR()  0x200
define PO_DELETE()  0x13
define PO_RENAME()  0x14
define PO_PORTCHANGE()  0x20
define PO_REN_PORT()  0x34
define SE_ERR_FNF()  2
define SE_ERR_PNF()  3
define SE_ERR_ACCESSDENIED()  5
define SE_ERR_OOM()  8
define SE_ERR_DLLNOTFOUND()  32
define SEE_MASK_CLASSNAME()  0x1
define SEE_MASK_CLASSKEY()  0x3
define SEE_MASK_IDLIST()  0x4
define SEE_MASK_INVOKEIDLIST()  0x0C
define SEE_MASK_ICON()  0x10
define SEE_MASK_HOTKEY()  0x20
define SEE_MASK_NOCLOSEPROCESS()  0x40
define SEE_MASK_CONNECTNETDRV()  0x80
define SEE_MASK_FLAG_DDEWAIT()  0x100
define SEE_MASK_DOENVSUBST()  0x200
define SEE_MASK_FLAG_NO_UI()  0x400
define NIM_ADD()  0x0
define NIM_MODIFY()  0x1
define NIM_DELETE()  0x2
define NIF_MESSAGE()  0x1
define NIF_ICON()  0x2
define NIF_TIP()  0x4
define SHGFI_ICON()  0x100
define SHGFI_DISPLAYNAME()  0x200
define SHGFI_TYPENAME()  0x400
define SHGFI_ATTRIBUTES()  0x800
define SHGFI_ICONLOCATION()  0x1000
define SHGFI_EXETYPE()  0x2000
define SHGFI_SYSICONINDEX()  0x4000
define SHGFI_LINKOVERLAY()  0x8000
define SHGFI_SELECTED()  0x10000
define SHGFI_LARGEICON()  0x0
define SHGFI_SMALLICON()  0x1
define SHGFI_OPENICON()  0x2
define SHGFI_SHELLICONSIZE()  0x4
define SHGFI_PIDL()  0x8
define SHGFI_USEFILEATTRIBUTES()  0x10
define SHGNLI_PIDL()  0x1
define SHGNLI_PREFIXNAME()  0x2
define VS_VERSION_INFO()  1
define VS_USER_DEFINED()  100
define VS_FFI_SIGNATURE()  0x0FEEF04BD
define VS_FFI_STRUCVERSION()  0x10000
define VS_FFI_FILEFLAGSMASK()  0x3F
define VS_FF_DEBUG()  0x1
define VS_FF_PRERELEASE()  0x2
define VS_FF_PATCHED()  0x4
define VS_FF_PRIVATEBUILD()  0x8
define VS_FF_INFOINFERRED()  0x10
define VS_FF_SPECIALBUILD()  0x20
define VOS_UNKNOWN()  0x0
define VOS_DOS()  0x10000
define VOS_OS216()  0x20000
define VOS_OS232()  0x30000
define VOS_NT()  0x40000
define VOS__BASE()  0x0
define VOS__WINDOWS16()  0x1
define VOS__PM16()  0x2
define VOS__PM32()  0x3
define VOS__WINDOWS32()  0x4
define VOS_DOS_WINDOWS16()  0x10001
define VOS_DOS_WINDOWS32()  0x10004
define VOS_OS216_PM16()  0x20002
define VOS_OS232_PM32()  0x30003
define VOS_NT_WINDOWS32()  0x40004
define VFT_UNKNOWN()  0x0
define VFT_APP()  0x1
define VFT_DLL()  0x2
define VFT_DRV()  0x3
define VFT_FONT()  0x4
define VFT_VXD()  0x5
define VFT_STATIC_LIB()  0x7
define VFT2_UNKNOWN()  0x0
define VFT2_DRV_PRINTER()  0x1
define VFT2_DRV_KEYBOARD()  0x2
define VFT2_DRV_LANGUAGE()  0x3
define VFT2_DRV_DISPLAY()  0x4
define VFT2_DRV_MOUSE()  0x5
define VFT2_DRV_NETWORK()  0x6
define VFT2_DRV_SYSTEM()  0x7
define VFT2_DRV_INSTALLABLE()  0x8
define VFT2_DRV_SOUND()  0x9
define VFT2_DRV_COMM()  0x0A
define VFT2_DRV_INPUTMETHOD()  0x0B
define VFT2_FONT_RASTER()  0x1
define VFT2_FONT_VECTOR()  0x2
define VFT2_FONT_TRUETYPE()  0x3
define VFFF_ISSHAREDFILE()  0x1
define VFF_CURNEDEST()  0x1
define VFF_FILEINUSE()  0x2
define VFF_BUFFTOOSMALL()  0x4
define VIFF_FORCEINSTALL()  0x1
define VIFF_DONTDELETEOLD()  0x2
define VIF_TEMPFILE()  0x1
define VIF_MISMATCH()  0x2
define VIF_SRCOLD()  0x4
define VIF_DIFFLANG()  0x8
define VIF_DIFFCODEPG()  0x10
define VIF_DIFFTYPE()  0x20
define VIF_WRITEPROT()  0x40
define VIF_FILEINUSE()  0x80
define VIF_OUTOFSPACE()  0x100
define VIF_ACCESSVIOLATION()  0x200
define VIF_SHARINGVIOLATION()  0x400
define VIF_CANNOTCREATE()  0x800
define VIF_CANNOTDELETE()  0x1000
define VIF_CANNOTRENAME()  0x2000
define VIF_CANNOTDELETECUR()  0x4000
define VIF_OUTOFMEMORY()  0x8000
define VIF_CANNOTREADSRC()  0x10000
define VIF_CANNOTREADDST()  0x20000
define VIF_BUFFTOOSMALL()  0x40000
define PROCESS_HEAP_REGION()  0x1
define PROCESS_HEAP_UNCOMMITTED_RANGE()  0x2
define PROCESS_HEAP_ENTRY_BUSY()  0x4
define PROCESS_HEAP_ENTRY_MOVEABLE()  0x10
define PROCESS_HEAP_ENTRY_DDESHARE()  0x20
define SCS_32BIT_BINARY()  0
define SCS_DOS_BINARY()  1
define SCS_WOW_BINARY()  2
define SCS_PIF_BINARY()  3
define SCS_POSIX_BINARY()  4
define SCS_OS216_BINARY()  5
define LOGON32_LOGON_INTERACTIVE()  2
define LOGON32_LOGON_BATCH()  4
define LOGON32_LOGON_SERVICE()  5
define LOGON32_PROVIDER_DEFAULT()  0
define LOGON32_PROVIDER_WINNT35()  1
define VER_PLATFORM_WIN32s()  0
define VER_PLATFORM_WIN32_WINDOWS()  1
define VER_PLATFORM_WIN32_NT()  2
define AC_LINE_OFFLINE()  0x0
define AC_LINE_ONLINE()  0x1
define AC_LINE_BACKUP_POWER()  0x2
define AC_LINE_UNKNOWN()  0x0FF
define BATTERY_FLAG_HIGH()  0x1
define BATTERY_FLAG_LOW()  0x2
define BATTERY_FLAG_CRITICAL()  0x4
define BATTERY_FLAG_CHARGING()  0x8
define BATTERY_FLAG_NO_BATTERY()  0x80
define BATTERY_FLAG_UNKNOWN()  0x0FF
define BATTERY_PERCENTAGE_UNKNOWN()  0x0FF
define BATTERY_LIFE_UNKNOWN()  0x0FFFF
define CDM_FIRST()  WM_USER + 100
define CDM_LAST()  WM_USER + 200
define CDM_GETSPEC()  CDM_FIRST + 0x0
define CDM_GETFILEPATH()  CDM_FIRST + 0x1
define CDM_GETFOLDERPATH()  CDM_FIRST + 0x2
define CDM_GETFOLDERIDLIST()  CDM_FIRST + 0x3
define CDM_SETCONTROLTEXT()  CDM_FIRST + 0x4
define CDM_HIDECONTROL()  CDM_FIRST + 0x5
define CDM_SETDEFEXT()  CDM_FIRST + 0x6
define SIMULATED_FONTTYPE()  0x8000
define PRINTER_FONTTYPE()  0x4000
define SCREEN_FONTTYPE()  0x2000
define BOLD_FONTTYPE()  0x100
define ITALIC_FONTTYPE()  0x200
define REGULAR_FONTTYPE()  0x400
define WM_PSD_PAGESETUPDLG()  WM_USER
define WM_PSD_FULLPAGERECT()  WM_USER + 1
define WM_PSD_MINMARGINRECT()  WM_USER + 2
define WM_PSD_MARGINRECT()  WM_USER + 3
define WM_PSD_GREEKTEXTRECT()  WM_USER + 4
define WM_PSD_ENVSTAMPRECT()  WM_USER + 5
define WM_PSD_YAFULLPAGERECT()  WM_USER + 6
define PSD_DEFAULTMINMARGINS()  0x0
define PSD_INWININIINTLMEASURE()  0x0
define PSD_MINMARGINS()  0x1
define PSD_MARGINS()  0x2
define PSD_INTHOUSANDTHSOFINCHES()  0x4
define PSD_INHUNDREDTHSOFMILLIMETERS()  0x8
define PSD_DISABLEMARGINS()  0x10
define PSD_DISABLEPRINTER()  0x20
define PSD_NOWARNING()  0x80
define PSD_DISABLEORIENTATION()  0x100
define PSD_RETURNDEFAULT()  0x400
define PSD_DISABLEPAPER()  0x200
define PSD_SHOWHELP()  0x800
define PSD_ENABLEPAGESETUPHOOK()  0x2000
define PSD_ENABLEPAGESETUPTEMPLATE()  0x8000
define PSD_ENABLEPAGESETUPTEMPLATEHANDLE()  0x20000
define PSD_ENABLEPAGEPAINTHOOK()  0x40000
define PSD_DISABLEPAGEPAINTING()  0x80000
define NM_FIRST()  0-  0
define NM_LAST()  0-99
define DBG_CONTINUE()  0x00010002
define DBG_TERMINATE_THREAD()  0x40010003
define DBG_TERMINATE_PROCESS()  0x40010004
define DBG_CONTROL_C()  0x40010005
define DBG_CONTROL_BREAK()  0x40010008
define DBG_EXCEPTION_NOT_HANDLED()  0x80010001
define SIZE_OF_80387_REGISTERS()  80
define STATUS_WAIT_0()  0x00000000
define STATUS_ABANDONED_WAIT_0()  0x00000080
define STATUS_USER_APC()  0x000000C0
define STATUS_TIMEOUT()  0x00000102
define STATUS_PENDING()  0x00000103
define STATUS_DATATYPE_MISALIGNMENT()  0x80000002
define STATUS_BREAKPOINT()  0x80000003
define STATUS_SINGLE_STEP()  0x80000004
define STATUS_ACCESS_VIOLATION()  0x0C0000005
define STATUS_IN_PAGE_ERROR()  0x0C0000006
define STATUS_NO_MEMORY()  0x0C0000017
define STATUS_ILLEGAL_INSTRUCTION()  0x0C000001D
define STATUS_NONCONTINUABLE_EXCEPTION()  0x0C0000025
define STATUS_INVALID_DISPOSITION()  0x0C0000026
define STATUS_ARRAY_BOUNDS_EXCEEDED()  0x0C000008C
define STATUS_FLOAT_DENORMAL_OPERAND()  0x0C000008D
define STATUS_FLOAT_DIVIDE_BY_ZERO()  0x0C000008E
define STATUS_FLOAT_INEXACT_RESULT()  0x0C000008F
define STATUS_FLOAT_INVALID_OPERATION()  0x0C0000090
define STATUS_FLOAT_OVERFLOW()  0x0C0000091
define STATUS_FLOAT_STACK_CHECK()  0x0C0000092
define STATUS_FLOAT_UNDERFLOW()  0x0C0000093
define STATUS_INTEGER_DIVIDE_BY_ZERO()  0x0C0000094
define STATUS_INTEGER_OVERFLOW()  0x0C0000095
define STATUS_PRIVILEGED_INSTRUCTION()  0x0C0000096
define STATUS_STACK_OVERFLOW()  0x0C00000FD
define STATUS_CONTROL_C_EXIT()  0x0C000013A
define WAIT_FAILED()  -1
define WAIT_OBJECT_0()  STATUS_WAIT_0
define WAIT_ABANDONED()  STATUS_ABANDONED_WAIT_0
define WAIT_ABANDONED_0()  STATUS_ABANDONED_WAIT_0
define WAIT_TIMEOUT()  STATUS_TIMEOUT
define WAIT_IO_COMPLETION()  STATUS_USER_APC
define STILL_ACTIVE()  STATUS_PENDING

define EXCEPTION_CONTINUABLE()  0
define EXCEPTION_NONCONTINUABLE()  0x1
define EXCEPTION_ACCESS_VIOLATION()  STATUS_ACCESS_VIOLATION
define EXCEPTION_DATATYPE_MISALIGNMENT()  STATUS_DATATYPE_MISALIGNMENT
define EXCEPTION_BREAKPOINT()  STATUS_BREAKPOINT
define EXCEPTION_SINGLE_STEP()  STATUS_SINGLE_STEP
define EXCEPTION_ARRAY_BOUNDS_EXCEEDED()  STATUS_ARRAY_BOUNDS_EXCEEDED
define EXCEPTION_FLT_DENORMAL_OPERAND()  STATUS_FLOAT_DENORMAL_OPERAND
define EXCEPTION_FLT_DIVIDE_BY_ZERO()  STATUS_FLOAT_DIVIDE_BY_ZERO
define EXCEPTION_FLT_INEXACT_RESULT()  STATUS_FLOAT_INEXACT_RESULT
define EXCEPTION_FLT_INVALID_OPERATION()  STATUS_FLOAT_INVALID_OPERATION
define EXCEPTION_FLT_OVERFLOW()  STATUS_FLOAT_OVERFLOW
define EXCEPTION_FLT_STACK_CHECK()  STATUS_FLOAT_STACK_CHECK
define EXCEPTION_FLT_UNDERFLOW()  STATUS_FLOAT_UNDERFLOW
define EXCEPTION_INT_DIVIDE_BY_ZERO()  STATUS_INTEGER_DIVIDE_BY_ZERO
define EXCEPTION_INT_OVERFLOW()  STATUS_INTEGER_OVERFLOW
define EXCEPTION_ILLEGAL_INSTRUCTION()  STATUS_ILLEGAL_INSTRUCTION
define EXCEPTION_PRIV_INSTRUCTION()  STATUS_PRIVILEGED_INSTRUCTION
define EXCEPTION_IN_PAGE_ERROR()  STATUS_IN_PAGE_ERROR
define CONTEXT_i386()  0x00010000
define CONTEXT_i486()  0x00010000
define CONTEXT_CONTROL()  CONTEXT_i386 | 0x00000001
define CONTEXT_INTEGER()  CONTEXT_i386 | 0x00000002
define CONTEXT_SEGMENTS()  CONTEXT_i386 | 0x00000004
define CONTEXT_FLOATING_POINT()  CONTEXT_i386 | 0x00000008
define CONTEXT_DEBUG_REGISTERS()  CONTEXT_i386 | 0x00000010
define CONTEXT_FULL()  CONTEXT_CONTROL | CONTEXT_INTEGER | CONTEXT_SEGMENTS
define PAGE_NOACCESS()  1
define PAGE_READONLY()  2
define PAGE_READWRITE()  4
define PAGE_WRITECOPY()  8
define PAGE_EXECUTE()  0x10
define PAGE_EXECUTE_READ()  0x20
define PAGE_EXECUTE_READWRITE()  0x40
define PAGE_EXECUTE_WRITECOPY()  0x80
define PAGE_GUARD()  0x100
define PAGE_NOCACHE()  0x200
define MEM_COMMIT()  0x1000
define MEM_RESERVE()  0x2000
define MEM_DECOMMIT()  0x4000
define MEM_RELEASE()  0x8000
define MEM_FREE()  0x10000
define MEM_PRIVATE()  0x20000
define MEM_MAPPED()  0x40000
define MEM_RESET()  0x80000
define MEM_TOP_DOWN()  0x100000
define SEC_FILE()  0x800000
define SEC_IMAGE()  0x1000000
define SEC_RESERVE()  0x4000000
define SEC_COMMIT()  0x8000000
define SEC_NOCACHE()  0x10000000
define MEM_IMAGE()  SEC_IMAGE

define IMAGE_DIRECTORY_ENTRY_EXPORT()  0
define IMAGE_DIRECTORY_ENTRY_IMPORT()  1
define IMAGE_DIRECTORY_ENTRY_RESOURCE()  2
define IMAGE_DIRECTORY_ENTRY_EXCEPTION()  3
define IMAGE_DIRECTORY_ENTRY_SECURITY()  4
define IMAGE_DIRECTORY_ENTRY_BASERELOC()  5
define IMAGE_DIRECTORY_ENTRY_DEBUG()  6
define IMAGE_DIRECTORY_ENTRY_COPYRIGHT()  7
define IMAGE_DIRECTORY_ENTRY_GLOBALPTR()  8
define IMAGE_DIRECTORY_ENTRY_TLS()  9
define IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG()  10
define IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT()  11
define IMAGE_DIRECTORY_ENTRY_IAT()  12
define IMAGE_NUMBEROF_DIRECTORY_ENTRIES()  16
define IMAGE_BITMAP()  0
define IMAGE_ICON()  1
define IMAGE_CURSOR()  2
define IMAGE_ENHMETAFILE()  3
define PROCESSOR_INTEL_386()  386
define PROCESSOR_INTEL_486()  486
define PROCESSOR_INTEL_PENTIUM()  586
define PROCESSOR_MIPS_R4000()  4000
define PROCESSOR_ALPHA_21064()  21064

// --------------------------- comctl equates -------------------------------

define ODT_HEADER()  100
define ODT_TAB()  101
define ODT_LISTVIEW()  102
define LVM_FIRST()  0x1000
define TV_FIRST()  0x1100
define HDM_FIRST()  0x1200
define NM_OUTOFMEMORY()  NM_FIRST-1
define NM_CLICK()  NM_FIRST-2
define NM_DBLCLK()  NM_FIRST-3
define NM_RETURN()  NM_FIRST-4
define NM_RCLICK()  NM_FIRST-5
define NM_RDBLCLK()  NM_FIRST-6
define NM_SETFOCUS()  NM_FIRST-7
define NM_KILLFOCUS()  NM_FIRST-8
define CCS_TOP()  0x00000001
define CCS_NOMOVEY()  0x00000002
define CCS_BOTTOM()  0x00000003
define CCS_NORESIZE()  0x00000004
define CCS_NOPARENTALIGN()  0x00000008
define CCS_ADJUSTABLE()  0x00000020
define CCS_NODIVIDER()  0x00000040
define CCM_FIRST()  0x2000
define CCM_LAST()  CCM_FIRST + 0x200
define CCM_SETBKCOLOR()  CCM_FIRST + 1
define CCM_SETCOLORSCHEME()  CCM_FIRST + 2
define CCM_GETCOLORSCHEME()  CCM_FIRST + 3
define CCM_GETDROPTARGET()  CCM_FIRST + 4
define CCM_SETUNICODEFORMAT()  CCM_FIRST + 5
define CCM_GETUNICODEFORMAT()  CCM_FIRST + 6
define LVN_FIRST()  0-100
define LVN_LAST()  0-199
define HDN_FIRST()  0-300
define HDN_LAST()  0-399
define TVN_FIRST()  0-400
define TVN_LAST()  0-499
define TTN_FIRST()  0-520
define TTN_LAST()  0-549
define TCN_FIRST()  0-550
define TCN_LAST()  0-580
define CDN_FIRST()  0-601
define CDN_LAST()  0-699
define TBN_FIRST()  0-700
define TBN_LAST()  0-720
define UDN_FIRST()  0-721
define UDN_LAST()  0-740
define MCN_FIRST()  0-750
define MCN_LAST()  0-759
define DTN_FIRST()  0-760
define DTN_LAST()  0-799
define CBEN_FIRST()  0-800
define CBEN_LAST()  0-830
define RBN_FIRST()  0-831
define RBN_LAST()  0-859
define IPN_FIRST()  0-860
define IPN_LAST()  0-879
define SBN_FIRST()  0-880
define SBN_LAST()  0-899
define PGN_FIRST()  0-900
define PGN_LAST()  0-950
define PGM_FIRST()  0x1400
define MSGF_COMMCTRL_BEGINDRAG()  0x4200
define MSGF_COMMCTRL_SIZEHEADER()  0x4201
define MSGF_COMMCTRL_DRAGSELECT()  0x4202
define MSGF_COMMCTRL_TOOLBARCUST()  0x4203
define ICC_LISTVIEW_CLASSES()  0x00000001
define ICC_TREEVIEW_CLASSES()  0x00000002
define ICC_BAR_CLASSES()  0x00000004
define ICC_TAB_CLASSES()  0x00000008
define ICC_UPDOWN_CLASS()  0x00000010
define ICC_PROGRESS_CLASS()  0x00000020
define ICC_HOTKEY_CLASS()  0x00000040
define ICC_ANIMATE_CLASS()  0x00000080
define ICC_WIN95_CLASSES()  0x000000FF
define ICC_DATE_CLASSES()  0x00000100
define ICC_USEREX_CLASSES()  0x00000200
define ICC_COOL_CLASSES()  0x00000400
define ICC_INTERNET_CLASSES()  0x00000800
define ICC_PAGESCROLLER_CLASS()  0x00001000
define ICC_NATIVEFNTCTL_CLASS()  0x00002000
define RBIM_IMAGELIST()  1
define RBS_TOOLTIPS()  0x100
define RBS_VARHEIGHT()  0x200
define RBS_BANDBORDERS()  0x400
define RBS_FIXEDORDER()  0x800
define RBS_REGISTERDROP()  0x1000
define RBS_AUTOSIZE()  0x2000
define RBS_VERTICALGRIPPER()  0x4000
define RBS_DBLCLKTOGGLE()  0x8000
define RBBS_BREAK()  1
define RBBS_FIXEDSIZE()  2
define RBBS_CHILDEDGE()  4
define RBBS_HIDDEN()  8
define RBBS_NOVERT()  0x10
define RBBS_FIXEDBMP()  0x20
define RBBS_VARIABLEHEIGHT()  0x40
define RBBS_GRIPPERALWAYS()  0x80
define RBBS_NOGRIPPER()  0x100
define RBBIM_STYLE()  1
define RBBIM_COLORS()  2
define RBBIM_TEXT()  4
define RBBIM_IMAGE()  8
define RBBIM_CHILD()  0x10
define RBBIM_CHILDSIZE()  0x20
define RBBIM_SIZE()  0x40
define RBBIM_BACKGROUND()  0x80
define RBBIM_ID()  0x100
define RBBIM_IDEALSIZE()  0x00000200
define RBBIM_LPARAM()  0x00000400
define RBBIM_HEADERSIZE()  0x00000800
define RB_INSERTBAND()  WM_USER +  1
define RB_DELETEBAND()  WM_USER +  2
define RB_GETBARINFO()  WM_USER +  3
define RB_SETBARINFO()  WM_USER +  4
define RB_GETBANDINFO()  WM_USER +  29
define RB_SETBANDINFO()  WM_USER +  6
define RB_SETPARENT()  WM_USER +  7
define RB_HITTEST()  WM_USER +  8
define RB_GETRECT()  WM_USER +  9
define RB_GETBANDCOUNT()  WM_USER +  12
define RB_GETROWCOUNT()  WM_USER +  13
define RB_GETROWHEIGHT()  WM_USER +  14
define RB_IDTOINDEX()  WM_USER +  16
define RB_GETTOOLTIPS()  WM_USER +  17
define RB_SETTOOLTIPS()  WM_USER +  18
define RB_SETBKCOLOR()  WM_USER +  19
define RB_GETBKCOLOR()  WM_USER +  20
define RB_SETTEXTCOLOR()  WM_USER +  21
define RB_GETTEXTCOLOR()  WM_USER +  22
define RB_SIZETORECT()  WM_USER +  23
define RB_SETCOLORSCHEME()  CCM_SETCOLORSCHEME
define RB_GETCOLORSCHEME()  CCM_GETCOLORSCHEME
define RB_BEGINDRAG()  WM_USER + 24
define RB_ENDDRAG()  WM_USER + 25
define RB_DRAGMOVE()  WM_USER + 26
define RB_GETBARHEIGHT()  WM_USER + 27
define RB_MINIMIZEBAND()  WM_USER + 30
define RB_MAXIMIZEBAND()  WM_USER + 31
define RB_GETDROPTARGET()  CCM_GETDROPTARGET
define RB_GETBANDBORDERS()  WM_USER + 34
define RB_SHOWBAND()  WM_USER + 35
define RB_SETPALETTE()  WM_USER + 37
define RB_GETPALETTE()  WM_USER + 38
define RB_MOVEBAND()  WM_USER + 39
define RB_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define RB_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define RBN_HEIGHTCHANGE()  RBN_FIRST - 0
define RBN_GETOBJECT()  RBN_FIRST - 1
define RBN_LAYOUTCHANGED()  RBN_FIRST - 2
define RBN_AUTOSIZE()  RBN_FIRST - 3
define RBN_BEGINDRAG()  RBN_FIRST - 4
define RBN_ENDDRAG()  RBN_FIRST - 5
define RBN_DELETINGBAND()  RBN_FIRST - 6
define RBN_DELETEDBAND()  RBN_FIRST - 7
define RBN_CHILDSIZE()  RBN_FIRST - 8
define RBNM_ID()  0x00000001
define RBNM_STYLE()  0x00000002
define RBNM_LPARAM()  0x00000004
define RBHT_NOWHERE()  0x0001
define RBHT_CAPTION()  0x0002
define RBHT_CLIENT()  0x0003
define RBHT_GRABBER()  0x0004
define CLR_NONE()  0x0FFFFFFFF
define CLR_DEFAULT()  0x0FF000000
define ILC_MASK()  0x0001
define ILC_COLOR()  0x0000
define ILC_COLORDDB()  0x00FE
define ILC_COLOR4()  0x0004
define ILC_COLOR8()  0x0008
define ILC_COLOR16()  0x0010
define ILC_COLOR24()  0x0018
define ILC_COLOR32()  0x0020
define ILC_PALETTE()  0x0800
define ILD_NORMAL()  0x0000
define ILD_TRANSPARENT()  0x0001
define ILD_MASK()  0x0010
define ILD_IMAGE()  0x0020
define ILD_BLEND25()  0x0002
define ILD_BLEND50()  0x0004
define ILD_OVERLAYMASK()  0x0F00
define ILD_SELECTED()  ILD_BLEND50
define ILD_FOCUS()  ILD_BLEND25
define ILD_BLEND()  ILD_BLEND50
define CLR_HILIGHT()  CLR_DEFAULT
define HDS_HORZ()  0x00000000
define HDS_BUTTONS()  0x00000002
define HDS_HIDDEN()  0x00000008
define HDI_WIDTH()  0x0001
define HDI_HEIGHT()  HDI_WIDTH
define HDI_TEXT()  0x0002
define HDI_FORMAT()  0x0004
define HDI_LPARAM()  0x0008
define HDI_BITMAP()  0x0010
define HDF_LEFT()  0
define HDF_RIGHT()  1
define HDF_CENTER()  2
define HDF_JUSTIFYMASK()  0x0003
define HDF_RTLREADING()  4
define HDF_OWNERDRAW()  0x8000
define HDF_STRING()  0x4000
define HDF_BITMAP()  0x2000
define HDM_GETITEMCOUNT()  HDM_FIRST + 0
define HDM_INSERTITEM()  HDM_FIRST + 1
define HDM_INSERTITEMW()  HDM_FIRST + 10
define HDM_DELETEITEM()  HDM_FIRST + 2
define HDM_GETITEM()  HDM_FIRST + 3
define HDM_GETITEMW()  HDM_FIRST + 11
define HDM_SETITEM()  HDM_FIRST + 4
define HDM_SETITEMW()  HDM_FIRST + 12
define HDM_LAYOUT()  HDM_FIRST + 5
define HHT_NOWHERE()  0x0001
define HHT_ONHEADER()  0x0002
define HHT_ONDIVIDER()  0x0004
define HHT_ONDIVOPEN()  0x0008
define HHT_ABOVE()  0x0100
define HHT_BELOW()  0x0200
define HHT_TORIGHT()  0x0400
define HHT_TOLEFT()  0x0800
define HDM_HITTEST()  HDM_FIRST + 6
define HDN_ITEMCHANGING()  HDN_FIRST - 0
define HDN_ITEMCHANGINGW()  HDN_FIRST - 20
define HDN_ITEMCHANGED()  HDN_FIRST - 1
define HDN_ITEMCHANGEDW()  HDN_FIRST - 21
define HDN_ITEMCLICK()  HDN_FIRST - 2
define HDN_ITEMCLICKW()  HDN_FIRST - 22
define HDN_ITEMDBLCLICK()  HDN_FIRST - 3
define HDN_ITEMDBLCLICKW()  HDN_FIRST - 23
define HDN_DIVIDERDBLCLICK()  HDN_FIRST - 5
define HDN_DIVIDERDBLCLICKW()  HDN_FIRST - 25
define HDN_BEGINTRACK()  HDN_FIRST - 6
define HDN_BEGINTRACKW()  HDN_FIRST - 26
define HDN_ENDTRACK()  HDN_FIRST - 7
define HDN_ENDTRACKW()  HDN_FIRST - 27
define HDN_TRACK()  HDN_FIRST - 8
define HDN_TRACKW()  HDN_FIRST - 28
define CMB_MASKED()  0x02
define TBSTATE_CHECKED()  0x01
define TBSTATE_PRESSED()  0x02
define TBSTATE_ENABLED()  0x04
define TBSTATE_HIDDEN()  0x08
define TBSTATE_INDETERMINATE()  0x10
define TBSTATE_WRAP()  0x20
define TBSTYLE_BUTTON()  0x00
define TBSTYLE_SEP()  0x01
define TBSTYLE_CHECK()  0x02
define TBSTYLE_GROUP()  0x04
define TBSTYLE_CHECKGROUP()  TBSTYLE_GROUP | TBSTYLE_CHECK
define TBSTYLE_TOOLTIPS()  0x0100
define TBSTYLE_WRAPABLE()  0x0200
define TBSTYLE_ALTDRAG()  0x0400
define TBSTYLE_FLAT()  0x0800
define TBSTYLE_LIST()  0x1000
define TBSTYLE_CUSTOMERASE()  0x2000
define TBSTYLE_REGISTERDROP()  0x4000
define TBSTYLE_TRANSPARENT()  0x8000
define TB_ENABLEBUTTON()  WM_USER + 1
define TB_CHECKBUTTON()  WM_USER + 2
define TB_PRESSBUTTON()  WM_USER + 3
define TB_HIDEBUTTON()  WM_USER + 4
define TB_INDETERMINATE()  WM_USER + 5
define TB_ISBUTTONENABLED()  WM_USER + 9
define TB_ISBUTTONCHECKED()  WM_USER + 10
define TB_ISBUTTONPRESSED()  WM_USER + 11
define TB_ISBUTTONHIDDEN()  WM_USER + 12
define TB_ISBUTTONINDETERMINATE()  WM_USER + 13
define TB_SETSTATE()  WM_USER + 17
define TB_GETSTATE()  WM_USER + 18
define TB_ADDBITMAP()  WM_USER + 19
define TB_SETSTYLE()  WM_USER + 56
define TB_GETSTYLE()  WM_USER + 57
define HINST_COMMCTRL()  -1
define IDB_STD_SMALL_COLOR()  0
define IDB_STD_LARGE_COLOR()  1
define IDB_VIEW_SMALL_COLOR()  4
define IDB_VIEW_LARGE_COLOR()  5
define STD_CUT()  0
define STD_COPY()  1
define STD_PASTE()  2
define STD_UNDO()  3
define STD_REDOW()  4
define STD_DELETE()  5
define STD_FILENEW()  6
define STD_FILEOPEN()  7
define STD_FILESAVE()  8
define STD_PRINTPRE()  9
define STD_PROPERTIES()  10
define STD_HELP()  11
define STD_FIND()  12
define STD_REPLACE()  13
define STD_PRINT()  14
define VIEW_LARGEICONS()  0
define VIEW_SMALLICONS()  1
define VIEW_LIST()  2
define VIEW_DETAILS()  3
define VIEW_SORTNAME()  4
define VIEW_SORTSIZE()  5
define VIEW_SORTDATE()  6
define VIEW_SORTTYPE()  7
define VIEW_PARENTFOLDER()  8
define VIEW_NETCONNECT()  9
define VIEW_NETDISCONNECT()  10
define VIEW_NEWFOLDER()  11
define TB_ADDBUTTONS()  WM_USER + 20
define TB_INSERTBUTTON()  WM_USER + 21
define TB_DELETEBUTTON()  WM_USER + 22
define TB_GETBUTTON()  WM_USER + 23
define TB_BUTTONCOUNT()  WM_USER + 24
define TB_COMMANDTOINDEX()  WM_USER + 25
define TB_SAVERESTORE()  WM_USER + 26
define TB_CUSTOMIZE()  WM_USER + 27
define TB_ADDSTRING()  WM_USER + 28
define TB_GETITEMRECT()  WM_USER + 29
define TB_BUTTONSTRUCTSIZE()  WM_USER + 30
define TB_SETBUTTONSIZE()  WM_USER + 31
define TB_SETBITMAPSIZE()  WM_USER + 32
define TB_AUTOSIZE()  WM_USER + 33
define TB_GETTOOLTIPS()  WM_USER + 35
define TB_SETTOOLTIPS()  WM_USER + 36
define TB_SETPARENT()  WM_USER + 37
define TB_SETROWS()  WM_USER + 39
define TB_GETROWS()  WM_USER + 40
define TB_SETCMDID()  WM_USER + 42
define TB_CHANGEBITMAP()  WM_USER + 43
define TB_GETBITMAP()  WM_USER + 44
define TB_GETBUTTONTEXT()  WM_USER + 45
define TB_REPLACEBITMAP()  WM_USER + 46
define TBBF_LARGE()  1
define TB_GETBITMAPFLAGS()  WM_USER + 41
define TBN_GETBUTTONINFO()  TBN_FIRST
define TBN_BEGINDRAG()  TBN_FIRST-1
define TBN_ENDDRAG()  TBN_FIRST-2
define TBN_BEGINADJUST()  TBN_FIRST-3
define TBN_ENDADJUST()  TBN_FIRST-4
define TBN_RESET()  TBN_FIRST-5
define TBN_QUERYINSERT()  TBN_FIRST-6
define TBN_QUERYDELETE()  TBN_FIRST-7
define TBN_TOOLBARCHANGE()  TBN_FIRST-8
define TBN_CUSTHELP()  TBN_FIRST-9
define TTS_ALWAYSTIP()  0x01
define TTS_NOPREFIX()  0x02
define TTF_IDISHWND()  0x01
define TTF_CENTERTIP()  0x02
define TTF_RTLREADING()  0x04
define TTF_SUBCLASS()  0x10
define TTDT_AUTOMATIC()  0
define TTDT_RESHOW()  1
define TTDT_AUTOPOP()  2
define TTDT_INITIAL()  3
define TTM_ACTIVATE()  WM_USER + 1
define TTM_SETDELAYTIME()  WM_USER + 3
define TTM_ADDTOOL()  WM_USER + 4
define TTM_ADDTOOLW()  WM_USER + 50
define TTM_DELTOOL()  WM_USER + 5
define TTM_DELTOOLW()  WM_USER + 51
define TTM_NEWTOOLRECT()  WM_USER + 6
define TTM_NEWTOOLRECTW()  WM_USER + 52
define TTM_RELAYEVENT()  WM_USER + 7
define TTM_GETTOOLINFO()  WM_USER + 8
define TTM_GETTOOLINFOW()  WM_USER + 53
define TTM_SETTOOLINFO()  WM_USER + 9
define TTM_SETTOOLINFOW()  WM_USER + 54
define TTM_HITTEST()  WM_USER +10
define TTM_HITTESTW()  WM_USER +55
define TTM_GETTEXT()  WM_USER +11
define TTM_GETTEXTW()  WM_USER +56
define TTM_UPDATETIPTEXT()  WM_USER +12
define TTM_UPDATETIPTEXTW()  WM_USER +57
define TTM_GETTOOLCOUNT()  WM_USER +13
define TTM_ENUMTOOLS()  WM_USER +14
define TTM_ENUMTOOLSW()  WM_USER +58
define TTM_GETCURRENTTOOL()  WM_USER + 15
define TTM_GETCURRENTTOOLW()  WM_USER + 59
define TTM_WINDOWFROMPOINT()  WM_USER + 16
define TTN_NEEDTEXT()  TTN_FIRST - 0
define TTN_NEEDTEXTW()  TTN_FIRST - 10
define TTN_SHOW()  TTN_FIRST - 1
define TTN_POP()  TTN_FIRST - 2
define SBARS_SIZEGRIP()  0x0100
define SB_SETTEXT()  WM_USER+1
define SB_SETTEXTW()  WM_USER+11
define SB_GETTEXT()  WM_USER+2
define SB_GETTEXTW()  WM_USER+13
define SB_GETTEXTLENGTH()  WM_USER+3
define SB_GETTEXTLENGTHW()  WM_USER+12
define SB_SETPARTS()  WM_USER+4
define SB_GETPARTS()  WM_USER+6
define SB_GETBORDERS()  WM_USER+7
define SB_SETMINHEIGHT()  WM_USER+8
define SB_SIMPLE()  WM_USER+9
define SB_GETRECT()  WM_USER+10
define SBT_OWNERDRAW()  0x1000
define SBT_NOBORDERS()  0x0100
define SBT_POPOUT()  0x0200
define SBT_RTLREADING()  0x0400
define MINSYSCOMMAND()  SC_SIZE
define TBS_AUTOTICKS()  0x0001
define TBS_VERT()  0x0002
define TBS_HORZ()  0x0000
define TBS_TOP()  0x0004
define TBS_BOTTOM()  0x0000
define TBS_LEFT()  0x0004
define TBS_RIGHT()  0x0000
define TBS_BOTH()  0x0008
define TBS_NOTICKS()  0x0010
define TBS_ENABLESELRANGE()  0x0020
define TBS_FIXEDLENGTH()  0x0040
define TBS_NOTHUMB()  0x0080
define TBM_GETPOS()  WM_USER
define TBM_GETRANGEMIN()  WM_USER+1
define TBM_GETRANGEMAX()  WM_USER+2
define TBM_GETTIC()  WM_USER+3
define TBM_SETTIC()  WM_USER+4
define TBM_SETPOS()  WM_USER+5
define TBM_SETRANGE()  WM_USER+6
define TBM_SETRANGEMIN()  WM_USER+7
define TBM_SETRANGEMAX()  WM_USER+8
define TBM_CLEARTICS()  WM_USER+9
define TBM_SETSEL()  WM_USER+10
define TBM_SETSELSTART()  WM_USER+11
define TBM_SETSELEND()  WM_USER+12
define TBM_GETPTICS()  WM_USER+14
define TBM_GETTICPOS()  WM_USER+15
define TBM_GETNUMTICS()  WM_USER+16
define TBM_GETSELSTART()  WM_USER+17
define TBM_GETSELEND()  WM_USER+18
define TBM_CLEARSEL()  WM_USER+19
define TBM_SETTICFREQ()  WM_USER+20
define TBM_SETPAGESIZE()  WM_USER+21
define TBM_GETPAGESIZE()  WM_USER+22
define TBM_SETLINESIZE()  WM_USER+23
define TBM_GETLINESIZE()  WM_USER+24
define TBM_GETTHUMBRECT()  WM_USER+25
define TBM_GETCHANNELRECT()  WM_USER+26
define TBM_SETTHUMBLENGTH()  WM_USER+27
define TBM_GETTHUMBLENGTH()  WM_USER+28
define TB_LINEUP()  0
define TB_LINEDOWN()  1
define TB_PAGEUP()  2
define TB_PAGEDOWN()  3
define TB_THUMBPOSITION()  4
define TB_THUMBTRACK()  5
define TB_TOP()  6
define TB_BOTTOM()  7
define TB_ENDTRACK()  8
define DL_BEGINDRAG()  WM_USER+133
define DL_DRAGGING()  WM_USER+134
define DL_DROPPED()  WM_USER+135
define DL_CANCELDRAG()  WM_USER+136
define DL_CURSORSET()  0
define DL_STOPCURSOR()  1
define DL_COPYCURSOR()  2
define DL_MOVECURSOR()  3
define UD_MAXVAL()  0x7FFF
define UD_MINVAL()  - UD_MAXVAL
define UDS_WRAP()  0x0001
define UDS_SETBUDDYINT()  0x0002
define UDS_ALIGNRIGHT()  0x0004
define UDS_ALIGNLEFT()  0x0008
define UDS_AUTOBUDDY()  0x0010
define UDS_ARROWKEYS()  0x0020
define UDS_HORZ()  0x0040
define UDS_NOTHOUSANDS()  0x0080
define UDM_SETRANGE()  WM_USER+101
define UDM_GETRANGE()  WM_USER+102
define UDM_SETPOS()  WM_USER+103
define UDM_GETPOS()  WM_USER+104
define UDM_SETBUDDY()  WM_USER+105
define UDM_GETBUDDY()  WM_USER+106
define UDM_SETACCEL()  WM_USER+107
define UDM_GETACCEL()  WM_USER+108
define UDM_SETBASE()  WM_USER+109
define UDM_GETBASE()  WM_USER+110
define UDN_DELTAPOS()  UDN_FIRST - 1
define PBM_SETRANGE()  WM_USER+1
define PBM_SETPOS()  WM_USER+2
define PBM_DELTAPOS()  WM_USER+3
define PBM_SETSTEP()  WM_USER+4
define PBM_STEPIT()  WM_USER+5
define HOTKEYF_SHIFT()  0x01
define HOTKEYF_CONTROL()  0x02
define HOTKEYF_ALT()  0x04
define HOTKEYF_EXT()  0x08
define HKCOMB_NONE()  0x0001
define HKCOMB_S()  0x0002
define HKCOMB_C()  0x0004
define HKCOMB_A()  0x0008
define HKCOMB_SC()  0x0010
define HKCOMB_SA()  0x0020
define HKCOMB_CA()  0x0040
define HKCOMB_SCA()  0x0080
define HKM_SETHOTKEY()  WM_USER+1
define HKM_GETHOTKEY()  WM_USER+2
define HKM_SETRULES()  WM_USER+3
define LVS_ICON()  0x0000
define LVS_REPORT()  0x0001
define LVS_SMALLICON()  0x0002
define LVS_LIST()  0x0003
define LVS_TYPEMASK()  0x0003
define LVS_SINGLESEL()  0x0004
define LVS_SHOWSELALWAYS()  0x0008
define LVS_SORTASCENDING()  0x0010
define LVS_SORTDESCENDING()  0x0020
define LVS_SHAREIMAGELISTS()  0x0040
define LVS_NOLABELWRAP()  0x0080
define LVS_AUTOARRANGE()  0x0100
define LVS_EDITLABELS()  0x0200
define LVS_NOSCROLL()  0x2000
define LVS_TYPESTYLEMASK()  0x0fc00
define LVS_ALIGNTOP()  0x0000
define LVS_ALIGNLEFT()  0x0800
define LVS_ALIGNMASK()  0x0c00
define LVS_OWNERDRAWFIXED()  0x0400
define LVS_NOCOLUMNHEADER()  0x4000
define LVS_NOSORTHEADER()  0x8000
define LVM_GETBKCOLOR()  LVM_FIRST + 0
define LVM_SETBKCOLOR()  LVM_FIRST + 1
define LVM_GETIMAGELIST()  LVM_FIRST + 2
define LVM_SUBITEMHITTEST()  LVM_FIRST + 57
define LVSIL_NORMAL()  0
define LVSIL_SMALL()  1
define LVSIL_STATE()  2
define LVM_SETIMAGELIST()  LVM_FIRST + 3
define LVM_GETITEMCOUNT()  LVM_FIRST + 4
define LVIF_TEXT()  0x0001
define LVIF_IMAGE()  0x0002
define LVIF_PARAM()  0x0004
define LVIF_STATE()  0x0008
define LVIS_FOCUSED()  0x0001
define LVIS_SELECTED()  0x0002
define LVIS_CUT()  0x0004
define LVIS_DROPHILITED()  0x0008
define LVIS_OVERLAYMASK()  0x0F00
define LVIS_STATEIMAGEMASK()  0x0F000
define LPSTR_TEXTCALLBACKW()  -1
define LPSTR_TEXTCALLBACK()  -1
define I_IMAGECALLBACK()  -1
define LVM_GETITEM()  LVM_FIRST + 5
define LVM_GETITEMW()  LVM_FIRST + 75
define LVM_SETITEM()  LVM_FIRST + 6
define LVM_SETITEMW()  LVM_FIRST + 76
define LVM_INSERTITEM()  LVM_FIRST + 7
define LVM_INSERTITEMW()  LVM_FIRST + 77
define LVM_DELETEITEM()  LVM_FIRST + 8
define LVM_DELETEALLITEMS()  LVM_FIRST + 9
define LVM_GETCALLBACKMASK()  LVM_FIRST + 10
define LVM_SETCALLBACKMASK()  LVM_FIRST + 11
define LVNI_ALL()  0x0000
define LVNI_FOCUSED()  0x0001
define LVNI_SELECTED()  0x0002
define LVNI_CUT()  0x0004
define LVNI_DROPHILITED()  0x0008
define LVNI_ABOVE()  0x0100
define LVNI_BELOW()  0x0200
define LVNI_TOLEFT()  0x0400
define LVNI_TORIGHT()  0x0800
define LVM_GETNEXTITEM()  LVM_FIRST + 12
define LVFI_PARAM()  0x0001
define LVFI_STRING()  0x0002
define LVFI_PARTIAL()  0x0008
define LVFI_WRAP()  0x0020
define LVFI_NEARESTXY()  0x0040
define LVM_FINDITEM()  LVM_FIRST + 13
define LVM_FINDITEMW()  LVM_FIRST + 83
define LVIR_BOUNDS()  0
define LVIR_ICON()  1
define LVIR_LABEL()  2
define LVIR_SELECTBOUNDS()  3
define LVM_GETITEMRECT()  LVM_FIRST + 14
define LVM_SETITEMPOSITION()  LVM_FIRST + 15
define LVM_GETITEMPOSITION()  LVM_FIRST + 16
define LVM_GETSTRINGWIDTH()  LVM_FIRST + 17
define LVM_GETSTRINGWIDTHW()  LVM_FIRST + 87
define LVHT_NOWHERE()  0x0001
define LVHT_ONITEMICON()  0x0002
define LVHT_ONITEMLABEL()  0x0004
define LVHT_ONITEMSTATEICON()  0x0008
define LVHT_ONITEM()  LVHT_ONITEMICON | LVHT_ONITEMLABEL | LVHT_ONITEMSTATEICON
define LVHT_ABOVE()  0x0008
define LVHT_BELOW()  0x0010
define LVHT_TORIGHT()  0x0020
define LVHT_TOLEFT()  0x0040
define LVM_HITTEST()  LVM_FIRST + 18
define LVM_ENSUREVISIBLE()  LVM_FIRST + 19
define LVM_SCROLL()  LVM_FIRST + 20
define LVM_REDRAWITEMS()  LVM_FIRST + 21
define LVA_DEFAULT()  0x0000
define LVA_ALIGNLEFT()  0x0001
define LVA_ALIGNTOP()  0x0002
define LVA_SNAPTOGRID()  0x0005
define LVM_ARRANGE()  LVM_FIRST + 22
define LVM_EDITLABEL()  LVM_FIRST + 23
define LVM_EDITLABELW()  LVM_FIRST + 118
define LVM_GETEDITCONTROL()  LVM_FIRST + 24
define LVCF_FMT()  0x0001
define LVCF_WIDTH()  0x0002
define LVCF_TEXT()  0x0004
define LVCF_SUBITEM()  0x0008
define LVCFMT_LEFT()  0x0000
define LVCFMT_RIGHT()  0x0001
define LVCFMT_CENTER()  0x0002
define LVCFMT_JUSTIFYMASK()  0x0003
define LVM_GETCOLUMN()  LVM_FIRST + 25
define LVM_GETCOLUMNW()  LVM_FIRST + 95
define LVM_SETCOLUMN()  LVM_FIRST + 26
define LVM_SETCOLUMNW()  LVM_FIRST + 96
define LVM_INSERTCOLUMN()  LVM_FIRST + 27
define LVM_INSERTCOLUMNW()  LVM_FIRST + 97
define LVM_DELETECOLUMN()  LVM_FIRST + 28
define LVM_GETCOLUMNWIDTH()  LVM_FIRST + 29
define LVSCW_AUTOSIZE()  -1
define LVSCW_AUTOSIZE_USEHEADER()  -2
define LVM_SETCOLUMNWIDTH()  LVM_FIRST + 30
define LVM_CREATEDRAGIMAGE()  LVM_FIRST + 33
define LVM_GETVIEWRECT()  LVM_FIRST + 34
define LVM_GETTEXTCOLOR()  LVM_FIRST + 35
define LVM_SETTEXTCOLOR()  LVM_FIRST + 36
define LVM_GETTEXTBKCOLOR()  LVM_FIRST + 37
define LVM_SETTEXTBKCOLOR()  LVM_FIRST + 38
define LVM_GETTOPINDEX()  LVM_FIRST + 39
define LVM_GETCOUNTPERPAGE()  LVM_FIRST + 40
define LVM_GETORIGIN()  LVM_FIRST + 41
define LVM_UPDATE()  LVM_FIRST + 42
define LVM_SETITEMSTATE()  LVM_FIRST + 43
define LVM_GETITEMSTATE()  LVM_FIRST + 44
define LVM_GETITEMTEXT()  LVM_FIRST + 45
define LVM_GETITEMTEXTW()  LVM_FIRST + 115
define LVM_SETITEMTEXT()  LVM_FIRST + 46
define LVM_SETITEMTEXTW()  LVM_FIRST + 116
define LVM_SETITEMCOUNT()  LVM_FIRST + 47
define LVM_SORTITEMS()  LVM_FIRST + 48
define LVM_SETITEMPOSITION32()  LVM_FIRST + 49
define LVM_GETSELECTEDCOUNT()  LVM_FIRST + 50
define LVM_GETITEMSPACING()  LVM_FIRST + 51
define LVM_GETISEARCHSTRING()  LVM_FIRST + 52
define LVM_GETISEARCHSTRINGW()  LVM_FIRST + 117
define LVN_ITEMCHANGING()  LVN_FIRST-0
define LVN_ITEMCHANGED()  LVN_FIRST-1
define LVN_INSERTITEM()  LVN_FIRST-2
define LVN_DELETEITEM()  LVN_FIRST-3
define LVN_DELETEALLITEMS()  LVN_FIRST-4
define LVN_BEGINLABELEDIT()  LVN_FIRST-5
define LVN_BEGINLABELEDITW()  LVN_FIRST-75
define LVN_ENDLABELEDIT()  LVN_FIRST-6
define LVN_ENDLABELEDITW()  LVN_FIRST-76
define LVN_COLUMNCLICK()  LVN_FIRST-8
define LVN_BEGINDRAG()  LVN_FIRST-9
define LVN_BEGINRDRAG()  LVN_FIRST-11
define LVN_GETDISPINFO()  LVN_FIRST-50
define LVN_GETDISPINFOW()  LVN_FIRST-77
define LVN_SETDISPINFO()  LVN_FIRST-51
define LVN_SETDISPINFOW()  LVN_FIRST-78
define LVIF_DI_SETITEM()  0x1000
define LVN_KEYDOWN()  LVN_FIRST-55
define TVS_HASBUTTONS()  0x0001
define TVS_HASLINES()  0x0002
define TVS_LINESATROOT()  0x0004
define TVS_EDITLABELS()  0x0008
define TVS_DISABLEDRAGDROP()  0x0010
define TVS_SHOWSELALWAYS()  0x0020
define TVIF_TEXT()  0x0001
define TVIF_IMAGE()  0x0002
define TVIF_PARAM()  0x0004
define TVIF_STATE()  0x0008
define TVIF_HANDLE()  0x0010
define TVIF_SELECTEDIMAGE()  0x0020
define TVIF_CHILDREN()  0x0040
define TVIS_FOCUSED()  0x0001
define TVIS_SELECTED()  0x0002
define TVIS_CUT()  0x0004
define TVIS_DROPHILITED()  0x0008
define TVIS_BOLD()  0x0010
define TVIS_EXPANDED()  0x0020
define TVIS_EXPANDEDONCE()  0x0040
define TVIS_OVERLAYMASK()  0x0F00
define TVIS_STATEIMAGEMASK()  0x0F000
define TVIS_USERMASK()  0x0F000
define I_CHILDRENCALLBACK()  -1
define TVI_ROOT()  0x0FFFF0000
define TVI_FIRST()  0x0FFFF0001
define TVI_LAST()  0x0FFFF0002
define TVI_SORT()  0x0FFFF0003
define TVM_INSERTITEM()  TV_FIRST + 0
define TVM_INSERTITEMW()  TV_FIRST + 50
define TVM_DELETEITEM()  TV_FIRST + 1
define TVM_EXPAND()  TV_FIRST + 2
define TVE_COLLAPSE()  0x0001
define TVE_EXPAND()  0x0002
define TVE_TOGGLE()  0x0003
define TVE_COLLAPSERESET()  0x8000
define TVM_GETITEMRECT()  TV_FIRST + 4
define TVM_GETCOUNT()  TV_FIRST + 5
define TVM_GETINDENT()  TV_FIRST + 6
define TVM_SETINDENT()  TV_FIRST + 7
define TVM_GETIMAGELIST()  TV_FIRST + 8
define TVSIL_NORMAL()  0
define TVSIL_STATE()  2
define TVM_SETIMAGELIST()  TV_FIRST + 9
define TVM_GETNEXTITEM()  TV_FIRST + 10
define TVGN_ROOT()  0x0000
define TVGN_NEXT()  0x0001
define TVGN_PREVIOUS()  0x0002
define TVGN_PARENT()  0x0003
define TVGN_CHILD()  0x0004
define TVGN_FIRSTVISIBLE()  0x0005
define TVGN_NEXTVISIBLE()  0x0006
define TVGN_PREVIOUSVISIBLE()  0x0007
define TVGN_DROPHILITE()  0x0008
define TVGN_CARET()  0x0009
define TVM_SELECTITEM()  TV_FIRST + 11
define TVM_GETITEM()  TV_FIRST + 12
define TVM_GETITEMW()  TV_FIRST + 62
define TVM_SETITEM()  TV_FIRST + 13
define TVM_SETITEMW()  TV_FIRST + 63
define TVM_EDITLABEL()  TV_FIRST + 14
define TVM_EDITLABELW()  TV_FIRST + 65
define TVM_GETEDITCONTROL()  TV_FIRST + 15
define TVM_GETVISIBLECOUNT()  TV_FIRST + 16
define TVM_HITTEST()  TV_FIRST + 17
define TVHT_NOWHERE()  0x0001
define TVHT_ONITEMICON()  0x0002
define TVHT_ONITEMLABEL()  0x0004
define TVHT_ONITEMSTATEICON()  0x0040
define TVHT_ONITEM()  TVHT_ONITEMICON | TVHT_ONITEMLABEL | TVHT_ONITEMSTATEICON
define TVHT_ONITEMINDENT()  0x0008
define TVHT_ONITEMBUTTON()  0x0010
define TVHT_ONITEMRIGHT()  0x0020
define TVHT_ABOVE()  0x0100
define TVHT_BELOW()  0x0200
define TVHT_TORIGHT()  0x0400
define TVHT_TOLEFT()  0x0800
define TVM_CREATEDRAGIMAGE()  TV_FIRST + 18
define TVM_SORTCHILDREN()  TV_FIRST + 19
define TVM_ENSUREVISIBLE()  TV_FIRST + 20
define TVM_SORTCHILDRENCB()  TV_FIRST + 21
define TVM_GETISEARCHSTRING()  TV_FIRST + 23
define TVN_SELCHANGING()  TVN_FIRST-1
define TVN_SELCHANGED()  TVN_FIRST-2
define TVC_UNKNOWN()  0x0000
define TVC_BYMOUSE()  0x0001
define TVC_BYKEYBOARD()  0x0002
define TVN_GETDISPINFO()  TVN_FIRST-3
define TVN_SETDISPINFO()  TVN_FIRST-4
define TVIF_DI_SETITEM()  0x1000
define TVN_ITEMEXPANDING()  TVN_FIRST-5
define TVN_ITEMEXPANDED()  TVN_FIRST-6
define TVN_BEGINDRAG()  TVN_FIRST-7
define TVN_BEGINRDRAG()  TVN_FIRST-8
define TVN_DELETEITEM()  TVN_FIRST-9
define TVN_BEGINLABELEDIT()  TVN_FIRST-10
define TVN_ENDLABELEDIT()  TVN_FIRST-11
define TVN_KEYDOWN()  TVN_FIRST-12
define TCS_FORCEICONLEFT()  0x0010
define TCS_FORCELABELLEFT()  0x0020
define TCS_TABS()  0x0000
define TCS_BUTTONS()  0x0100
define TCS_SINGLELINE()  0x0000
define TCS_MULTILINE()  0x0200
define TCS_RIGHTJUSTIFY()  0x0000
define TCS_FIXEDWIDTH()  0x0400
define TCS_RAGGEDRIGHT()  0x0800
define TCS_FOCUSONBUTTONDOWN()  0x1000
define TCS_OWNERDRAWFIXED()  0x2000
define TCS_TOOLTIPS()  0x4000
define TCS_FOCUSNEVER()  0x8000
define TCM_FIRST()  0x1300
define TCM_GETIMAGELIST()  TCM_FIRST + 2
define TCM_SETIMAGELIST()  TCM_FIRST + 3
define TCM_GETITEMCOUNT()  TCM_FIRST + 4
define TCIF_TEXT()  0x0001
define TCIF_IMAGE()  0x0002
define TCIF_RTLREADING()  0x0004
define TCIF_PARAM()  0x0008
define TCM_GETITEM()  TCM_FIRST + 5
define TCM_SETITEM()  TCM_FIRST + 6
define TCM_SETITEMW()  TCM_FIRST + 61
define TCM_INSERTITEM()  TCM_FIRST + 7
define TCM_INSERTITEMW()  TCM_FIRST + 62
define TCM_DELETEITEM()  TCM_FIRST + 8
define TCM_DELETEALLITEMS()  TCM_FIRST + 9
define TCM_GETITEMRECT()  TCM_FIRST + 10
define TCM_GETCURSEL()  TCM_FIRST + 11
define TCM_SETCURSEL()  TCM_FIRST + 12
define TCHT_NOWHERE()  0x0001
define TCHT_ONITEMICON()  0x0002
define TCHT_ONITEMLABEL()  0x0004
define TCHT_ONITEM()  TCHT_ONITEMICON | TCHT_ONITEMLABEL
define TCM_HITTEST()  TCM_FIRST + 13
define TCM_SETITEMEXTRA()  TCM_FIRST + 14
define TCM_ADJUSTRECT()  TCM_FIRST + 40
define TCM_SETITEMSIZE()  TCM_FIRST + 41
define TCM_REMOVEIMAGE()  TCM_FIRST + 42
define TCM_SETPADDING()  TCM_FIRST + 43
define TCM_GETROWCOUNT()  TCM_FIRST + 44
define TCM_GETTOOLTIPS()  TCM_FIRST + 45
define TCM_SETTOOLTIPS()  TCM_FIRST + 46
define TCM_GETCURFOCUS()  TCM_FIRST + 47
define TCM_SETCURFOCUS()  TCM_FIRST + 48
define TCN_KEYDOWN()  TCN_FIRST - 0
define TCN_SELCHANGE()  TCN_FIRST - 1
define TCN_SELCHANGING()  TCN_FIRST - 2
define ACS_CENTER()  0x0001
define ACS_TRANSPARENT()  0x0002
define ACS_AUTOPLAY()  0x0004
define ACM_OPEN()  WM_USER+100
define ACM_OPENW()  WM_USER+103
define ACM_PLAY()  WM_USER+101
define ACM_STOP()  WM_USER+102
define ACN_START()  1
define ACN_STOP()  2

define FXPT2DOT30()  int32
define MMVERSION()  int32
define SECURITY_CONTEXT_TRACKING_MODE()  BOOLEAN
define MAX_JOYSTICKOEMVXDNAME()  260
define FOURCC()  int32

define LOAD_LIBRARY_AS_DATAFILE()  2
define LOAD_WITH_ALTERED_SEARCH_PATH()  8

define EVENT_MODIFY_STATE()  2
//-------------------------- wsock32 equates -------------------------------

define WSADESCRIPTION_LEN()  256
define WSASYS_STATUS_LEN()  128
define IPPROTO_IP()  0
define IPPROTO_ICMP()  1
define IPPROTO_GGP()  2
define IPPROTO_TCP()  6
define IPPROTO_PUP()  12
define IPPROTO_UDP()  17
define IPPROTO_IDP()  22
define IPPROTO_ND()  77
define IPPROTO_RAW()  255
define IPPROTO_MAX()  256
define IOCPARM_MASK()  0x7F
define IOC_VOID()  0x20000000
define IOC_OUT()  0x40000000
define IOC_IN()  0x80000000
define IOC_INOUT()  IOC_IN | IOC_OUT
define FIONBIO()  0x8004667E
define FIONSYNC()  0x8004667D
define FIONREAD()  0x4004667F
define IPPORT_ECHO()  7
define IPPORT_DISCARD()  9
define IPPORT_SYSTAT()  11
define IPPORT_DAYTIME()  13
define IPPORT_NETSTAT()  15
define IPPORT_FTP()  21
define IPPORT_TELNET()  23
define IPPORT_SMTP()  25
define IPPORT_TIMESERVER()  37
define IPPORT_NAMESERVER()  42
define IPPORT_WHOIS()  43
define IPPORT_MTP()  57
define IPPORT_TFTP()  69
define IPPORT_RJE()  77
define IPPORT_FINGER()  79
define IPPORT_TTYLINK()  87
define IPPORT_SUPDUP()  95
define IPPORT_EXECSERVER()  512
define IPPORT_LOGINSERVER()  513
define IPPORT_CMDSERVER()  514
define IPPORT_EFSSERVER()  520
define IPPORT_BIFFUDP()  512
define IPPORT_WHOSERVER()  513
define IPPORT_ROUTESERVER()  520
define IPPORT_RESERVED()  1024
define IMPLINK_IP()  155
define IMPLINK_LOWEXPER()  156
define IMPLINK_HIGHEXPER()  158
define IN_CLASSA_NET()  0x0FF000000
define IN_CLASSA_NSHIFT()  24
define IN_CLASSA_HOST()  0x000FFFFFF
define IN_CLASSA_MAX()  128
define IN_CLASSB_NET()  0x0FFFF0000
define IN_CLASSB_NSHIFT()  16
define IN_CLASSB_HOST()  0x00000FFFF
define IN_CLASSB_MAX()  65536
define IN_CLASSC_NET()  0x0FFFFFF00
define IN_CLASSC_NSHIFT()  8
define IN_CLASSC_HOST()  0x0000000FF
define INADDR_ANY()  0x000000000
define INADDR_LOOPBACK()  0x07F000001
define INADDR_BROADCAST()  0x0FFFFFFFF
define INADDR_NONE()  0x0FFFFFFFF
define SOCK_STREAM()  1
define SOCK_DGRAM()  2
define SOCK_RAW()  3
define SOCK_RDM()  4
define SOCK_SEQPACKET()  5
define SO_DEBUG()  0x00001
define SO_ACCEPTCONN()  0x00002
define SO_REUSEADDR()  0x00004
define SO_KEEPALIVE()  0x00008
define SO_DONTROUTE()  0x00010
define SO_BROADCAST()  0x00020
define SO_USELOOPBACK()  0x00040
define SO_LINGER()  0x00080
define SO_OOBINLINE()  0x00100
define SOL_SOCKET()  0x0FFFF
define SO_DONTLINGER()  (!SO_LINGER)
define SO_SNDBUF()  0x01001
define SO_RCVBUF()  0x01002
define SO_SNDLOWAT()  0x01003
define SO_RCVLOWAT()  0x01004
define SO_SNDTIMEO()  0x01005
define SO_RCVTIMEO()  0x01006
define SO_ERROR()  0x01007
define SO_TYPE()  0x01008
define TCP_NODELAY()  0x00001
define AF_UNSPEC()  0
define AF_UNIX()  1
define AF_INET()  2
define AF_IMPLINK()  3
define AF_PUP()  4
define AF_CHAOS()  5
define AF_NS()  6
define AF_IPX()  6
define AF_ISO()  7
define AF_OSI()  AF_ISO
define AF_ECMA()  8
define AF_DATAKIT()  9
define AF_CCITT()  10
define AF_SNA()  11
define AF_DECnet()  12
define AF_DLI()  13
define AF_LAT()  14
define AF_HYLINK()  15
define AF_APPLETALK()  16
define AF_NETBIOS()  17
define AF_MAX()  18
define PF_UNSPEC()  AF_UNSPEC
define PF_UNIX()  AF_UNIX
define PF_INET()  AF_INET
define PF_IMPLINK()  AF_IMPLINK
define PF_PUP()  AF_PUP
define PF_CHAOS()  AF_CHAOS
define PF_NS()  AF_NS
define PF_IPX()  AF_IPX
define PF_ISO()  AF_ISO
define PF_OSI()  AF_OSI
define PF_ECMA()  AF_ECMA
define PF_DATAKIT()  AF_DATAKIT
define PF_CCITT()  AF_CCITT
define PF_SNA()  AF_SNA
define PF_DECnet()  AF_DECnet
define PF_DLI()  AF_DLI
define PF_LAT()  AF_LAT
define PF_HYLINK()  AF_HYLINK
define PF_APPLETALK()  AF_APPLETALK
define PF_MAX()  AF_MAX
define SOMAXCONN()  5
define MSG_OOB()  0x01
define MSG_PEEK()  0x02
define MSG_DONTROUTE()  0x04
define MSG_MAXIOVLEN()  16
define MAXGETHOSTSTRUCT()  1024
define FD_READ()  0x001
define FD_WRITE()  0x002
define FD_OOB()  0x004
define FD_ACCEPT()  0x008
define FD_CONNECT()  0x010
define FD_CLOSE()  0x020
define WSABASEERR()  10000
define WSAEINTR()  WSABASEERR+4
define WSAEBADF()  WSABASEERR+9
define WSAEACCES()  WSABASEERR+13
define WSAEFAULT()  WSABASEERR+14
define WSAEINVAL()  WSABASEERR+22
define WSAEMFILE()  WSABASEERR+24
define WSAEWOULDBLOCK()  WSABASEERR + 35
define WSAEINPROGRESS()  WSABASEERR + 36
define WSAEALREADY()  WSABASEERR + 37
define WSAENOTSOCK()  WSABASEERR + 38
define WSAEDESTADDRREQ()  WSABASEERR + 39
define WSAEMSGSIZE()  WSABASEERR + 40
define WSAEPROTOTYPE()  WSABASEERR + 41
define WSAENOPROTOOPT()  WSABASEERR + 42
define WSAEPROTONOSUPPORT()  WSABASEERR + 43
define WSAESOCKTNOSUPPORT()  WSABASEERR + 44
define WSAEOPNOTSUPP()  WSABASEERR + 45
define WSAEPFNOSUPPORT()  WSABASEERR + 46
define WSAEAFNOSUPPORT()  WSABASEERR + 47
define WSAEADDRINUSE()  WSABASEERR + 48
define WSAEADDRNOTAVAIL()  WSABASEERR + 49
define WSAENETDOWN()  WSABASEERR + 50
define WSAENETUNREACH()  WSABASEERR + 51
define WSAENETRESET()  WSABASEERR + 52
define WSAECONNABORTED()  WSABASEERR + 53
define WSAECONNRESET()  WSABASEERR + 54
define WSAENOBUFS()  WSABASEERR + 55
define WSAEISCONN()  WSABASEERR + 56
define WSAENOTCONN()  WSABASEERR + 57
define WSAESHUTDOWN()  WSABASEERR + 58
define WSAETOOMANYREFS()  WSABASEERR + 59
define WSAETIMEDOUT()  WSABASEERR + 60
define WSAECONNREFUSED()  WSABASEERR + 61
define WSAELOOP()  WSABASEERR + 62
define WSAENAMETOOLONG()  WSABASEERR + 63
define WSAEHOSTDOWN()  WSABASEERR + 64
define WSAEHOSTUNREACH()  WSABASEERR + 65
define WSAENOTEMPTY()  WSABASEERR + 66
define WSAEPROCLIM()  WSABASEERR + 67
define WSAEUSERS()  WSABASEERR + 68
define WSAEDQUOT()  WSABASEERR + 69
define WSAESTALE()  WSABASEERR + 70
define WSAEREMOTE()  WSABASEERR + 71
define WSASYSNOTREADY()  WSABASEERR+91
define WSAVERNOTSUPPORTED()  WSABASEERR+92
define WSANOTINITIALISED()  WSABASEERR+93
define WSAHOST_NOT_FOUND()  WSABASEERR + 1001
define HOST_NOT_FOUND()  WSAHOST_NOT_FOUND
define WSATRY_AGAIN()  WSABASEERR + 1002
define TRY_AGAIN()  WSATRY_AGAIN
define WSANO_RECOVERY()  WSABASEERR + 1003
define NO_RECOVERY()  WSANO_RECOVERY
define WSANO_DATA()  WSABASEERR + 1004
define NO_DATA()  WSANO_DATA
define WSANO_ADDRESS()  WSANO_DATA
define NO_ADDRESS()  WSANO_ADDRESS
define EWOULDBLOCK()  WSAEWOULDBLOCK
define EINPROGRESS()  WSAEINPROGRESS
define EALREADY()  WSAEALREADY
define ENOTSOCK()  WSAENOTSOCK
define EDESTADDRREQ()  WSAEDESTADDRREQ
define EMSGSIZE()  WSAEMSGSIZE
define EPROTOTYPE()  WSAEPROTOTYPE
define ENOPROTOOPT()  WSAENOPROTOOPT
define EPROTONOSUPPORT()  WSAEPROTONOSUPPORT
define ESOCKTNOSUPPORT()  WSAESOCKTNOSUPPORT
define EOPNOTSUPP()  WSAEOPNOTSUPP
define EPFNOSUPPORT()  WSAEPFNOSUPPORT
define EAFNOSUPPORT()  WSAEAFNOSUPPORT
define EADDRINUSE()  WSAEADDRINUSE
define EADDRNOTAVAIL()  WSAEADDRNOTAVAIL
define ENETDOWN()  WSAENETDOWN
define ENETUNREACH()  WSAENETUNREACH
define ENETRESET()  WSAENETRESET
define ECONNABORTED()  WSAECONNABORTED
define ECONNRESET()  WSAECONNRESET
define ENOBUFS()  WSAENOBUFS
define EISCONN()  WSAEISCONN
define ENOTCONN()  WSAENOTCONN
define ESHUTDOWN()  WSAESHUTDOWN
define ETOOMANYREFS()  WSAETOOMANYREFS
define ETIMEDOUT()  WSAETIMEDOUT
define ECONNREFUSED()  WSAECONNREFUSED
define ELOOP()  WSAELOOP
define ENAMETOOLONG()  WSAENAMETOOLONG
define EHOSTDOWN()  WSAEHOSTDOWN
define EHOSTUNREACH()  WSAEHOSTUNREACH
define ENOTEMPTY()  WSAENOTEMPTY
define EPROCLIM()  WSAEPROCLIM
define EUSERS()  WSAEUSERS
define EDQUOT()  WSAEDQUOT
define ESTALE()  WSAESTALE
define EREMOTE()  WSAEREMOTE
define FD_SETSIZE()  64
define INVALID_SOCKET()  (!0)
define SOCKET_ERROR()  -1
define SOCKET_BUFFER_SIZE()  512
define ICMP_ECHOREPLY()  0
define ICMP_ECHOREQ()  8
define IMAGE_SIZEOF_SECTION_HEADER()  40

// ------------------------- comctl structures ------------------------------

struct POINT
{
    int32    x;
    int32    y;
}

struct POINTS
{
    int16    x;
    int16    y;
}

define POINTL()  POINT

struct RECT
{
    int32    left;
    int32    top;
    int32    right;
    int32    bottom;
}

struct INITCOMMONCONTROLSEX
{
    int32    dwSize;
    int32    dwICC;
}

struct REBARINFO
{
    int32    cbSize;
    int32    fMask;
    int32    himl;
}

struct REBARBANDINFOA
{
    int32    cbSize;
    int32    fMask;
    int32    fStyle;
    int32    clrFore;
    int32    clrBack;
    int32    lpText;
    int32    cch;
    int32    iImage;
    int32    hwndChild;
    int32    cxMinChild;
    int32    cyMinChild;
    int32    lx;
    int32    hbmBack;
    int32    wID;
    int32    cyChild;
    int32    cyMaxChild;
    int32    cyIntegral;
    int32    cxIdeal;
    int32    lParam;
    int32    cxHeader;
}

define REBARBANDINFO()  REBARBANDINFOA

struct NMHDR
{
    int32      hwndFrom;
    int32      idFrom;
    int32      code;
}

struct NMREBARCHILDSIZE
{
    NMHDR    hdr;
    int32    uBand;
    int32    wID;
    RECT    rcChild;
    RECT    rcBand;
}

struct NMREBAR
{
    NMHDR    hdr;
    int32    dwMask;
    int32    uBand;
    int32    fStyle;
    int32    wID;
    int32    lParam;
}

struct NMRBAUTOSIZE
{
    NMHDR    hdr;
    int32    fChanged;
    RECT    rcTarget;
    RECT    rcActual;
}

struct RBHITTESTINFO
{
    POINT    pt;
    int32    flags;
    int32    iBand;
}

struct IMAGEINFO
{
    HBITMAP    hbmImage;
    HBITMAP    hbmMask;
    int32    Unused1;
    int32    Unused2;
    RECT    rcImage;
}

struct HD_ITEM
{
    int32    imask;
    int32    lxy;
    int32    pszText;
    int32    hbm;
    int32    cchTextMax;
    int32    fmt;
    int32    lParam;
    int32    iImage;
    int32    iOrder;
    int32    itype;
    int32    pvFilter;
}

struct HD_LAYOUT
{
    int32    prc;
    int32    pwpos;
}

struct HD_HITTESTINFO
{
    POINT    pt;
    int32    flags;
    int32    iItem;
}

struct NMHEADER
{
    NMHDR      hdr;
    int32      iItem;
    int32      iButton;
    int32      pitem;
}

define HD_NOTIFY()  NMHEADER

struct TBBUTTON
{
    int32    iBitmap;
    int32    idCommand;
    int8    fsState;
    int8    fsStyle;
    int16    _wPad1;
    int32    dwData;
    int32    iString;
}

struct COLORMAP
{
    int32    From;
    int32    To;
}

struct TBADDBITMAP
{
    int32    hInst;
    int32    nID;
}

struct TBREPLACEBITMAP
{
    int32    hInstOld;
    int32    nIdOld;
    int32    hInstNew;
    int32    nIdNew;
    int32    nButtons;
}

struct TBSAVEPARAMSA
{
    int32    hkr;
    int32    pszSubKey;
    int32    pszValueName;
}

define TBSAVEPARAMS()  TBSAVEPARAMS

struct NMTOOLBAR
{
    NMHDR    hdr;
    int32    iItem;
    TBBUTTON    tbButton;
    int32    cchText;
    int32    pszText;
}

define TBNOTIFY()  NMTOOLBAR

struct TOOLINFO
{
    int32    cbSize;
    int32    uFlags;
    int32    hWnd;
    int32    uId;
    RECT    rect;
    int32    hInst;
    int32    lpszText;
    LPARAM    lParam;
}

struct TT_HITTESTINFO
{
    int32    hWnd;
    POINT    pt;
    TOOLINFO    ti;
}

union HINST
{
   int32     hInst;
   int32     hinst;
}

struct NMTTDISPINFO
{
    NMHDR  hdr;
    int32   lpszText;
    int8[80]   szText;
    HINST  hUnionInst;
    int32    uFlags;
    LPARAM  lParam;
}

define TOOLTIPTEXT()  NMTTDISPINFO

struct DRAGLISTINFO
{
    int32    uNotification;
    int32    hWnd;
    POINT    ptCursor;
}

struct UDACCEL
{
    int32    nSec;
    int32    nInc;
}

struct NM_UPDOWN
{
    NMHDR    hdr;
    int32    iPos;
    int32    iDelta;
}

define NMUPDOWN()  NM_UPDOWN

struct LV_ITEM
{
    int32    imask;
    int32    iItem;
    int32    iSubItem;
    int32    state;
    int32    stateMask;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    lParam;
    int32    iIndent;
}

define LVITEM()  LV_ITEM

struct LV_FINDINFO
{
    int32    flags;
    int32    psz;
    int32    lParam;
    POINT    pt;
    int32    vkDirection;
}

define LVFINDINFO()  LV_FINDINFO

struct LV_HITTESTINFO
{
    POINT    pt;
    int32    flags;
    int32    iItem;
    int32    iSubItem;
}

define LVHITTESTINFO()  LV_HITTESTINFO

struct LV_COLUMN
{
    int32    imask;
    int32    fmt;
    int32    lx;
    int32    pszText;
    int32    cchTextMax;
    int32    iSubItem;
    int32    iImage;
    int32    iOrder;
}

define LVCOLUMN()  LV_COLUMN

struct NM_LISTVIEW
{
    NMHDR    hdr;
    int32    iItem;
    int32    iSubItem;
    int32    uNewState;
    int32    uOldState;
    int32    uChanged;
    POINT    ptAction;
    int32    lParam;
}

define NMLISTVIEW()  NM_LISTVIEW

struct LV_DISPINFO
{
    NMHDR    hdr;
    LVITEM    item;
}

struct LV_KEYDOWN
{
    NMHDR    hdr;
    int16    wVKey;
    int32    flags;
}

define NMLVKEYDOWN()  LV_KEYDOWN

define _mask()  imask

struct TVITEMA
{
    int32    _mask;
    int32    hItem;
    int32    state;
    int32    stateMask;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    iSelectedImage;
    int32    cChildren;
    int32    lParam;
}

define TVITEM()  TVITEMA
define TV_ITEM()  TVITEMA

struct TV_ITEMEX
{
    int32    imask;
    int32    hItem;
    int32    state;
    int32    stateMask;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    iSelectedImage;
    int32    cChildren;
    int32    lParam;
    int32    iIntegral;
}

define TVITEMEX()  TV_ITEMEX

union ITEMTYPE
{
    TVITEMEX          itemex;
    TVITEM          item;
}

struct TV_INSERTSTRUCT
{
    int32    hParent;
    int32    hInsertAfter;
    ITEMTYPE itemtype;
}

struct TV_HITTESTINFO
{
    POINT    pt;
    int32    flags;
    int32    hItem;
}

define TVHITTESTINFO()  TV_HITTESTINFO

struct TV_SORTCB
{
    int32    hParent;
    int32    lpfnCompare;
    int32    lParam;
}

define TVSORTCB()  TV_SORTCB

struct NM_TREEVIEW
{
    NMHDR    hdr;
    int32    action;
    TVITEM    itemOld;
    TVITEM    itemNew;
    POINT    ptDrag;
}

define NMTREEVIEW()  NM_TREEVIEW

struct TV_DISPINFO
{
    NMHDR    hdr;
    TVITEM    item;
}

define NMTVDISPINFO()  TV_DISPINFO

struct TV_KEYDOWN
{
    NMHDR    hdr;
    int16    wVKey;
    int32    flags;
}

define NMTVKEYDOWN()  TV_KEYDOWN

struct TC_ITEMHEADER
{
    int32    imask;
    int32    lpReserved1;
    int32    lpReserved2;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
}

define TCITEMHEADER()  TC_ITEMHEADER

struct TC_ITEM
{
    int32    imask;
    int32    lpReserved1;
    int32    lpReserved2;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    lParam;
}

define TCITEM()  TC_ITEM

struct TC_HITTESTINFO
{
    POINT    pt;
    int32    flags;
}

define TCHITTESTINFO()  TC_HITTESTINFO

struct TC_KEYDOWN
{
    NMHDR    hdr;
    int16    wVKey;
    int32    flags;
}

define NMTCKEYDOWN()  TC_KEYDOWN

// -------------------------- comdlg equates -------------------------------

define CDERR_GENERALCODES()  0x0000
define CDERR_STRUCTSIZE()  0x0001
define CDERR_INITIALIZATION()  0x0002
define CDERR_NOTEMPLATE()  0x0003
define CDERR_NOHINSTANCE()  0x0004
define CDERR_LOADSTRFAILURE()  0x0005
define CDERR_FINDRESFAILURE()  0x0006
define CDERR_LOADRESFAILURE()  0x0007
define CDERR_LOCKRESFAILURE()  0x0008
define CDERR_MEMALLOCFAILURE()  0x0009
define CDERR_MEMLOCKFAILURE()  0x000A
define CDERR_NOHOOK()  0x000B
define CDERR_REGISTERMSGFAIL()  0x000C
define CC_RGBINIT()  0x00000001
define CC_FULLOPEN()  0x00000002
define CC_PREVENTFULLOPEN()  0x00000004
define CC_SHOWHELP()  0x00000008
define CC_ENABLEHOOK()  0x00000010
define CC_ENABLETEMPLATE()  0x00000020
define CC_ENABLETEMPLATEHANDLE()  0x00000040
define CCERR_CHOOSECOLORCODES()  0x5000
define FR_DOWN()  0x00000001
define FR_WHOLEWORD()  0x00000002
define FR_MATCHCASE()  0x00000004
define FR_FINDNEXT()  0x00000008
define FR_REPLACE()  0x00000010
define FR_REPLACEALL()  0x00000020
define FR_DIALOGTERM()  0x00000040
define FR_SHOWHELP()  0x00000080
define FR_ENABLEHOOK()  0x00000100
define FR_ENABLETEMPLATE()  0x00000200
define FR_NOUPDOWN()  0x00000400
define FR_NOMATCHCASE()  0x00000800
define FR_NOWHOLEWORD()  0x00001000
define FR_ENABLETEMPLATEHANDLE()  0x00002000
define FR_HIDEUPDOWN()  0x00004000
define FR_HIDEMATCHCASE()  0x00008000
define FR_HIDEWHOLEWORD()  0x00010000
define FRERR_FINDREPLACECODES()  0x4000
define FRERR_BUFFERLENGTHZERO()  0x4001
define CF_SCREENFONTS()  0x00000001
define CF_PRINTERFONTS()  0x00000002
define CF_BOTH()  CF_SCREENFONTS + CF_PRINTERFONTS
define CF_SHOWHELP()  0x00000004
define CF_ENABLEHOOK()  0x00000008
define CF_ENABLETEMPLATE()  0x00000010
define CF_ENABLETEMPLATEHANDLE()  0x00000020
define CF_INITTOLOGFONTSTRUCT()  0x00000040
define CF_USESTYLE()  0x00000080
define CF_EFFECTS()  0x00000100
define CF_APPLY()  0x00000200
define CF_ANSIONLY()  0x00000400
define CF_NOVECTORFONTS()  0x00000800
define CF_NOOEMFONTS()  CF_NOVECTORFONTS
define CF_NOSIMULATIONS()  0x00001000
define CF_LIMITSIZE()  0x00002000
define CF_FIXEDPITCHONLY()  0x00004000
define CF_WYSIWYG()  0x00008000
define CF_FORCEFONTEXIST()  0x00010000
define CF_SCALABLEONLY()  0x00020000
define CF_TTONLY()  0x00040000
define CF_NOFACESEL()  0x00080000
define CF_NOSTYLESEL()  0x00100000
define CF_NOSIZESEL()  0x00200000
define CFERR_CHOOSEFONTCODES()  0x2000
define CFERR_NOFONTS()  0x2001
define CFERR_MAXLESSTHANMIN()  0x2002
define WM_CHOOSEFONT_GETLOGFONT()  WM_USER + 1
define CD_LBSELNOITEMS()  -1
define CD_LBSELCHANGE()  0
define CD_LBSELSUB()  1
define CD_LBSELADD()  2
define PD_ALLPAGES()  0x00000000
define PD_SELECTION()  0x00000001
define PD_PAGENUMS()  0x00000002
define PD_NOSELECTION()  0x00000004
define PD_NOPAGENUMS()  0x00000008
define PD_COLLATE()  0x00000010
define PD_PRINTTOFILE()  0x00000020
define PD_PRINTSETUP()  0x00000040
define PD_NOWARNING()  0x00000080
define PD_RETURNDC()  0x00000100
define PD_RETURNIC()  0x00000200
define PD_RETURNDEFAULT()  0x00000400
define PD_SHOWHELP()  0x00000800
define PD_ENABLEPRINTHOOK()  0x00001000
define PD_ENABLESETUPHOOK()  0x00002000
define PD_ENABLEPRINTTEMPLATE()  0x00004000
define PD_ENABLESETUPTEMPLATE()  0x00008000
define PD_ENABLEPRINTTEMPLATEHANDLE()  0x00010000
define PD_ENABLESETUPTEMPLATEHANDLE()  0x00020000
define PD_USEDEVMODECOPIES()  0x00040000
define PD_DISABLEPRINTTOFILE()  0x00080000
define PD_HIDEPRINTTOFILE()  0x00100000
define PDERR_PRINTERCODES()  0x1000
define PDERR_SETUPFAILURE()  0x1001
define PDERR_PARSEFAILURE()  0x1002
define PDERR_RETDEFFAILURE()  0x1003
define PDERR_LOADDRVFAILURE()  0x1004
define PDERR_GETDEVMODEFAIL()  0x1005
define PDERR_INITFAILURE()  0x1006
define PDERR_NODEVICES()  0x1007
define PDERR_NODEFAULTPRN()  0x1008
define PDERR_DNDMMISMATCH()  0x1009
define PDERR_CREATEICFAILURE()  0x100A
define PDERR_PRINTERNOTFOUND()  0x100B
define PDERR_DEFAULTDIFFERENT()  0x100C
define DN_DEFAULTPRN()  0x0001
define OFN_ALLOWMULTISELECT()  0x00000200
define OFN_CREATEPROMPT()  0x00002000
define OFN_ENABLEHOOK()  0x00000020
define OFN_ENABLETEMPLATE()  0x00000040
define OFN_ENABLETEMPLATEHANDLE()  0x00000080
define OFN_EXPLORER()  0x00080000
define OFN_EXTENSIONDIFFERENT()  0x00000400
define OFN_FILEMUSTEXIST()  0x00001000
define OFN_HIDEREADONLY()  0x00000004
define OFN_LONGNAMES()  0x00200000
define OFN_NOCHANGEDIR()  0x00000008
define OFN_NODEREFERENCELINKS()  0x00100000
define OFN_NOLONGNAMES()  0x00040000
define OFN_NONETWORKBUTTON()  0x00020000
define OFN_NOREADONLYRETURN()  0x00008000
define OFN_NOTESTFILECREATE()  0x00010000
define OFN_NOVALIDATE()  0x00000100
define OFN_OVERWRITEPROMPT()  0x00000002
define OFN_PATHMUSTEXIST()  0x00000800
define OFN_READONLY()  0x00000001
define OFN_SHAREAWARE()  0x00004000
define OFN_SHOWHELP()  0x00000010
define OFN_SHAREFALLTHROUGH()  2
define OFN_SHARENOWARN()  1
define OFN_SHAREWARN()  0
define CDERR_DIALOGFAILURE()  0x0FFFF
define FNERR_FILENAMECODES()  0x3000
define FNERR_SUBCLASSFAILURE()  0x3001
define FNERR_INVALIDFILENAME()  0x3002
define FNERR_BUFFERTOOSMALL()  0x3003
// -------------------------- comdlg structures ----------------------------

struct CHOOSECOLORA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hInstance;
    int32    rgbResult;
    int32    lpCustColors;
    int32    Flags;
    int32    lCustData;
    int32    lpfnHook;
    int32    lpTemplateName;
}

define CHOOSECOLOR()  CHOOSECOLORA

struct FINDREPLACEA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hInstance;
    int32    Flags;
    int32    lpstrFindWhat;
    int32    lpstrReplaceWith;
    int16    wFindWhatLen;
    int16    wReplaceWithLen;
    int32    lCustData;
    int32    lpfnHook;
    int32    lpTemplateName;
}

define FINDREPLACE()  FINDREPLACEA

struct CHOOSEFONTA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hDC;
    int32    lpLogFont;
    int32    iPointSize;
    int32    Flags;
    int32    rgbColors;
    int32    lCustData;
    int32    lpfnHook;
    int32    lpTemplateName;
    int32    hInstance;
    int32    lpszStyle;
    int16    nFontType;
    int16    Alignment;
    int32    nSizeMin;
    int32    nSizeMax;
}

define CHOOSEFONT()  CHOOSEFONTA

struct DEVNAMES
{
    int16    wDriverOffset;
    int16    wDeviceOffset;
    int16    wOutputOffset;
    int16    wDefault;
}

struct PRINTDLGA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hDevMode;
    int32    hDevNames;
    int32    hDC;
    int32    Flags;
    int16    nFromPage;
    int16    nToPage;
    int16    nMinPage;
    int16    nMaxPage;
    int16    nCopies;
    int32    hInstance;
    int32    lCustData;
    int32    lpfnPrintHook;
    int32    lpfnSetupHook;
    int32    lpPrintTemplateName;
    int32    lpPrintSetupTemplateName;
    int32    hPrintTemplate;
    int32    hSetupTemplate;
}

define PRINTDLG()  PRINTDLGA

struct OPENFILENAMEA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hInstance;
    int32    lpstrFilter;
    int32    lpstrCustomFilter;
    int32    nMaxCustFilter;
    int32    nFilterIndex;
    int32    lpstrFile;
    int32    nMaxFile;
    int32    lpstrFileTitle;
    int32    nMaxFileTitle;
    int32    lpstrInitialDir;
    int32    lpstrTitle;
    int32    Flags;
    int16    nFileOffset;
    int16    nFileExtension;
    int32    lpstrDefExt;
    int32    lCustData;
    int32    lpfnHook;
    int32    lpTemplateName;
}

define OPENFILENAME()  OPENFILENAMEA

define SES_EMULATESYSEDIT()  1
define SES_BEEPONMAXTEXT()  2
define SES_EXTENDBACKCOLOR()  4
define SES_MAPCPS()  8
define SES_EMULATE10()  16
define SES_USECRLF()  32
define SES_USEAIMM()  64
define SES_ALLOWBEEPS()  256

define ENM_NONE()  0x00000000
define ENM_CHANGE()  0x00000001
define ENM_UPDATE()  0x00000002
define ENM_SCROLL()  0x00000004
define ENM_KEYEVENTS()  0x00010000
define ENM_MOUSEEVENTS()  0x00020000
define ENM_REQUESTRESIZE()  0x00040000
define ENM_SELCHANGE()  0x00080000
define ENM_DROPFILES()  0x00100000
define ENM_PROTECTED()  0x00200000
define ENM_CORRECTTEXT()  0x00400000
define ENM_IMECHANGE()  0x00800000
define ES_SAVESEL()  0x00008000
define ES_SUNKEN()  0x00004000
define ES_DISABLENOSCROLL()  0x00002000
define ES_SELECTIONBAR()  0x01000000
define ES_EX_NOCALLOLEINIT()  0x01000000
define ES_VERTICAL()  0x00400000
define ES_NOIME()  0x00080000
define ES_SELFIME()  0x00040000
define ECO_AUTOWORDSELECTION()  0x00000001
define ECO_AUTOVSCROLL()  0x00000040
define ECO_AUTOHSCROLL()  0x00000080
define ECO_NOHIDESEL()  0x00000100
define ECO_READONLY()  0x00000800
define ECO_WANTRETURN()  0x00001000
define ECO_SAVESEL()  0x00008000
define ECO_SELECTIONBAR()  0x01000000
define ECO_VERTICAL()  0x00400000
define ECOOP_SET()  0x0001
define ECOOP_OR()  0x0002
define ECOOP_AND()  0x0003
define ECOOP_XOR()  0x0004
define WB_CLASSIFY()  3
define WB_MOVEWORDLEFT()  4
define WB_MOVEWORDRIGHT()  5
define WB_LEFTBREAK()  6
define WB_RIGHTBREAK()  7
define WB_MOVEWORDPREV()  4
define WB_MOVEWORDNEXT()  5
define WB_PREVBREAK()  6
define WB_NEXTBREAK()  7
define PC_FOLLOWING()  1
define PC_LEADING()  2
define PC_OVERFLOW()  3
define PC_DELIMITER()  4
define WBF_WORDWRAP()  0x010
define WBF_WORDBREAK()  0x020
define WBF_OVERFLOW()  0x040
define WBF_LEVEL1()  0x080
define WBF_LEVEL2()  0x100
define WBF_CUSTOM()  0x200

define IMF_FORCENONE()  0x0001
define IMF_FORCEENABLE()  0x0002
define IMF_FORCEDISABLE()  0x0004
define IMF_CLOSESTATUSWINDOW()  0x0008
define IMF_VERTICAL()  0x0020
define IMF_FORCEACTIVE()  0x0040
define IMF_FORCEINACTIVE()  0x0080
define IMF_FORCEREMEMBER()  0x0100
define WBF_CLASS()  0x0F
define WBF_ISWHITE()  0x10
define WBF_BREAKLINE()  0x20
define WBF_BREAKAFTER()  0x40
define CFM_BOLD()  0x00000001
define CFM_ITALIC()  0x00000002
define CFM_UNDERLINE()  0x00000004
define CFM_STRIKEOUT()  0x00000008
define CFM_PROTECTED()  0x00000010
define CFM_SIZE()  0x80000000
define CFM_COLOR()  0x40000000
define CFM_FACE()  0x20000000
define CFM_OFFSET()  0x10000000
define CFM_CHARSET()  0x08000000
define CFE_BOLD()  0x0001
define CFE_ITALIC()  0x0002
define CFE_UNDERLINE()  0x0004
define CFE_STRIKEOUT()  0x0008
define CFE_PROTECTED()  0x0010
define CFE_AUTOCOLOR()  0x40000000
define yHeightCharPtsMost()  1638
define SCF_SELECTION()  0x0001
define SCF_WORD()  0x0002
define SF_TEXT()  0x0001
define SF_RTF()  0x0002
define SF_RTFNOOBJS()  0x0003
define SF_TEXTIZED()  0x0004
define SFF_SELECTION()  0x8000
define SFF_PLAINRTF()  0x4000
define MAX_TAB_STOPS()  32
define lDefaultTab()  720
define PFM_STARTINDENT()  0x00000001
define PFM_RIGHTINDENT()  0x00000002
define PFM_OFFSET()  0x00000004
define PFM_ALIGNMENT()  0x00000008
define PFM_TABSTOPS()  0x00000010
define PFM_NUMBERING()  0x00000020
define PFM_OFFSETINDENT()  0x80000000
define PFN_BULLET()  0x0001
define PFA_LEFT()  0x0001
define PFA_RIGHT()  0x0002
define PFA_CENTER()  0x0003
define SEL_EMPTY()  0x0000
define SEL_TEXT()  0x0001
define SEL_OBJECT()  0x0002
define SEL_MULTICHAR()  0x0004
define SEL_MULTIOBJECT()  0x0008
define OLEOP_DOVERB()  1
// -------------------------- riched structures -----------------------------

struct CHARFORMATA
{
    int32    cbSize;
    int32    dwMask;
    int32    dwEffects;
    int32    yHeight;
    int32    yOffset;
    COLORREF    crTextColor;
    int8    bCharSet;
    int8    bPitchAndFamily;
    int8[LF_FACESIZE]  szFaceName;
    int16    _wPad2;
}

define CHARFORMAT()  CHARFORMATA

struct CHARRANGE
{
    int32    cpMin;
    int32    cpMax;
}

struct TEXTRANGEA
{
    CHARRANGE    chrg;
    int32    lpstrText;
}

define TEXTRANGE()  TEXTRANGEA

struct EDITSTREAM
{
    int32    dwCookie;
    int32    dwError;
    int32    pfnCallback;
}

struct FINDTEXTA
{
    CHARRANGE    chrg;
    int32    lpstrText;
}

define FINDTEXT()  FINDTEXTA

struct FINDTEXTEXA
{
    CHARRANGE    chrg;
    int32    lpstrText;
    CHARRANGE    chrgText;
}

define FINDTEXTEX()  FINDTEXTEXA

struct FORMATRANGE
{
    int32    hdc;
    int32    hdcTarget;
    RECT    rc;
    RECT    rcPage;
    CHARRANGE    chrg;
}

struct PARAFORMAT
{
    int32    cbSize;
    int32    dwMask;
    int16    wNumbering;
    int16    wEffects;
    int32    dxStartIndent;
    int32    dxRightIndent;
    int32    dxOffset;
    int16    wAlignment;
    int16    cTabCount;
    int32[MAX_TAB_STOPS]  rgxTabs;
}

struct PARAFORMAT2
{
    int32    cbSize;
    int32    dwMask;
    int16    wNumbering;
    int16    wEffects;
    int32    dxStartIndent;
    int32    dxRightIndent;
    int32    dxOffset;
    int16    wAlignment;
    int16    cTabCount;
    int32[MAX_TAB_STOPS]  rgxTabs;
    int32    dySpaceBefore;
    int32    dySpaceAfter;
    int32    dyLineSpacing;
    int16    sStyle;
    int8    bLineSpacingRule;
    int8    bOutlineLevel;
    int16    wShadingWeight;
    int16    wShadingStyle;
    int16    wNumberingStart;
    int16    wNumberingStyle;
    int16    wNumberingTab;
    int16    wBorderSpace;
    int16    wBorderWidth;
    int16    wBorders;
}

struct MSGFILTER
{
    NMHDR    nmhdr;
    int32    msg;
    int32    wParam;
    int32    lParam;
}

struct REQRESIZE
{
    NMHDR    nmhdr;
    RECT    rc;
}

struct SELCHANGE
{
    NMHDR    nmhdr;
    CHARRANGE    chrg;
    int16    seltyp;
}

struct ENDROPFILES
{
    NMHDR    nmhdr;
    int32    hDrop;
    int32    cp;
    int32    fProtected;
}

struct ENPROTECTED
{
    NMHDR    nmhdr;
    int32    msg;
    int32    wPad1;
    int32    wParam;
    int32    wPad2;
    int32    lParam;
    CHARRANGE    chrg;
}

struct ENSAVECLIPBOARD
{
    NMHDR    nmhdr;
    int32    cObjectCount;
    int32    cch;
}

struct ENOLEOPFAILED
{
    NMHDR    nmhdr;
    int32    iob;
    int32    lOper;
    int32    hr;
}

struct ENCORRECTTEXT
{
    NMHDR    nmhdr;
    CHARRANGE    chrg;
    int16    seltyp;
}

struct PUNCTUATION
{
    int32    iSize;
    int32    szPunctuation;
}

struct COMPCOLOR
{
    int32    crText;
    int32    crBackground;
    int32    dwEffects;
}

struct REPASTESPECIAL
{
    int32    dwAspect;
    int32    dwParam;
}


// ----------------------- win32api structures -----------------------------

struct SIZEL
{
    int32    x;
    int32    y;
}

define _SIZE()  SIZEL

struct MSG
{
    int32    hwnd;
    int32    message;
    int32    wParam;
    int32    lParam;
    int32    time;
    POINT    pt;
}

struct SID_AND_ATTRIBUTES
{
    int32    Sid;
    int32    Attributes;
}

struct SID_IDENTIFIER_AUTHORITY
{
    int8[6]  Value;
}

struct OVERLAPPED
{
    int32    Internal;
    int32    InternalHigh;
    int32    loffset;
    int32    OffsetHigh;
    int32    hEvent;
}

struct SECURITY_ATTRIBUTES
{
    int32    nLength;
    int32    lpSecurityDescriptor;
    int32    bInheritHandle;
}

struct PROCESS_INFORMATION
{
    int32    hProcess;
    int32    hThread;
    int32    dwProcessId;
    int32    dwThreadId;
}

struct FILETIME
{
    int32    dwLowDateTime;
    int32    dwHighDateTime;
}

struct SYSTEMTIME
{
    int16    wYear;
    int16    wMonth;
    int16    wDayOfWeek;
    int16    wDay;
    int16    wHour;
    int16    wMinute;
    int16    wSecond;
    int16    wMilliseconds;
}

struct COMMPROP
{
    int16    wPacketiLength;
    int16    wPacketVersion;
    int32    dwServiceMask;
    int32    dwReserved1;
    int32    dwMaxTxQueue;
    int32    dwMaxRxQueue;
    int32    dwMaxBaud;
    int32    dwProvSubType;
    int32    dwProvCapabilities;
    int32    dwSettableParams;
    int32    dwSettableBaud;
    int16    wSettableData;
    int16    wSettableStopParity;
    int32    dwCurrentTxQueue;
    int32    dwCurrentRxQueue;
    int32    dwProvSpec1;
    int32    dwProvSpec2;
    int16    wcProvChar;
}



//COMRECORD RECORD fCtsHold:1, fDsrHold:1,fRlsdHold:1,fXoffHold:1,fXoffSent:1,fEof:1,fTxim:1,fReserved:25
 
struct COMSTAT
{
    //COMRECORD    comrec;
    int32    comrec;
    int32    cbInQue;
    int32    cbOutQue;
}

//BITRECORD RECORD fBinary:1,fParity:1,fOutxCtsFlow:1,fOutxDsrFlow:1,fDtrControl:2,fDsrSensitivity:1,fTXContinueOnXoff:1,fOutX:1,fInX:1,fErrorChar:1,fNull:1,fRtsControl:2,fAbortOnError:1,fDummy2:17

struct DCB
{
    int32    DCBlength;
    int32    BaudRate;
    //BITRECORD    fbits;
    int32    fbits;
    int16    wReserved;
    int16    XonLim;
    int16    XoffLim;
    int8    ByteSize;
    int8    Parity;
    int8    StopBits;
    int8    XonChar;
    int8    XoffChar;
    int8    ErrorChar;
    int8    EofChar;
    int8    EvtChar;
    int16    wReserved1;
}

struct COMMTIMEOUTS
{
    int32    ReadIntervalTimeout;
    int32    ReadTotalTimeoutMultiplier;
    int32    ReadTotalTimeoutConstant;
    int32    WriteTotalTimeoutMultiplier;
    int32    WriteTotalTimeoutConstant;
}

struct SYSTEM_INFO
{
    int16    wProcessorArchitecture;
    int16    wReserved;
    int32    dwPageSize;
    int32    lpMinimumApplicationAddress;
    int32    lpMaximumApplicationAddress;
    int32    dwActiveProcessorMask;
    int32    dwNumberOfProcessors;
    int32    dwProcessorType;
    int32    dwAllocationGranularity;
    int16    wProcessorLevel;
    int16    wProcessorRevision;
}

struct MEMORYSTATUS
{
    int32    dwLength;
    int32    dwMemoryLoad;
    int32    dwTotalPhys;
    int32    dwAvailPhys;
    int32    dwTotalPageFile;
    int32    dwAvailPageFile;
    int32    dwTotalVirtual;
    int32    dwAvailVirtual;
}

struct TPMPARAMS
{
    int32    cbSize;
    RECT    rcExclude;
}


struct GENERIC_MAPPING
{
    int32    GenericRead;
    int32    GenericWrite;
    int32    GenericExecute;
    int32    GenericAll;
}

struct LUID
{
    int32    LowPart;
    int32    HighPart;
}

struct ACL
{
    int8    AclRevision;
    int8    Sbz1;
    int16    AclSize;
    int16    AceCount;
    int16    Sbz2;
}

struct ACE_HEADER
{
    int8      AceType;
    int8      AceFlags;
    int16      AceSize;
}

struct ACCESS_ALLOWED_ACE
{
    ACE_HEADER    Header;
    int32    imask;
    int32    SidStart;
}

struct ACCESS_DENIED_ACE
{
    ACE_HEADER    Header;
    int32    imask;
    int32    SidStart;
}

struct SYSTEM_AUDIT_ACE
{
    ACE_HEADER    Header;
    int32    imask;
    int32    SidStart;
}

struct SYSTEM_ALARM_ACE
{
    ACE_HEADER    Header;
    int32    imask;
    int32    SidStart;
}

struct ACL_REVISION_INFORMATION
{
    int32    AclRevision;
}

struct ACL_SIZE_INFORMATION
{
    int32    AceCount;
    int32    AclBytesInUse;
    int32    AclBytesFree;
}

struct SECURITY_DESCRIPTOR
{
    int8    Revision;
    int8    Sbz1;
    int16    Control;
    int32    Owner;
    int32    lGroup;
    int32    Sacl;
    int32    Dacl;
}

struct LUID_AND_ATTRIBUTES
{
    LUID      Luid    ;
    int32      Attributes;
}

struct PRIVILEGE_SET
{
    int32    PrivilegeCount;
    int32    Control;
    LUID_AND_ATTRIBUTES[ANYSIZE_ARRAY]  Privilege;
}

struct EXCEPTION_RECORD
{
    int32    ExceptionCode;
    int32    ExceptionFlags;
    int32    pExceptionRecord;
    int32    ExceptionAddress;
    int32    NumberParameters;
    int32[EXCEPTION_MAXIMUM_PARAMETERS]  ExceptionInformation;
}

struct EXCEPTION_DEBUG_INFO
{
    EXCEPTION_RECORD  pExceptionRecord;
    int32    dwFirstChance;
}

struct CREATE_THREAD_DEBUG_INFO
{
    int32    hThread;
    int32    lpThreadLocalBase;
    int32    lpStartAddress;
}

struct CREATE_PROCESS_DEBUG_INFO
{
    int32    hFile;
    int32    hProcess;
    int32    hThread;
    int32    lpBaseOfImage;
    int32    dwDebugInfoFileOffset;
    int32    nDebugInfoSize;
    int32    lpThreadLocalBase;
    int32    lpStartAddress;
    int32    lpImageName;
    int16    fUnicode;
}

struct EXIT_THREAD_DEBUG_INFO
{
    int32    dwExitCode;
}

struct EXIT_PROCESS_DEBUG_INFO
{
    int32    dwExitCode;
}

struct LOAD_DLL_DEBUG_INFO
{
    int32    hFile;
    int32    lpBaseOfDll;
    int32    dwDebugInfoFileOffset;
    int32    nDebugInfoSize;
    int32    lpImageName;
    int16    fUnicode;
}

struct UNLOAD_DLL_DEBUG_INFO
{
    int32    lpBaseOfDll;
}

struct OUTPUT_DEBUG_STRING_INFO
{
    int32    lpDebugStringData;
    int16    fUnicode;
    int16    nDebugStringiLength;
}

struct RIP_INFO
{
    int32    dwError;
    int32    dwType;
}

struct OFSTRUCT
{
    int8    cBytes;
    int8    fFixedDisk;
    int16    nErrCode;
    int16    Reserved1;
    int16    Reserved2;
    int8[OFS_MAXPATHNAME]  szPathName;
}

struct WNDCLASSEX
{
    int32    cbSize;
    int32    style;
    int32    lpfnWndProc;
    int32    cbClsExtra;
    int32    cbWndExtra;
    int32    hInstance;
    int32    hIcon;
    int32    hCursor;
    int32    hbrBackground;
    int32    lpszMenuName;
    int32    lpszClassName;
    int32    hIconSm;
}

struct WNDCLASSA
{
    int32    style;
    int32    lpfnWndProc;
    int32    cbClsExtra;
    int32    cbWndExtra;
    int32    hInstance;
    int32    hIcon;
    int32    hCursor;
    int32    hbrBackground;
    int32    lpszMenuName;
    int32    lpszClassName;
}

define WNDCLASS()  WNDCLASSA

struct RTL_CRITICAL_SECTION
{
    int32      DebugInfo;
    LONG      LockCount;
    LONG      RecursionCount;
    HANDLE      OwningThread;
    HANDLE      LockSemaphore;
    int32      SpinCount;
}

define CRITICAL_SECTION()  RTL_CRITICAL_SECTION

struct BY_HANDLE_FILE_INFORMATION
{
    int32    dwFileAttributes;
    FILETIME    ftCreationTime;
    FILETIME    ftLastAccessTime;
    FILETIME    ftLastWriteTime;
    int32    dwVolumeSerialNumber;
    int32    nFileSizeHigh;
    int32    nFileSizeLow;
    int32    nNumberOfLinks;
    int32    nFileIndexHigh;
    int32    nFileIndexLow;
}

struct MEMORY_BASIC_INFORMATION
{
    int32    BaseAddress;
    int32    AllocationBase;
    int32    AllocationProtect;
    int32    RegionSize;
    int32    State;
    int32    Protect;
    int32    lType;
}

struct EVENTLOGRECORD
{
    int32    iLength;
    int32    Reserved;
    int32    RecordNumber;
    int32    TimeGenerated;
    int32    TimeWritten;
    int32    EventID;
    int16    EventType;
    int16    NumStrings;
    int16    EventCategory;
    int16    ReservedFlags;
    int32    ClosingRecordNumber;
    int32    StringOffset;
    int32    UserSidiLength;
    int32    UserSidOffset;
    int32    DataiLength;
    int32    DataOffset;
}

struct TOKEN_GROUPS
{
    int32    GroupCount;
    SID_AND_ATTRIBUTES[ANYSIZE_ARRAY]  Groups;
}

struct TOKEN_PRIVILEGES
{
    int32    PrivilegeCount;
    LUID_AND_ATTRIBUTES[ANYSIZE_ARRAY]  Privileges;
}

struct FLOATING_SAVE_AREA
{
    int32    ControlWord;
    int32    StatusWord;
    int32    TagWord;
    int32    ErrorOffset;
    int32    ErrorSelector;
    int32    DataOffset;
    int32    DataSelector;
    int8[SIZE_OF_80387_REGISTERS]  RegisterArea;
    int32    Cr0NpxState;
}

struct CONTEXT
{
    int32    ContextFlags;
    int32    iDr0;
    int32    iDr1;
    int32    iDr2;
    int32    iDr3;
    int32    iDr6;
    int32    iDr7;
    FLOATING_SAVE_AREA    FloatSave;
    int32    regGs;
    int32    regFs;
    int32    regEs;
    int32    regDs;
    int32    regEdi;
    int32    regEsi;
    int32    regEbx;
    int32    regEdx;
    int32    regEcx;
    int32    regEax;
    int32    regEbp;
    int32    regEip;
    int32    regCs;
    int32    regFlag;
    int32    regEsp;
    int32    regSs;
    int8[MAXIMUM_SUPPORTED_EXTENSION]  ExtendedRegisters;
}

struct EXCEPTION_POINTERS
{
    int32    pExceptionRecord;
    int32    ContextRecord;
}

struct LDT_BYTES
{
    int8    BaseMid;
    int8    Flags1;
    int8    Flags2;
    int8    BaseHi;
}

struct TIME_ZONE_INFORMATION
{
    int32    Bias;
    int16[32]  StandardName;
    SYSTEMTIME    StandardDate    ;
    int32    StandardBias;
    int16[32]  DaylightName;
    SYSTEMTIME    DaylightDate    ;
    int32    DaylightBias;
}

struct LARGE_INTEGER
{
    int64          QuadPart;
}

struct WIN32_STREAM_ID
{
    int32    dwStreamID;
    int32    dwStreamAttributes;
    LARGE_INTEGER    dwSize;
    int32    dwStreamNameSize;
    int8[ANYSIZE_ARRAY]  cStreamName;
}

struct STARTUPINFOA
{
    int32    cb;
    int32    lpReserved;
    int32    lpDesktop;
    int32    lpTitle;
    int32    dwX;
    int32    dwY;
    int32    dwXSize;
    int32    dwYSize;
    int32    dwXCountChars;
    int32    dwYCountChars;
    int32    dwFillAttribute;
    int32    dwFlags;
    int16    wShowWindow;
    int16    cbReserved2;
    int32    lpReserved2;
    int32    hStdInput;
    int32    hStdOutput;
    int32    hStdError;
}

define STARTUPINFO()  STARTUPINFOA

struct WIN32_FIND_DATA
{
    int32    dwFileAttributes;
    FILETIME    ftCreationTime;
    FILETIME    ftLastAccessTime;
    FILETIME    ftLastWriteTime;
    int32    nFileSizeHigh;
    int32    nFileSizeLow;
    int32    dwReserved0;
    int32    dwReserved1;
    int8[MAX_PATH]  cFileName;
    int8[14]  cAlternate;
}

struct CPINFO
{
    int32    MaxCharSize;
    int8[MAX_DEFAULTCHAR]  DefaultChar;
    int8[MAX_LEADBYTES]  LeadByte;
}

struct NUMBERFMTA
{
    int32    NumDigits;
    int32    LeadingZero;
    int32    Grouping;
    int32    lpDecimalSep;
    int32    lpThousandSep;
    int32    NegativeOrder;
}

define NUMBERFMT()  NUMBERFMTA

struct CURRENCYFMTA
{
    int32    NumDigits;
    int32    LeadingZero;
    int32    Grouping;
    int32    lpDecimalSep;
    int32    lpThousandSep;
    int32    NegativeOrder;
    int32    PositiveOrder;
    int32    lpCurrencySymbol;
}

define CURRENCYFMT()  CURRENCYFMTA

struct COORD
{
    int16    x;
    int16    y;
}

struct SMALL_RECT
{
    int16    Left;
    int16    Top;
    int16    Right;
    int16    Bottom;
}

union CHARTYPE
{
    int16   UnicodeChar;
    int8   AsciiChar;
}

struct KEY_EVENT_RECORD
{
    int32    bKeyDown;
    int16    wRepeatCount;
    int16    wVirtualKeyCode;
    int16    wVirtualScanCode;
    CHARTYPE    uChar    ;
    int32    dwControlKeyState;
}

struct MOUSE_EVENT_RECORD
{
    COORD    dwMousePosition;
    int32    dwButtonState;
    int32    dwControlKeyState;
    int32    dwEventFlags;
}

struct WINDOW_BUFFER_SIZE_RECORD
{
    COORD    dwSize;
}

struct MENU_EVENT_RECORD
{
    int32    dwCommandId;
}

struct FOCUS_EVENT_RECORD
{
    int32    bSetFocus;
}

struct CHAR_INFO
{
    CHARTYPE    Char    ;
    int16    Attributes;
}

struct CONSOLE_SCREEN_BUFFER_INFO
{
    COORD    dwSize;
    COORD    dwCursorPosition;
    int16    wAttributes;
    SMALL_RECT    srWindow;
    COORD    dwMaximumWindowSize;
}

struct CONSOLE_CURSOR_INFO
{
    int32    dwSize;
    int32    bVisible;
}

struct XFORM
{
    int32    eM11;
    int32    eM12;
    int32    eM21;
    int32    eM22;
    int32    ex;
    int32    ey;
}

struct BITMAP
{
    int32    bmType;
    int32    bmWidth;
    int32    bmHeight;
    int32    bmWidthBytes;
    int16    bmPlanes;
    int16    bmBitsPixel;
    int32    bmBits;
}

struct RGBTRIPLE
{
    int8    rgbtBlue;
    int8    rgbtGreen;
    int8    rgbtRed;
}

struct RGBQUAD
{
    int8    rgbBlue;
    int8    rgbGreen;
    int8    rgbRed;
    int8    rgbReserved;
}

struct BITMAPCOREHEADER
{
    int32    bcSize;
    int16    bcWidth;
    int16    bcHeight;
    int16    bcPlanes;
    int16    bcBitCount;
}

struct BITMAPINFOHEADER
{
    int32    biSize;
    int32    biWidth;
    int32    biHeight;
    int16    biPlanes;
    int16    biBitCount;
    int32    biCompression;
    int32    biSizeImage;
    int32    biXPelsPerMeter;
    int32    biYPelsPerMeter;
    int32    biClrUsed;
    int32    biClrImportant;
}

struct BITMAPINFO
{
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD    bmiColors;
}

struct BITMAPCOREINFO
{
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE    bmciColors;
}

struct BITMAPFILEHEADER
{
    int16    bfType;
    int32    bfSize;
    int16    bfReserved1;
    int16    bfReserved2;
    int32    bfOffBits;
}

struct HANDLETABLE
{
    int32    objectHandle;
}

struct METARECORD
{
    int32    rdSize;
    int16    rdFunction;
    int16    rdParm1;
}

struct METAFILEPICT
{
    int32    imm;
    int32    xExt;
    int32    yExt;
    int32    hMF;
}

struct METAHEADER
{
    int16    mtType;
    int16    mtHeaderSize;
    int16    mtVersion;
    int32    mtSize;
    int16    mtNoObjects;
    int32    mtMaxRecord;
    int16    mtNoParameters;
}

struct ENHMETARECORD
{
    int32    iType;
    int32    nSize;
    int32    dParm1;
}

struct RECTL
{
    LONG     left;
    LONG     top;
    LONG     right;
    LONG     bottom;
}

struct ENHMETAHEADER
{
    int32    iType;
    int32    nSize;
    RECTL    rclBounds;
    RECTL    rclFrame;
    int32    dSignature;
    int32    nVersion;
    int32    nBytes;
    int32    nRecords;
    int16    nHandles;
    int16    sReserved;
    int32    nDescription;
    int32    offDescription;
    int32    nPalEntries;
    SIZEL    szlDevice;
    SIZEL    szlMillimeters;
    int32    cbPixelFormat;
    int32    offPixelFormat;
    int32    bOpenGL;
}

struct TEXTMETRICA
{
    int32    tmHeight;
    int32    tmAscent;
    int32    tmDescent;
    int32    tmInternalLeading;
    int32    tmExternalLeading;
    int32    tmAveCharWidth;
    int32    tmMaxCharWidth;
    int32    tmWeight;
    int32   tmOverhang;
    int32    tmDigitizedAspectX;
    int32    tmDigitizedAspectY;
    int8    tmFirstChar;
    int8    tmLastChar;
    int8    tmDefaultChar;
    int8    tmBreakChar;
    int8    tmItalic;
    int8    tmUnderlined;
    int8    tmStruckOut;
    int8    tmPitchAndFamily;
    int8    tmCharSet;
}

define TEXTMETRIC()  TEXTMETRICA

struct NEWTEXTMETRICA
{
    int32    tmHeight;
    int32    tmAscent;
    int32    tmDescent;
    int32    tmInternalLeading;
    int32    tmExternalLeading;
    int32    tmAveCharWidth;
    int32    tmMaxCharWidth;
    int32    tmWeight;
    int32    tmOverhang;
    int32    tmDigitizedAspectX;
    int32    tmDigitizedAspectY;
    int8    tmFirstChar;
    int8    tmLastChar;
    int8    tmDefaultChar;
    int8    tmBreakChar;
    int8    tmItalic;
    int8    tmUnderlined;
    int8    tmStruckOut;
    int8    tmPitchAndFamily;
    int8    tmCharSet;
    int32    ntmFlags;
    int32    ntmSizeEM;
    int32    ntmCellHeight;
    int32    ntmAveWidth;
}

define NEWTEXTMETRIC()  NEWTEXTMETRICA

struct PELARRAY
{
    int32    paXCount;
    int32    paYCount;
    int32    paXExt;
    int32    paYExt;
    int8    paRGBs;
}

struct LOGBRUSH
{
    int32    lbStyle;
    int32    lbColor;
    int32    lbHatch;
}

struct LOGPEN
{
    int32    lopnStyle;
    POINT    lopnWidth;
    int32    lopnColor;
}

struct EXTLOGPEN
{
    int32    elpPenStyle;
    int32    elpWidth;
    int32    elpBrushStyle;
    int32    elpColor;
    int32    elpHatch;
    int32    elpNumEntries;
    int32    elpStyleEntry;
}

struct PALETTEENTRY
{
    int8    peRed;
    int8    peGreen;
    int8    peBlue;
    int8    peFlags;
}

struct LOGPALETTE
{
    int16    palVersion;
    int16    palNumEntries;
    PALETTEENTRY    palPalEntry    ;
}

struct LOGFONTA
{
    int32    lfHeight;
    int32    lfWidth;
    int32    lfEscapement;
    int32    lfOrientation;
    int32    lfWeight;
    int8    lfItalic;
    int8    lfUnderline;
    int8    lfStrikeOut;
    int8    lfCharSet;
    int8    lfOutPrecision;
    int8    lfClipPrecision;
    int8    lfQuality;
    int8    lfPitchAndFamily;
    int8[LF_FACESIZE]  lfFaceName;
}

define LOGFONT()  LOGFONTA

struct NONCLIENTMETRICSA
{
    int32    cbSize;
    int32    iBorderWidth;
    int32    iScrollWidth;
    int32    iScrollHeight;
    int32    iCaptionWidth;
    int32    iCaptionHeight;
    LOGFONTA    lfCaptionFont    ;
    int32    iSMCaptionWidth;
    int32    iSMCaptionHeight;
    LOGFONTA    lfSMCaptionFont    ;
    int32    iMenuWidth;
    int32    iMenuHeight;
    LOGFONTA    lfMenuFont;
    LOGFONTA    lfStatusFont;
    LOGFONTA    lfMessageFont    ;
}

define NONCLIENTMETRICS()  NONCLIENTMETRICSA

struct ENUMLOGFONTA
{
    LOGFONTA    elfLogFont    ;
    int8[LF_FULLFACESIZE]  elfFullName;
    int8[LF_FACESIZE]  elfStyle;
}

define ENUMLOGFONT()  ENUMLOGFONTA

struct PANOSE
{
    int8    bFamilyType;
    int8    bSerifStyle;
    int8    bWeight;
    int8    bProportion;
    int8    bContrast;
    int8    bStrokeVariation;
    int8    bArmStyle;
    int8    bLetterform;
    int8    bMidline;
    int8    bXHeight;
}

struct EXTLOGFONTA
{
    LOGFONTA    elfLogFont    ;
    int8[LF_FULLFACESIZE]  elfFullName;
    int8[LF_FACESIZE]  elfStyle;
    int32    elfVersion;
    int32    elfStyleSize;
    int32    elfMatch;
    int32    elfReserved;
    int8[ELF_VENDOR_SIZE]  elfVendorId;
    int32    elfCulture;
    PANOSE    elfPanose    ;
}

define EXTLOGFONT()  EXTLOGFONTA

struct DEVMODE
{
    int8[CCHDEVICENAME]  dmDeviceName;
    int16    dmSpecVersion;
    int16    dmDriverVersion;
    int16    dmSize;
    int16    dmDriverExtra;
    int32    dmFields;
    union UNION_DEVMODE
    {
        struct STRUC_DEVMODE
        {
            int16          dmOrientation;
            int16          dmPaperSize;
            int16          dmPaperLength;
            int16          dmPaperWidth;
        }
        POINTL        dmPosition;
    }
    int16    dmScale;
    int16    dmCopies;
    int16    dmDefaultSource;
    int16    dmPrintQuality;
    int16    dmColor;
    int16    dmDuplex;
    int16    dmYResolution;
    int16    dmTTOption;
    int16    dmCollate;
    int8[CCHFORMNAME]     dmFormName;
    int16    dmLogPixels;
    int32    dmBitsPerPel;
    int32    dmPelsWidth;
    int32    dmPelsHeight;
    int32    dmDisplayFlags;
    int32    dmDisplayFrequency;
    int32    dmICMMethod;
    int32    dmICMIntent;
    int32    dmMediaType;
    int32    dmDitherType;
    int32    dmReserved1;
    int32    dmReserved2;
}

struct RGNDATAHEADER
{
    int32    dwSize;
    int32    iType;
    int32    nCount;
    int32    nRgnSize;
    RECT    rcBound;
}

struct RGNDATA
{
    RGNDATAHEADER    rdh;
    int8    Buffer;
}

struct ABC
{
    int32    abcA;
    int32    abcB;
    int32    abcC;
}

struct ABCFLOAT
{
    int32    abcfA;
    int32    abcfB;
    int32    abcfC;
}

struct OUTLINETEXTMETRICA
{
    int32    otmSize;
    TEXTMETRICA    otmTextMetrics;
    int8    otmFiller;
    PANOSE    otmPanoseNumber    ;
    int32    otmfsSelection;
    int32    otmfsType;
    int32    otmsCharSlopeRise;
    int32    otmsCharSlopeRun;
    int32    otmItalicAngle;
    int32    otmEMSquare;
    int32    otmAscent;
    int32    otmDescent;
    int32    otmLineGap;
    int32    otmsCapEmHeight;
    int32    otmsXHeight;
    RECT    otmrcFontBox;
    int32    otmMacAscent;
    int32    otmMacDescent;
    int32    otmMacLineGap;
    int32    otmusMinimumPPEM;
    POINT    otmptSubscriptSize;
    POINT    otmptSubscriptOffset;
    POINT    otmptSuperscriptSize;
    POINT    otmptSuperscriptOffset;
    int32    otmsStrikeoutSize;
    int32    otmsStrikeoutPosition;
    int32    otmsUnderscoreSize;
    int32    otmsUnderscorePosition;
    int32    otmpFamilyName;
    int32    otmpFaceName;
    int32    otmpStyleName;
    int32    otmpFullName;
}

define OUTLINETEXTMETRIC()  OUTLINETEXTMETRICA

struct POLYTEXTA
{
    int32    x;
    int32    y;
    int32    n;
    int32    lpStr;
    int32    uiFlags;
    RECT    icl;
    int32    pdx;
}

define POLYTEXT()  POLYTEXTA

struct FIXED
{
    int16    fract;
    int16    Value;
}

struct MAT2
{
    FIXED    eM11;
    FIXED    eM12;
    FIXED    eM21;
    FIXED    eM22;
}

struct GLYPHMETRICS
{
    int32    gmBlackBoxX;
    int32    gmBlackBoxY;
    POINT    gmptGlyphOrigin;
    int16    gmCellIncX;
    int16    gmCellIncY;
}

struct POINTFX
{
    FIXED    x;
    FIXED    y;
}

struct TTPOLYCURVE
{
    int16    wType;
    int16    cpfx;
    POINTFX    apfx;
}

struct TTPOLYGONHEADER
{
    int32    cb;
    int32    dwType;
    POINTFX    pfxStart;
}

struct RASTERIZER_STATUS
{
    int16    nSize;
    int16    wFlags;
    int16    nLanguageID;
}

struct COLORADJUSTMENT
{
    int16    caSize;
    int16    caFlags;
    int16    caIlluminantIndex;
    int16    caRedGamma;
    int16    caGreenGamma;
    int16    caBlueGamma;
    int16    caReferenceBlack;
    int16    caReferenceWhite;
    int16    caContrast;
    int16    caBrightness;
    int16    caColorfulness;
    int16    caRedGreenTint;
}

struct DOCINFOA
{
    int32    cbSize;
    int32    lpszDocName;
    int32    lpszOutput;
    int32    lpszDatatype;
    int32    fwType;
}

define DOCINFO()  DOCINFOA

struct KERNINGPAIR
{
    int16    wFirst;
    int16    wSecond;
    int32    iKernAmount;
}

struct EMR
{
    int32    iType;
    int32    nSize;
}

struct EMRTEXT
{
    POINTL    ptlReference;
    int32    nchars;
    int32    offString;
    int32    fOptions;
    RECTL    ircl;
    int32    offDx;
}

struct EMRABORTPATH
{
    EMR    emr;
}

define EMRBEGINPATH()  EMRABORTPATH
define EMRENDPATH()  EMRABORTPATH
define EMRCLOSEFIGURE()  EMRABORTPATH
define EMRFLATTENPATH()  EMRABORTPATH
define EMRWIDENPATH()  EMRABORTPATH
define EMRSETMETARGN()  EMRABORTPATH
define EMREMRSAVEDC()  EMRABORTPATH
define EMRREALIZEPALETTE()  EMRABORTPATH

struct EMRSELECTCLIPPATH
{
    EMR    emr;
    int32    iMode;
}

define EMRSETBKMODE()  EMRSELECTCLIPPATH
define EMRSETMAPMODE()  EMRSELECTCLIPPATH
define EMRSETPOLYFILLMODE()  EMRSELECTCLIPPATH
define EMRSETROP2()  EMRSELECTCLIPPATH
define EMRSETSTRETCHBLTMODE()  EMRSELECTCLIPPATH
define EMRSETTEXTALIGN()  EMRSELECTCLIPPATH

struct EMRSETMITERLIMIT
{
    EMR     emr;
    int32     eMiterLimit;
}

struct EMRRESTOREDC
{
    EMR     emr;
    int32     iRelative;
}

struct EMRSETARCDIRECTION
{
    EMR     emr;
    int32     iArcDirection;
}

struct EMRSETMAPPERFLAGS
{
    EMR     emr;
    int32     dwFlags;
}

struct EMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF     crColor;
}

define EMRSETBKCOLOR()  EMRSETTEXTCOLOR

struct EMRSELECTOBJECT
{
    EMR    emr;
    int32    ihObject;
}

define EMRDELETEOBJECT()  EMRSELECTOBJECT

struct EMRSELECTCOLORSPACE
{
    EMR    emr;
    int32    ihCS;
}

define EMRDELETECOLORSPACE()  EMRSELECTCOLORSPACE

struct EMRSELECTPALETTE
{
    EMR    emr;
    int32    ihPal;
}

struct EMRRESIZEPALETTE
{
    EMR    emr;
    int32    ihPal;
    int32    cEntries;
}

struct EMRSETPALETTEENTRIES
{
    EMR    emr;
    int32    ihPal;
    int32    iStart;
    int32    cEntries;
    PALETTEENTRY    aPalEntries    ;
}

struct EMRSETCOLORADJUSTMENT
{
    EMR    emr;
    COLORADJUSTMENT    ColorAdjustment;
}

struct EMRGDICOMMENT
{
    EMR    emr;
    int32    cbData;
    int8    xData1;
}

struct EMREOF
{
    EMR    emr;
    int32    nPalEntries;
    int32    offPalEntries;
    int32    nSizeLast;
}

struct EMRLINETO
{
    EMR    emr;
    POINTL    ptl;
}

define EMRMOVETOEX()  EMRLINETO

struct EMROFFSETCLIPRGN
{
    EMR    emr;
    POINTL    ptlOffset;
}

struct EMRFILLPATH
{
    EMR    emr;
    RECTL    rclBounds;
}

define EMRSTROKEANDFILLPATH()  EMRFILLPATH
define EMRSTROKEPATH()  EMRFILLPATH

struct EMREXCLUDECLIPRECT
{
    EMR    emr;
    RECTL    rclClip;
}

define EMRINTERSECTCLIPRECT()  EMREXCLUDECLIPRECT

struct EMRSETVIEWPORTORGEX
{
    EMR    emr;
    POINTL    ptlOrigin;
}

define EMRSETWINDOWORGEX()  EMRSETVIEWPORTORGEX
define EMRSETBRUSHORGEX()  EMRSETVIEWPORTORGEX

struct EMRSETVIEWPORTEXTEX
{
    EMR    emr;
    SIZEL    szlExtent;
}

define EMRSETWINDOWEXTEX()  EMRSETVIEWPORTEXTEX

struct EMRSCALEVIEWPORTEXTEX
{
    EMR    emr;
    int32    xNum;
    int32    xDenom;
    int32    yNum;
    int32    yDemon;
}

define EMRSCALEWINDOWEXTEX()  EMRSCALEVIEWPORTEXTEX

struct EMRSETWORLDTRANSFORM
{
    EMR    emr;
    XFORM    xform;
}

struct EMRMODIFYWORLDTRANSFORM
{
    EMR    emr;
    XFORM    xform;
    int32    iMode;
}

struct EMRSETPIXELV
{
    EMR    emr;
    POINTL    ptlPixel;
    COLORREF    crColor;
}

struct EMREXTFLOODFILL
{
    EMR    emr;
    POINTL    ptlStart;
    COLORREF    crColor;
    int32    iMode;
}

struct EMRELLIPSE
{
    EMR    emr;
    RECTL    rclBox;
}

define EMRRECTANGLE()  EMRELLIPSE

struct EMRROUNDRECT
{
    EMR    emr;
    RECTL    rclBox;
    SIZEL    szlCorner;
}

struct EMRARC
{
    EMR    emr;
    RECTL    rclBox;
    POINTL    ptlStart;
    POINTL    ptlEnd;
}

define EMRARCTO()  EMRARC
define EMRCHORD()  EMRARC
define EMRPIE()  EMRARC

struct EMRANGLEARC
{
    EMR    emr;
    POINTL    ptlCenter;
    int32    nRadius;
    int32    eStartAngle;
    int32    eSweepAngle;
}

struct EMRPOLYLINE
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cptl;
    POINTL    aptl;
}

define EMRPOLYBEZIER()  EMRPOLYLINE
define EMRPOLYGON()  EMRPOLYLINE
define EMRPOLYBEZIERTO()  EMRPOLYLINE

struct EMRPOLYLINE16
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cpts;
    POINTS    apts;
}

define EMRPOLYBEZIER16()  EMRPOLYLINE16
define EMRPOLYGON16()  EMRPOLYLINE16
define EMRPLOYBEZIERTO16()  EMRPOLYLINE16
define EMRPOLYLINETO16()  EMRPOLYLINE16

struct EMRPOLYDRAW
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cptl;
    POINTL    aptl;
    int8    abTypes1;
}

struct EMRPOLYDRAW16
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cpts;
    POINTS    apts;
    int8    abTypes;
}

struct EMRPOLYPOLYLINE
{
    EMR    emr;
    RECTL    rclBounds;
    int32    nPolys;
    int32    cptl;
    int32    aPolyCounts;
    POINTL    aptl;
}

define EMRPOLYPOLYGON()  EMRPOLYPOLYLINE

struct EMRPOLYPOLYLINE16
{
    EMR    emr;
    RECTL    rclBounds;
    int32    nPolys;
    int32    cpts;
    int32    aPolyCounts;
    POINTS    apts;
}

define EMRPOLYPOLYGON16()  EMRPOLYPOLYLINE16

struct EMRINVERTRGN
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cbRgnData;
    int8    RgnData;
}

define EMRPAINTRGN()  EMRINVERTRGN

struct EMRFILLRGN
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cbRgnData;
    int32    ihBrush;
    int8    RgnData;
}

struct EMRFRAMERGN
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cbRgnData;
    int32    ihBrush;
    SIZEL    szlStroke;
    int8    RgnData;
}

struct EMREXTSELECTCLIPRGN
{
    EMR    emr;
    int32    cbRgnData;
    int32    iMode;
    int8    RgnData;
}

struct EMREXTTEXTOUTA
{
    EMR    emr;
    RECTL    rclBounds;
    int32    iGraphicsMode;
    int32    exScale;
    int32    eyScale;
    EMRTEXT    emrtext;
}

define EMREXTTEXTOUT()  EMREXTTEXTOUTA

struct EMRBITBLT
{
    EMR    emr;
    RECTL    rclBounds;
    int32    xDest;
    int32    yDest;
    int32    cxDest;
    int32    cyDest;
    int32    dwRop;
    int32    xSrc;
    int32    ySrc;
    XFORM    xformSrc;
    COLORREF    crBkColorSrc;
    int32    iUsageSrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
}

struct EMRSTRETCHBLT
{
    EMR    emr;
    RECTL    rclBounds;
    int32    xDest;
    int32    yDest;
    int32    cxDest;
    int32    cyDest;
    int32    dwRop;
    int32    xSrc;
    int32    ySrc;
    XFORM    xformSrc;
    COLORREF    crBkColorSrc;
    int32    iUsageSrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
    int32    cxSrc;
    int32    cySrc;
}

struct EMRMASKBLT
{
    EMR    emr;
    RECTL    rclBounds;
    int32    xDest;
    int32    yDest;
    int32    cxDest;
    int32    cyDest;
    int32    dwRop;
    int32    xSrc2;
    int32    cyDest2;
    int32    dwRop2;
    int32    xSrc;
    int32    ySrc;
    XFORM    xformSrc;
    COLORREF    crBkColorSrc;
    int32    iUsageSrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
    int32    xMask;
    int32    yMask;
    int32    iUsageMask;
    int32    offBmiMask;
    int32    cbBmiMask;
    int32    offBitsMask;
    int32    cbBitsMask;
}

struct EMRPLGBLT
{
    EMR    emr;
    RECTL    rclBounds;
    POINTL[3]  aptlDest;
    int32    xSrc;
    int32    ySrc;
    int32    cxSrc;
    int32    cySrc;
    XFORM    xformSrc;
    COLORREF    crBkColorSrc;
    int32    iUsageSrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
    int32    xMask;
    int32    yMask;
    int32    iUsageMask;
    int32    offBmiMask;
    int32    cbBmiMask;
    int32    offBitsMask;
    int32    cbBitsMask;
}

struct EMRSETDIBITSTODEVICE
{
    EMR    emr;
    RECTL    rclBounds;
    int32    xDest;
    int32    yDest;
    int32    xSrc;
    int32    ySrc;
    int32    cxSrc;
    int32    cySrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
    int32    iUsageSrc;
    int32    iStartScan;
    int32    cScans;
}

struct EMRSTRETCHDIBITS
{
    EMR    emr;
    RECTL    rclBounds;
    int32    xDest;
    int32    yDest;
    int32    xSrc;
    int32    ySrc;
    int32    cxSrc;
    int32    cySrc;
    int32    offBmiSrc;
    int32    cbBmiSrc;
    int32    offBitsSrc;
    int32    cbBitsSrc;
    int32    iUsageSrc;
    int32    dwRop;
    int32    cxDest;
    int32    cyDest;
}

struct EMRCREATEPALETTE
{
    EMR    emr;
    int32    ihPal;
    LOGPALETTE    lgpl;
}

struct EMRCREATEPEN
{
    EMR    emr;
    int32    ihPen;
    LOGPEN    lopn;
}

struct EMREXTCREATEPEN
{
    EMR    emr;
    int32    ihPen;
    int32    offBmi;
    int32    cbBmi;
    int32    offBits;
    int32    cbBits;
    EXTLOGPEN    elp;
}

struct EMRCREATEBRUSHINDIRECT
{
    EMR    emr;
    int32    ihBrush;
    LOGBRUSH    lb;
}

struct EMRCREATEMONOBRUSH
{
    EMR    emr;
    int32    ihBrush;
    int32    iUsage;
    int32    offBmi;
    int32    cbBmi;
    int32    offBits;
    int32    cbBits;
}

struct EMRCREATEDIBPATTERNBRUSHPT
{
    EMR    emr;
    int32    ihBursh;
    int32    iUsage;
    int32    offBmi;
    int32    cbBmi;
    int32    offBits;
    int32    cbBits;
}

struct CIEXYZ
{
    FXPT2DOT30          ciexyzX;
    FXPT2DOT30          ciexyzY;
    FXPT2DOT30          ciexyzZ;
}

struct CIEXYZTRIPLE
{
    CIEXYZ          ciexyzRed;
    CIEXYZ          ciexyzGreen;
    CIEXYZ          ciexyzBlue;
}

struct BITMAPV4HEADER
{
    int32    bV4Size;
    int32    bV4Width;
    int32    bV4Height;
    int16    bV4Planes;
    int16    bV4BitCount;
    int32    bV4V4Compression;
    int32    bV4SizeImage;
    int32    bV4XPelsPerMeter;
    int32    bV4YPelsPerMeter;
    int32    bV4ClrUsed;
    int32    bV4ClrImportant;
    int32    bV4RedMask;
    int32    bV4GreenMask;
    int32    bV4BlueMask;
    int32    bV4AlphaMask;
    int32    bV4CSType;
    CIEXYZTRIPLE    bV4Endpoints    ;
    int32    bV4GammaRed;
    int32    bV4GammaGreen;
    int32    bV4GammaBlue;
}

struct FONTSIGNATURE
{
    int32[4]  fsUsb4;
    int32[2]  fsCsb2;
}

struct CHARSETINFO
{
    int32    ciCharset;
    int32    ciACP;
    FONTSIGNATURE    xlfs    ;
}

struct LOCALESIGNATURE
{
    int32[4]  lsUsb4;
    int32[2]  lsCsbDefault;
    int32[2]  lsCsbSupported;
}

struct NEWTEXTMETRICEXA
{
    NEWTEXTMETRICA    ntmTm;
    FONTSIGNATURE    ntmFontSig    ;
}

define NEWTEXTMETRICEX()  NEWTEXTMETRICEXA

struct ENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont    ;
    int8[LF_FULLFACESIZE]  elfFullName;
    int8[LF_FACESIZE]  elfStyle;
    int8[LF_FACESIZE]  elfScript;
}

define ENUMLOGFONTEX()  ENUMLOGFONTEXA

struct GCP_RESULTSA
{
    int32    lStructSize;
    int32    lpOutString;
    int32    lpOrder;
    int32    lpDX;
    int32    lpCaretPos;
    int32    lpClass;
    int32    lpGlyphs;
    int32    nGlyphs;
    int32    nMaxFit;
}

define GCP_RESULTS()  GCP_RESULTSA

struct LOGCOLORSPACEA
{
    int32    lcsSignature;
    int32    lcsVersion;
    int32    lcsSize;
    LCSCSTYPE    lcsCSType;
    LCSGAMUTMATCH    lcsIntent;
    CIEXYZTRIPLE    lcsEndPoints    ;
    int32    lcsGammaRed;
    int32    lcsGammaGreen;
    int32    lcsGammaBlue;
    int8[MAX_PATH]  lcsFileName;
}

struct LOGCOLORSPACEW
{
    int32      lcsSignature;
    int32      lcsVersion;
    int32      lcsSize;
    LCSCSTYPE      lcsCSType;
    LCSGAMUTMATCH      lcsIntent;
    CIEXYZTRIPLE      lcsEndpoints    ;
    int32      lcsGammaRed;
    int32      lcsGammaGreen;
    int32      lcsGammaBlue;
    int16[MAX_PATH]  lcsFilename;
}

struct EMRCREATECOLORSPACE
{
    EMR    emr;
    int32    ihCS;
    LOGCOLORSPACEW    lcs;
}

struct CBTACTIVATESTRUCT
{
    int32    fMouse;
    int32    hWndActive;
}

struct EVENTMSG
{
    int32    message;
    int32    paramL;
    int32    paramH;
    int32    time;
    int32    hwnd;
}

struct CWPSTRUCT
{
    int32    lParam;
    int32    wParam;
    int32    message;
    int32    hwnd;
}

struct DEBUGHOOKINFO
{
    int32    hModuleHook;
    int32    Reserved;
    int32    lParam;
    int32    wParam;
    int32    code;
}

struct MOUSEHOOKSTRUCT
{
    POINT    pt;
    int32    hwnd;
    int32    wHitTestCode;
    int32    dwExtraInfo;
}

struct MINMAXINFO
{
    POINT    ptReserved;
    POINT    ptMaxSize;
    POINT    ptMaxPosition;
    POINT    ptMinTrackSize;
    POINT    ptMaxTrackSize;
}

struct COPYDATASTRUCT
{
    int32    dwData;
    int32    cbData;
    int32    lpData;
}

struct WINDOWPOS
{
    int32    hwnd;
    int32    hWndInsertAfter;
    int32    x;
    int32    y;
    int32    lx;
    int32    cy;
    int32    flags;
}

struct ACCEL
{
    int8    fVirt;
    int16    key;
    int16    cmd;
}

struct PAINTSTRUCT
{
    int32    hdc;
    int32    fErase;
    RECT    rcPaint;
    int32    fRestore;
    int32    fIncUpdate;
    int8[32]  rgbReserved;
}

struct CREATESTRUCTA
{
    int32    lpCreateParams;
    int32    hInstance;
    int32    hMenu;
    int32    hWndParent;
    int32    ly;
    int32    lx;
    int32    y;
    int32    x;
    int32    style;
    int32    lpszName;
    int32    lpszClass;
    int32    ExStyle;
}

define CREATESTRUCT()  CREATESTRUCTA

struct CBT_CREATEWNDA
{
    int32    lpcs;
    int32    hWndInsertAfter;
}

define CBT_CREATEWND()  CBT_CREATEWNDA

struct WINDOWPLACEMENT
{
    int32    iLength;
    int32    flags;
    int32    showCmd;
    POINT    ptMinPosition;
    POINT    ptMaxPosition;
    RECT    rcNormalPosition;
}

struct MEASUREITEMSTRUCT
{
    int32    CtlType;
    int32    CtlID;
    int32    itemID;
    int32    itemWidth;
    int32    itemHeight;
    int32    itemData;
}

struct DRAWITEMSTRUCT
{
    int32    CtlType;
    int32    CtlID;
    int32    itemID;
    int32    itemAction;
    int32    itemState;
    int32    hwndItem;
    int32    hdc;
    RECT    rcItem;
    int32    itemData;
}

struct DELETEITEMSTRUCT
{
    int32    CtlType;
    int32    CtlID;
    int32    itemID;
    int32    hwndItem;
    int32    itemData;
}

struct COMPAREITEMSTRUCT
{
    int32    CtlType;
    int32    CtlID;
    int32    hwndItem;
    int32    itemID1;
    int32    itemData1;
    int32    itemID2;
    int32    itemData2;
    int32    dwLocaleId;
}

struct DLGTEMPLATE
{
    int32    style;
    int32    dwExtendedStyle;
    int16    cdit;
    int16    x;
    int16    y;
    int16    lx;
    int16    ly;
}

struct DLGITEMTEMPLATE
{
    int32    style;
    int32    dwExtendedStyle;
    int16    x;
    int16    y;
    int16    lx;
    int16    cy;
    int16    id;
}

struct MENUITEMTEMPLATEHEADER
{
    int16    versionNumber;
    int16    loffset;
}

struct MENUITEMTEMPLATE
{
    int16    mtOption;
    int16    mtID;
    int16    mtString;
}

struct ICONINFO
{
    int32    fIcon;
    int32    xHotspot;
    int32    yHotspot;
    int32    hbmMask;
    int32    hbmColor;
}

struct MDICREATESTRUCTA
{
    int32    szClass;
    int32    szTitle;
    int32    hOwner;
    int32    x;
    int32    y;
    int32    lx;
    int32    ly;
    int32    style;
    int32    lParam;
}

define MDICREATESTRUCT()  MDICREATESTRUCTA

struct CLIENTCREATESTRUCT
{
    int32    hWindowMenu;
    int32    idFirstChild;
}

struct MULTIKEYHELPA
{
    int32    mkSize;
    int8    mkKeylist;
    int8    szKeyphrase;
}

define MULTIKEYHELP()  MULTIKEYHELPA

struct HELPWININFOA
{
    int32    wStructSize;
    int32    x;
    int32    y;
    int32    lx;
    int32    ly;
    int32    wMax;
    int8[2]  rgchMember;
}

define HELPWININFO()  HELPWININFOA

struct DDEACK
{
    int16 zDeack;
}

struct DDEADVISE
{
    int32 szDeadvise;
}

struct DDEDATA
{
    int32 szDedata;
    int8 zjDedata;
}

struct DDEPOKE
{
    int32 szDepoke;
    int8 zjdepoke;
}

struct DDELN
{
    int32 szDeln;
}

struct DDEUP
{
    int32 szDeup;
    int8 zjDeup;
}

struct HSZPAIR
{
    int32    hszSvc;
    int32    hszTopic;
}

struct SECURITY_QUALITY_OF_SERVICE
{
    int32    iLength;
    int32    Impersonationlevel;
    int8    ContextTrackingMode;
    int8    EffectiveOnly;
}

struct CONVCONTEXT
{
    int32    cb;
    int32    wFlags;
    int32    wCountryID;
    int32    iCodePage;
    int32    dwLangID;
    int32    dwSecurity;
    SECURITY_QUALITY_OF_SERVICE    qos;
}

struct CONVINFO
{
    int32    cb;
    int32    hUser;
    int32    hConvPartner;
    int32    hszSvcPartner;
    int32    hszServiceReq;
    int32    hszTopic;
    int32    hszItem;
    int32    wFmt;
    int32    wType;
    int32    wStatus;
    int32    wConvst;
    int32    wLastError;
    int32    hConvList;
    CONVCONTEXT    ConvCtxt    ;
    int32    hwnd;
    int32    hwndPartner;
}

struct DDEML_MSG_HOOK_DATA
{
    int32    uiLo;
    int32    uiHi;
    int32    cbData;
    int32[8]  xData;
}

struct MONMSGSTRUCT
{
    int32    cb;
    int32    hwndTo;
    int32    dwTime;
    int32    htask;
    int32    wMsg;
    int32    wParam;
    int32    lParam;
    DDEML_MSG_HOOK_DATA    dmhd;
}

struct MONCBSTRUCT
{
    int32    cb;
    int32    dwTime;
    int32    htask;
    int32    dwRet;
    int32    wType;
    int32    wFmt;
    int32    hConv;
    int32    hsz1;
    int32    hsz2;
    int32    hData;
    int32    dwData1;
    int32    dwData2;
    CONVCONTEXT    cc;
    int32    cbData;
    int32    xData8;
}

struct MONHSZSTRUCTA
{
    int32    cb;
    int32    fsAction;
    int32    dwTime;
    int32    hsz;
    int32    htask;
    int8    xstr;
}

define MONHSZSTRUCT()  MONHSZSTRUCTA

struct MONERRSTRUCT
{
    int32    cb;
    int32    wLastError;
    int32    dwTime;
    int32    htask;
}

struct MONLINKSTRUCT
{
    int32    cb;
    int32    dwTime;
    int32    htask;
    int32    fEstablished;
    int32    fNoData;
    int32    hszSvc;
    int32    hszTopic;
    int32    hszItem;
    int32    wFmt;
    int32    fServer;
    int32    hConvServer;
    int32    hConvClient;
}

struct MONCONVSTRUCT
{
    int32    cb;
    int32    fConnect;
    int32    dwTime;
    int32    htask;
    int32    hszSvc;
    int32    hszTopic;
    int32    hConvClient;
    int32    hConvServer;
}

struct smpte
{
    int8    hour;
    int8    minute;
    int8    sec;
    int8    frame;
    int8    fps;
    int8    dummy;
    int8[2]  pad;
}

struct midi
{
    int32    songptrpos;
}

union MMUNION
{
    int32    ms;
    int32    sample;
    int32    cb;
    int32    ticks;
    smpte    smp;
    midi    midi1;
}

struct MMTIME
{
    int32    wType;
    MMUNION  u;
}

struct MIDIEVENT
{
    int32    dwDeltaTime;
    int32    dwStreamID;
    int32    dwEvent;
    int32    dwParms;
}

struct MIDISTRMBUFFVER
{
    int32    dwVersion;
    int32    dwMid;
    int32    dwOEMVersion;
}

struct MIDIPROPTIMEDIV
{
    int32    cbStruct;
    int32    dwTimeDiv;
}

struct MIDIPROPTEMPO
{
    int32    cbStruct;
    int32    dwTempo;
}

struct MIXERCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int32    fdwSupport;
    int32    cDestinations;
}

define MIXERCAPS()  MIXERCAPSA

struct Target
{
    int32    dwType;
    int32    dwDeviceID;
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
}


struct MIXERLINECONTROLSA
{
    int32    cbStruct;
    int32    dwLineID;
    union UNION_MIXERLINECONTROLSA
    {
        int32     dwControlID;
        int32     dwControlType;
    }
    int32    cControls;
    int32    cbmxctrl;
    int32    pamxctrl;
}

define MIXERLINECONTROLS()  MIXERLINECONTROLSA

struct MIXERCONTROLDETAILS
{
    int32    cbStruct;
    int32    dwControlID;
    int32    cChannels;
    union UNION_MIXERCONTROLDETAILS
    {
        int32     hwndOwner;
        int32     cMultipleItems;
    }
    int32    cbDetails;
    int32    paDetails;
}

struct MIXERCONTROLDETAILS_BOOLEAN
{
    int32    fValue;
}

struct MIXERCONTROLDETAILS_SIGNED
{
    int32    lValue;
}

struct MIXERCONTROLDETAILS_UNSIGNED
{
    int32    dwValue;
}

struct JOYINFOEX
{
    int32    dwSize;
    int32    dwFlags;
    int32    dwXpos;
    int32    dwYpos;
    int32    dwZpos;
    int32    dwRpos;
    int32    dwUpos;
    int32    dwVpos;
    int32    dwButtons;
    int32    dwButtonNumber;
    int32    dwPOV;
    int32    dwReserved1;
    int32    dwReserved2;
}

struct DRVCONFIGINFOEX
{
    int32    dwDCISize;
    int32    lpszDCISectionName;
    int32    lpszDCIAliasName;
    int32    dnDevNode;
}

struct DRVCONFIGINFO
{
    int32    dwDCISize;
    int32    lpszDCISectionName;
    int32    lpszDCIAliasName;
}

struct WAVEHDR
{
    int32    lpData;
    int32    dwBufferLength;
    int32    dwBytesRecorded;
    int32    dwUser;
    int32    dwFlags;
    int32    dwLoops;
    int32    lpNext;
    int32    Reserved;
}

struct WAVEOUTCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int32    dwFormats;
    int16    wChannels;
    int16    wReserved1;
    int32    dwSupport;
}

define WAVEOUTCAPS()  WAVEOUTCAPSA

struct WAVEINCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int32    dwFormats;
    int16    wChannels;
    int16    wReserved1;
}

define WAVEINCAPS()  WAVEINCAPSA

struct WAVEFORMAT
{
    int16    wFormatTag;
    int16    nChannels;
    int32    nSamplesPerSec;
    int32    nAvgBytesPerSec;
    int16    nBlockAlign;
}

struct PCMWAVEFORMAT
{
    WAVEFORMAT    wf;
    int16    wBitsPerSample;
}

struct MIDIOUTCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int16    wTechnology;
    int16    wVoices;
    int16    wNotes;
    int16    wChannelMask;
    int32    dwSupport;
}

define MIDIOUTCAPS()  MIDIOUTCAPSA

struct MIDIINCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int32    dwSupport;
}

define MIDIINCAPS()  MIDIINCAPSA

struct MIDIHDR
{
    int32    lpData;
    int32    dwBufferiLength;
    int32    dwBytesRecorded;
    int32    dwUser;
    int32    dwFlags;
    int32    lpNext;
    int32    Reserved;
    int32    dwOffset;
    int32[8]  dwReserved;
}

struct AUXCAPSA
{
    int16    wMid;
    int16    wPid;
    MMVERSION    vDriverVersion;
    int8[MAXPNAMELEN]  szPname;
    int16    wTechnology;
    int32    dwSupport;
}

define AUXCAPS()  AUXCAPSA

struct TIMECAPS
{
    int32    wPeriodMin;
    int32    wPeriodMax;
}

struct JOYCAPSA
{
    int16    wMid;
    int16    wPid;
    int8[MAXPNAMELEN]  szPname;
    int16    wXmin;
    int16    wXmax;
    int16    wYmin;
    int16    wYmax;
    int16    wZmin;
    int16    wZmax;
    int16    wNumButtons;
    int16    wPeriodMin;
    int16    wPeriodMax;
    int32    wRmin;
    int32    wRmax;
    int32    wUmin;
    int32    wUmax;
    int32    wVmin;
    int32    wVmax;
    int32    wCaps;
    int32    wMaxAxes;
    int32    wNumAxes;
    int32    wMaxButtons;
    int8[MAXPNAMELEN]  szRegKey;
    int8[MAX_JOYSTICKOEMVXDNAME]  szOEMVxD;
}

define JOYCAPS()  JOYCAPSA

struct JOYINFO
{
    int16    wXpos;
    int16    wYpos;
    int16    wZpos;
    int16    wButtons;
}

struct MMIOINFO
{
    int32    dwFlags;
    int32    fccIOProc;
    int32    pIOProc;
    int32    wErrorRet;
    int32    htask;
    int32    cchBuffer;
    int32    pchBuffer;
    int32    pchNext;
    int32    pchEndRead;
    int32    pchEndWrite;
    int32    lBufOffset;
    int32    lDiskOffset;
    int32[3]  adwInfo;
    int32    dwReserved1;
    int32    dwReserved2;
    int32    hmmio;
}

struct MMCKINFO
{
    int32    ckid;
    int32    ckSize;
    int32    fccType;
    int32    dwDataOffset;
    int32    dwFlags;
}

struct MCI_GENERIC_PARMS
{
    int32    dwCallback;
}

struct MCI_OPEN_PARMS
{
    int32    dwCallback;
    int32    wDeviceID;
    int32    lpstrDeviceType;
    int32    lpstrElementName;
    int32    lpstrAlias;
}

struct MCI_PLAY_PARMS
{
    int32    dwCallback;
    int32    dwFrom;
    int32    dwTo;
}

struct MCI_SEEK_PARMS
{
    int32    dwCallback;
    int32    dwTo;
}

struct MCI_STATUS_PARMS
{
    int32    dwCallback;
    int32    dwReturn;
    int32    dwItem;
    int32    dwTrack;
}

struct MCI_INFO_PARMSA
{
    int32    dwCallback;
    int32    lpstrReturn;
    int32    dwRetSize;
}

define MCI_INFO_PARMS()  MCI_INFO_PARMSA

struct MCI_GETDEVCAPS_PARMS
{
    int32    dwCallback;
    int32    dwReturn;
    int32    dwItem;
}

struct MCI_SYSINFO_PARMSA
{
    int32    dwCallback;
    int32    lpstrReturn;
    int32    dwRetSize;
    int32    dwNumber;
    int32    wDeviceType;
}

define MCI_SYSINFO_PARMS()  MCI_SYSINFO_PARMSA

struct MCI_SET_PARMS
{
    int32    dwCallback;
    int32    dwTimeFormat;
    int32    dwAudio;
}

struct MCI_BREAK_PARMS
{
    int32    dwCallback;
    int32    nVirtKey;
    int32    hwndBreak;
}

struct MCI_SOUND_PARMS
{
    int32    dwCallback;
    int32    lpstrSoundName;
}

struct MCI_SAVE_PARMSA
{
    int32    dwCallback;
    int32    lpFileName;
}

define MCI_SAVE_PARMS()  MCI_SAVE_PARMSA

struct MCI_LOAD_PARMSA
{
    int32    dwCallback;
    int32    lpFileName;
}

define MCI_LOAD_PARMS()  MCI_LOAD_PARMSA

struct MCI_RECORD_PARMS
{
    int32    dwCallback;
    int32    dwFrom;
    int32    dwTo;
}

struct MCI_VD_PLAY_PARMS
{
    int32    dwCallback;
    int32    dwFrom;
    int32    dwTo;
    int32    dwSpeed;
}

struct MCI_VD_STEP_PARMS
{
    int32    dwCallback;
    int32    dwFrames;
}

struct MCI_VD_ESCAPE_PARMSA
{
    int32   dwCallback;
    int32    lpstrCommand;
}

define MCI_VD_ESCAPE_PARMS()  MCI_VD_ESCAPE_PARMSA

struct MCI_WAVE_OPEN_PARMSA
{
    int32    dwCallback;
    int32    wDeviceID;
    int32    lpstrDeviceType;
    int32    lpstrElementName;
    int32    lpstrAlias;
    int32    dwBufferSeconds;
}

define MCI_WAVE_OPEN_PARMS()  MCI_WAVE_OPEN_PARMSA

struct MCI_WAVE_DELETE_PARMS
{
    int32    dwCallback;
    int32    dwFrom;
    int32    dwTo;
}

struct MCI_WAVE_SET_PARMS
{
    int32    dwCallback;
    int32    dwTimeFormat;
    int32    dwAudio;
    int32    wInput;
    int32    wOutput;
    int16    wFormatTag;
    int16    wReserved2;
    int16    nChannels;
    int16    wReserved3;
    int32    nSamplesPerSec;
    int32    nAvgBytesPerSec;
    int16    nBlockAlign;
    int16    wReserved4;
    int16    wBitsPerSample;
    int16    wReserved5;
}

struct MCI_SEQ_SET_PARMS
{
    int32    dwCallback;
    int32    dwTimeFormat;
    int32    dwAudio;
    int32    dwTempo;
    int32    dwPort;
    int32    dwSlave;
    int32    dwMaster;
    int32    dwOffset;
}

struct MCI_ANIM_OPEN_PARMSA
{
    int32    dwCallback;
    int32    wDeviceID;
    int32    lpstrDeviceType;
    int32    lpstrElementName;
    int32    lpstrAlias;
    int32    dwStyle;
    int32    hWndParent;
}

define MCI_ANIM_OPEN_PARMS()  MCI_ANIM_OPEN_PARMSA

struct MCI_ANIM_PLAY_PARMS
{
    int32    dwCallback;
    int32    dwFrom;
    int32    dwTo;
    int32    dwSpeed;
}

struct MCI_ANIM_STEP_PARMS
{
    int32    dwCallback;
    int32    dwFrames;
}

struct MCI_ANIM_WINDOW_PARMS
{
    int32    dwCallback;
    int32    hwnd;
    int32    nCmdShow;
    int32    lpstrText;
}

struct MCI_ANIM_RECT_PARMS
{
    int32    dwCallback;
    RECT    rc;
}

struct MCI_ANIM_UPDATE_PARMS
{
    int32    dwCallback;
    RECT    rc;
    int32    hdc;
}

struct MCI_OVLY_OPEN_PARMSA
{
    int32    dwCallback;
    int32    wDeviceID;
    int32    lpstrDeviceType;
    int32    lpstrElementName;
    int32    lpstrAlias;
    int32    dwStyle;
    int32    hWndParent;
}

define MCI_OVLY_OPEN_PARMS()  MCI_OVLY_OPEN_PARMSA

struct MCI_OVLY_WINDOW_PARMSA
{
    int32    dwCallback;
    int32    hwnd;
    int32    nCmdShow;
    int32    lpstrText;
}

define MCI_OVLY_WINDOW_PARMS()  MCI_OVLY_WINDOW_PARMSA

struct MCI_OVLY_RECT_PARMS
{
    int32    dwCallback;
    RECT    rc;
}

struct MCI_OVLY_SAVE_PARMSA
{
    int32    dwCallback;
    int32    lpFileName;
    RECT    rc;
}

define MCI_OVLY_SAVE_PARMS()  MCI_OVLY_SAVE_PARMSA

struct MCI_OVLY_LOAD_PARMSA
{
    int32    dwCallback;
    int32    lpFileName;
    RECT    rc;
}

define MCI_OVLY_LOAD_PARMS()  MCI_OVLY_LOAD_PARMSA

struct PRINTER_INFO_1A
{
    int32    flags;
    int32    pDescription;
    int32    pName;
    int32    pComment;
}

define PRINTER_INFO_1()  PRINTER_INFO_1A

struct PRINTER_INFO_2A
{
    int32    pServerName;
    int32    pPrinterName;
    int32    pShareName;
    int32    pPortName;
    int32    pDriverName;
    int32    pComment;
    int32    pLocation;
    int32    pDevMode;
    int32    pSepFile;
    int32    pPrintProcessor;
    int32    pDatatype;
    int32    pParameters;
    int32    pSecurityDescriptor;
    int32    Attributes;
    int32    Priority;
    int32    DefaultPriority;
    int32    StartTime;
    int32    UntilTime;
    int32    Status;
    int32    cJobs;
    int32    AveragePPM;
}

define PRINTER_INFO_2()  PRINTER_INFO_2A

struct PRINTER_INFO_3
{
    int32    pSecurityDescriptor;
}

struct PRINTER_INFO_4A
{
    int32    pPrinterName;
    int32    pServerName;
    int32    Attributes;
}

define PRINTER_INFO_4()  PRINTER_INFO_4A

struct JOB_INFO_1A
{
    int32    JobId;
    int32    pPrinterName;
    int32    pMachineName;
    int32    pUserName;
    int32    pDocument;
    int32    pDatatype;
    int32    pStatus;
    int32    Status;
    int32    Priority;
    int32    Position;
    int32    TotalPages;
    int32    PagesPrinted;
    SYSTEMTIME    Submitted;
}

define JOB_INFO_1()  JOB_INFO_1A

struct JOB_INFO_2A
{
    int32    JobId;
    int32    pPrinterName;
    int32    pMachineName;
    int32    pUserName;
    int32    pDocument;
    int32    pNotifyName;
    int32    pDatatype;
    int32    pPrintProcessor;
    int32    pParameters;
    int32    pDriverName;
    int32    pDevMode;
    int32    pStatus;
    int32    pSecurityDescriptor;
    int32    Status;
    int32    Priority;
    int32    Position;
    int32    StartTime;
    int32    UntilTime;
    int32    TotalPages;
    int32    isize;
    SYSTEMTIME    Submitted    ;
    int32    time;
    int32    PagesPrinted;
}

define JOB_INFO_2()  JOB_INFO_2A

struct ADDJOB_INFO_1A
{
    int32    Path;
    int32    JobId;
}

define ADDJOB_INFO_1()  ADDJOB_INFO_1A

struct DRIVER_INFO_1A
{
    int32    pName;
}

define DRIVER_INFO_1()  DRIVER_INFO_1A

struct DRIVER_INFO_2A
{
    int32    cVersion;
    int32    pName;
    int32    pEnvironment;
    int32    pDriverPath;
    int32    pDataFile;
    int32    pConfigFile;
}

define DRIVER_INFO_2()  DRIVER_INFO_2A

struct DOC_INFO_1A
{
    int32    pDocName;
    int32    pOutputFile;
    int32    pDatatype;
}

define DOC_INFO_1()  DOC_INFO_1A

struct FORM_INFO_1A
{
    int32    Flags;
    int32    pName;
    SIZEL    iSize;
    RECTL    ImageableArea;
}

define FORM_INFO_1()  FORM_INFO_1A

struct PRINTPROCESSOR_INFO_1A
{
    int32    pName;
}

define PRINTPROCESSOR_INFO_1()  PRINTPROCESSOR_INFO_1A

struct PORT_INFO_1A
{
    int32    pName;
}

define PORT_INFO_1()  PORT_INFO_1A

struct MONITOR_INFO_1A
{
    int32    pName;
}

define MONITOR_INFO_1()  MONITOR_INFO_1A

struct MONITOR_INFO_2A
{
    int32    pName;
    int32    pEnvironment;
    int32    pDLLName;
}

define MONITOR_INFO_2()  MONITOR_INFO_2A

struct DATATYPES_INFO_1A
{
    int32    pName;
}

define DATATYPES_INFO_1()  DATATYPES_INFO_1A

struct PRINTER_DEFAULTSA
{
    int32    pDatatype;
    int32    pDevMode;
    ACCESS_MASK    DesiredAccess;
}

define PRINTER_DEFAULTS()  PRINTER_DEFAULTSA



struct PRINTER_INFO_5A
{
    int32    pPrinterName;
    int32    pPortName;
    int32    Attributes;
    int32    DeviceNotSelectedTimeout;
    int32    TransmissionRetryTimeout;
}

define PRINTER_INFO_5()  PRINTER_INFO_5A

struct DRIVER_INFO_3A
{
    int32    cVersion;
    int32    pName;
    int32    pEnvironment;
    int32    pDriverPath;
    int32    pDataFile;
    int32    pConfigFile;
    int32    pHelpFile;
    int32    pDependentFiles;
    int32    pMonitorName;
    int32    pDefaultDataType;
}

define DRIVER_INFO_3()  DRIVER_INFO_3A

struct DOC_INFO_2A
{
    int32    pDocName;
    int32    pOutputFile;
    int32    pDatatype;
    int32    dwMode;
    int32    JobId;
}

define DOC_INFO_2()  DOC_INFO_2A

struct PORT_INFO_2A
{
    int32    pPortName;
    int32    pMonitorName;
    int32    pDescription;
    int32    fPortType;
    int32    Reserved;
}

define PORT_INFO_2()  PORT_INFO_2A

struct PROVIDOR_INFO_1A
{
    int32    pName;
    int32    pEnvironment;
    int32    pDLLName;
}

define PROVIDOR_INFO_1()  PROVIDOR_INFO_1A

struct NETRESOURCEA
{
    int32    dwScope;
    int32    dwType;
    int32    dwDisplayType;
    int32    dwUsage;
    int32    lpLocalName;
    int32    lpRemoteName;
    int32    lpComment;
    int32    lpProvider;
}

define NETRESOURCE()  NETRESOURCEA

struct NCB
{
    int8    ncb_command;
    int8    ncb_retcode;
    int8    ncb_lsn;
    int8    ncb_num;
    int32    ncb_buffer;
    int16    ncb_length;
    int8[NCBNAMSZ]  ncb_callname;
    int8[NCBNAMSZ]  ncb_name;
    int8    ncb_rto;
    int8    ncb_sto;
    int32    ncb_post;
    int8    ncb_lana_num;
    int8    ncb_cmd_cplt;
    int8    ncb_reserve;
    int32    ncb_event;
}

struct ADAPTER_STATUS
{
    int8[6]  adapter_address;
    int8    rev_major;
    int8    reserved0;
    int8    adapter_type;
    int8    rev_minor;
    int16    duration;
    int16    frmr_recv;
    int16    frmr_xmit;
    int16    iframe_recv_err;
    int16    xmit_aborts;
    int32    xmit_success;
    int32    recv_success;
    int16    iframe_xmit_err;
    int16    recv_buff_unavail;
    int16    t1_timeouts;
    int16    ti_timeouts;
    int32    rserved1;
    int16    free_ncbs;
    int16    max_cfg_ncbs;
    int16    max_ncbs;
    int16    xmit_buf_unavail;
    int16    max_dgram_isize;
    int16    pending_sess;
    int16    max_cfg_sess;
    int16    max_sess;
    int16    max_sess_pkt_isize;
    int16    name_count;
}

struct NAME_BUFFER
{
    int8[NCBNAMSZ]  xname;
    int8    name_num;
    int8    name_flags;
}

struct SESSION_HEADER
{
    int8    sess_name;
    int8    num_sess;
    int8    rcv_dg_outstanding;
    int8    rcv_any_outstanding;
}

struct SESSION_BUFFER
{
    int8    lsn;
    int8    State;
    int8[NCBNAMSZ]  local_name;
    int8[NCBNAMSZ]  remote_name;
    int8    rcvs_outstanding;
    int8    sends_outstanding;
}

struct LANA_ENUM
{
    int8    iLength;
    int8    lana;
}

struct FIND_NAME_HEADER
{
    int16    node_count;
    int8    Reserved;
    int8    unique_group;
}

struct FIND_NAME_BUFFER
{
    int8    iLength;
    int8    access_control;
    int8    frame_control;
    int8    destination_addr;
    int8    source_addr;
    int8    routing_info;
}

struct ACTION_HEADER
{
    int32    transport_id;
    int16    action_code;
    int16    Reserved;
}

struct CRGB
{
    int8    bRed;
    int8    bGreen;
    int8    bBlue;
    int8    bExtra;
}

struct SERVICE_STATUS
{
    int32    dwServiceType;
    int32    dwCurrentState;
    int32    dwControlsAccepted;
    int32    dwWin32ExitCode;
    int32    dwServiceSpecificExitCode;
    int32    dwCheckPoint;
    int32    dwWaitHint;
}

struct ENUM_SERVICE_STATUSA
{
    int32    lpServiceName;
    int32    lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
}

define ENUM_SERVICE_STATUS()  ENUM_SERVICE_STATUSA

struct QUERY_SERVICE_LOCK_STATUSA
{
    int32    fIsLocked;
    int32    lpLockOwner;
    int32    dwLockDuration;
}

define QUERY_SERVICE_LOCK_STATUS()  QUERY_SERVICE_LOCK_STATUSA

struct QUERY_SERVICE_CONFIGA
{
    int32    dwServiceType;
    int32    dwStartType;
    int32    dwErrorControl;
    int32    lpBinaryPathName;
    int32    lpLoadOrderGroup;
    int32    dwTagId;
    int32    lpDependencies;
    int32    lpServiceStartName;
    int32    lpDisplayName;
}

define QUERY_SERVICE_CONFIG()  QUERY_SERVICE_CONFIGA

struct SERVICE_TABLE_ENTRYA
{
    int32    lpServiceName;
    int32    lpServiceProc;
}

define SERVICE_TABLE_ENTRY()  SERVICE_TABLE_ENTRYA

struct PERF_DATA_BLOCK
{
    int16[4]  Signature;
    int32    LittleEndian;
    int32    Version;
    int32    Revision;
    int32    TotalByteiLength;
    int32    HeaderiLength;
    int32    NumObjectTypes;
    int32    DefaultObject;
    SYSTEMTIME    SystemTime    ;
    int32    Padding;
    LARGE_INTEGER    PerfTime;
    LARGE_INTEGER    PerfFreq;
    LARGE_INTEGER    PerTime100nSec;
    int32    SystemNameiLength;
    int32    SystemNameOffset;
}

struct PERF_OBJECT_TYPE
{
    int32    TotalByteiLength;
    int32    DefinitioniLength;
    int32    HeaderiLength;
    int32    ObjectNameTitleIndex;
    int32    ObjectNameTitle;
    int32    ObjectHelpTitleIndex;
    int32    ObjectHelpTitle;
    int32    DetailLevel;
    int32    NumCounters;
    int32    DefaultCounter;
    int32    NumInstances;
    int32    CodePage;
    LARGE_INTEGER    PerfTime;
    LARGE_INTEGER    PerfFreq;
}

struct PERF_COUNTER_DEFINITION
{
    int32    ByteiLength;
    int32    CounterNameTitleIndex;
    int32    CounterNameTitle;
    int32    CounterHelpTitleIndex;
    int32    CounterHelpTitle;
    int32    DefaultScale;
    int32    DetailLevel;
    int32    CounterType;
    int32    CounterSize;
    int32    CounterOffset;
}

struct PERF_INSTANCE_DEFINITION
{
    int32    ByteiLength;
    int32    ParentObjectTitleIndex;
    int32    ParentObjectInstance;
    int32    UniqueID;
    int32    NameOffset;
    int32    NameiLength;
}

struct PERF_COUNTER_BLOCK
{
    int32    ByteiLength;
}

struct COMPOSITIONFORM
{
    int32    dwStyle;
    POINT    ptCurrentPos;
    RECT    rcArea;
}

struct CANDIDATEFORM
{
    int32    dwIndex;
    int32    dwStyle;
    POINT    ptCurrentPos;
    RECT    rcArea;
}

struct CANDIDATELIST
{
    int32    dwSize;
    int32    dwStyle;
    int32    dwCount;
    int32    dwSelection;
    int32    dwPageStart;
    int32    dwPageSize;
    int32    dwOffset1;
}

struct STYLEBUFA
{
    int32    dwStyle;
    int8[STYLE_DESCRIPTION_SIZE]  szDescription;
}

define STYLEBUF()  STYLEBUFA

struct MODEMDEVCAPS
{
    int32    dwActualSize;
    int32    dwRequiredSize;
    int32    dwDevSpecificOffset;
    int32    dwDevSpecificSize;
    int32    dwModemProviderVersion;
    int32    dwModemManufacturerOffset;
    int32    dwModemManufacturerSize;
    int32    dwModemModelOffset;
    int32    dwModemModelSize;
    int32    dwModemVersionOffset;
    int32    dwModemVersionSize;
    int32    dwDialOptions;
    int32    dwCallSetupFailTimer;
    int32    dwInactivityTimeout;
    int32    dwSpeakerVolume;
    int32    dwSpeakerMode;
    int32    dwModemOptions;
    int32    dwMaxDTERate;
    int32    dwMaxDCERate;
    int8    abVariablePortion;
}

struct MODEMSETTINGS
{
    int32    dwActualSize;
    int32    dwRequiredSize;
    int32    dwDevSpecificOffset;
    int32    dwDevSpecificSize;
    int32    dwCallSetupFailTimer;
    int32    dwInactivityTimeout;
    int32    dwSpeakerVolume;
    int32    dwSpeakerMode;
    int32    dwPreferredModemOptions;
    int32    dwNegotiatedModemOptions;
    int32    dwNegotiatedDCERate;
    int8    abVariablePortion;
}

struct DRAGINFOA
{
    int32    uSize;
    POINT    pt;
    int32    fNC;
    int32    lpFileList;
    int32    grfKeyState;
}

define DRAGINFO()  DRAGINFOA

struct APPBARDATA
{
    int32    cbSize;
    int32    hwnd;
    int32    uCallbackMessage;
    int32    uEdge;
    RECT    rc;
    int32    lParam;
}

struct SHFILEOPSTRUCTA
{
    int32    hwnd;
    int32    wFunc;
    int32    pFrom;
    int32    pTo;
    FILEOP_FLAGS    fFlags;
    int32    fAnyOperationsAborted;
    int32    hNameMappings;
    int32    lpszProgressTitle;
}

define SHFILEOPSTRUCT()  SHFILEOPSTRUCTA

struct SHNAMEMAPPINGA
{
    int32    pszOldPath;
    int32    pszNewPath;
    int32    cchOldPath;
    int32    cchNewPath;
}

define SHNAMEMAPPING()  SHNAMEMAPPINGA

struct SHELLEXECUTEINFOA
{
    int32    cbSize;
    int32    fMask;
    int32    hwnd;
    int32    lpVerb;
    int32    lpFile;
    int32    lpParameters;
    int32    lpDirectory;
    int32    nShow;
    int32    hInstApp;
    int32    lpIDList;
    int32    lpClass;
    int32    hkeyClass;
    int32    dwHotKey;
    union UNION_SHELLEXECUTEINFOA
    {
        int32        hIcon;
        int32        hMonitor;
    }
    int32    hProcess;
}

define SHELLEXECUTEINFO()  SHELLEXECUTEINFOA

struct NOTIFYICONDATAA
{
    int32    cbSize;
    int32    hwnd;
    int32    uID;
    int32    uFlags;
    int32    uCallbackMessage;
    int32    hIcon;
    int8[64]  szTip;
}

define NOTIFYICONDATA()  NOTIFYICONDATAA

struct SHFILEINFOA
{
    int32    hIcon;
    int32    iIcon;
    int32    dwAttributes;
    int8    szDisplayName;
    int8[80]  szTypeName;
}

define SHFILEINFO()  SHFILEINFOA

struct VS_FIXEDFILEINFO
{
    int32    dwSignature;
    int32    dwStrucVersion;
    int32    dwFileVersionMS;
    int32    dwFileVersionLS;
    int32    dwProductVersionMS;
    int32    dwProductVersionLS;
    int32    dwFileFlagsMask;
    int32    dwFileFlags;
    int32    dwFileOS;
    int32    dwFileType;
    int32    dwFileSubtype;
    int32    dwFileDateMS;
    int32    dwFileDateLS;
}

struct ICONMETRICSA
{
    int32    cbSize;
    int32    iHorzSpacing;
    int32    iVertSpacing;
    int32    iTitleWrap;
    LOGFONTA    lfFont    ;
}

define ICONMETRICS()  ICONMETRICSA

struct HELPINFO
{
    int32    cbSize;
    int32    iContextType;
    int32    iCtrlId;
    int32    hItemHandle;
    int32    dwContextId;
    POINT    MousePos;
}

struct ANIMATIONINFO
{
    int32    cbSize;
    int32    iMinAnimate;
}

struct MINIMIZEDMETRICS
{
    int32    cbSize;
    int32    iWidth;
    int32    iHorzGap;
    int32    iVertGap;
    int32    iArrange;
}

struct OSVERSIONINFOA
{
    int32    dwOSVersionInfoSize;
    int32    dwMajorVersion;
    int32    dwMinorVersion;
    int32    dwBuildNumber;
    int32    dwPlatformId;
    int8[128]  szCSDVersion;
}

define OSVERSIONINFO()  OSVERSIONINFOA

struct SYSTEM_POWER_STATUS
{
    int8    ACLineStatus;
    int8    BatteryFlag;
    int8    BatteryLifePercent;
    int8    Reserved1;
    int32    BatteryLifeTime;
    int32    BatteryFullLifeTime;
}



struct PAGESETUPDLGA
{
    int32    lStructSize;
    int32    hwndOwner;
    int32    hDevMode;
    int32    hDevNames;
    union UNION_PAGESETUPDLGA
    {
        int32     Flags;
        int32     flags;
    }
    POINT    ptPaperSize;
    RECT    rtMinMargin;
    RECT    rtMargin;
    int32    hInstance;
    int32    lCustData;
    int32    lpfnPageSetupHook;
    int32    lpfnPagePaintHook;
    int32    lpPageSetupTemplateName;
    int32    hPageSetupTemplate;
}

define PAGESETUPDLG()  PAGESETUPDLGA

struct COMMCONFIG
{
    int32    dwSize;
    int16    wVersion;
    int16    wReserved;
    DCB    dcbx;
    int32    dwProviderSubType;
    int32    dwProviderOffset;
    int32    dwProviderSize;
    int16    wcProviderData;
}

struct PIXELFORMATDESCRIPTOR
{
    int16    nSize;
    int16    nVersion;
    int32    dwFlags;
    int8    iPixelType;
    int8    cColorBits;
    int8    cRedBits;
    int8    cRedShift;
    int8    cGreenBits;
    int8    cGreenShift;
    int8    cBlueBits;
    int8    cBlueShift;
    int8    cAlphaBits;
    int8    cAlphaShift;
    int8    cAccumBits;
    int8    cAccumRedBits;
    int8    cAccumGreenBits;
    int8    cAccumBlueBits;
    int8    cAccumAlphaBits;
    int8    cDepthBits;
    int8    cStencilBits;
    int8    cAuxBuffers;
    int8    iLayerType;
    int8    bReserved;
    int32    dwLayerMask;
    int32    dwVisibleMask;
    int32    dwDamageMask;
}

struct DRAWTEXTPARAMS
{
    int32    cbSize;
    int32    iTabiLength;
    int32    iLeftMargin;
    int32    iRightMargin;
    int32    uiiLengthDrawn;
}

struct MENUITEMINFOA
{
    int32    cbSize;
    int32    fMask;
    int32    fType;
    int32    fState;
    int32    wID;
    int32    hSubMenu;
    int32    hbmpChecked;
    int32    hbmpUnchecked;
    int32    dwItemData;
    int32    dwTypeData;
    int32    cch;
}

define MENUITEMINFO()  MENUITEMINFOA

struct SCROLLINFO
{
    int32    cbSize;
    int32    fMask;
    int32    nMin;
    int32    nMax;
    int32    nPage;
    int32    nPos;
    int32    nTrackPos;
}

struct MSGBOXPARAMSA
{
    int32    cbSize;
    int32    hwndOwner;
    int32    hInstance;
    int32    lpszText;
    int32    lpszCaption;
    int32    dwStyle;
    int32    lpszIcon;
    int32    dwContextHelpId;
    int32    lpfnMsgBoxCallback;
    int32    dwLanguageId;
}

define MSGBOXPARAMS()  MSGBOXPARAMSA

union DEBUGSTRUCT
{
    EXCEPTION_DEBUG_INFO  Exception;
    CREATE_THREAD_DEBUG_INFO    CreateThread;
    CREATE_PROCESS_DEBUG_INFO    CreateProcessInfo;
    EXIT_THREAD_DEBUG_INFO    ExitThread;
    EXIT_PROCESS_DEBUG_INFO    ExitProcess;
    LOAD_DLL_DEBUG_INFO    LoadDll;
    UNLOAD_DLL_DEBUG_INFO    UnloadDll;
    OUTPUT_DEBUG_STRING_INFO    DebugString;
    RIP_INFO    RipInfo;
}

struct DEBUG_EVENT
{
    int32    dwDebugEventCode;
    int32    dwProcessId;
    int32    dwThreadId;
    DEBUGSTRUCT    u;
}

struct IMAGE_DATA_DIRECTORY
{
    int32    VirtualAddress;
    int32    isize;
}

struct IMAGE_OPTIONAL_HEADER32
{
    int16    Magic;
    int8    MajorLinkerVersion;
    int8    MinorLinkerVersion;
    int32    SizeOfCode;
    int32    SizeOfInitializedData;
    int32    SizeOfUninitializedData;
    int32    AddressOfEntryPoint;
    int32    BaseOfCode;
    int32    BaseOfData;
    int32    ImageBase;
    int32    SectionAlignment;
    int32    FileAlignment;
    int16    MajorOperatingSystemVersion;
    int16    MinorOperatingSystemVersion;
    int16    MajorImageVersion;
    int16    MinorImageVersion;
    int16    MajorSubsystemVersion;
    int16    MinorSubsystemVersion;
    int32    Win32VersionValue;
    int32    SizeOfImage;
    int32    SizeOfHeaders;
    int32    CheckSum;
    int16    Subsystem;
    int16    DllCharacteristics;
    int32    SizeOfStackReserve;
    int32    SizeOfStackCommit;
    int32    SizeOfHeapReserve;
    int32    SizeOfHeapCommit;
    int32    LoaderFlags;
    int32    NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]  DataDirectory;
}

define IMAGE_OPTIONAL_HEADER()  IMAGE_OPTIONAL_HEADER32

struct IMAGE_FILE_HEADER
{
    int16    Machine;
    int16    NumberOfSections;
    int32    TimeDateStamp;
    int32    PointerToSymbolTable;
    int32    NumberOfSymbols;
    int16    SizeOfOptionalHeader;
    int16    Characteristics;
}

struct IMAGE_NT_HEADERS
{
    int32    Signature;
    IMAGE_FILE_HEADER    FileHeader    ;
    IMAGE_OPTIONAL_HEADER32    OptionalHeader    ;
}

struct IMAGE_EXPORT_DIRECTORY
{
    int32    Characteristics;
    int32    TimeDateStamp;
    int16    MajorVersion;
    int16    MinorVersion;
    int32    nName;
    int32    nBase;
    int32    NumberOfFunctions;
    int32    NumberOfNames;
    int32    AddressOfFunctions;
    int32    AddressOfNames;
    int32    AddressOfNameOrdinals;
}

struct IMAGE_DOS_HEADER
{
    int16    e_magic;
    int16    e_cblp;
    int16    e_cp;
    int16    e_crlc;
    int16    e_cparhdr;
    int16    e_minalloc;
    int16    e_maxalloc;
    int16    e_ss;
    int16    e_sp;
    int16    e_csum;
    int16    e_ip;
    int16    e_cs;
    int16    e_lfarlc;
    int16    e_ovno;
    int16[4]  e_res;
    int16    e_oemid;
    int16    e_oeminfo;
    int16[10]  e_res2;
    int32    e_lfanew;
}

// ------------------------ wsock32 structures -----------------------------

struct fd_set
{
    int32    fd_count;
    SOCKET[FD_SETSIZE]  fd_array;
}

struct timeval
{
    int32    tv_sec;
    int32    tv_usec;
}

struct S_UN_B
{
    int8    s_b1;
    int8    s_b2;
    int8    s_b3;
    int8    s_b4;
}

struct S_UN_W
{
    int16    s_w1;
    int16    s_w2;
}

union ADDRESS_UNION
{
    S_UN_B     S_un_b;
    S_UN_W     S_un_w;
    int32     S_addr;
}

struct in_addr
{
    ADDRESS_UNION S_un;
}

struct sockaddr_in
{
    int16    sin_family;
    int16    sin_port;
    in_addr    sin_addr;
    int8[8]  sin_zero;
}

struct sockaddr
{
    int16    sa_family;
    int8[14]  sa_data;
}

struct WSADATA
{
    int16    wVersion;
    int16    wHighVersion;
    int8[WSADESCRIPTION_LEN+1]  szDescription;
    int8[WSASYS_STATUS_LEN+1]  szSystemStatus;
    int16    iMaxSockets;
    int16    iMaxUdpDg;
    int32    lpVendorInfo;
}

struct sockproto
{
    int16    sp_family;
    int16    sp_protocol;
}

struct linger
{
    int16    l_onoff;
    int16    l_linger;
}

struct hostent
{
    int32    h_name;
    int32    h_alias;
    int16    h_addr;
    int16    h_len;
    int32    h_list;
}

struct netent
{
    int32    n_name;
    int32    n_aliases;
    int16    n_addrtype;
    int32    n_net;
}

struct servent
{
    int32    s_name;
    int32    s_aliases;
    int16    s_port;
    int32    s_proto;
}

struct icmp_hdr
{
    int8    icmp_type;
    int8    icmp_code;
    int16    icmp_cksum;
    int16    icmp_id;
    int16    icmp_seq;
    int8    icmp_data;
}

struct ip_hdr
{
    int8    ip_hlv;
    int8    ip_tos;
    int16    ip_len;
    int16    ip_id;
    int16    ip_off;
    int8    ip_ttl;
    int8    ip_p;
    int16    ip_cksum;
    int32    ip_src;
    int32    ip_dest;
}

struct ICMP_OPTIONS
{
    int8    Ttl;
    int8    Tos;
    int8    Flags;
    int8    OptionsSize;
    int32    OptionsData;
}

struct ICMP_ECHO_REPLY
{
    int32    Address;
    int32    Status;
    int32    RoundTripTime;
    int16    DataSize;
    int16    Reserved;
    int32    DataPointer;
    int32    Options;
    int8[250]  zData;
}
//------------------------------ ToolHelp 32 equates ---------------------
define MAX_MODULE_NAME32()  255
define TH32CS_SNAPHEAPLIST()  1
define TH32CS_SNAPPROCESS()  2
define TH32CS_SNAPTHREAD()  4
define TH32CS_SNAPMODULE()  8
define TH32CS_SNAPALL()  TH32CS_SNAPHEAPLIST + TH32CS_SNAPPROCESS + TH32CS_SNAPTHREAD + TH32CS_SNAPMODULE
define TH32CS_INHERIT()  0x80000000
define HF32_DEFAULT()  1
define HF32_SHARED()  2
define LF32_FIXED()  1
define LF32_FREE()  2
define LF32_MOVEABLE()  4

struct HEAPLIST32
{
    int32      dwSize;
    int32      th32ProcessID;
    int32      th32HeapID;
    int32      dwFlags;
}

struct HEAPENTRY32
{
    int32      dwSize;
    int32      hHandle;
    int32      dwAddress;
    int32      dwBlockSize;
    int32      dwFlags;
    int32      dwLockCount;
    int32      dwResvd;
    int32      th32ProcessID;
    int32      th32HeapID;
}

struct PROCESSENTRY32
{
    int32      dwSize;
    int32      cntUsage;
    int32      th32ProcessID;
    int32      th32DefaultHeapID;
    int32      th32ModuleID;
    int32      cntThreads;
    int32      th32ParentProcessID;
    int32      pcPriClassBase;
    int32      dwFlags;
    int8[MAX_PATH]  szExeFile;
}

struct THREADENTRY32
{
    int32      dwSize;
    int32      cntUsage;
    int32      th32ThreadID;
    int32      th32OwnerProcessID;
    int32      tpBasePri;
    int32      tpDeltaPri;
    int32      dwFlags;
}

struct MODULEENTRY32
{
    int32      dwSize;
    int32      th32ModuleID;
    int32      th32ProcessID;
    int32      GlblcntUsage;
    int32      ProccntUsage;
    int32      modBaseAddr;
    int32      modBaseSize;
    int32      hModule;
    int8[MAX_MODULE_NAME32+1]  szModule;
    int8[MAX_PATH]  szExePath;
}

//--------- These are the equates & structures for property sheets ---------

define MAXPROPPAGES()  100

define LPFNPSPCALLBACK()  LPFNPSPCALLBACKA

define PSP_DEFAULT()  0x00000000
define PSP_DLGINDIRECT()  0x00000001
define PSP_USEDWORD()  0x00000002
define PSP_USEICONID()  0x00000004
define PSP_USETITLE()  0x00000008
define PSP_RTLREADING()  0x00000010

define PSP_HASHELP()  0x00000020
define PSP_USEREFPARENT()  0x00000040
define PSP_USECALLBACK()  0x00000080
define PSP_PREMATURE()  0x00000400

define PSP_HIDEHEADER()  0x00000800
define PSP_USEHEADERTITLE()  0x00001000
define PSP_USEHEADERSUBTITLE()  0x00002000

define PSPCB_RELEASE()  1
define PSPCB_CREATE()  2

struct PROPSHEETPAGEA
{
    int32          dwSize;
    int32          dwFlags;
    int32          hInstance;
    union UNION_PROPSHEETPAGEA
    {
        int32              pszTemplate;
        int32              pResource;
    }
    union UNION_PROPSHEETPAGEA2
    {
        int32              hIcon;
        int32              pszIcon;
    }
    int32          pszTitle;
    int32          pfnDlgProc;
    int32          lParam;
    int32          pfnCallback;
    int32          pcRefParent;
    int32          pszHeaderTitle;
    int32          pszHeaderSubTitle;
}

define PROPSHEETPAGE()  PROPSHEETPAGEA
define LPPROPSHEETPAGE()  LPPROPSHEETPAGEA
define LPCPROPSHEETPAGE()  LPCPROPSHEETPAGEA
define PROPSHEETPAGE_V1_SIZE()  PROPSHEETPAGEA_V1_SIZE

define PSH_DEFAULT()  0x00000000
define PSH_PROPTITLE()  0x00000001
define PSH_USEDWORD()  0x00000002
define PSH_USEICONID()  0x00000004
define PSH_PROPSHEETPAGE()  0x00000008
define PSH_WIZARDHASFINISH()  0x00000010
define PSH_WIZARD()  0x00000020
define PSH_USEPSTARTPAGE()  0x00000040
define PSH_NOAPPLYNOW()  0x00000080
define PSH_USECALLBACK()  0x00000100
define PSH_HASHELP()  0x00000200
define PSH_MODELESS()  0x00000400
define PSH_RTLREADING()  0x00000800
define PSH_WIZARDCONTEXTHELP()  0x00001000
define PSH_WIZARD97()  0x00002000
define PSH_WIZARD97_IE5()  0x01000000
define PSH_WATERMARK()  0x00008000
define PSH_USEHBMWATERMARK()  0x00010000
define PSH_USEHPLWATERMARK()  0x00020000
define PSH_STRETCHWATERMARK()  0x00040000
define PSH_HEADER()  0x00080000
define PSH_USEHBMHEADER()  0x00100000
define PSH_USEPAGELANG()  0x00200000

struct PROPSHEETHEADERA
{
    int32          dwSize;
    int32          dwFlags;
    int32          hwndParent;
    int32          hInstance;
    union UNION_PROPSHEETHEADERA
    {
        int32              hIcon;
        int32              pszIcon;
    }
    int32          pszCaption;
    int32          nPages;
    union UNION_PROPSHEETHEADERA2
    {
        int32              nStartPage;
        int32              pStartPage;
    }
    union UNION_PROPSHEETHEADERA3
    {
        int32              ppsp;
        int32              phpage;
    }
    int32          pfnCallback;
    union UNION_PROPSHEETHEADERA4
    {
        int32              hbmWatermark;
        int32              pszbmWatermark;
    }
    int32          hplWatermark;
    union UNION_PROPSHEETHEADERA5
    {
        int32              hbmHeader;
        int32              pszbmHeader;
    }

}

define PROPSHEETHEADER()  PROPSHEETHEADERA
define LPPROPSHEETHEADER()  LPPROPSHEETHEADERA

define LPCPROPSHEETHEADER()  LPCPROPSHEETHEADERA
define PROPSHEETHEADER_V1_SIZE()  PROPSHEETHEADERA_V1_SIZE

define PSCB_INITIALIZED()  1
define PSCB_PRECREATE()  2

//define CreatePropertySheetPage()  CreatePropertySheetPageA
//define PropertySheet()  PropertySheetA

struct PSHNOTIFY
{
    NMHDR      hdr;
    int32      lParam;
}

define PSN_FIRST()  0-200
define PSN_LAST()  0-299

define PSN_SETACTIVE()  PSN_FIRST-0
define PSN_KILLACTIVE()  PSN_FIRST-1
define PSN_APPLY()  PSN_FIRST-2
define PSN_RESET()  PSN_FIRST-3
define PSN_HELP()  PSN_FIRST-5
define PSN_WIZBACK()  PSN_FIRST-6
define PSN_WIZNEXT()  PSN_FIRST-7
define PSN_WIZFINISH()  PSN_FIRST-8
define PSN_QUERYCANCEL()  PSN_FIRST-9
define PSN_GETOBJECT()  PSN_FIRST-10

define PSNRET_NOERROR()  0
define PSNRET_INVALID()  1
define PSNRET_INVALID_NOCHANGEPAGE()  2


define PSM_SETCURSEL()  WM_USER + 101
define PSM_REMOVEPAGE()  WM_USER + 102
define PSM_ADDPAGE()  WM_USER + 103
define PSM_CHANGED()  WM_USER + 104
define PSM_RESTARTWINDOWS()  WM_USER + 105
define PSM_REBOOTSYSTEM()  WM_USER + 106
define PSM_CANCELTOCLOSE()  WM_USER + 107
define PSM_QUERYSIBLINGS()  WM_USER + 108
define PSM_UNCHANGED()  WM_USER + 109
define PSM_APPLY()  WM_USER + 110
define PSM_SETTITLEA()  WM_USER + 111

define PSM_SETTITLE()  PSM_SETTITLEA
define PSM_SETWIZBUTTONS()  WM_USER + 112

define PSWIZB_BACK()  0x00000001
define PSWIZB_NEXT()  0x00000002
define PSWIZB_FINISH()  0x00000004
define PSWIZB_DISABLEDFINISH()  0x00000008

define PSM_PRESSBUTTON()  WM_USER + 113

define PSBTN_BACK()  0
define PSBTN_NEXT()  1
define PSBTN_FINISH()  2
define PSBTN_OK()  3
define PSBTN_APPLYNOW()  4
define PSBTN_CANCEL()  5
define PSBTN_HELP()  6
define PSBTN_MAX()  6

define PSM_SETCURSELID()  WM_USER + 114

define PSM_SETFINISHTEXTA()  WM_USER + 115

define PSM_SETFINISHTEXT()  PSM_SETFINISHTEXTA

define PSM_GETTABCONTROL()  WM_USER + 116
define PSM_ISDIALOGMESSAGE()  WM_USER + 117
define PSM_GETCURRENTPAGEDWORD()  WM_USER + 118

define ID_PSRESTARTWINDOWS()  2
define ID_PSREBOOTSYSTEM()  ID_PSRESTARTWINDOWS | 1

define WIZ_CXDLG()  276
define WIZ_CYDLG()  140

define WIZ_CXBMP()  80

define WIZ_BODYX()  92
define WIZ_BODYCX()  184

define PROP_SM_CXDLG()  212
define PROP_SM_CYDLG()  188

define PROP_MED_CXDLG()  227
define PROP_MED_CYDLG()  215

define PROP_LG_CXDLG()  252
define PROP_LG_CYDLG()  218

// --------------------- equates & structures for WINNT ---------------------

define MAX_NATURAL_ALIGNMENT()  sizeof int32
define LANG_AFRIKAANS()  0x36
define LANG_ALBANIAN()  0x1c
define LANG_ARABIC()  0x01
define LANG_ARMENIAN()  0x2b
define LANG_ASSAMESE()  0x4d
define LANG_AZERI()  0x2c
define LANG_BASQUE()  0x2d
define LANG_BELARUSIAN()  0x23
define LANG_BENGALI()  0x45
define LANG_CATALAN()  0x03
define LANG_ESTONIAN()  0x25
define LANG_FAEROESE()  0x38
define LANG_FARSI()  0x29
define LANG_GEORGIAN()  0x37
define LANG_GUJARATI()  0x47
define LANG_HEBREW()  0x0d
define LANG_HINDI()  0x39
define LANG_INDONESIAN()  0x21
define LANG_KANNADA()  0x4b
define LANG_KASHMIRI()  0x60
define LANG_KAZAK()  0x3f
define LANG_KONKANI()  0x57
define LANG_LATVIAN()  0x26
define LANG_LITHUANIAN()  0x27
define LANG_MACEDONIAN()  0x2f
define LANG_MALAY()  0x3e
define LANG_MALAYALAM()  0x4c
define LANG_MANIPURI()  0x58
define LANG_MARATHI()  0x4e
define LANG_NEPALI()  0x61
define LANG_ORIYA()  0x48
define LANG_PUNJABI()  0x46
define LANG_SANSKRIT()  0x4f
define LANG_SERBIAN()  0x1a
define LANG_SINDHI()  0x59
define LANG_SWAHILI()  0x41
define LANG_TAMIL()  0x49
define LANG_TATAR()  0x44
define LANG_TELUGU()  0x4a
define LANG_THAI()  0x1e
define LANG_UKRAINIAN()  0x22
define LANG_URDU()  0x20
define LANG_UZBEK()  0x43
define LANG_VIETNAMESE()  0x2a
define SUBLANG_ARABIC_SAUDI_ARABIA()  0x01
define SUBLANG_ARABIC_IRAQ()  0x02
define SUBLANG_ARABIC_EGYPT()  0x03
define SUBLANG_ARABIC_LIBYA()  0x04
define SUBLANG_ARABIC_ALGERIA()  0x05
define SUBLANG_ARABIC_MOROCCO()  0x06
define SUBLANG_ARABIC_TUNISIA()  0x07
define SUBLANG_ARABIC_OMAN()  0x08
define SUBLANG_ARABIC_YEMEN()  0x09
define SUBLANG_ARABIC_SYRIA()  0x0a
define SUBLANG_ARABIC_JORDAN()  0x0b
define SUBLANG_ARABIC_LEBANON()  0x0c
define SUBLANG_ARABIC_KUWAIT()  0x0d
define SUBLANG_ARABIC_UAE()  0x0e
define SUBLANG_ARABIC_BAHRAIN()  0x0f
define SUBLANG_ARABIC_QATAR()  0x10
define SUBLANG_AZERI_LATIN()  0x01
define SUBLANG_AZERI_CYRILLIC()  0x02
define SUBLANG_CHINESE_MACAU()  0x05
define SUBLANG_ENGLISH_SOUTH_AFRICA()  0x07
define SUBLANG_ENGLISH_JAMAICA()  0x08
define SUBLANG_ENGLISH_CARIBBEAN()  0x09
define SUBLANG_ENGLISH_BELIZE()  0x0a
define SUBLANG_ENGLISH_TRINIDAD()  0x0b
define SUBLANG_ENGLISH_ZIMBABWE()  0x0c
define SUBLANG_ENGLISH_PHILIPPINES()  0x0d
define SUBLANG_FRENCH_LUXEMBOURG()  0x05
define SUBLANG_FRENCH_MONACO()  0x06
define SUBLANG_GERMAN_LUXEMBOURG()  0x04
define SUBLANG_GERMAN_LIECHTENSTEIN()  0x05
define SUBLANG_KASHMIRI_INDIA()  0x02
define SUBLANG_KOREAN()  0x01
define SUBLANG_LITHUANIAN()  0x01
define SUBLANG_LITHUANIAN_CLASSIC()  0x02
define SUBLANG_MALAY_MALAYSIA()  0x01
define SUBLANG_MALAY_BRUNEI_DARUSSALAM()  0x02
define SUBLANG_NEPALI_INDIA()  0x02
define SUBLANG_SERBIAN_LATIN()  0x02
define SUBLANG_SERBIAN_CYRILLIC()  0x03
define SUBLANG_SPANISH_GUATEMALA()  0x04
define SUBLANG_SPANISH_COSTA_RICA()  0x05
define SUBLANG_SPANISH_PANAMA()  0x06
define SUBLANG_SPANISH_DOMINICAN_REPUBLIC()  0x07
define SUBLANG_SPANISH_VENEZUELA()  0x08
define SUBLANG_SPANISH_COLOMBIA()  0x09
define SUBLANG_SPANISH_PERU()  0x0a
define SUBLANG_SPANISH_ARGENTINA()  0x0b
define SUBLANG_SPANISH_ECUADOR()  0x0c
define SUBLANG_SPANISH_CHILE()  0x0d
define SUBLANG_SPANISH_URUGUAY()  0x0e
define SUBLANG_SPANISH_PARAGUAY()  0x0f
define SUBLANG_SPANISH_BOLIVIA()  0x10
define SUBLANG_SPANISH_EL_SALVADOR()  0x11
define SUBLANG_SPANISH_HONDURAS()  0x12
define SUBLANG_SPANISH_NICARAGUA()  0x13
define SUBLANG_SPANISH_PUERTO_RICO()  0x14
define SUBLANG_SWEDISH()  0x01
define SUBLANG_SWEDISH_FINLAND()  0x02
define SUBLANG_URDU_PAKISTAN()  0x01
define SUBLANG_URDU_INDIA()  0x02
define SUBLANG_UZBEK_LATIN()  0x01
define SUBLANG_UZBEK_CYRILLIC()  0x02
define SORT_CHINESE_PRCP()  0x0
define SORT_CHINESE_PRC()  0x2
define SORT_CHINESE_BOPOMOFO()  0x3
define SORT_GERMAN_PHONE_BOOK()  0x1
define SORT_HUNGARIAN_DEFAULT()  0x0
define SORT_HUNGARIAN_TECHNICAL()  0x1
define SORT_GEORGIAN_TRADITIONAL()  0x0
define SORT_GEORGIAN_MODERN()  0x1
define NLS_VALID_LOCALE_MASK()  0x000fffff
define STATUS_SEGMENT_NOTIFICATION()  0x40000005
define STATUS_GUARD_PAGE_VIOLATION()  0x80000001
define STATUS_INVALID_HANDLE()  0x0C0000008
define STATUS_FLOAT_MULTIPLE_FAULTS()  0x0C00002B4
define STATUS_FLOAT_MULTIPLE_TRAPS()  0x0C00002B5
define STATUS_ILLEGAL_VLM_REFERENCE()  0x0C00002C0
define MAXIMUM_WAIT_OBJECTS()  64
define MAXIMUM_SUSPEND_COUNT()  MAXCHAR
define CONTEXT_EXTENDED_REGISTERS()  (CONTEXT_i386 + 0x00000020)
define SECURITY_NULL_SID_AUTHORITY() {0,0,0,0,0,0}
define SECURITY_WORLD_SID_AUTHORITY() { 0,0,0,0,0,1}
define SECURITY_LOCAL_SID_AUTHORITY() {0,0,0,0,0,2}
define SECURITY_CREATOR_SID_AUTHORITY() {0,0,0,0,0,3}
define SECURITY_NON_UNIQUE_AUTHORITY() {0,0,0,0,0,4}
define SECURITY_CREATOR_OWNER_SERVER_RID()  (0x00000002)
define SECURITY_CREATOR_GROUP_SERVER_RID()  (0x00000003)
define SECURITY_NT_AUTHORITY() {0,0,0,0,0,5}
define SECURITY_PROXY_RID()  (0x00000008)
define SECURITY_ENTERPRISE_CONTROLLERS_RID()  (0x00000009)
define SECURITY_SERVER_LOGON_RID()  SECURITY_ENTERPRISE_CONTROLLERS_RID
define SECURITY_PRINCIPAL_SELF_RID()  (0x0000000A)
define SECURITY_AUTHENTICATED_USER_RID()  (0x0000000B)
define SECURITY_RESTRICTED_CODE_RID()  (0x0000000C)
define SECURITY_LOGON_IDS_RID_COUNT()  (3)
define DOMAIN_USER_RID_KRBTGT()  (0x000001F6)
define DOMAIN_GROUP_RID_COMPUTERS()  (0x00000203)
define DOMAIN_GROUP_RID_CONTROLLERS()  (0x00000204)
define DOMAIN_GROUP_RID_CERT_ADMINS()  (0x00000205)
define DOMAIN_GROUP_RID_SCHEMA_ADMINS()  (0x00000206)
define SYSTEM_LUID() {0x3E7, 0x0}
define ANONYMOUS_LOGON_LUID() {0x3e6, 0x0}
define SE_GROUP_USE_FOR_DENY_ONLY()  (0x00000010)
define ACL_REVISION_DS()  (4)
define MIN_ACL_REVISION()  ACL_REVISION2
define ACL_REVISION3()  (3)
define ACL_REVISION4()  (4)
define MAX_ACL_REVISION()  ACL_REVISION4
define ACCESS_MIN_MS_ACE_TYPE()  (0x0)
define ACCESS_MAX_MS_V2_ACE_TYPE()  (0x3)
define ACCESS_ALLOWED_COMPOUND_ACE_TYPE()  (0x4)
define ACCESS_MAX_MS_V3_ACE_TYPE()  (0x4)
define ACCESS_MIN_MS_OBJECT_ACE_TYPE()  (0x5)
define ACCESS_ALLOWED_OBJECT_ACE_TYPE()  (0x5)
define ACCESS_DENIED_OBJECT_ACE_TYPE()  (0x6)
define SYSTEM_AUDIT_OBJECT_ACE_TYPE()  (0x7)
define SYSTEM_ALARM_OBJECT_ACE_TYPE()  (0x8)
define ACCESS_MAX_MS_OBJECT_ACE_TYPE()  (0x8)
define ACCESS_MAX_MS_V4_ACE_TYPE()  (0x8)
define ACCESS_MAX_MS_ACE_TYPE()  (0x8)
define INHERITED_ACE()  (0x10)
define ACE_OBJECT_TYPE_PRESENT()  0x1
define ACE_INHERITED_OBJECT_TYPE_PRESENT()  0x2
define SE_DACL_AUTO_INHERIT_REQ()  (0x0100)
define SE_SACL_AUTO_INHERIT_REQ()  (0x0200)
define SE_DACL_AUTO_INHERITED()  (0x0400)
define SE_SACL_AUTO_INHERITED()  (0x0800)
define SE_DACL_PROTECTED()  (0x1000)
define SE_SACL_PROTECTED()  (0x2000)
define ACCESS_OBJECT_GUID()  0
define ACCESS_PROPERTY_SET_GUID()  1
define ACCESS_PROPERTY_GUID()  2
define ACCESS_MAX_LEVEL()  4
define AUDIT_ALLOW_NO_PRIVILEGE()  0x1
define ACCESS_DS_SOURCE_A()  "DS"
define ACCESS_DS_OBJECT_TYPE_NAME_A()  "Directory Service Object"
define SE_CREATE_TOKEN_NAME()  "SeCreateTokenPrivilege"
define SE_ASSIGNPRIMARYTOKEN_NAME()  "SeAssignPrimaryTokenPrivilege"
define SE_LOCK_MEMORY_NAME()  "SeLockMemoryPrivilege"
define SE_INCREASE_QUOTA_NAME()  ("SeIncreaseQuotaPrivilege")
define SE_UNSOLICITED_INPUT_NAME()  ("SeUnsolicitedInputPrivilege")
define SE_MACHINE_ACCOUNT_NAME()  ("SeMachineAccountPrivilege")
define SE_TCB_NAME()  ("SeTcbPrivilege")
define SE_SECURITY_NAME()  ("SeSecurityPrivilege")
define SE_TAKE_OWNERSHIP_NAME()  ("SeTakeOwnershipPrivilege")
define SE_LOAD_DRIVER_NAME()  ("SeLoadDriverPrivilege")
define SE_SYSTEM_PROFILE_NAME()  ("SeSystemProfilePrivilege")
define SE_SYSTEMTIME_NAME()  ("SeSystemtimePrivilege")
define SE_PROF_SINGLE_PROCESS_NAME()  ("SeProfileSingleProcessPrivilege")
define SE_INC_BASE_PRIORITY_NAME()  ("SeIncreaseBasePriorityPrivilege")
define SE_CREATE_PAGEFILE_NAME()  ("SeCreatePagefilePrivilege")
define SE_CREATE_PERMANENT_NAME()  ("SeCreatePermanentPrivilege")
define SE_BACKUP_NAME()  ("SeBackupPrivilege")
define SE_RESTORE_NAME()  ("SeRestorePrivilege")
define SE_SHUTDOWN_NAME()  ("SeShutdownPrivilege")
define SE_DEBUG_NAME()  ("SeDebugPrivilege")
define SE_AUDIT_NAME()  ("SeAuditPrivilege")
define SE_SYSTEM_ENVIRONMENT_NAME()  ("SeSystemEnvironmentPrivilege")
define SE_CHANGE_NOTIFY_NAME()  ("SeChangeNotifyPrivilege")
define SE_REMOTE_SHUTDOWN_NAME()  ("SeRemoteShutdownPrivilege")
define TOKEN_ASSIGN_PRIMARY()  (0x0001)
define TOKEN_DUPLICATE()  (0x0002)
define TOKEN_IMPERSONATE()  (0x0004)
define TOKEN_QUERY()  (0x0008)
define TOKEN_QUERY_SOURCE()  (0x0010)
define TOKEN_ADJUST_GROUPS()  (0x0040)
define TOKEN_ADJUST_DEFAULT()  (0x0080)
define TOKEN_ADJUST_SESSIONID()  (0x0100)
define TOKEN_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+TOKEN_ASSIGN_PRIMARY+TOKEN_DUPLICATE+ ...
                       TOKEN_IMPERSONATE+TOKEN_QUERY+TOKEN_QUERY_SOURCE+ ...
                       TOKEN_ADJUST_PRIVILEGES+TOKEN_ADJUST_GROUPS+TOKEN_ADJUST_SESSIONID+ ...
                       TOKEN_ADJUST_DEFAULT)
define TOKEN_READ()  (STANDARD_RIGHTS_READ+TOKEN_QUERY)
define TOKEN_WRITE()  (STANDARD_RIGHTS_WRITE+TOKEN_ADJUST_PRIVILEGES+TOKEN_ADJUST_GROUPS+TOKEN_ADJUST_DEFAULT)
define TOKEN_EXECUTE()  (STANDARD_RIGHTS_EXECUTE)
define TOKEN_SOURCE_LENGTH()  8
define SECURITY_DYNAMIC_TRACKING()  TRUE
define SECURITY_STATIC_TRACKING()  FALSE
define OWNER_SECURITY_INFORMATION()  (0x00000001)
define GROUP_SECURITY_INFORMATION()  (0x00000002)
define DACL_SECURITY_INFORMATION()  (0x00000004)
define SACL_SECURITY_INFORMATION()  (0x00000008)
define PROCESS_TERMINATE()  (0x0001)
define PROCESS_CREATE_THREAD()  (0x0002)
define PROCESS_SET_SESSIONID()  (0x0004)
define PROCESS_VM_OPERATION()  (0x0008)
define PROCESS_VM_READ()  (0x0010)
define PROCESS_VM_WRITE()  (0x0020)
define PROCESS_DUP_HANDLE()  (0x0040)
define PROCESS_CREATE_PROCESS()  (0x0080)
define PROCESS_SET_QUOTA()  (0x0100)
define PROCESS_SET_INFORMATION()  (0x0200)
define PROCESS_QUERY_INFORMATION()  (0x0400)
define PROCESS_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE + 0x0FFF)
define MAXIMUM_PROCESSORS()  32
define THREAD_TERMINATE()  (0x0001)
define THREAD_SUSPEND_RESUME()  (0x0002)
define THREAD_GET_CONTEXT()  (0x0008)
define THREAD_SET_CONTEXT()  (0x0010)
define THREAD_SET_INFORMATION()  (0x0020)
define THREAD_QUERY_INFORMATION()  (0x0040)
define THREAD_SET_THREAD_TOKEN()  (0x0080)
define THREAD_IMPERSONATE()  (0x0100)
define THREAD_DIRECT_IMPERSONATION()  (0x0200)
define THREAD_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE +  0x3FF)

define JOB_OBJECT_ASSIGN_PROCESS()  (0x0001)
define JOB_OBJECT_SET_ATTRIBUTES()  (0x0002)
define JOB_OBJECT_QUERY()  (0x0004)
define JOB_OBJECT_TERMINATE()  (0x0008)
define JOB_OBJECT_SET_SECURITY_ATTRIBUTES()  (0x0010)
define JOB_OBJECT_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED + SYNCHRONIZE +   0x1F )

define TLS_MINIMUM_AVAILABLE()  64
define EVENT_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+0x3)
define MUTANT_QUERY_STATE()  0x0001
define MUTANT_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+ MUTANT_QUERY_STATE)
define SEMAPHORE_MODIFY_STATE()  0x0002
define SEMAPHORE_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+0x3)
define TIMER_QUERY_STATE()  0x0001
define TIMER_MODIFY_STATE()  0x0002
define TIMER_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+TIMER_QUERY_STATE+TIMER_MODIFY_STATE)
define TIME_ZONE_ID_UNKNOWN()  0
define TIME_ZONE_ID_STANDARD()  1
define TIME_ZONE_ID_DAYLIGHT()  2
define PROCESSOR_PPC_601()  601
define PROCESSOR_PPC_603()  603
define PROCESSOR_PPC_604()  604
define PROCESSOR_PPC_620()  620
define PROCESSOR_HITACHI_SH3()  10003
define PROCESSOR_HITACHI_SH3E()  10004
define PROCESSOR_HITACHI_SH4()  10005
define PROCESSOR_MOTOROLA_821()  821
define PROCESSOR_SHx_SH3()  103
define PROCESSOR_SHx_SH4()  104
define PROCESSOR_STRONGARM()  2577
define PROCESSOR_ARM720()  1824
define PROCESSOR_ARM820()  2080
define PROCESSOR_ARM920()  2336
define PROCESSOR_ARM_7TDMI()  70001
define PROCESSOR_ARCHITECTURE_INTEL()  0
define PROCESSOR_ARCHITECTURE_MIPS()  1
define PROCESSOR_ARCHITECTURE_ALPHA()  2
define PROCESSOR_ARCHITECTURE_PPC()  3
define PROCESSOR_ARCHITECTURE_SHX()  4
define PROCESSOR_ARCHITECTURE_ARM()  5
define PROCESSOR_ARCHITECTURE_IA64()  6
define PROCESSOR_ARCHITECTURE_ALPHA64()  7
define PROCESSOR_ARCHITECTURE_UNKNOWN()  0x0FFFF
define PF_FLOATING_POINT_PRECISION_ERRATA()  0
define PF_FLOATING_POINT_EMULATED()  1
define PF_COMPARE_EXCHANGE_DOUBLE()  2
define PF_MMX_INSTRUCTIONS_AVAILABLE()  3
define PF_PPC_MOVEMEM_64BIT_OK()  4
define PF_ALPHA_BYTE_INSTRUCTIONS()  5
define PF_XMMI_INSTRUCTIONS_AVAILABLE()  6
define PF_AMD3D_INSTRUCTIONS_AVAILABLE()  7
define SYSTEM_FLAG_REMOTE_BOOT_CLIENT()  0x00000001
define SYSTEM_FLAG_DISKLESS_CLIENT()  0x00000002
define PAGE_WRITECOMBINE()  0x400
define MEM_4MB_PAGES()  0x80000000
define SEC_VLM()  0x2000000

/*------------------ 前面已经有定义-----------------------

define SECTION_ALL_ACCESS()  (STANDARD_RIGHTS_REQUIRED+SECTION_QUERY+ ...
                         SECTION_MAP_WRITE + ...
                         SECTION_MAP_READ + ...
                         SECTION_MAP_EXECUTE + ...
                         SECTION_EXTEND_SIZE)

define FILE_GENERIC_READ()  (STANDARD_RIGHTS_READ     + ...
                        FILE_READ_DATA           + ...
                        FILE_READ_ATTRIBUTES     + ...
                        FILE_READ_EA             + ...
                        SYNCHRONIZE)
define FILE_GENERIC_WRITE()  (STANDARD_RIGHTS_WRITE    + ...
                         FILE_WRITE_DATA          + ...
                         FILE_WRITE_ATTRIBUTES    + ...
                         FILE_WRITE_EA            + ...
                         FILE_APPEND_DATA         + ...
                         SYNCHRONIZE)
define FILE_GENERIC_EXECUTE()  (STANDARD_RIGHTS_EXECUTE  + ...
                           FILE_READ_ATTRIBUTES     + ...
                           FILE_EXECUTE             + ...
                           SYNCHRONIZE)

------------------------------------------------------*/

define FILE_SHARE_DELETE()  0x00000004
define FILE_ATTRIBUTE_ENCRYPTED()  0x00000040
define FILE_ATTRIBUTE_SPARSE_FILE()  0x00000200
define FILE_ATTRIBUTE_REPARSE_POINT()  0x00000400
define FILE_ATTRIBUTE_OFFLINE()  0x00001000
define FILE_ATTRIBUTE_NOT_CONTENT_INDEXED()  0x00002000
define FILE_NOTIFY_CHANGE_LAST_ACCESS()  0x00000020
define FILE_NOTIFY_CHANGE_CREATION()  0x00000040
define FILE_ACTION_ADDED()  0x00000001
define FILE_ACTION_REMOVED()  0x00000002
define FILE_ACTION_MODIFIED()  0x00000003
define FILE_ACTION_RENAMED_OLD_NAME()  0x00000004
define FILE_ACTION_RENAMED_NEW_NAME()  0x00000005
define FILE_VOLUME_QUOTAS()  0x00000020
define FILE_SUPPORTS_SPARSE_FILES()  0x00000040
define FILE_SUPPORTS_REPARSE_POINTS()  0x00000080
define FILE_SUPPORTS_REMOTE_STORAGE()  0x00000100
define FILE_SUPPORTS_OBJECT_IDS()  0x00010000
define FILE_SUPPORTS_ENCRYPTION()  0x00020000
define MAXIMUM_REPARSE_DATA_BUFFER_SIZE()  ( 16 * 1024 )
define IO_REPARSE_TAG_RESERVED_ZERO()  (0)
define IO_REPARSE_TAG_RESERVED_ONE()  (1)
define IO_REPARSE_TAG_RESERVED_RANGE()  IO_REPARSE_TAG_RESERVED_ONE
define IO_REPARSE_TAG_VALID_VALUES()  (0x0E000FFFF)
define IO_REPARSE_TAG_SYMBOLIC_LINK()  IO_REPARSE_TAG_RESERVED_ZERO
define IO_REPARSE_TAG_MOUNT_POINT()  (0x0A0000003)
define IO_REPARSE_TAG_HSM()  (0x0C0000004)
define IO_REPARSE_TAG_NSS()  (0x80000005)
define IO_REPARSE_TAG_NSSRECOVER()  (0x80000006)
define IO_REPARSE_TAG_SIS()  (0x80000007)
define IO_REPARSE_TAG_DFS()  (0x80000008)
define ES_SYSTEM_REQUIRED()  (0x00000001)
define ES_DISPLAY_REQUIRED()  (0x00000002)
define ES_USER_PRESENT()  (0x00000004)
define ES_CONTINUOUS()  (0x800000000)
define IMAGE_DOS_SIGNATURE()  0x5A4D
define IMAGE_OS2_SIGNATURE()  0x454E
define IMAGE_OS2_SIGNATURE_LE()  0x454C
define IMAGE_VXD_SIGNATURE()  0x454C
define IMAGE_NT_SIGNATURE()  0x00004550
define IMAGE_SIZEOF_FILE_HEADER()  20
define IMAGE_FILE_RELOCS_STRIPPED()  0x0001
define IMAGE_FILE_EXECUTABLE_IMAGE()  0x0002
define IMAGE_FILE_LINE_NUMS_STRIPPED()  0x0004
define IMAGE_FILE_LOCAL_SYMS_STRIPPED()  0x0008
define IMAGE_FILE_AGGRESIVE_WS_TRIM()  0x0010
define IMAGE_FILE_LARGE_ADDRESS_AWARE()  0x0020
define IMAGE_FILE_BYTES_REVERSED_LO()  0x0080
define IMAGE_FILE_32BIT_MACHINE()  0x0100
define IMAGE_FILE_DEBUG_STRIPPED()  0x0200
define IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP()  0x0400
define IMAGE_FILE_NET_RUN_FROM_SWAP()  0x0800
define IMAGE_FILE_SYSTEM()  0x1000
define IMAGE_FILE_DLL()  0x2000
define IMAGE_FILE_UP_SYSTEM_ONLY()  0x4000
define IMAGE_FILE_BYTES_REVERSED_HI()  0x8000
define IMAGE_FILE_MACHINE_UNKNOWN()  0
define IMAGE_FILE_MACHINE_I386()  0x014c
define IMAGE_FILE_MACHINE_R3000()  0x0162
define IMAGE_FILE_MACHINE_R4000()  0x0166
define IMAGE_FILE_MACHINE_R10000()  0x0168
define IMAGE_FILE_MACHINE_WCEMIPSV2()  0x0169
define IMAGE_FILE_MACHINE_ALPHA()  0x0184
define IMAGE_FILE_MACHINE_POWERPC()  0x01F0
define IMAGE_FILE_MACHINE_SH3()  0x01a2
define IMAGE_FILE_MACHINE_SH3E()  0x01a4
define IMAGE_FILE_MACHINE_SH4()  0x01a6
define IMAGE_FILE_MACHINE_ARM()  0x01c0
define IMAGE_FILE_MACHINE_THUMB()  0x01c2
define IMAGE_FILE_MACHINE_IA64()  0x0200
define IMAGE_FILE_MACHINE_MIPS16()  0x0266
define IMAGE_FILE_MACHINE_MIPSFPU()  0x0366
define IMAGE_FILE_MACHINE_MIPSFPU16()  0x0466
define IMAGE_FILE_MACHINE_ALPHA64()  0x0284
define IMAGE_FILE_MACHINE_AXP64()  IMAGE_FILE_MACHINE_ALPHA64
define IMAGE_SIZEOF_ROM_OPTIONAL_HEADER()  56
define IMAGE_SIZEOF_STD_OPTIONAL_HEADER()  28
define IMAGE_SIZEOF_NT_OPTIONAL32_HEADER()  224
define IMAGE_SIZEOF_NT_OPTIONAL64_HEADER()  240
define IMAGE_NT_OPTIONAL_HDR32_MAGIC()  0x10b
define IMAGE_NT_OPTIONAL_HDR64_MAGIC()  0x20b
define IMAGE_ROM_OPTIONAL_HDR_MAGIC()  0x107
define IMAGE_SUBSYSTEM_UNKNOWN()  0
define IMAGE_SUBSYSTEM_NATIVE()  1
define IMAGE_SUBSYSTEM_WINDOWS_GUI()  2
define IMAGE_SUBSYSTEM_WINDOWS_CUI()  3
define IMAGE_SUBSYSTEM_OS2_CUI()  5
define IMAGE_SUBSYSTEM_POSIX_CUI()  7
define IMAGE_SUBSYSTEM_NATIVE_WINDOWS()  8
define IMAGE_SUBSYSTEM_WINDOWS_CE_GUI()  9
define IMAGE_DLLCHARACTERISTICS_WDM_DRIVER()  0x2000
//define IMAGE_DIRECTORY_ENTRY_EXPORT()  0
define IMAGE_DIRECTORY_ENTRY_ARCHITECTURE()  7
define IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT()  13
define IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR()  14
define IMAGE_SIZEOF_SHORT_NAME()  8
define IMAGE_SCN_TYPE_NO_PAD()  0x00000008
define IMAGE_SCN_CNT_CODE()  0x00000020
define IMAGE_SCN_CNT_INITIALIZED_DATA()  0x00000040
define IMAGE_SCN_CNT_UNINITIALIZED_DATA()  0x00000080
define IMAGE_SCN_LNK_OTHER()  0x00000100
define IMAGE_SCN_LNK_INFO()  0x00000200
define IMAGE_SCN_LNK_REMOVE()  0x00000800
define IMAGE_SCN_LNK_COMDAT()  0x00001000
define IMAGE_SCN_NO_DEFER_SPEC_EXC()  0x00004000
define IMAGE_SCN_GPREL()  0x00008000
define IMAGE_SCN_MEM_FARDATA()  0x00008000
define IMAGE_SCN_MEM_PURGEABLE()  0x00020000
define IMAGE_SCN_MEM_16BIT()  0x00020000
define IMAGE_SCN_MEM_LOCKED()  0x00040000
define IMAGE_SCN_MEM_PRELOAD()  0x00080000
define IMAGE_SCN_ALIGN_1BYTES()  0x00100000
define IMAGE_SCN_ALIGN_2BYTES()  0x00200000
define IMAGE_SCN_ALIGN_4BYTES()  0x00300000
define IMAGE_SCN_ALIGN_8BYTES()  0x00400000
define IMAGE_SCN_ALIGN_16BYTES()  0x00500000
define IMAGE_SCN_ALIGN_32BYTES()  0x00600000
define IMAGE_SCN_ALIGN_64BYTES()  0x00700000
define IMAGE_SCN_ALIGN_128BYTES()  0x00800000
define IMAGE_SCN_ALIGN_256BYTES()  0x00900000
define IMAGE_SCN_ALIGN_512BYTES()  0x00A00000
define IMAGE_SCN_ALIGN_1024BYTES()  0x00B00000
define IMAGE_SCN_ALIGN_2048BYTES()  0x00C00000
define IMAGE_SCN_ALIGN_4096BYTES()  0x00D00000
define IMAGE_SCN_ALIGN_8192BYTES()  0x00E00000
define IMAGE_SCN_LNK_NRELOC_OVFL()  0x01000000
define IMAGE_SCN_MEM_DISCARDABLE()  0x02000000
define IMAGE_SCN_MEM_NOT_CACHED()  0x04000000
define IMAGE_SCN_MEM_NOT_PAGED()  0x08000000
define IMAGE_SCN_MEM_SHARED()  0x10000000
define IMAGE_SCN_MEM_EXECUTE()  0x20000000
define IMAGE_SCN_MEM_READ()  0x40000000
define IMAGE_SCN_MEM_WRITE()  0x80000000
define IMAGE_SCN_SCALE_INDEX()  0x00000001
define IMAGE_SIZEOF_SYMBOL()  18
define IMAGE_SYM_UNDEFINED()  0
define IMAGE_SYM_ABSOLUTE()  -1
define IMAGE_SYM_DEBUG()  -2
define IMAGE_SYM_TYPE_NULL()  0x0000
define IMAGE_SYM_TYPE_VOID()  0x0001
define IMAGE_SYM_TYPE_CHAR()  0x0002
define IMAGE_SYM_TYPE_SHORT()  0x0003
define IMAGE_SYM_TYPE_INT()  0x0004
define IMAGE_SYM_TYPE_LONG()  0x0005
define IMAGE_SYM_TYPE_FLOAT()  0x0006
define IMAGE_SYM_TYPE_DOUBLE()  0x0007
define IMAGE_SYM_TYPE_STRUCT()  0x0008
define IMAGE_SYM_TYPE_UNION()  0x0009
define IMAGE_SYM_TYPE_ENUM()  0x000A
define IMAGE_SYM_TYPE_MOE()  0x000B
define IMAGE_SYM_TYPE_BYTE()  0x000C
define IMAGE_SYM_TYPE_WORD()  0x000D
define IMAGE_SYM_TYPE_UINT()  0x000E
define IMAGE_SYM_TYPE_DWORD()  0x000F
define IMAGE_SYM_TYPE_PCODE()  0x8000
define IMAGE_SYM_DTYPE_NULL()  0
define IMAGE_SYM_DTYPE_POINTER()  1
define IMAGE_SYM_DTYPE_FUNCTION()  2
define IMAGE_SYM_DTYPE_ARRAY()  3
define IMAGE_SYM_CLASS_END_OF_FUNCTION()  -1
define IMAGE_SYM_CLASS_NULL()  0x0000
define IMAGE_SYM_CLASS_AUTOMATIC()  0x0001
define IMAGE_SYM_CLASS_EXTERNAL()  0x0002
define IMAGE_SYM_CLASS_STATIC()  0x0003
define IMAGE_SYM_CLASS_REGISTER()  0x0004
define IMAGE_SYM_CLASS_EXTERNAL_DEF()  0x0005
define IMAGE_SYM_CLASS_LABEL()  0x0006
define IMAGE_SYM_CLASS_UNDEFINED_LABEL()  0x0007
define IMAGE_SYM_CLASS_MEMBER_OF_STRUCT()  0x0008
define IMAGE_SYM_CLASS_ARGUMENT()  0x0009
define IMAGE_SYM_CLASS_STRUCT_TAG()  0x000A
define IMAGE_SYM_CLASS_MEMBER_OF_UNION()  0x000B
define IMAGE_SYM_CLASS_UNION_TAG()  0x000C
define IMAGE_SYM_CLASS_TYPE_DEFINITION()  0x000D
define IMAGE_SYM_CLASS_UNDEFINED_STATIC()  0x000E
define IMAGE_SYM_CLASS_ENUM_TAG()  0x000F
define IMAGE_SYM_CLASS_MEMBER_OF_ENUM()  0x0010
define IMAGE_SYM_CLASS_REGISTER_PARAM()  0x0011
define IMAGE_SYM_CLASS_BIT_FIELD()  0x0012
define IMAGE_SYM_CLASS_FAR_EXTERNAL()  0x0044
define IMAGE_SYM_CLASS_BLOCK()  0x0064
define IMAGE_SYM_CLASS_FUNCTION()  0x0065
define IMAGE_SYM_CLASS_END_OF_STRUCT()  0x0066
define IMAGE_SYM_CLASS_FILE()  0x0067
define IMAGE_SYM_CLASS_SECTION()  0x0068
define IMAGE_SYM_CLASS_WEAK_EXTERNAL()  0x0069
define N_BTMASK()  0x000F
define N_TMASK()  0x0030
define N_TMASK1()  0x00C0
define N_TMASK2()  0x00F0
define N_BTSHFT()  4
define N_TSHIFT()  2
define IMAGE_SIZEOF_AUX_SYMBOL()  18
define IMAGE_COMDAT_SELECT_NODUPLICATES()  1
define IMAGE_COMDAT_SELECT_ANY()  2
define IMAGE_COMDAT_SELECT_SAME_SIZE()  3
define IMAGE_COMDAT_SELECT_EXACT_MATCH()  4
define IMAGE_COMDAT_SELECT_ASSOCIATIVE()  5
define IMAGE_COMDAT_SELECT_LARGEST()  6
define IMAGE_COMDAT_SELECT_NEWEST()  7
define IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY()  1
define IMAGE_WEAK_EXTERN_SEARCH_LIBRARY()  2
define IMAGE_WEAK_EXTERN_SEARCH_ALIAS()  3
define IMAGE_SIZEOF_RELOCATION()  10
define IMAGE_REL_I386_ABSOLUTE()  0x0000
define IMAGE_REL_I386_DIR16()  0x0001
define IMAGE_REL_I386_REL16()  0x0002
define IMAGE_REL_I386_DIR32()  0x0006
define IMAGE_REL_I386_DIR32NB()  0x0007
define IMAGE_REL_I386_SEG12()  0x0009
define IMAGE_REL_I386_SECTION()  0x000A
define IMAGE_REL_I386_SECREL()  0x000B
define IMAGE_REL_I386_REL32()  0x0014
define IMAGE_SIZEOF_LINENUMBER()  6
define IMAGE_SIZEOF_BASE_RELOCATION()  8
define IMAGE_REL_BASED_ABSOLUTE()  0
define IMAGE_REL_BASED_HIGH()  1
define IMAGE_REL_BASED_LOW()  2
define IMAGE_REL_BASED_HIGHLOW()  3
define IMAGE_REL_BASED_HIGHADJ()  4
define IMAGE_REL_BASED_MIPS_JMPADDR()  5
define IMAGE_REL_BASED_SECTION()  6
define IMAGE_REL_BASED_REL32()  7
define IMAGE_REL_BASED_MIPS_JMPADDR16()  9
define IMAGE_REL_BASED_IA64_IMM64()  9
define IMAGE_REL_BASED_DIR64()  10
define IMAGE_REL_BASED_HIGH3ADJ()  11
define IMAGE_ARCHIVE_START_SIZE()  8
define IMAGE_ARCHIVE_START()  "! arch ",10
define IMAGE_ARCHIVE_END()  "`",10
define IMAGE_ARCHIVE_PAD()  10
define IMAGE_ARCHIVE_LINKER_MEMBER()  "/               "
define IMAGE_ARCHIVE_LONGNAMES_MEMBER()  "//              "
define IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR()  60
define IMAGE_ORDINAL_FLAG32()  0x80000000
define IMAGE_RESOURCE_NAME_IS_STRING()  0x80000000
define IMAGE_RESOURCE_DATA_IS_DIRECTORY()  0x80000000
define IMAGE_DEBUG_TYPE_UNKNOWN()  0
define IMAGE_DEBUG_TYPE_COFF()  1
define IMAGE_DEBUG_TYPE_CODEVIEW()  2
define IMAGE_DEBUG_TYPE_FPO()  3
define IMAGE_DEBUG_TYPE_MISC()  4
define IMAGE_DEBUG_TYPE_EXCEPTION()  5
define IMAGE_DEBUG_TYPE_FIXUP()  6
define IMAGE_DEBUG_TYPE_OMAP_TO_SRC()  7
define IMAGE_DEBUG_TYPE_OMAP_FROM_SRC()  8
define IMAGE_DEBUG_TYPE_BORLAND()  9
define IMAGE_DEBUG_TYPE_RESERVED10()  10
define FRAME_FPO()  0
define FRAME_TRAP()  1
define FRAME_TSS()  2
define FRAME_NONFPO()  3
define SIZEOF_RFPO_DATA()  16
define IMAGE_DEBUG_MISC_EXENAME()  1
define IMAGE_SEPARATE_DEBUG_SIGNATURE()  0x4944
define IMAGE_SEPARATE_DEBUG_FLAGS_MASK()  0x8000
define IMAGE_SEPARATE_DEBUG_MISMATCH()  0x8000
define HEAP_NO_SERIALIZE()  0x00000001
define HEAP_GROWABLE()  0x00000002
define HEAP_GENERATE_EXCEPTIONS()  0x00000004
define HEAP_ZERO_MEMORY()  0x00000008
define HEAP_REALLOC_IN_PLACE_ONLY()  0x00000010
define HEAP_TAIL_CHECKING_ENABLED()  0x00000020
define HEAP_FREE_CHECKING_ENABLED()  0x00000040
define HEAP_DISABLE_COALESCE_ON_FREE()  0x00000080
define HEAP_CREATE_ALIGN_16()  0x00010000
define HEAP_CREATE_ENABLE_TRACING()  0x00020000
define HEAP_MAXIMUM_TAG()  0x0FFF
define HEAP_PSEUDO_TAG_FLAG()  0x8000
define HEAP_TAG_SHIFT()  18
define IS_TEXT_UNICODE_ASCII16()  0x0001
define IS_TEXT_UNICODE_REVERSE_ASCII16()  0x0010
define IS_TEXT_UNICODE_STATISTICS()  0x0002
define IS_TEXT_UNICODE_REVERSE_STATISTICS()  0x0020
define IS_TEXT_UNICODE_CONTROLS()  0x0004
define IS_TEXT_UNICODE_REVERSE_CONTROLS()  0x0040
define IS_TEXT_UNICODE_SIGNATURE()  0x0008
define IS_TEXT_UNICODE_REVERSE_SIGNATURE()  0x0080
define IS_TEXT_UNICODE_ILLEGAL_CHARS()  0x0100
define IS_TEXT_UNICODE_ODD_LENGTH()  0x0200
define IS_TEXT_UNICODE_DBCS_LEADBYTE()  0x0400
define IS_TEXT_UNICODE_NULL_BYTES()  0x1000
define IS_TEXT_UNICODE_UNICODE_MASK()  0x000F
define IS_TEXT_UNICODE_REVERSE_MASK()  0x00F0
define IS_TEXT_UNICODE_NOT_UNICODE_MASK()  0x0F00
define IS_TEXT_UNICODE_NOT_ASCII_MASK()  0x0F000
define COMPRESSION_FORMAT_NONE()  (0x0000)
define COMPRESSION_FORMAT_DEFAULT()  (0x0001)
define COMPRESSION_FORMAT_LZNT1()  (0x0002)
define COMPRESSION_ENGINE_STANDARD()  (0x0000)
define COMPRESSION_ENGINE_MAXIMUM()  (0x0100)
define MESSAGE_RESOURCE_UNICODE()  0x0001
define RTL_CRITSECT_TYPE()  0
define RTL_RESOURCE_TYPE()  1
define SEF_DACL_AUTO_INHERIT()  0x1
define SEF_SACL_AUTO_INHERIT()  0x2
define SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT()  0x4
define SEF_AVOID_PRIVILEGE_CHECK()  0x8
define WT_EXECUTEDEFAULT()  0x00000000
define WT_EXECUTEINIOTHREAD()  0x00000001
define WT_EXECUTEINUITHREAD()  0x00000002
define WT_EXECUTEINWAITTHREAD()  0x00000004
define WT_EXECUTEDELETEWAIT()  0x00000008
define WT_EXECUTEINLONGTHREAD()  0x00000010
//define DLL_PROCESS_DETACH()  0
define EVENTLOG_SEQUENTIAL_READ()  0x0001
define EVENTLOG_SEEK_READ()  0x0002
define EVENTLOG_FORWARDS_READ()  0x0004
define EVENTLOG_BACKWARDS_READ()  0x0008
define EVENTLOG_SUCCESS()  0x0000
define EVENTLOG_ERROR_TYPE()  0x0001
define EVENTLOG_WARNING_TYPE()  0x0002
define EVENTLOG_INFORMATION_TYPE()  0x0004
define EVENTLOG_AUDIT_SUCCESS()  0x0008
define EVENTLOG_AUDIT_FAILURE()  0x0010
define EVENTLOG_START_PAIRED_EVENT()  0x0001
define EVENTLOG_END_PAIRED_EVENT()  0x0002
define EVENTLOG_END_ALL_PAIRED_EVENTS()  0x0004
define EVENTLOG_PAIRED_EVENT_ACTIVE()  0x0008
define EVENTLOG_PAIRED_EVENT_INACTIVE()  0x0010
define MAXLOGICALLOGNAMESIZE()  256
define REG_OPTION_OPEN_LINK()  (0x00000008)
define REG_NO_LAZY_FLUSH()  (0x00000004)

/*------------------ 前面已经有定义-----------------------

define REG_OPTION_RESERVED()  (0x00000000)
define REG_OPTION_NON_VOLATILE()  (0x00000000)
define REG_LEGAL_CHANGE_FILTER()  (REG_NOTIFY_CHANGE_NAME         + ...
                              REG_NOTIFY_CHANGE_ATTRIBUTES   + ...
                              REG_NOTIFY_CHANGE_LAST_SET     + ...
                              REG_NOTIFY_CHANGE_SECURITY)

------------------------------------------------------*/

define SERVICE_KERNEL_DRIVER()  0x00000001
define SERVICE_FILE_SYSTEM_DRIVER()  0x00000002
define SERVICE_ADAPTER()  0x00000004
define SERVICE_RECOGNIZER_DRIVER()  0x00000008
define SERVICE_DRIVER()  (SERVICE_KERNEL_DRIVER + SERVICE_FILE_SYSTEM_DRIVER + SERVICE_RECOGNIZER_DRIVER)
define SERVICE_WIN32_OWN_PROCESS()  0x00000010
define SERVICE_WIN32_SHARE_PROCESS()  0x00000020
define SERVICE_WIN32()  (SERVICE_WIN32_OWN_PROCESS + SERVICE_WIN32_SHARE_PROCESS)
define SERVICE_INTERACTIVE_PROCESS()  0x00000100
define SERVICE_TYPE_ALL()  (SERVICE_WIN32+SERVICE_ADAPTER + SERVICE_DRIVER  + SERVICE_INTERACTIVE_PROCESS)
define SERVICE_BOOT_START()  0x00000000
define SERVICE_SYSTEM_START()  0x00000001
define SERVICE_AUTO_START()  0x00000002
define SERVICE_DEMAND_START()  0x00000003
define SERVICE_DISABLED()  0x00000004
define SERVICE_ERROR_IGNORE()  0x00000000
define SERVICE_ERROR_NORMAL()  0x00000001
define SERVICE_ERROR_SEVERE()  0x00000002
define SERVICE_ERROR_CRITICAL()  0x00000003
define TAPE_ERASE_SHORT()  0
define TAPE_ERASE_LONG()  1
define TAPE_LOAD()  0
define TAPE_UNLOAD()  1
define TAPE_TENSION()  2
define TAPE_LOCK()  3
define TAPE_UNLOCK()  4
define TAPE_FORMAT()  5
define TAPE_SETMARKS()  0
define TAPE_FILEMARKS()  1
define TAPE_SHORT_FILEMARKS()  2
define TAPE_LONG_FILEMARKS()  3
define TAPE_ABSOLUTE_POSITION()  0
define TAPE_LOGICAL_POSITION()  1
define TAPE_PSEUDO_LOGICAL_POSITION()  2
define TAPE_REWIND()  0
define TAPE_ABSOLUTE_BLOCK()  1
define TAPE_LOGICAL_BLOCK()  2
define TAPE_PSEUDO_LOGICAL_BLOCK()  3
define TAPE_SPACE_END_OF_DATA()  4
define TAPE_SPACE_RELATIVE_BLOCKS()  5
define TAPE_SPACE_FILEMARKS()  6
define TAPE_SPACE_SEQUENTIAL_FMKS()  7
define TAPE_SPACE_SETMARKS()  8
define TAPE_SPACE_SEQUENTIAL_SMKS()  9
define TAPE_DRIVE_FIXED()  0x00000001
define TAPE_DRIVE_SELECT()  0x00000002
define TAPE_DRIVE_INITIATOR()  0x00000004
define TAPE_DRIVE_ERASE_SHORT()  0x00000010
define TAPE_DRIVE_ERASE_LONG()  0x00000020
define TAPE_DRIVE_ERASE_BOP_ONLY()  0x00000040
define TAPE_DRIVE_ERASE_IMMEDIATE()  0x00000080
define TAPE_DRIVE_TAPE_CAPACITY()  0x00000100
define TAPE_DRIVE_TAPE_REMAINING()  0x00000200
define TAPE_DRIVE_FIXED_BLOCK()  0x00000400
define TAPE_DRIVE_VARIABLE_BLOCK()  0x00000800
define TAPE_DRIVE_WRITE_PROTECT()  0x00001000
define TAPE_DRIVE_EOT_WZ_SIZE()  0x00002000
define TAPE_DRIVE_ECC()  0x00010000
define TAPE_DRIVE_COMPRESSION()  0x00020000
define TAPE_DRIVE_PADDING()  0x00040000
define TAPE_DRIVE_REPORT_SMKS()  0x00080000
define TAPE_DRIVE_GET_ABSOLUTE_BLK()  0x00100000
define TAPE_DRIVE_GET_LOGICAL_BLK()  0x00200000
define TAPE_DRIVE_SET_EOT_WZ_SIZE()  0x00400000
define TAPE_DRIVE_EJECT_MEDIA()  0x01000000
define TAPE_DRIVE_CLEAN_REQUESTS()  0x02000000
define TAPE_DRIVE_SET_CMP_BOP_ONLY()  0x04000000
define TAPE_DRIVE_RESERVED_BIT()  0x80000000
define TAPE_DRIVE_LOAD_UNLOAD()  0x80000001
define TAPE_DRIVE_TENSION()  0x80000002
define TAPE_DRIVE_LOCK_UNLOCK()  0x80000004
define TAPE_DRIVE_REWIND_IMMEDIATE()  0x80000008
define TAPE_DRIVE_SET_BLOCK_SIZE()  0x80000010
define TAPE_DRIVE_LOAD_UNLD_IMMED()  0x80000020
define TAPE_DRIVE_TENSION_IMMED()  0x80000040
define TAPE_DRIVE_LOCK_UNLK_IMMED()  0x80000080
define TAPE_DRIVE_SET_ECC()  0x80000100
define TAPE_DRIVE_SET_COMPRESSION()  0x80000200
define TAPE_DRIVE_SET_PADDING()  0x80000400
define TAPE_DRIVE_SET_REPORT_SMKS()  0x80000800
define TAPE_DRIVE_ABSOLUTE_BLK()  0x80001000
define TAPE_DRIVE_ABS_BLK_IMMED()  0x80002000
define TAPE_DRIVE_LOGICAL_BLK()  0x80004000
define TAPE_DRIVE_LOG_BLK_IMMED()  0x80008000
define TAPE_DRIVE_END_OF_DATA()  0x80010000
define TAPE_DRIVE_RELATIVE_BLKS()  0x80020000
define TAPE_DRIVE_FILEMARKS()  0x80040000
define TAPE_DRIVE_SEQUENTIAL_FMKS()  0x80080000
define TAPE_DRIVE_SETMARKS()  0x80100000
define TAPE_DRIVE_SEQUENTIAL_SMKS()  0x80200000
define TAPE_DRIVE_REVERSE_POSITION()  0x80400000
define TAPE_DRIVE_SPACE_IMMEDIATE()  0x80800000
define TAPE_DRIVE_WRITE_SETMARKS()  0x81000000
define TAPE_DRIVE_WRITE_FILEMARKS()  0x82000000
define TAPE_DRIVE_WRITE_SHORT_FMKS()  0x84000000
define TAPE_DRIVE_WRITE_LONG_FMKS()  0x88000000
define TAPE_DRIVE_WRITE_MARK_IMMED()  0x090000000
define TAPE_DRIVE_FORMAT()  0x0A0000000
define TAPE_DRIVE_FORMAT_IMMEDIATE()  0x0C0000000
define TAPE_DRIVE_HIGH_FEATURES()  0x80000000
define IMPORT_OBJECT_HDR_SIG2()  0x0ffff
define TAPE_FIXED_PARTITIONS()  0
define TAPE_SELECT_PARTITIONS()  1
define TAPE_INITIATOR_PARTITIONS()  2


define DriverType()  SERVICE_KERNEL_DRIVER
define FileSystemType()  SERVICE_FILE_SYSTEM_DRIVER
define Win32ServiceOwnProcess()  SERVICE_WIN32_OWN_PROCESS
define Win32ServiceShareProcess()  SERVICE_WIN32_SHARE_PROCESS
define AdapterType()  SERVICE_ADAPTER
define RecognizerType()  SERVICE_RECOGNIZER_DRIVER

define BootLoad()  SERVICE_BOOT_START
define SystemLoad()  SERVICE_SYSTEM_START
define AutoLoad()  SERVICE_AUTO_START
define DemandLoad()  SERVICE_DEMAND_START
define DisableLoad()  SERVICE_DISABLED

define IgnoreError()  SERVICE_ERROR_IGNORE
define NormalError()  SERVICE_ERROR_NORMAL
define SevereError()  SERVICE_ERROR_SEVERE
define CriticalError()  SERVICE_ERROR_CRITICAL

define IMPORT_OBJECT_CODE()  0
define IMPORT_OBJECT_DATA()  1
define IMPORT_OBJECT_CONST()  2

define IMPORT_OBJECT_ORDINAL()  0
define IMPORT_OBJECT_NAME()  1
define IMPORT_OBJECT_NAME_NO_PREFIX()  2
define IMPORT_OBJECT_NAME_UNDECORATE()  3

define EXECUTION_STATE()  int32

define LT_DONT_CARE()  0
define LT_LOWEST_LATENCY()  1

define TokenPrimary()  1
define TokenImpersonation()  2

define TokenRestrictedSids()  11
define TokenSessionId()  12

define AuditEventObjectAccess()  0
define AuditEventDirectoryServiceAccess()  1


define SidTypeComputer()  9

struct LIST_ENTRY
{
    int32      Flink;
    int32      Blink;
}

struct SINGLE_LIST_ENTRY
{
    int32   Next;
}

struct GUID
{
    int32      Data1;
    int16      Data2;
    int16      Data3;
    int8[8]  Data4;
}

struct OBJECTID
{
    GUID      Lineage;
    int32      Uniquifier;
}

//LDTBits RECORD  rBaseHi:8, Granularity:1,Default_Big :1,Reserved_0:1,Sys:1,LimitHi:4,Pres:1, Dpl:2, S_bit:1, Type1:4,rBaseMid:8

struct LDT_ENTRY
{
    int16      LimitLow;
    int16      BaseLow;
    union UNION_LDT_ENTRY
    {
        LDT_BYTES          Bytes;
        //LDTBits          Bits;
        int32         Bits        ;
    }
}


struct SID
{
    int8     Revision;
    int8     SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY     IdentifierAuthority;
    int32[ANYSIZE_ARRAY]  SubAuthority;
}


struct ACCESS_ALLOWED_OBJECT_ACE
{
    ACE_HEADER      Header    ;
    int32      Mask1;
    int32      Flags;
    GUID      ObjectType;
    GUID      InheritedObjectType;
    int32      SidStart;
}

struct ACCESS_DENIED_OBJECT_ACE
{
    ACE_HEADER      Header    ;
    int32      Mask1;
    int32      Flags;
    GUID      ObjectType;
    GUID      InheritedObjectType;
    int32      SidStart;
}

struct SYSTEM_AUDIT_OBJECT_ACE
{
    ACE_HEADER      Header    ;
    int32      Mask1;
    int32      Flags;
    GUID      ObjectType;
    GUID      InheritedObjectType;
    int32      SidStart;
}

struct SYSTEM_ALARM_OBJECT_ACE
{
    ACE_HEADER      Header    ;
    int32      Mask1;
    int32      Flags;
    GUID      ObjectType;
    GUID      InheritedObjectType;
    int32      SidStart;
}

struct SECURITY_DESCRIPTOR_RELATIVE
{
    int8      Revision;
    int8      Sbz1;
    int16      Control1;
    int32      Owner;
    int32      Group1;
    int32      Sacl;
    int32      Dacl;
}

struct OBJECT_TYPE_LIST
{
    int16      Level;
    int16      Sbz;
    int32      ObjectType;
}

struct TOKEN_USER
{
    SID_AND_ATTRIBUTES      User;
}

struct TOKEN_OWNER
{
    int32      Owner;
}

struct TOKEN_PRIMARY_GROUP
{
    int32      PrimaryGroup;
}

struct TOKEN_DEFAULT_DACL
{
    int32      DefaultDacl;
}

struct TOKEN_SOURCE
{
    int8[TOKEN_SOURCE_LENGTH]  SourceName;
    LUID      SourceIdentifier    ;
}

struct TOKEN_CONTROL
{
    LUID      TokenId    ;
    LUID      AuthenticationId    ;
    LUID      ModifiedId    ;
    TOKEN_SOURCE      TokenSource1;
}

struct NT_TIB
{
    int32      ExceptionList;
    int32      StackBase;
    int32      StackLimit;
    int32      SubSystemTib;
    union UNION_NT_TIB
    {
        int32          FiberData;
        int32          Version;
    }
    int32      ArbitraryUserPointer;
    int32      Self;
}

struct FILE_NOTIFY_INFORMATION
{
    int32      NextEntryOffset;
    int32      Action;
    int32      FileNameLength;
    int16      FileName;
}


struct REPARSE_DATA_BUFFER
{
    int32      ReparseTag;
    int16      ReparseDataLength;
    int16      Reserved;
    union UNION_REPARSE_DATA_BUFFER
    {
        struct STRUCT_REPARSE_DATA_BUFFER
        {
            int16              SubstituteNameOffset;
            int16              SubstituteNameLength;
            int16              PrintNameOffset;
            int16              PrintNameLength;
            int16              PathBuffer;
        }
        struct STRUCT_REPARSE_DATA_BUFFER2
        {
            int16              SubstituteNameOffset;
            int16              SubstituteNameLength;
            int16              PrintNameOffset;
            int16              PrintNameLength;
            int16              PathBuffer;
        }
        struct STRUCT_REPARSE_DATA_BUFFER3
        {
            int8              DataBuffer;
        }
    }
}

struct REPARSE_GUID_DATA_BUFFER
{
    int32      ReparseTag;
    int16      ReparseDataLength;
    int16      Reserved;
    GUID      ReparseGuid;
    struct STRUCT_REPARSE_GUID_DATA_BUFFER
    {
        int8          DataBuffer;
    }
}


struct REPARSE_POINT_INFORMATION
{
    int16      ReparseDataLength;
    int16      UnparsedNameLength;
}

struct POWER_DEVICE_TIMEOUTS
{
    int32      ConservationIdleTime;
    int32      PerformanceIdleTime;
}

struct IMAGE_VXD_HEADER
{
    int16      e32_magic;
    int8      e32_border;
    int8      e32_worder;
    int32      e32_level;
    int16      e32_cpu;
    int16      e32_os;
    int32      e32_ver;
    int32      e32_mflags;
    int32      e32_mpages;
    int32      e32_startobj;
    int32      e32_eip;
    int32      e32_stackobj;
    int32      e32_esp;
    int32      e32_pagesize;
    int32      e32_lastpagesize;
    int32      e32_fixupsize;
    int32      e32_fixupsum;
    int32      e32_ldrsize;
    int32      e32_ldrsum;
    int32      e32_objtab;
    int32      e32_objcnt;
    int32      e32_objmap;
    int32      e32_itermap;
    int32      e32_rsrctab;
    int32      e32_rsrccnt;
    int32      e32_restab;
    int32      e32_enttab;
    int32      e32_dirtab;
    int32      e32_dircnt;
    int32      e32_fpagetab;
    int32      e32_frectab;
    int32      e32_impmod;
    int32      e32_impmodcnt;
    int32      e32_impproc;
    int32      e32_pagesum;
    int32      e32_datapage;
    int32      e32_preload;
    int32      e32_nrestab;
    int32      e32_cbnrestab;
    int32      e32_nressum;
    int32      e32_autodata;
    int32      e32_debuginfo;
    int32      e32_debuglen;
    int32      e32_instpreload;
    int32      e32_instdemand;
    int32      e32_heapsize;
    int8[12]  e32_res3;
    int32      e32_winresoff;
    int32      e32_winreslen;
    int16      e32_devid;
    int16      e32_ddkver;
}

struct IMAGE_ROM_OPTIONAL_HEADER
{
    int16      Magic;
    int8      MajorLinkerVersion;
    int8      MinorLinkerVersion;
    int32      SizeOfCode;
    int32      SizeOfInitializedData;
    int32      SizeOfUninitializedData;
    int32      AddressOfEntryPoint;
    int32      BaseOfCode;
    int32      BaseOfData;
    int32      BaseOfBss;
    int32      GprMask;
    int32[4]  CprMask;
    int32      GpValue;
}

struct IMAGE_ROM_HEADERS
{
    IMAGE_FILE_HEADER      FileHeader    ;
    IMAGE_ROM_OPTIONAL_HEADER      OptionalHeader;
}

struct IMAGE_SECTION_HEADER
{
    int8[IMAGE_SIZEOF_SHORT_NAME]  Name1;
    union UNION_IMAGE_SECTION_HEADER
    {
        int32          PhysicalAddress;
        int32          VirtualSize;
    }
    int32      VirtualAddress;
    int32      SizeOfRawData;
    int32      PointerToRawData;
    int32      PointerToRelocations;
    int32      PointerToLinenumbers;
    int16      NumberOfRelocations;
    int16      NumberOfLinenumbers;
    int32      Characteristics;
}

struct IMAGE_SYMBOL
{
    union UNION_IMAGE_SYMBOL
    {
        int8[8]  ShortName;
        struct STRUCT_IMAGE_SYMBOL
        {
            int32              Short1;
            int32              Long1;
        }
        int32[2]  LongName;
    }
    int32      Value;
    int16      SectionNumber;
    int16      Type1;
    int8      StorageClass;
    int8      NumberOfAuxSymbols;
}

struct IMAGE_AUX_SYMBOL
{
    struct STRUCT_IMAGE_AUX_SYMBOL
    {
        int32          TagIndex;
        union UNION_IMAGE_AUX_SYMBOL
        {
            struct STRUCT_IMAGE_AUX_SYMBOL2
            {
                int16                  Linenumber;
                int16                  Size1;
            }
            int32             TotalSize;
        }
        union UNION_IMAGE_AUX_SYMBOL2
        {
            struct STRUCT_IMAGE_AUX_SYMBOL3
            {
                int32                  PointerToLinenumber;
                int32                  PointerToNextFunction;
            }
            struct STRUCT_IMAGE_AUX_SYMBOL4
            {
                int16[4]  Dimension;
            }
        }
        int16          TvIndex;
    }
    struct STRUCT_IMAGE_AUX_SYMBOL5
    {
        int8[IMAGE_SIZEOF_SYMBOL]  Name1;
    }
    struct STRUCT_IMAGE_AUX_SYMBOL6
    {
        int32          Length1;
        int16          NumberOfRelocations;
        int16          NumberOfLinenumbers;
        int32          CheckSum;
        int16          Number;
        int8          Selection;
    }
}

struct IMAGE_RELOCATION
{
    union UNION_IMAGE_RELOCATION
    {
        int32          VirtualAddress;
        int32          RelocCount;
    }
    int32      SymbolTableIndex;
    int16      Type1;
}

struct IMAGE_LINENUMBER
{
    union UNION_IMAGE_LINENUMBER
    {
        int32          SymbolTableIndex;
        int32          VirtualAddress;
    }
    int16      Linenumber;
}


struct IMAGE_BASE_RELOCATION
{
    int32      VirtualAddress;
    int32      SizeOfBlock;
}

struct IMAGE_ARCHIVE_MEMBER_HEADER
{
    int8[16]  Name1;
    int8[12]  Date;
    int8[6]  UserID;
    int8[6]  GroupID;
    int8[8]  Mode;
    int8[10]  Size1;
    int8[2]  EndHeader;
}


struct IMAGE_IMPORT_BY_NAME
{
    int16      Hint;
    int8      Name1;
}

struct IMAGE_THUNK_DATA32
{
    union UNION_IMAGE_THUNK_DATA32
    {
        int32          ForwarderString;
        int32          Function;
        int32          Ordinal;
        int32          AddressOfData;
    }
}


struct IMAGE_TLS_DIRECTORY32
{
    int32      StartAddressOfRawData;
    int32      EndAddressOfRawData;
    int32      AddressOfIndex;
    int32      AddressOfCallBacks;
    int32      SizeOfZeroFill;
    int32      Characteristics;
}

define IMAGE_THUNK_DATA()  IMAGE_THUNK_DATA32
define IMAGE_TLS_DIRECTORY()  IMAGE_TLS_DIRECTORY32

struct IMAGE_IMPORT_DESCRIPTOR
{
    union UNION_IMAGE_IMPORT_DESCRIPTOR
    {
        int32          Characteristics;
        int32          OriginalFirstThunk;
    }
    int32      TimeDateStamp;
    int32      ForwarderChain;
    int32      Name1;
    int32      FirstThunk;
}

struct IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    int32      TimeDateStamp;
    int16      OffsetModuleName;
    int16      NumberOfModuleForwarderRefs;
}

struct IMAGE_BOUND_FORWARDER_REF
{
    int32      TimeDateStamp;
    int16      OffsetModuleName;
    int16      Reserved;
}

struct IMAGE_RESOURCE_DIRECTORY
{
    int32      Characteristics;
    int32      TimeDateStamp;
    int16      MajorVersion;
    int16      MinorVersion;
    int16      NumberOfNamedEntries;
    int16      NumberOfIdEntries;
}

struct IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    union UNION_IMAGE_RESOURCE_DIRECTORY_ENTRY
    {
        // rName	RECORD NameIsString:1,NameOffset:31;
        int32        rName;
        int32        Name1;
        int16          Id;
    }
    union UNION_IMAGE_RESOURCE_DIRECTORY_ENTRY2
    {
        int32          OffsetToData;
        // rDirectory	RECORD DataIsDirectory:1,OffsetToDirectory:31;
        int32 rDirectory;
    }
}

struct IMAGE_RESOURCE_DIRECTORY_STRING
{
    int16      Length1;
    int8      NameString;
}

struct IMAGE_RESOURCE_DIR_STRING_U
{
    int16      Length1;
    int16      NameString;
}

struct IMAGE_RESOURCE_DATA_ENTRY
{
    int32      OffsetToData;
    int32      Size1;
    int32      CodePage;
    int32      Reserved;
}

struct IMAGE_LOAD_CONFIG_DIRECTORY
{
    int32      Characteristics;
    int32      TimeDateStamp;
    int16      MajorVersion;
    int16      MinorVersion;
    int32      GlobalFlagsClear;
    int32      GlobalFlagsSet;
    int32      CriticalSectionDefaultTimeout;
    int32      DeCommitFreeBlockThreshold;
    int32      DeCommitTotalFreeThreshold;
    int32      LockPrefixTable;
    int32      MaximumAllocationSize;
    int32      VirtualMemoryThreshold;
    int32      ProcessHeapFlags;
    int32      ProcessAffinityMask;
    int16      CSDVersion;
    int16      Reserved1;
    int32      EditList;
    int32      Reserved;
}

struct IMAGE_DEBUG_DIRECTORY
{
    int32      Characteristics;
    int32      TimeDateStamp;
    int16      MajorVersion;
    int16      MinorVersion;
    int32      Type1;
    int32      SizeOfData;
    int32      AddressOfRawData;
    int32      PointerToRawData;
}

struct IMAGE_COFF_SYMBOLS_HEADER
{
    int32      NumberOfSymbols;
    int32      LvaToFirstSymbol;
    int32      NumberOfLinenumbers;
    int32      LvaToFirstLinenumber;
    int32      RvaToFirstByteOfCode;
    int32      RvaToLastByteOfCode;
    int32      RvaToFirstByteOfData;
    int32      RvaToLastByteOfData;
}

//FPOProlog RECORD cbFrame  :2, reserved :1, fUseBP   :1, fHasSEH  :1, cbRegs   :3, cbProlog :8

struct FPO_DATA
{
    int32      ulOffStart;
    int32      cbProcSize;
    int32      cdwLocals;
    int16      cdwParams;
    //FPOProlog    rProlog;
    int16     rProlog;
}

struct IMAGE_DEBUG_MISC
{
    int32      DataType;
    int32      Length1;
    BOOLEAN      Unicode;
    int8[3]  Reserved;
    int8      Data;
}


struct IMAGE_FUNCTION_ENTRY
{
    int32      StartingAddress;
    int32      EndingAddress;
    int32      EndOfPrologue;
}

struct IMAGE_SEPARATE_DEBUG_HEADER
{
    int16      Signature;
    int16      Flags;
    int16      Machine;
    int16      Characteristics;
    int32      TimeDateStamp;
    int32      CheckSum;
    int32      ImageBase;
    int32      SizeOfImage;
    int32      NumberOfSections;
    int32      ExportedNamesSize;
    int32      DebugDirectorySize;
    int32      SectionAlignment;
    int32[2]  Reserved;
}

//ImportRec RECORD Reserved :11,NameType :3,Type2 :2

struct IMPORT_OBJECT_HEADER
{
    int16      Sig1;
    int16      Sig2;
    int16      Version;
    int16      Machine;
    int32      TimeDateStamp;
    int32      SizeOfData;
    union UNION_IMPORT_OBJECT_HEADER
    {
        int16          Ordinal;
        int16          Hint;
    }
    //ImportRec      rImport;
    int16     rImport;
}

struct MESSAGE_RESOURCE_ENTRY
{
    int16      Length1;
    int16      Flags;
    int8      Text;
}

struct MESSAGE_RESOURCE_BLOCK
{
    int32      LowId;
    int32      HighId;
    int32      OffsetToEntries;
}

struct MESSAGE_RESOURCE_DATA
{
    int32      NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK      Blocks;
}

struct RTL_CRITICAL_SECTION_DEBUG
{
    int16      Type1;
    int16      CreatorBackTraceIndex;
    int32      CriticalSection;
    LIST_ENTRY      ProcessLocksList    ;
    int32      EntryCount;
    int32      ContentionCount;
    int32[2]  Spare;
}

struct EVENTSFORLOGFILE
{
    int32      ulSize;
    int16[MAXLOGICALLOGNAMESIZE]  szLogicalLogFile;
    int32      ulNumRecords;
    EVENTLOGRECORD    pEventLogRecords;
}

struct PACKEDEVENTINFO
{
    int32      ulSize;
    int32      ulNumEventsForLogFile;
    int32      ulOffsets;
}

struct TAPE_ERASE
{
    int32      Type1;
    BOOLEAN      Immediate;
}

struct TAPE_PREPARE
{
    int32      Operation;
    BOOLEAN      Immediate;
}

struct TAPE_WRITE_MARKS
{
    int32      Type1;
    int32      Count;
    BOOLEAN      Immediate;
}

struct TAPE_GET_POSITION
{
    int32      Type1;
    int32      Partition;
    int64      Offset1;
}

struct TAPE_SET_POSITION
{
    int32      Method;
    int32      Partition;
    int64      Offset1;
    BOOLEAN      Immediate;
}

struct TAPE_GET_DRIVE_PARAMETERS
{
    BOOLEAN      ECC;
    BOOLEAN      Compression;
    BOOLEAN      DataPadding;
    BOOLEAN      ReportSetmarks;
    int32      DefaultBlockSize;
    int32      MaximumBlockSize;
    int32      MinimumBlockSize;
    int32      MaximumPartitionCount;
    int32      FeaturesLow;
    int32      FeaturesHigh;
    int32      EOTWarningZoneSize;
}

struct TAPE_SET_DRIVE_PARAMETERS
{
    BOOLEAN      ECC;
    BOOLEAN      Compression;
    BOOLEAN      DataPadding;
    BOOLEAN      ReportSetmarks;
    int32      EOTWarningZoneSize;
}

struct TAPE_GET_MEDIA_PARAMETERS
{
    int64      Capacity;
    int64      Remaining;
    int32      BlockSize;
    int32      PartitionCount;
    BOOLEAN      WriteProtected;
}

struct TAPE_SET_MEDIA_PARAMETERS
{
    int32      BlockSize;
}

struct TAPE_CREATE_PARTITION
{
    int32      Method;
    int32      Count;
    int32      Size1;
}

// --------------------- Imagehlp.h EQUATES ---------------------

define CHECKSUM_SUCCESS()  0
define CHECKSUM_OPEN_FAILURE()  1
define CHECKSUM_MAP_FAILURE()  2
define CHECKSUM_MAPVIEW_FAILURE()  3
define CHECKSUM_UNICODE_FAILURE()  4
define SPLITSYM_REMOVE_PRIVATE()  0x000000001
define SPLITSYM_EXTRACT_ALL()  0x000000002
define SPLITSYM_SYMBOLPATH_IS_SRC()  0x000000004
define BIND_NO_BOUND_IMPORTS()  0x000000001
define BIND_NO_UPDATE()  0x000000002
define BIND_ALL_IMAGES()  0x000000004
define BIND_CACHE_IMPORT_DLLS()  0x000000008

define IMAGE_SEPARATION()  65536

define UNDNAME_COMPLETE()  0x00000
define UNDNAME_NO_LEADING_UNDERSCORES()  0x00001
define UNDNAME_NO_MS_KEYWORDS()  0x00002
define UNDNAME_NO_FUNCTION_RETURNS()  0x00004
define UNDNAME_NO_ALLOCATION_MODEL()  0x00008
define UNDNAME_NO_ALLOCATION_LANGUAGE()  0x00010
define UNDNAME_NO_MS_THISTYPE()  0x00020
define UNDNAME_NO_CV_THISTYPE()  0x00040
define UNDNAME_NO_THISTYPE()  0x00060
define UNDNAME_NO_ACCESS_SPECIFIERS()  0x00080
define UNDNAME_NO_THROW_SIGNATURES()  0x00100
define UNDNAME_NO_MEMBER_TYPE()  0x00200
define UNDNAME_NO_RETURN_UDT_MODEL()  0x00400
define UNDNAME_32_BIT_DECODE()  0x00800
define UNDNAME_NAME_ONLY()  0x01000
define UNDNAME_NO_ARGUMENTS()  0x02000
define UNDNAME_NO_SPECIAL_SYMS()  0x04000
define SYMF_OMAP_GENERATED()  0x000000001
define SYMF_OMAP_MODIFIED()  0x000000002
define CBA_DEFERRED_SYMBOL_LOAD_START()  0x000000001
define CBA_DEFERRED_SYMBOL_LOAD_COMPLETE()  0x000000002
define CBA_DEFERRED_SYMBOL_LOAD_FAILURE()  0x000000003
define CBA_SYMBOLS_UNLOADED()  0x000000004
define CBA_DUPLICATE_SYMBOL()  0x000000005
define SYMOPT_CASE_INSENSITIVE()  0x000000001
define SYMOPT_UNDNAME()  0x000000002
define SYMOPT_DEFERRED_LOADS()  0x000000004
define SYMOPT_NO_CPP()  0x000000008
define SYMOPT_LOAD_LINES()  0x000000010
define SYMOPT_OMAP_FIND_NEAREST()  0x000000020
define CERT_PE_IMAGE_DIGEST_DEBUG_INFO()  0x001
define CERT_PE_IMAGE_DIGEST_RESOURCES()  0x002
define CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO()  0x004
define CERT_PE_IMAGE_DIGEST_NON_PE_INFO()  0x008
define CERT_SECTION_TYPE_ANY()  0x0FF

define AddrMode1616()  0
define AddrMode1632()  1
define AddrModeReal()  2
define AddrModeFlat()  3
define SymNone()  0
define SymCoff()  1
define SymCv()  2
define SymPdb()  3
define SymExport()  4
define SymDeferred()  5
define SymSym()  6
// --------------------- Imagehlp.h STRUCTURES ---------------------

struct LOADED_IMAGE
{
    int32      ModuleName;
    int32      hFile;
    int32      MappedAddress;
    int32      FileHeader;
    int32      LastRvaSection;
    int32      NumberOfSections;
    int32      Sections;
    int32      Characteristics;
    int8      fSystemImage;
   // align dword;
    int8      fDOSImage;
    int32      Links;
    int32      SizeOfImage;
}

struct IMAGE_DEBUG_INFORMATION
{
    LIST_ENTRY      List    ;
    int32      Size1;
    int32      MappedBase;
    int16      Machine;
    int16      Characteristics;
    int32      CheckSum;
    int32      ImageBase;
    int32      SizeOfImage;
    int32      NumberOfSections;
    int32      Sections;
    int32      ExportedNamesSize;
    int32      ExportedNames;
    int32      NumberOfFunctionTableEntries;
    int32      FunctionTableEntries;
    int32      LowestFunctionStartingAddress;
    int32      HighestFunctionEndingAddress;
    int32      NumberOfFpoTableEntries;
    int32      FpoTableEntries;
    int32      SizeOfCoffSymbols;
    int32      CoffSymbols;
    int32      SizeOfCodeViewSymbols;
    int32      CodeViewSymbols;
    int32      ImageFilePath;
    int32      ImageFileName;
    int32      DebugFilePath;
    int32      TimeDateStamp;
    int8      RomImage;
    int32      DebugDirectory;
    int32      NumberOfDebugDirectories;
    int32[3]  Reserved;
}

struct ADDRESS
{
    int32      Offset1;
    int16      Segment1;
    int32      Mode;
}

struct KDHELP
{
    int32      Thread;
    int32      ThCallbackStack;
    int32      NextCallback;
    int32      FramePointer;
    int32      KiCallUserMode;
    int32      KeUserCallbackDispatcher;
    int32      SystemRangeStart;
}

struct STACKFRAME
{
    ADDRESS      AddrPC;
    ADDRESS      AddrReturn;
    ADDRESS      AddrFrame;
    ADDRESS      AddrStack;
    int32      FuncTableEntry;
    int32[4]  Params;
    BOOL      Far1;
    BOOL      Virtual;
    int32[3]  Reserved;
    KDHELP      KdHelp;
}

struct API_VERSION
{
    int16      MajorVersion;
    int16      MinorVersion;
    int16      Revision;
    int16      Reserved;
}

struct IMAGEHLP_SYMBOL
{
    int32      SizeOfStruct;
    int32      Address;
    int32      Size1;
    int32      Flags;
    int32      MaxNameLength;
    int8      Name1;
}

struct IMAGEHLP_MODULE
{
    int32      SizeOfStruct;
    int32      BaseOfImage;
    int32      ImageSize;
    int32      TimeDateStamp;
    int32      CheckSum;
    int32      NumSyms;
    int32      SymType1;
    int8[32]  ModuleName;
    int8[256]  ImageName;
    int8[256]  LoadedImageName;
}

struct IMAGEHLP_LINE
{
    int32      SizeOfStruct;
    int32      Key;
    int32      LineNumber;
    int32      FileName;
    int32      Address;
}

struct IMAGEHLP_DEFERRED_SYMBOL_LOAD
{
    int32      SizeOfStruct;
    int32      BaseOfImage;
    int32      CheckSum;
    int32      TimeDateStamp;
    int8[MAX_PATH]  FileName;
    int8      Reparse;
}

struct IMAGEHLP_DUPLICATE_SYMBOL
{
    int32      SizeOfStruct;
    int32      NumberOfDups;
    int32      Symbol;
    int32      SelectedSymbol;
}

//--------------------------------------[ Excpt.h ]--------------------------
define ExceptionContinueExecution()  0
define ExceptionContinueSearch()  1
define ExceptionNestedException()  2
define ExceptionCollidedUnwind()  3

//define EXCEPTION_CONTINUE_SEARCH()  0

//-----------------------------------[ Winuser.h ]-------------------------------------------
define DIFFERENCE()  11
define RT_GROUP_CURSOR()  RT_CURSOR + DIFFERENCE
define RT_GROUP_ICON()  RT_ICON + DIFFERENCE
define RT_VERSION()  16
define RT_DLGINCLUDE()  17
define RT_PLUGPLAY()  19
define RT_VXD()  20
define RT_ANICURSOR()  21
define RT_ANIICON()  22
define RT_HTML()  23
define AW_HOR_POSITIVE()  0x1
define AW_HOR_NEGATIVE()  0x2
define AW_VER_POSITIVE()  0x4
define AW_VER_NEGATIVE()  0x8
define AW_CENTER()  0x10
define AW_HIDE()  0x10000
define AW_ACTIVATE()  0x20000
define AW_SLIDE()  0x40000
define AW_BLEND()  0x80000
define VK_KANA()  0x15
define VK_HANGEUL()  0x15
define VK_HANGUL()  0x15
define VK_JUNJA()  0x17
define VK_FINAL()  0x18
define VK_HANJA()  0x19
define VK_KANJI()  0x19
define VK_CONVERT()  0x1C
define VK_NONCONVERT()  0x1D
define VK_ACCEPT()  0x1E
define VK_MODECHANGE()  0x1F
define VK_LWIN()  0x5B
define VK_RWIN()  0x5C
define VK_APPS()  0x5D
define WH_CALLWNDPROCRET()  12
define WH_KEYBOARD_LL()  13
define WH_MOUSE_LL()  14
define WH_MINHOOK()  WH_MIN
define WH_MAXHOOK()  WH_MAX
define MSGF_DIALOGBOX()  0
define MSGF_MESSAGEBOX()  1
define MSGF_MENU()  2
define MSGF_SCROLLBAR()  5
define MSGF_NEXTWINDOW()  6
define MSGF_MAX()  8
define MSGF_USER()  4096
define HSHELL_WINDOWACTIVATED()  4
define HSHELL_GETMINRECT()  5
define HSHELL_REDRAW()  6
define HSHELL_TASKMAN()  7
define HSHELL_LANGUAGE()  8
define HSHELL_ACCESSIBILITYSTATE()  11
define ACCESS_STICKYKEYS()  1
define ACCESS_FILTERKEYS()  2
define ACCESS_MOUSEKEYS()  3
define LLKHF_EXTENDED()  1
define LLKHF_INJECTED()  0x10
define LLKHF_ALTDOWN()  0x20
define LLKHF_UP()  0x80
define LLMHF_INJECTED()  1
define KLF_REPLACELANG()  0x10
define KLF_NOTELLSHELL()  0x80
define KLF_SETFORPROCESS()  0x100
define GMMP_USE_DISPLAY_POINTS()  1
define GMMP_USE_DRIVER_POINTS()  2
define DESKTOP_SWITCHDESKTOP()  0x100
define DF_ALLOWOTHERACCOUNTHOOK()  1
define WSF_VISIBLE()  1
define UOI_FLAGS()  1
define UOI_NAME()  2
define UOI_TYPE()  3
define UOI_USER_SID()  4
define GCL_HICONSM()  -34
define NFR_ANSI()  1
define NFR_UNICODE()  2
define NF_QUERY()  3
define NF_REQUERY()  4
define WM_MENURBUTTONUP()  0x122
define WM_MENUDRAG()  0x0123
define WM_MENUGETOBJECT()  0x124
define WM_UNINITMENUPOPUP()  0x125
define WM_MENUCOMMAND()  0x126
define WM_MOUSEWHEEL()  0x20A
define WHEEL_DELTA()  120
define WHEEL_PAGESCROLL()  UINT_MAX
define WM_NEXTMENU()  0x213
define WM_SIZING()  0x214
define WM_CAPTURECHANGED()  0x215
define WM_MOVING()  0x216
define WM_POWERBROADCAST()  0x218
define PBT_APMQUERYSUSPEND()  0
define PBT_APMQUERYSTANDBY()  1
define PBT_APMQUERYSUSPENDFAILED()  2
define PBT_APMQUERYSTANDBYFAILED()  3
define PBT_APMSUSPEND()  4
define PBT_APMSTANDBY()  5
define PBT_APMRESUMECRITICAL()  6
define PBT_APMRESUMESUSPEND()  7
define PBT_APMRESUMESTANDBY()  8
define PBTF_APMRESUMEFROMFAILURE()  1
define PBT_APMBATTERYLOW()  9
define PBT_APMPOWERSTATUSCHANGE()  0x0A
define PBT_APMOEMEVENT()  0x0B
define PBT_APMRESUMEAUTOMATIC()  0x12
define WM_DEVICECHANGE()  0x219
define WM_ENTERSIZEMOVE()  0x231
define WM_EXITSIZEMOVE()  0x232
define WM_MOUSEHOVER()  0x2A1
define WM_MOUSELEAVE()  0x2A3
define WM_HANDHELDFIRST()  0x358
define WM_HANDHELDLAST()  0x35F
define WM_AFXFIRST()  0x360
define WM_AFXLAST()  0x37F
define WM_APP()  0x8000
define WMSZ_LEFT()  1
define WMSZ_RIGHT()  2
define WMSZ_TOP()  3
define WMSZ_TOPLEFT()  4
define WMSZ_TOPRIGHT()  5
define WMSZ_BOTTOM()  6
define WMSZ_BOTTOMLEFT()  7
define WMSZ_BOTTOMRIGHT()  8
define ICON_SMALL()  0
define ICON_BIG()  1
define TME_HOVER()  1
define TME_LEAVE()  2
define TME_QUERY()  0x40000000
define TME_CANCEL()  0x80000000
define DC_ACTIVE()  1
define DC_SMALLCAP()  2
define DC_ICON()  4
define DC_TEXT()  8
define DC_INBUTTON()  0x10
define DC_GRADIENT()  0x20
define IDANI_OPEN()  1
define IDANI_CLOSE()  2
define IDANI_CAPTION()  3
define ENDSESSION_LOGOFF()  0x80000000
define BSM_ALLCOMPONENTS()  0
define BSM_VXDS()  1
define BSM_NETDRIVER()  2
define BSM_INSTALLABLEDRIVERS()  4
define BSM_APPLICATIONS()  8
define BSM_ALLDESKTOPS()  0x10
define BSF_QUERY()  1
define BSF_IGNORECURRENTTASK()  2
define BSF_FLUSHDISK()  4
define BSF_NOHANG()  8
define BSF_POSTMESSAGE()  0x10
define BSF_FORCEIFHUNG()  0x20
define BSF_NOTIMEOUTIFNOTHUNG()  0x40
define BROADCAST_QUERY_DENY()  0x424D5144
define DEVICE_NOTIFY_WINDOW_HANDLE()  0
define ISMEX_NOSEND()  0
define ISMEX_SEND()  0x1
define ISMEX_NOTIFY()  0x2
define ISMEX_CALLBACK()  0x4
define ISMEX_REPLIED()  0x8
define FLASHW_STOP()  0
define FLASHW_CAPTION()  1
define FLASHW_TRAY()  2
define FLASHW_ALL()  FLASHW_CAPTION + FLASHW_TRAY
define FLASHW_TIMER()  4
define FLASHW_TIMERNOFG()  0x0C
define INPUT_MOUSE()  0
define INPUT_KEYBOARD()  1
define INPUT_HARDWARE()  2
define MWMO_WAITALL()  1
define MWMO_ALERTABLE()  2
define MWMO_INPUTAVAILABLE()  4
define MNC_IGNORE()  0
define MNC_CLOSE()  1
define MNC_EXECUTE()  2
define MNC_SELECT()  3
define MNS_NOCHECK()  0x80000000
define MNS_MODELESS()  0x40000000
define MNS_DRAGDROP()  0x20000000
define MNS_AUTODISMISS()  0x10000000
define MNS_NOTIFYBYPOS()  0x08000000
define MNS_CHECKORBMP()  0x04000000
define MIM_MAXHEIGHT()  1
define MIM_BACKGROUND()  2
define MIM_HELPID()  4
define MIM_MENUDATA()  8
define MIM_STYLE()  0x10
define MIM_APPLYTOSUBMENUS()  0x80000000
define MND_CONTINUE()  0
define MND_ENDMENU()  1
define MNGOF_GAP()  3
define MNGO_NOINTERFACE()  0
define MNGO_NOERROR()  1
define MIIM_STATE()  1
define MIIM_ID()  2
define MIIM_SUBMENU()  4
define MIIM_CHECKMARKS()  8
define MIIM_TYPE()  0x10
define MIIM_DATA()  0x20
define MIIM_STRING()  0x40
define MIIM_BITMAP()  0x80
define MIIM_FTYPE()  0x100
define HBMMENU_CALLBACK()  -1
define HBMMENU_SYSTEM()  1
define HBMMENU_MBAR_RESTORE()  2
define HBMMENU_MBAR_MINIMIZE()  3
define HBMMENU_MBAR_CLOSE()  5
define HBMMENU_MBAR_CLOSE_D()  6
define HBMMENU_MBAR_MINIMIZE_D()  7
define HBMMENU_POPUP_CLOSE()  8
define HBMMENU_POPUP_RESTORE()  9
define HBMMENU_POPUP_MAXIMIZE()  10
define HBMMENU_POPUP_MINIMIZE()  11
define GMDI_USEDISABLED()  1
define GMDI_GOINTOPOPUPS()  2
define DOF_EXECUTABLE()  0x8001
define DOF_DOCUMENT()  0x8002
define DOF_DIRECTORY()  0x8003
define DOF_MULTIPLE()  0x8004
define DOF_PROGMAN()  1
define DOF_SHELLDATA()  2
define DO_DROPFILE()  0x454C4946
define DO_PRINTFILE()  0x544E5250
define DST_COMPLEX()  0
define DST_TEXT()  1
define DST_PREFIXTEXT()  2
define DST_ICON()  3
define DST_BITMAP()  4
define DSS_NORMAL()  0
define DSS_UNION()  0x10
define DSS_DISABLED()  0x20
define DSS_MONO()  0x80
define DSS_RIGHT()  0x8000
define CUDR_NORMAL()  0
define CUDR_NOSNAPTOGRID()  1
define CUDR_NORESOLVEPOSITIONS()  2
define CUDR_NOCLOSEGAPS()  4
define CUDR_NEGATIVECOORDS()  8
define CUDR_NOPRIMARY()  0x10
define CWP_ALL()  0
define CWP_SKIPINVISIBLE()  1
define CWP_SKIPDISABLED()  2
define CWP_SKIPTRANSPARENT()  4
define MFT_STRING()  MF_STRING
define MFT_BITMAP()  MF_BITMAP
define MFT_MENUBARBREAK()  MF_MENUBARBREAK
define MFT_MENUBREAK()  MF_MENUBREAK
define MFT_OWNERDRAW()  MF_OWNERDRAW
define MFT_RADIOCHECK()  0x200
define MFT_SEPARATOR()  MF_SEPARATOR
define MFT_RIGHTORDER()  0x2000
define MFT_RIGHTJUSTIFY()  MF_RIGHTJUSTIFY
define MFS_GRAYED()  3
define MFS_DISABLED()  MFS_GRAYED
define MFS_CHECKED()  MF_CHECKED
define MFS_HILITE()  MF_HILITE
define MFS_ENABLED()  MF_ENABLED
define MFS_UNCHECKED()  MF_UNCHECKED
define MFS_UNHILITE()  MF_UNHILITE
define MFS_DEFAULT()  MF_DEFAULT
define MFS_MASK()  0x108B
define MFS_HOTTRACKDRAWN()  0x10000000
define MFS_CACHEDBMP()  0x20000000
define MFS_BOTTOMGAPDROP()  0x40000000
define MFS_TOPGAPDROP()  0x80000000
define MFS_GAPDROP()  0x0C0000000
define LR_DEFAULTCOLOR()  0
define LR_MONOCHROME()  1
define LR_COLOR()  2
define LR_COPYRETURNORG()  4
define LR_COPYDELETEORG()  8
define LR_LOADFROMFILE()  0x10
define LR_LOADTRANSPARENT()  0x20
define LR_DEFAULTSIZE()  0x40
define LR_VGACOLOR()  0x80
define LR_LOADMAP3DCOLORS()  0x1000
define LR_CREATEDIBSECTION()  0x2000
define LR_COPYFROMRESOURCE()  0x4000
define LR_SHARED()  0x8000
define DI_MASK()  1
define DI_IMAGE()  2
define DI_NORMAL()  3
define DI_COMPAT()  4
define DI_DEFAULTSIZE()  8
define RES_ICON()  1
define RES_CURSOR()  2
define EC_LEFTMARGIN()  1
define EC_RIGHTMARGIN()  2
define EC_USEFONTINFO()  0ffffh
define EMSIS_COMPOSITIONSTRING()  1
define EIMES_GETCOMPSTRATONCE()  1
define EIMES_CANCELCOMPSTRINFOCUS()  2
define EIMES_COMPLETECOMPSTRKILLFOCUS()  4
define SS_OWNERDRAW()  0x0D
define SS_BITMAP()  0x0E
define SS_ENHMETAFILE()  0x0F
define SS_ETCHEDHORZ()  0x10
define SS_ETCHEDVERT()  0x11
define SS_ETCHEDFRAME()  0x12
define SS_TYPEMASK()  0x1F
define SS_NOTIFY()  0x100
define SS_CENTERIMAGE()  0x200
define SS_RIGHTJUST()  0x400
define SS_REALSIZEIMAGE()  0x800
define SS_SUNKEN()  0x1000
define SS_ENDELLIPSIS()  0x4000
define SS_PATHELLIPSIS()  0x8000
define SS_WORDELLIPSIS()  0x0C000
define SS_ELLIPSISMASK()  0x0C000
define STM_SETIMAGE()  0x172
define STM_GETIMAGE()  0x173
define STN_CLICKED()  0
define STN_DBLCLK()  1
define STN_ENABLE()  2
define STN_DISABLE()  3
define DM_REPOSITION()  WM_USER+2
define LB_INITSTORAGE()  0x1A8
define LB_ITEMFROMPOINT()  0x1A9
define LBS_NOSEL()  0x4000
define CBS_UPPERCASE()  0x2000
define CBS_LOWERCASE()  0x4000
define GR_GDIOBJECTS()  0
define GR_USEROBJECTS()  1
define SPI_SETSCREENSAVERRUNNING()  97
define SPI_GETMOUSEHOVERWIDTH()  98
define SPI_SETMOUSEHOVERWIDTH()  99
define SPI_GETMOUSEHOVERHEIGHT()  100
define SPI_SETMOUSEHOVERHEIGHT()  101
define SPI_GETMOUSEHOVERTIME()  102
define SPI_SETMOUSEHOVERTIME()  103
define SPI_GETWHEELSCROLLLINES()  104
define SPI_SETWHEELSCROLLLINES()  105
define SPI_GETSHOWIMEUI()  110
define SPI_SETSHOWIMEUI()  111
define SPI_GETMOUSESPEED()  112
define SPI_SETMOUSESPEED()  113
define SPI_GETSCREENSAVERRUNNING()  114
define SPI_GETACTIVEWINDOWTRACKING()  0x1000
define SPI_SETACTIVEWINDOWTRACKING()  0x1001
define SPI_GETMENUANIMATION()  0x1002
define SPI_SETMENUANIMATION()  0x1003
define SPI_GETCOMBOBOXANIMATION()  0x1004
define SPI_SETCOMBOBOXANIMATION()  0x1005
define SPI_GETLISTBOXSMOOTHSCROLLING()  0x1006
define SPI_SETLISTBOXSMOOTHSCROLLING()  0x1007
define SPI_GETGRADIENTCAPTIONS()  0x1008
define SPI_SETGRADIENTCAPTIONS()  0x1009
define SPI_GETMENUUNDERLINES()  0x100A
define SPI_SETMENUUNDERLINES()  0x100B
define SPI_GETACTIVEWNDTRKZORDER()  0x100C
define SPI_SETACTIVEWNDTRKZORDER()  0x100D
define SPI_GETHOTTRACKING()  0x100E
define SPI_SETHOTTRACKING()  0x100F
define SPI_GETFOREGROUNDLOCKTIMEOUT()  0x2000
define SPI_SETFOREGROUNDLOCKTIMEOUT()  0x2001
define SPI_GETACTIVEWNDTRKTIMEOUT()  0x2002
define SPI_SETACTIVEWNDTRKTIMEOUT()  0x2003
define SPI_GETFOREGROUNDFLASHCOUNT()  0x2004
define SPI_SETFOREGROUNDFLASHCOUNT()  0x2005
define SPIF_SENDCHANGE()  SPIF_SENDWININICHANGE
define METRICS_USEDEFAULT()  -1
define ARW_BOTTOMLEFT()  0
define ARW_BOTTOMRIGHT()  1
define ARW_TOPLEFT()  2
define ARW_TOPRIGHT()  3
define ARW_STARTMASK()  3
define ARW_STARTRIGHT()  1
define ARW_STARTTOP()  2
define ARW_LEFT()  0
define ARW_RIGHT()  0
define ARW_UP()  4
define ARW_DOWN()  4
define ARW_HIDE()  8
define SERKF_SERIALKEYSON()  1
define SERKF_AVAILABLE()  2
define SERKF_INDICATOR()  4
define HCF_HIGHCONTRASTON()  1
define HCF_AVAILABLE()  2
define HCF_HOTKEYACTIVE()  4
define HCF_CONFIRMHOTKEY()  8
define HCF_HOTKEYSOUND()  0x10
define HCF_INDICATOR()  0x20
define HCF_HOTKEYAVAILABLE()  0x40
define CDS_UPDATEREGISTRY()  1
define CDS_TEST()  2
define CDS_FULLSCREEN()  4
define CDS_GLOBAL()  8
define CDS_SET_PRIMARY()  0x10
define CDS_RESET()  0x40000000
define CDS_SETRECT()  0x20000000
define CDS_NORESET()  0x10000000
define DISP_CHANGE_SUCCESSFUL()  0
define DISP_CHANGE_RESTART()  1
define DISP_CHANGE_FAILED()  -1
define DISP_CHANGE_BADMODE()  -2
define DISP_CHANGE_NOTUPDATED()  -3
define DISP_CHANGE_BADFLAGS()  -4
define DISP_CHANGE_BADPARAM()  -5
define ENUM_CURRENT_SETTINGS()  -1
define ENUM_REGISTRY_SETTINGS()  -2
define FKF_FILTERKEYSON()  1
define FKF_AVAILABLE()  2
define FKF_HOTKEYACTIVE()  4
define FKF_CONFIRMHOTKEY()  8
define FKF_HOTKEYSOUND()  0x10
define FKF_INDICATOR()  0x20
define FKF_CLICKON()  0x40
define SKF_STICKYKEYSON()  1
define SKF_AVAILABLE()  2
define SKF_HOTKEYACTIVE()  4
define SKF_CONFIRMHOTKEY()  8
define SKF_HOTKEYSOUND()  0x10
define SKF_INDICATOR()  0x20
define SKF_AUDIBLEFEEDBACK()  0x40
define SKF_TRISTATE()  0x80
define SKF_TWOKEYSOFF()  0x100
define SKF_LALTLATCHED()  0x10000000
define SKF_LCTLLATCHED()  0x4000000
define SKF_LSHIFTLATCHED()  0x1000000
define SKF_RALTLATCHED()  0x20000000
define SKF_RCTLLATCHED()  0x08000000
define SKF_RSHIFTLATCHED()  0x2000000
define SKF_LWINLATCHED()  0x40000000
define SKF_RWINLATCHED()  0x80000000
define SKF_LALTLOCKED()  0x100000
define SKF_LCTLLOCKED()  0x40000
define SKF_LSHIFTLOCKED()  0x10000
define SKF_RALTLOCKED()  0x200000
define SKF_RCTLLOCKED()  0x80000
define SKF_RSHIFTLOCKED()  0x20000
define SKF_LWINLOCKED()  0x400000
define SKF_RWINLOCKED()  0x800000
define MKF_MOUSEKEYSON()  1
define MKF_AVAILABLE()  2
define MKF_HOTKEYACTIVE()  4
define MKF_CONFIRMHOTKEY()  8
define MKF_HOTKEYSOUND()  0x10
define MKF_INDICATOR()  0x20
define MKF_MODIFIERS()  0x40
define MKF_REPLACENUMBERS()  0x80
define MKF_LEFTBUTTONSEL()  0x10000000
define MKF_RIGHTBUTTONSEL()  0x20000000
define MKF_LEFTBUTTONDOWN()  0x1000000
define MKF_RIGHTBUTTONDOWN()  0x2000000
define MKF_MOUSEMODE()  0x80000000
define ATF_TIMEOUTON()  1
define ATF_ONOFFFEEDBACK()  2
define SSGF_NONE()  0
define SSGF_DISPLAY()  3
define SSTF_NONE()  0
define SSTF_CHARS()  1
define SSTF_BORDER()  2
define SSTF_DISPLAY()  3
define SSWF_NONE()  0
define SSWF_TITLE()  1
define SSWF_WINDOW()  2
define SSWF_DISPLAY()  3
define SSWF_CUSTOM()  4
define SSF_SOUNDSENTRYON()  1
define SSF_AVAILABLE()  2
define SSF_INDICATOR()  4
define TKF_TOGGLEKEYSON()  1
define TKF_AVAILABLE()  2
define TKF_HOTKEYACTIVE()  4
define TKF_CONFIRMHOTKEY()  8
define TKF_HOTKEYSOUND()  0x10
define TKF_INDICATOR()  0x20
define MONITOR_DEFAULTTONULL()  0
define MONITOR_DEFAULTTOPRIMARY()  1
define MONITOR_DEFAULTTONEAREST()  2
define MONITORINFOF_PRIMARY()  1
define CHILDID_SELF()  0
define INDEXID_OBJECT()  0
define INDEXID_CONTAINER()  0
define OBJID_WINDOW()  0
define OBJID_SYSMENU()  0x0FFFFFFFF
define OBJID_TITLEBAR()  0x0FFFFFFFE
define OBJID_MENU()  0x0FFFFFFFD
define OBJID_CLIENT()  0x0FFFFFFFC
define OBJID_VSCROLL()  0x0FFFFFFFB
define OBJID_HSCROLL()  0x0FFFFFFFA
define OBJID_SIZEGRIP()  0x0FFFFFFF9
define OBJID_CARET()  0x0FFFFFFF8
define OBJID_CURSOR()  0x0FFFFFFF7
define OBJID_ALERT()  0x0FFFFFFF6
define OBJID_SOUND()  0x0FFFFFFF5
define EVENT_MIN()  1
define EVENT_MAX()  0x7FFFFFFF
define EVENT_SYSTEM_SOUND()  1
define EVENT_SYSTEM_ALERT()  2
define EVENT_SYSTEM_FOREGROUND()  3
define EVENT_SYSTEM_MENUSTART()  4
define EVENT_SYSTEM_MENUEND()  5
define EVENT_SYSTEM_MENUPOPUPSTART()  6
define EVENT_SYSTEM_MENUPOPUPEND()  7
define EVENT_SYSTEM_CAPTURESTART()  8
define EVENT_SYSTEM_CAPTUREEND()  9
define EVENT_SYSTEM_MOVESIZESTART()  0x0A
define EVENT_SYSTEM_MOVESIZEEND()  0x0B
define EVENT_SYSTEM_CONTEXTHELPSTART()  0x0C
define EVENT_SYSTEM_CONTEXTHELPEND()  0x0D
define EVENT_SYSTEM_DRAGDROPSTART()  0x0E
define EVENT_SYSTEM_DRAGDROPEND()  0x0F
define EVENT_SYSTEM_DIALOGSTART()  0x10
define EVENT_SYSTEM_DIALOGEND()  0x11
define EVENT_SYSTEM_SCROLLINGSTART()  0x12
define EVENT_SYSTEM_SCROLLINGEND()  0x13
define EVENT_SYSTEM_SWITCHSTART()  0x14
define EVENT_SYSTEM_SWITCHEND()  0x15
define EVENT_SYSTEM_MINIMIZESTART()  0x16
define EVENT_SYSTEM_MINIMIZEEND()  0x17
define EVENT_OBJECT_CREATE()  0x8000
define EVENT_OBJECT_DESTROY()  0x8001
define EVENT_OBJECT_SHOW()  0x8002
define EVENT_OBJECT_HIDE()  0x8003
define EVENT_OBJECT_REORDER()  0x8004
define EVENT_OBJECT_FOCUS()  0x8005
define EVENT_OBJECT_SELECTION()  0x8006
define EVENT_OBJECT_SELECTIONADD()  0x8007
define EVENT_OBJECT_SELECTIONREMOVE()  0x8008
define EVENT_OBJECT_SELECTIONWITHIN()  0x8009
define EVENT_OBJECT_STATECHANGE()  0x800A
define EVENT_OBJECT_LOCATIONCHANGE()  0x800B
define EVENT_OBJECT_NAMECHANGE()  0x800C
define EVENT_OBJECT_DESCRIPTIONCHANGE()  0x800D
define EVENT_OBJECT_VALUECHANGE()  0x800E
define EVENT_OBJECT_PARENTCHANGE()  0x800F
define EVENT_OBJECT_HELPCHANGE()  0x8010
define EVENT_OBJECT_DEFACTIONCHANGE()  0x8011
define EVENT_OBJECT_ACCELERATORCHANGE()  0x8012
define SOUND_SYSTEM_STARTUP()  1
define SOUND_SYSTEM_SHUTDOWN()  2
define SOUND_SYSTEM_BEEP()  3
define SOUND_SYSTEM_ERROR()  4
define SOUND_SYSTEM_QUESTION()  5
define SOUND_SYSTEM_WARNING()  6
define SOUND_SYSTEM_INFORMATION()  7
define SOUND_SYSTEM_MAXIMIZE()  8
define SOUND_SYSTEM_MINIMIZE()  9
define SOUND_SYSTEM_RESTOREUP()  10
define SOUND_SYSTEM_RESTOREDOWN()  11
define SOUND_SYSTEM_APPSTART()  12
define SOUND_SYSTEM_FAULT()  13
define SOUND_SYSTEM_APPEND()  14
define SOUND_SYSTEM_MENUCOMMAND()  15
define SOUND_SYSTEM_MENUPOPUP()  16
define CSOUND_SYSTEM()  16
define ALERT_SYSTEM_INFORMATIONAL()  1
define ALERT_SYSTEM_WARNING()  2
define ALERT_SYSTEM_ERROR()  3
define ALERT_SYSTEM_QUERY()  4
define ALERT_SYSTEM_CRITICAL()  5
define CALERT_SYSTEM()  6
define WINEVENT_OUTOFCONTEXT()  0
define WINEVENT_SKIPOWNTHREAD()  1
define WINEVENT_SKIPOWNPROCESS()  2
define WINEVENT_INCONTEXT()  4
define GUI_CARETBLINKING()  1
define GUI_INMOVESIZE()  2
define GUI_INMENUMODE()  4
define GUI_SYSTEMMENUMODE()  8
define GUI_POPUPMENUMODE()  0x10
define STATE_SYSTEM_UNAVAILABLE()  1
define STATE_SYSTEM_SELECTED()  2
define STATE_SYSTEM_FOCUSED()  4
define STATE_SYSTEM_PRESSED()  8
define STATE_SYSTEM_CHECKED()  0x10
define STATE_SYSTEM_MIXED()  0x20
define STATE_SYSTEM_READONLY()  0x40
define STATE_SYSTEM_HOTTRACKED()  0x80
define STATE_SYSTEM_DEFAULT()  0x100
define STATE_SYSTEM_EXPANDED()  0x200
define STATE_SYSTEM_COLLAPSED()  0x400
define STATE_SYSTEM_BUSY()  0x800
define STATE_SYSTEM_FLOATING()  0x1000
define STATE_SYSTEM_MARQUEED()  0x2000
define STATE_SYSTEM_ANIMATED()  0x4000
define STATE_SYSTEM_INVISIBLE()  0x8000
define STATE_SYSTEM_OFFSCREEN()  0x10000
define STATE_SYSTEM_SIZEABLE()  0x20000
define STATE_SYSTEM_MOVEABLE()  0x40000
define STATE_SYSTEM_SELFVOICING()  0x80000
define STATE_SYSTEM_FOCUSABLE()  0x100000
define STATE_SYSTEM_SELECTABLE()  0x200000
define STATE_SYSTEM_LINKED()  0x400000
define STATE_SYSTEM_TRAVERSED()  0x800000
define STATE_SYSTEM_MULTISELECTABLE()  0x1000000
define STATE_SYSTEM_EXTSELECTABLE()  0x2000000
define STATE_SYSTEM_ALERT_LOW()  0x4000000
define STATE_SYSTEM_ALERT_MEDIUM()  0x8000000
define STATE_SYSTEM_ALERT_HIGH()  0x10000000
define STATE_SYSTEM_VALID()  0x1FFFFFFF
define CCHILDREN_TITLEBAR()  5
define CCHILDREN_SCROLLBAR()  5
define GA_MIC()  1
define GA_PARENT()  1
define GA_ROOT()  2
define GA_ROOTOWNER()  3
define GA_MAC()  4
define CURSOR_SHOWING()  1
define WS_ACTIVECAPTION()  1

//-----------------------------------[ winuser.h - Structures ]---------------------------------
struct CWPRETSTRUCT
{
    int32      lResult;
    int32      lParam;
    int32      wParam;
    int32      message;
    int32      hwnd;
}

struct HARDWAREHOOKSTRUCT
{
    int32      hwnd;
    int32      message;
    int32      wParam;
    int32      lParam;
}

struct USEROBJECTFLAGS
{
    int32      fInherit;
    int32      fReserved;
    int32      dwFlags;
}

struct MDINEXTMENU
{
    int32      hmenuIn;
    int32      hmenuNext;
    int32      hwndNext;
}

struct NCCALCSIZE_PARAMS
{
    RECT[3]  rgrc;
    int32      lppos;
}

struct STYLESTRUCT
{
    int32      styleOld;
    int32      styleNew;
}

struct DROPSTRUCT
{
    int32      hwndSource;
    int32      hwndSink;
    int32      wFmt;
    int32      dwData;
    POINT      ptDrop;
    int32      dwControlData;
}

struct CURSORSHAPE
{
    int32      xHotSpot;
    int32      yHotSpot;
    int32      regCx;
    int32      regCy;
    int32      cbWidth;
    int8      Planes;
    int8      BitsPixel;
}

struct SERIALKEYSA
{
    int32      cbSize;
    int32      dwFlags;
    int32      lpszActivePort;
    int32      lpszPort;
    int32      iBaudRate;
    int32      iPortState;
    int32      iActive;
}

define SERIALKEYS()  SERIALKEYSA

struct HIGHCONTRASTA
{
    int32      cbSize;
    int32      dwFlags;
    int32      lpszDefaultScheme;
}

define HIGHCONTRAST()  HIGHCONTRASTA

struct FILTERKEYS
{
    int32      cbSize;
    int32      dwFlags;
    int32      iWaitMSec;
    int32      iDelayMSec;
    int32      iRepeatMSec;
    int32      iBounceMSec;
}

struct STICKYKEYS
{
    int32      cbSize;
    int32      dwFlags;
}

struct MOUSEKEYS
{
    int32      cbSize;
    int32      dwFlags;
    int32      iMaxSpeed;
    int32      iTimeToMaxSpeed;
    int32      iCtrlSpeed;
    int32      dwReserved1;
    int32      dwReserved2;
}

struct ACCESSTIMEOUT
{
    int32      cbSize;
    int32      dwFlags;
    int32      iTimeOutMSec;
}

struct SOUNDSENTRYA
{
    int32      cbSize;
    int32      dwFlags;
    int32      iFSTextEffect;
    int32      iFSTextEffectMSec;
    int32      iFSTextEffectColorBits;
    int32      iFSGrafEffect;
    int32      iFSGrafEffectMSec;
    int32      iFSGrafEffectColor;
    int32      iWindowsEffect;
    int32      iWindowsEffectMSec;
    int32      lpszWindowsEffectDLL;
    int32      iWindowsEffectOrdinal;
}

define SOUNDSENTRY()  SOUNDSENTRYA

struct TOGGLEKEYS
{
    int32      cbSize;
    int32      dwFlags;
}

//-------------------------------------[ wtypes.h ]------------------------------
define IID()  GUID
define CLSID()  GUID
define MEMCTX_TASK()  1
define MEMCTX_SHARED()  2
define MEMCTX_MACSYSTEM()  3
define MEMCTX_UNKNOWN()  -1
define MEMCTX_SAME()  -2
define ROTFLAGS_REGISTRATIONKEEPSALIVE()  1
define ROTFLAGS_ALLOWANYCLIENT()  2
define ROT_COMPARE_MAX()  2048
define CLSCTX_INPROC_SERVER()  1
define CLSCTX_INPROC_HANDLER()  2
define CLSCTX_LOCAL_SERVER()  4
define CLSCTX_INPROC_SERVER16()  8
define CLSCTX_REMOTE_SERVER()  0x10
define CLSCTX_INPROC_HANDLER16()  0x20
define CLSCTX_INPROC_SERVERX86()  0x40
define CLSCTX_INPROC_HANDLERX86()  0x80
define CLSCTX_ESERVER_HANDLER()  0x100
define MSHLFLAGS_NORMAL()  0
define MSHLFLAGS_TABLESTRONG()  1
define MSHLFLAGS_TABLEWEAK()  2
define MSHLFLAGS_NOPING()  4
define MSHCTX_LOCAL()  0
define MSHCTX_NOSHAREDMEM()  1
define MSHCTX_DIFFERENTMACHINE()  2
define MSHCTX_INPROC()  3
define DVASPECT_CONTENT()  1
define DVASPECT_THUMBNAIL()  2
define DVASPECT_ICON()  4
define DVASPECT_DOCPRINT()  8
define STGC_DEFAULT()  0
define STGC_OVERWRITE()  1
define STGC_ONLYIFCURRENT()  2
define STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE()  4
define STGC_CONSOLIDATE()  8
define STGMOVE_MOVE()  0
define STGMOVE_COPY()  1
define STGMOVE_SHALLOWCOPY()  2
define STATFLAG_DEFAULT()  0
define STATFLAG_NONAME()  1
define STATFLAG_NOOPEN()  2
define WDT_INPROC_CALL()  0x48746457
define WDT_REMOTE_CALL()  0x52746457
define VARIANT_TRUE()  0x0ffff
define VARIANT_FALSE()  0
define DECIMAL_NEG()  80
define APPINFO_PUBLISHED()  1
define APPINFO_SHELLNEW()  APPINFO_PUBLISHED + 1
define APPINFO_INSERTABLE()  APPINFO_SHELLNEW + 1
define ACTFLG_RunLocally()  1
define ACTFLG_RunOnce()  2
define ACTFLG_SystemWide()  4
define ACTFLG_Published()  8
define ACTFLG_Assigned()  16
define ACTFLG_UserInstall()  32
define ExeNamePath()  0
define DllNamePath()  ExeNamePath + 1
define TlbNamePath()  DllNamePath + 1
define CabFilePath()  TlbNamePath + 1
define InfFilePath()  CabFilePath + 1
define DrwFilePath()  InfFilePath + 1
define SetupNamePath()  DrwFilePath + 1
define TYSPEC_CLSID()  0
define TYSPEC_FILEEXT()  TYSPEC_CLSID + 1
define TYSPEC_MIMETYPE()  TYSPEC_FILEEXT + 1
define TYSPEC_PROGID()  TYSPEC_MIMETYPE + 1
define TYSPEC_IID()  TYSPEC_PROGID + 1
define TYSPEC_TYPELIB()  TYSPEC_IID + 1
define TYSPEC_FILENAME()  TYSPEC_TYPELIB + 1
define TYSPEC_JAVACLASS()  TYSPEC_FILENAME + 1
define TYSPEC_PACKAGENAME()  TYSPEC_JAVACLASS + 1
define VT_EMPTY()  0
define VT_NULL()  1
define VT_I2()  2
define VT_I4()  3
define VT_R4()  4
define VT_R8()  5
define VT_CY()  6
define VT_DATE()  7
define VT_BSTR()  8
define VT_DISPATCH()  9
define VT_ERROR()  10
define VT_BOOL()  11
define VT_VARIANT()  12
define VT_UNKNOWN()  13
define VT_DECIMAL()  14
define VT_I1()  16
define VT_UI1()  17
define VT_UI2()  18
define VT_UI4()  19
define VT_I8()  20
define VT_UI8()  21
define VT_INT()  22
define VT_UINT()  23
define VT_VOID()  24
define VT_HRESULT()  25
define VT_PTR()  26
define VT_SAFEARRAY()  27
define VT_CARRAY()  28
define VT_USERDEFINED()  29
define VT_LPSTR()  30
define VT_LPWSTR()  31
define VT_RECORD()  36
define VT_FILETIME()  64
define VT_BLOB()  65
define VT_STREAM()  66
define VT_STORAGE()  67
define VT_STREAMED_OBJECT()  68
define VT_STORED_OBJECT()  69
define VT_BLOB_OBJECT()  70
define VT_CF()  71
define VT_CLSID()  72
define VT_BSTR_BLOB()  0x0fff
define VT_VECTOR()  0x1000
define VT_ARRAY()  0x2000
define VT_BYREF()  0x4000
define VT_RESERVED()  0x8000
define VT_ILLEGAL()  0x0ffff
define VT_ILLEGALMASKED()  0x0fff
define VT_TYPEMASK()  0x0fff

struct RemHGLOBAL
{
    int32      fNullHGlobal;
    int32      cbData;
    int8      data;
}

struct RemHMETAFILEPICT
{
    int32      imm;
    int32      xExt;
    int32      yExt;
    int32      cbData;
    int8      data;
}

struct RemHENHMETAFILE
{
    int32      cbData;
    int8      data;
}

struct RemHBITMAP
{
    int32      cbData;
    int8      data;
}

struct RemHPALETTE
{
    int32      cbData;
    int8      data;
}

struct RemHBRUSH
{
    int32      cbData;
    int8      data;
}

struct COAUTHIDENTITY
{
    int32      User;
    int32      UserLength;
    int32      Domain;
    int32      DomainLength;
    int32      Password;
    int32      PasswordLength;
    int32      Flags;
}

struct COAUTHINFO
{
    int32      dwAuthnSvc;
    int32      dwAuthzSvc;
    int32      pwszServerPrincName;
    int32      dwAuthnLevel;
    int32      dwImpersonationLevel;
    int32      pAuthIdentityData;
    int32      dwCapabilities;
}

struct BYTE_BLOB
{
    int32      clSize;
    int8      abData;
}

struct WORD_BLOB
{
    int32      clSize;
    int16      asData;
}

struct DWORD_BLOB
{
    int32      clSize;
    int32      alData;
}

struct FLAGGED_BYTE_BLOB
{
    int32      fFlags;
    int32      clSize;
    int8      abData;
}

struct FLAGGED_WORD_BLOB
{
    int32      fFlags;
    int32      clSize;
    int16      asData;
}

struct BYTE_SIZEDARR
{
    int32      clSize;
    int32      pData;
}

struct WORD_SIZEDARR
{
    int32      clSize;
    int32      pData;
}

struct DWORD_SIZEDARR
{
    int32      clSize;
    int32      pData;
}

struct HYPER_SIZEDARR
{
    int32      clSize;
    int32      pData;
}

struct userCLIPFORMAT
{
    int32      fContext;
    union UNION_userCLIPFORMAT
    {
        int32          dwValue;
        int32          pwszName;
    }
}

struct GDI_NONREMOTE
{
    int32      fContext;
    union UNION_GDI_NONREMOTE
    {
        int32          hInproc;
        int32          hRemote;
    }
}

struct userHGLOBAL
{
    int32      fContext;
    union UNION_userHGLOBAL
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct userHMETAFILE
{
    int32      fContext;
    union UNION_userHMETAFILE
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct remoteMETAFILEPICT
{
    int32      imm;
    int32      xExt;
    int32      yExt;
    int32      hMF;
}

struct userHMETAFILEPICT
{
    int32      fContext;
    union UNION_userHMETAFILEPICT
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct userHENHMETAFILE
{
    int32      fContext;
    union UNION_userHENHMETAFILE
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct userBITMAP
{
    int32      bmType;
    int32      bmWidth;
    int32      bmHeight;
    int32      bmWidthBytes;
    int16      bmPlanes;
    int16      bmBitsPixel;
    int32      cbSize;
    int8      pBuffer;
}

struct userHBITMAP
{
    int32      fContext;
    union UNION_userHBITMAP
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct rpcLOGPALETTE
{
    int16      palVersion;
    int16      palNumEntries;
    PALETTEENTRY      palPalEntry    ;
}

struct userHPALETTE
{
    int32      fContext;
    union UNION_userHPALETTE
    {
        int32          hInproc;
        int32          hRemote;
        int32          hGlobal;
    }
}

struct RemotableHandle
{
    int32      fContext;
    union UNION_RemotableHandle
    {
        int32          hInproc;
        int32          hRemote;
    }
}

struct BSTRBLOB
{
    int32      cbSize;
    int32      pData;
}

struct BLOB
{
    int32      cbSize;
    int32      pBlobData;
}

struct CLIPDATA
{
    int32      cbSize;
    int32      ulClipFmt;
    int32      pClipData;
}

struct CSPLATFORM
{
    int32      dwPlatformId;
    int32      dwVersionHi;
    int32      dwVersionLo;
    int32      dwProcessorArch;
}

struct QUERYCONTEXT
{
    int32      dwContext;
    CSPLATFORM      Platform;
    int32      Locale;
    int32      dwVersionHi;
    int32      dwVersionLo;
}

struct uCLSSPEC
{
    int32      tyspec;
    union UNION_uCLSSPEC
    {
        CLSID          clsid;
        IID          iid;
        GUID          typelibID;
        int32          pFileExt;
        int32          pMimeType;
        int32          pProgId;
        int32          pFileName;
        int32          pJavaClassName;
        int32          pPackageName;
    }
}

struct PUBLISHEDAPPINFO
{
    int32      pwszFileExtension;
    int32      pwszDisplayName;
    int32      pwszPackagePath;
}

struct APPDETAIL
{
    GUID      AppID;
    int32      cClasses;
    int32      prgClsIdList;
    int32      cTypeLibIds;
    int32      prgTypeLibIdList;
    int32      cServers;
    int32      prgServerNames;
}

//-------------------------------------------[ mmsystem.h ]--------------------------------
define MM_DRVM_OPEN()  0x3D0
define MM_DRVM_CLOSE()  0x3D1
define MM_DRVM_DATA()  0x3D2
define MM_DRVM_ERROR()  0x3D3
define MM_STREAM_OPEN()  0x3D4
define MM_STREAM_CLOSE()  0x3D5
define MM_STREAM_DONE()  0x3D6
define MM_STREAM_ERROR()  0x3D7
define MM_MIXM_LINE_CHANGE()  0x3D0
define MM_MIXM_CONTROL_CHANGE()  0x3D1
define MMSYSERR_BADDB()  (MMSYSERR_BASE + 14)
define MMSYSERR_KEYNOTFOUND()  (MMSYSERR_BASE + 15)
define MMSYSERR_READERROR()  (MMSYSERR_BASE + 16)
define MMSYSERR_WRITEERROR()  (MMSYSERR_BASE + 17)
define MMSYSERR_DELETEERROR()  (MMSYSERR_BASE + 18)
define MMSYSERR_VALNOTFOUND()  (MMSYSERR_BASE + 19)
define MMSYSERR_NODRIVERCB()  (MMSYSERR_BASE + 20)
define CALLBACK_THREAD()  (CALLBACK_TASK)
define CALLBACK_EVENT()  0x50000
define WAVECAPS_SAMPLEACCURATE()  0x20
define WAVECAPS_DIRECTSOUND()  0x40
define MIDIERR_BADOPENMODE()  (MIDIERR_BASE + 6)
define MIDIERR_DONT_CONTINUE()  (MIDIERR_BASE + 7)
define MIDIPATCHSIZE()  128
define MEVT_SHORTMSG()  0
define MEVT_TEMPO()  1
define MEVT_NOP()  2
define MEVT_LONGMSG()  0x80
define MEVT_COMMENT()  0x82
define MEVT_VERSION()  0x84
define MMIOERR_PATHNOTFOUND()  (MMIOERR_BASE + 11)
define MMIOERR_ACCESSDENIED()  (MMIOERR_BASE + 12)
define MMIOERR_SHARINGVIOLATION()  (MMIOERR_BASE + 13)
define MMIOERR_NETWORKERROR()  (MMIOERR_BASE + 14)
define MMIOERR_TOOMANYOPENFILES()  (MMIOERR_BASE + 15)
define MMIOERR_INVALIDFILE()  (MMIOERR_BASE + 16)
define CFSEPCHAR()  '+'
define MCIERR_NO_IDENTITY()  (MCIERR_BASE + 94)
define MCI_INFO_MEDIA_UPC()  0x400
define MCI_INFO_MEDIA_IDENTITY()  0x800
define MCI_INFO_NAME()  0x1000
define MCI_INFO_COPYRIGHT()  0x2000
define MCI_CDA_STATUS_TYPE_TRACK()  0x4001
define MCI_CDA_TRACK_AUDIO()  (MCI_CD_OFFSET + 0)
define MCI_CDA_TRACK_OTHER()  (MCI_CD_OFFSET + 1)
define MCI_SEQ_STATUS_NAME()  0x400B
define MCI_SEQ_STATUS_COPYRIGHT()  0x400C

struct MIXERLINEA
{
    int32      cbStruct;
    int32      dwDestination;
    int32      dwSource;
    int32      dwLineID;
    int32      fdwLine;
    int32      dwUser;
    int32      dwComponentType;
    int32      cChannels;
    int32      cConnections;
    int32      cControls;
    int8[MIXER_SHORT_NAME_CHARS]  szShortName;
    int8[MIXER_LONG_NAME_CHARS]  szName;
    struct STRUCT_MIXERLINEA
    {
        int32   dwType;
        int32   dwDeviceID;
        int16   wMid;
        int16   wPid;
        MMVERSION   vDriverVersion;
        int8[MAXPNAMELEN]  szPname;
    }
}

define MIXERLINE()  MIXERLINEA

struct MIXERCONTROLA
{
    int32       cbStruct;
    int32       dwControlID;
    int32       dwControlType;
    int32       fdwControl;
    int32       cMultipleItems;
    int8[MIXER_SHORT_NAME_CHARS]  szShortName;
    int8[MIXER_LONG_NAME_CHARS]  szName;
    union UNION_MIXERCONTROLA
    {
        struct STRUCT_MIXERLINEA
        {
            int32    lMinimum;
            int32    lMaximum;
        }
        struct STRUCT_MIXERLINEA2
        {
            int32    dwMinimum;
            int32    dwMaximum;
        }
        int32[6]  dwReserved;
    }
    union UNION_UNION_MIXERCONTROLA
    {
        int32   cSteps;
        int32   cbCustomData;
        int32[6]  dwReserved;
    }
}

define MIXERCONTROL()  MIXERCONTROLA

struct WAVEFORMATEX
{
    int16   wFormatTag;
    int16   nChannels;
    int32   nSamplesPerSec;
    int32   nAvgBytesPerSec;
    int16   nBlockAlign;
    int16   wBitsPerSample;
    int16   cbSize;
}

struct MIXERCONTROLDETAILS_LISTTEXTA
{
    int32   dwParam1;
    int32   dwParam2;
    int8[MIXER_LONG_NAME_CHARS]  szName;
}

define MIXERCONTROLDETAILS_LISTTEXT()  MIXERCONTROLDETAILS_LISTTEXTA

//-------------------------------------[ lmcons.h ]--------------------------------------
define CNLEN()  15
define LM20_CNLEN()  15
define DNLEN()  CNLEN
define LM20_DNLEN()  LM20_CNLEN
define UNCLEN()  CNLEN+2
define LM20_UNCLEN()  LM20_CNLEN+2
define NNLEN()  80
define LM20_NNLEN()  12
define RMLEN()  UNCLEN+1+NNLEN
define LM20_RMLEN()  LM20_UNCLEN+1+LM20_NNLEN
define SNLEN()  80
define LM20_SNLEN()  15
define STXTLEN()  256
define LM20_STXTLEN()  63
define PATHLEN()  256
define LM20_PATHLEN()  256
define DEVLEN()  80
define LM20_DEVLEN()  8
define EVLEN()  16
define UNLEN()  256
define LM20_UNLEN()  20
define GNLEN()  UNLEN
define LM20_GNLEN()  LM20_UNLEN
define PWLEN()  256
define LM20_PWLEN()  14
define SHPWLEN()  8
define CLTYPE_LEN()  12
define MAXCOMMENTSZ()  256
define LM20_MAXCOMMENTSZ()  48
define QNLEN()  NNLEN
define LM20_QNLEN()  LM20_NNLEN
define ALERTSZ()  128
define MAXDEVENTRIES()  sizeof int 4*8
define NETBIOS_NAME_LEN()  16
define MAX_PREFERRED_LENGTH()  -1
define CRYPT_KEY_LEN()  7
define CRYPT_TXT_LEN()  8
define ENCRYPTED_PWLEN()  16
define SESSION_PWLEN()  24
define SESSION_CRYPT_KLEN()  21
define PARMNUM_ALL()  0
define PARM_ERROR_UNKNOWN()  -1
define PARM_ERROR_NONE()  0
define PARMNUM_BASE_INFOLEVEL()  1000
define MESSAGE_FILENAME()  "NETMSG"
define OS2MSG_FILENAME()  "BASE"
define HELP_MSG_FILENAME()  "NETH"
define BACKUP_MSG_FILENAME()  "BAK.MSG"
define PLATFORM_ID_DOS()  300
define PLATFORM_ID_OS2()  400
define PLATFORM_ID_NT()  500
define PLATFORM_ID_OSF()  600
define PLATFORM_ID_VMS()  700
define MIN_LANMAN_MESSAGE_ID()  NERR_BASE
define MAX_LANMAN_MESSAGE_ID()  5799

//---------------------------------------[ RAS.H ]-----------------------------------------
define RAS_MaxDeviceType()  16
define RAS_MaxPhoneNumber()  128
define RAS_MaxIpAddress()  15
define RAS_MaxIpxAddress()  21
define RAS_MaxEntryName()  256
define RAS_MaxDeviceName()  128
define RAS_MaxCallbackNumber()  RAS_MaxPhoneNumber
define RAS_MaxAreaCode()  10
define RAS_MaxPadType()  32
define RAS_MaxX25Address()  200
define RAS_MaxFacilities()  200
define RAS_MaxUserData()  200
define RASCS_PAUSED()  0x1000
define RASCS_DONE()  0x2000
define RDEOPT_UsePrefixSuffix()  1
define RDEOPT_PausedStates()  2
define RDEOPT_IgnoreModemSpeaker()  4
define RDEOPT_SetModemSpeaker()  8
define RDEOPT_IgnoreSoftwareCompression()  0x10
define RDEOPT_SetSoftwareCompression()  0x20
define RDEOPT_DisableConnectedUI()  0x40
define RDEOPT_DisableReconnectUI()  0x80
define RDEOPT_DisableReconnect()  0x100
define RDEOPT_NoUser()  0x200
define RDEOPT_PauseOnScript()  0x400
define RASDIALEVENT()  "RasDialEvent"
define WM_RASDIALEVENT()  0x0CCCD
define RASEO_UseCountryAndAreaCodes()  1
define RASEO_SpecificIpAddr()  2
define RASEO_SpecificNameServers()  4
define RASEO_IpHeaderCompression()  8
define RASEO_RemoteDefaultGateway()  0x10
define RASEO_DisableLcpExtensions()  0x20
define RASEO_TerminalBeforeDial()  0x40
define RASEO_TerminalAfterDial()  0x80
define RASEO_ModemLights()  0x100
define RASEO_SwCompression()  0x200
define RASEO_RequireEncryptedPw()  0x400
define RASEO_RequireMsEncryptedPw()  0x800
define RASEO_RequireDataEncryption()  0x1000
define RASEO_NetworkLogon()  0x2000
define RASEO_UseLogonCredentials()  0x4000
define RASEO_PromoteAlternates()  0x8000
define RASEO_SecureLocalFiles()  0x10000
define RASNP_NetBEUI()  1
define RASNP_Ipx()  2
define RASNP_Ip()  4
define RASFP_Ppp()  1
define RASFP_Slip()  2
define RASFP_Ras()  4
define RASDT_Modem()  "modem"
define RASDT_Isdn()  "isdn"
define RASDT_X25()  "x25"
define RASCN_Connection()  1
define RASCN_Disconnection()  2
define RASCN_BandwidthAdded()  4
define RASCN_BandwidthRemoved()  8
define RASEDM_DialAll()  1
define RASEDM_DialAsNeeded()  2
define RASIDS_Disabled()  0x0ffffffff
define RASIDS_UseGlobalValue()  0
define RASADFLG_PositionDlg()  1
define RASCM_UserName()  1
define RASCM_Password()  2
define RASCM_Domain()  4
define RASADP_DisableConnectionQuery()  0
define RASADP_LoginSessionDisable()  1
define RASADP_SavedAddressesLimit()  2
define RASADP_FailedConnectionTimeout()  3
define RASADP_ConnectionQueryTimeout()  4

define RASCS_OpenPort()  0
define RASCS_PortOpened()  1
define RASCS_ConnectDevice()  2
define RASCS_DeviceConnected()  3
define RASCS_AllDevicesConnected()  4
define RASCS_Authenticate()  5
define RASCS_AuthNotify()  6
define RASCS_AuthRetry()  7
define RASCS_AuthCallback()  8
define RASCS_AuthChangePassword()  9
define RASCS_AuthProject()  10
define RASCS_AuthLinkSpeed()  11
define RASCS_AuthAck()  12
define RASCS_ReAuthenticate()  13
define RASCS_Authenticated()  14
define RASCS_PrepareForCallback()  15
define RASCS_WaitForModemReset()  16
define RASCS_WaitForCallback()  17
define RASCS_Projected()  18
define RASCS_StartAuthentication()  19
define RASCS_CallbackComplete()  20
define RASCS_LogonNetwork()  21
define RASCS_SubEntryConnected()  22
define RASCS_SubEntryDisconnected()  23
define RASCS_Interactive()  RASCS_PAUSED
define RASCS_RetryAuthentication()  RASCS_PAUSED+1
define RASCS_CallbackSetByCaller()  RASCS_PAUSED+2
define RASCS_PasswordExpired()  RASCS_PAUSED+3
define RASCS_Connected()  RASCS_DONE
define RASCS_Disconnected()  RASCS_DONE+1
define RASP_Amb()  0x10000
define RASP_PppNbf()  0x803F
define RASP_PppIpx()  0x802B
define RASP_PppIp()  0x8021
define RASP_PppLcp()  0x0C021
define RASP_Slip()  0x20000

struct RASCONNA
{
    int32      dwSize;
    int32      hrasconn;
    int8[RAS_MaxEntryName+1]  szEntryName;
    int8[RAS_MaxDeviceType+1]  szDeviceType;
    int8[RAS_MaxDeviceName+1]  szDeviceName;
}

define RASCONN()  RASCONNA

struct RASCONNSTATUSA
{
    int32      dwSize;
    int32      rasconnstate;
    int32      dwError;
    int8[RAS_MaxDeviceType+1]  szDeviceType;
    int8[RAS_MaxDeviceName+1]  szDeviceName;
}

define RASCONNSTATUS()  RASCONNSTATUSA

struct RASDIALPARAMSA
{
    int32      dwSize;
    int8[RAS_MaxEntryName+1]  szEntryName;
    int8[RAS_MaxPhoneNumber+1]  szPhoneNumber;
    int8[RAS_MaxCallbackNumber+1]  szCallbackNumber;
    int8[UNLEN+1]  szUserName;
    int8[PWLEN+1]  szPassword;
    int8[DNLEN+1]  szDomain;
}

define RASDIALPARAMS()  RASDIALPARAMSA

struct RASDIALEXTENSIONS
{
    int32      dwSize;
    int32      dwfOptions;
    int32      hwndParent;
    int32      reserved;
}

struct RASENTRYNAMEA
{
    int32      dwSize;
    int8[RAS_MaxEntryName+1]  szEntryName;
}

define RASENTRYNAME()  RASENTRYNAMEA

struct RASAMBA
{
    int32      dwSize;
    int32      dwError;
    int8[NETBIOS_NAME_LEN+1]  szNetBiosError;
    int8      bLana;
}

define RASAMB()  RASAMBA

struct RASPPPNBFA
{
    int32      dwSize;
    int32      dwError;
    int32      dwNetBiosError;
    int8[NETBIOS_NAME_LEN+1]  szNetBiosError;
    int8[NETBIOS_NAME_LEN+1]  szWorkstationName;
    int8      bLana;
}

define RASPPPNBF()  RASPPPNBFA

struct RASPPPIPXA
{
    int32      dwSize;
    int32      dwError;
    int8[RAS_MaxIpxAddress+1]  szIpxAddress;
}

define RASPPPIPX()  RASPPPIPXA

struct RASPPPIPA
{
    int32      dwSize;
    int32      dwError;
    int8[RAS_MaxIpAddress+1]  szIpAddress;
    int8[RAS_MaxIpAddress+1]  szServerIpAddress;
}

define RASPPPIP()  RASPPPIPA

struct RASPPPLCP
{
    int32      dwSize;
    BOOL      fBundled;
}

struct RASSLIPA
{
    int32      dwSize;
    int32      dwError;
    int8[RAS_MaxIpAddress+1]  szIpAddress;
}

define RASSLIP()  RASSLIPA

struct RASDEVINFOA
{
    int32      dwSize;
    int8[RAS_MaxDeviceType+1]  szDeviceType;
    int8[RAS_MaxDeviceName+1]  szDeviceName;
}

define RASDEVINFO()  RASDEVINFOA

struct RASCTRYINFO
{
    int32      dwSize;
    int32      dwCountryID;
    int32      dwNextCountryID;
    int32      dwCountryCode;
    int32      dwCountryNameOffset;
}

struct RASIPADDR
{
    int8      _a;
    int8      _b;
    int8      _c;
    int8      _d;
}

struct RASENTRYA
{
    int32      dwSize;
    int32      dwfOptions;
    int32      dwCountryID;
    int32      dwCountryCode;
    int8[RAS_MaxAreaCode+1]  szAreaCode;
    int8[RAS_MaxPhoneNumber+1]  szLocalPhoneNumber;
    int32      dwAlternateOffset;
    RASIPADDR      ipaddr;
    RASIPADDR      ipaddrDns;
    RASIPADDR      ipaddrDnsAlt;
    RASIPADDR      ipaddrWins;
    RASIPADDR      ipaddrWinsAlt;
    int32      dwFrameSize;
    int32      dwfNetProtocols;
    int32      dwFramingProtocol;
    int8[MAX_PATH]  szScript;
    int8[MAX_PATH]  szAutodialDll;
    int8[MAX_PATH]  szAutodialFunc;
    int8[RAS_MaxDeviceType+1]  szDeviceType;
    int8[RAS_MaxDeviceName+1]  szDeviceName;
    int8[RAS_MaxPadType+1]  szX25PadType;
    int8[RAS_MaxX25Address+1]  szX25Address;
    int8[RAS_MaxFacilities+1]  szX25Facilities;
    int8[RAS_MaxUserData+1]  szX25UserData;
    int32      dwChannels;
    int32      dwReserved1;
    int32      dwReserved2;
}

define RASENTRY()  RASENTRYA

//-----------------------------------------[ rasdlg.h ]--------------------------------
define RASPBDEVENT_AddEntry()  1
define RASPBDEVENT_EditEntry()  2
define RASPBDEVENT_RemoveEntry()  3
define RASPBDEVENT_DialEntry()  4
define RASPBDEVENT_EditGlobals()  5
define RASPBDEVENT_NoUser()  6
define RASPBDEVENT_NoUserEdit()  7
define RASPBDFLAG_PositionDlg()  1
define RASPBDFLAG_ForceCloseOnDial()  2
define RASPBDFLAG_NoUser()  0x10
define RASPBDFLAG_UpdateDefaults()  0x80000000
define RASMDPAGE_Status()  0
define RASMDPAGE_Summary()  1
define RASMDPAGE_Preferences()  2
define RASMDFLAG_PositionDlg()  1
define RASMDFLAG_UpdateDefaults()  0x80000000
define RASEDFLAG_PositionDlg()  1
define RASEDFLAG_NewEntry()  2
define RASEDFLAG_CloneEntry()  4
define RASEDFLAG_NoRename()  8
define RASDDFLAG_PositionDlg()  1
define RASDDFLAG_LinkFailure()  0x80000000

struct RASPBDLGA
{
    int32      dwSize;
    int32      hwndOwner;
    int32      dwFlags;
    int32      xDlg;
    int32      yDlg;
    int32      dwCallbackId;
    int32      pCallback;
    int32      dwError;
    int32      reserved;
    int32      reserved2;
}

define RASPBDLG()  RASPBDLGA

struct RASENTRYDLGA
{
    int32      dwSize;
    int32      hwndOwner;
    int32      dwFlags;
    int32      xDlg;
    int32      yDlg;
    int8[RAS_MaxEntryName+1]  szEntry;
    int32      dwError;
    int32      reserved;
    int32      reserved2;
}

define RASENTRYDLG()  RASENTRYDLGA

struct RASDIALDLG
{
    int32      dwSize;
    int32      hwndOwner;
    int32      dwFlags;
    int32      xDlg;
    int32      yDlg;
    int32      dwSubEntry;
    int32      dwError;
    int32      reserved;
    int32      reserved2;
}

struct RASMONITORDLG
{
    int32      dwSize;
    int32      hwndOwner;
    int32      dwFlags;
    int32      dwStartPage;
    int32      xDlg;
    int32      yDlg;
    int32      dwError;
    int32      reserved;
    int32      reserved2;
}

struct RASNOUSERA
{
    int32      dwSize;
    int32      dwFlags;
    int32      dwTimeoutMs;
    int8[UNLEN+1]  szUserName;
    int8[PWLEN+1]  szPassword;
    int8[DNLEN+1]  szDomain;
}

define RASNOUSER()  RASNOUSERA

//----------------------------------------[ raserror.h ]--------------------------------
define RASBASE()  600
define SUCCESS()  0
define PENDING()  (RASBASE+0)
define ERROR_INVALID_PORT_HANDLE()  (RASBASE+1)
define ERROR_PORT_ALREADY_OPEN()  (RASBASE+2)
define ERROR_BUFFER_TOO_SMALL()  (RASBASE+3)
define ERROR_WRONG_INFO_SPECIFIED()  (RASBASE+4)
define ERROR_CANNOT_SET_PORT_INFO()  (RASBASE+5)
define ERROR_PORT_NOT_CONNECTED()  (RASBASE+6)
define ERROR_EVENT_INVALID()  (RASBASE+7)
define ERROR_DEVICE_DOES_NOT_EXIST()  (RASBASE+8)
define ERROR_DEVICETYPE_DOES_NOT_EXIST()  (RASBASE+9)
define ERROR_BUFFER_INVALID()  (RASBASE+10)
define ERROR_ROUTE_NOT_AVAILABLE()  (RASBASE+11)
define ERROR_ROUTE_NOT_ALLOCATED()  (RASBASE+12)
define ERROR_INVALID_COMPRESSION_SPECIFIED()  (RASBASE+13)
define ERROR_OUT_OF_BUFFERS()  (RASBASE+14)
define ERROR_PORT_NOT_FOUND()  (RASBASE+15)
define ERROR_ASYNC_REQUEST_PENDING()  (RASBASE+16)
define ERROR_ALREADY_DISCONNECTING()  (RASBASE+17)
define ERROR_PORT_NOT_OPEN()  (RASBASE+18)
define ERROR_PORT_DISCONNECTED()  (RASBASE+19)
define ERROR_NO_ENDPOINTS()  (RASBASE+20)
define ERROR_CANNOT_OPEN_PHONEBOOK()  (RASBASE+21)
define ERROR_CANNOT_LOAD_PHONEBOOK()  (RASBASE+22)
define ERROR_CANNOT_FIND_PHONEBOOK_ENTRY()  (RASBASE+23)
define ERROR_CANNOT_WRITE_PHONEBOOK()  (RASBASE+24)
define ERROR_CORRUPT_PHONEBOOK()  (RASBASE+25)
define ERROR_CANNOT_LOAD_STRING()  (RASBASE+26)
define ERROR_KEY_NOT_FOUND()  (RASBASE+27)
define ERROR_DISCONNECTION()  (RASBASE+28)
define ERROR_REMOTE_DISCONNECTION()  (RASBASE+29)
define ERROR_HARDWARE_FAILURE()  (RASBASE+30)
define ERROR_USER_DISCONNECTION()  (RASBASE+31)
define ERROR_INVALID_SIZE()  (RASBASE+32)
define ERROR_PORT_NOT_AVAILABLE()  (RASBASE+33)
define ERROR_CANNOT_PROJECT_CLIENT()  (RASBASE+34)
define ERROR_UNKNOWN()  (RASBASE+35)
define ERROR_WRONG_DEVICE_ATTACHED()  (RASBASE+36)
define ERROR_BAD_STRING()  (RASBASE+37)
define ERROR_REQUEST_TIMEOUT()  (RASBASE+38)
define ERROR_CANNOT_GET_LANA()  (RASBASE+39)
define ERROR_NETBIOS_ERROR()  (RASBASE+40)
define ERROR_SERVER_OUT_OF_RESOURCES()  (RASBASE+41)
define ERROR_NAME_EXISTS_ON_NET()  (RASBASE+42)
define ERROR_SERVER_GENERAL_NET_FAILURE()  (RASBASE+43)
define WARNING_MSG_ALIAS_NOT_ADDED()  (RASBASE+44)
define ERROR_AUTH_INTERNAL()  (RASBASE+45)
define ERROR_RESTRICTED_LOGON_HOURS()  (RASBASE+46)
define ERROR_ACCT_DISABLED()  (RASBASE+47)
define ERROR_PASSWD_EXPIRED()  (RASBASE+48)
define ERROR_NO_DIALIN_PERMISSION()  (RASBASE+49)
define ERROR_SERVER_NOT_RESPONDING()  (RASBASE+50)
define ERROR_FROM_DEVICE()  (RASBASE+51)
define ERROR_UNRECOGNIZED_RESPONSE()  (RASBASE+52)
define ERROR_MACRO_NOT_FOUND()  (RASBASE+53)
define ERROR_MACRO_NOT_DEFINED()  (RASBASE+54)
define ERROR_MESSAGE_MACRO_NOT_FOUND()  (RASBASE+55)
define ERROR_DEFAULTOFF_MACRO_NOT_FOUND()  (RASBASE+56)
define ERROR_FILE_COULD_NOT_BE_OPENED()  (RASBASE+57)
define ERROR_DEVICENAME_TOO_LONG()  (RASBASE+58)
define ERROR_DEVICENAME_NOT_FOUND()  (RASBASE+59)
define ERROR_NO_RESPONSES()  (RASBASE+60)
define ERROR_NO_COMMAND_FOUND()  (RASBASE+61)
define ERROR_WRONG_KEY_SPECIFIED()  (RASBASE+62)
define ERROR_UNKNOWN_DEVICE_TYPE()  (RASBASE+63)
define ERROR_ALLOCATING_MEMORY()  (RASBASE+64)
define ERROR_PORT_NOT_CONFIGURED()  (RASBASE+65)
define ERROR_DEVICE_NOT_READY()  (RASBASE+66)
define ERROR_READING_INI_FILE()  (RASBASE+67)
define ERROR_NO_CONNECTION()  (RASBASE+68)
define ERROR_BAD_USAGE_IN_INI_FILE()  (RASBASE+69)
define ERROR_READING_SECTIONNAME()  (RASBASE+70)
define ERROR_READING_DEVICETYPE()  (RASBASE+71)
define ERROR_READING_DEVICENAME()  (RASBASE+72)
define ERROR_READING_USAGE()  (RASBASE+73)
define ERROR_READING_MAXCONNECTBPS()  (RASBASE+74)
define ERROR_READING_MAXCARRIERBPS()  (RASBASE+75)
define ERROR_LINE_BUSY()  (RASBASE+76)
define ERROR_VOICE_ANSWER()  (RASBASE+77)
define ERROR_NO_ANSWER()  (RASBASE+78)
define ERROR_NO_CARRIER()  (RASBASE+79)
define ERROR_NO_DIALTONE()  (RASBASE+80)
define ERROR_IN_COMMAND()  (RASBASE+81)
define ERROR_WRITING_SECTIONNAME()  (RASBASE+82)
define ERROR_WRITING_DEVICETYPE()  (RASBASE+83)
define ERROR_WRITING_DEVICENAME()  (RASBASE+84)
define ERROR_WRITING_MAXCONNECTBPS()  (RASBASE+85)
define ERROR_WRITING_MAXCARRIERBPS()  (RASBASE+86)
define ERROR_WRITING_USAGE()  (RASBASE+87)
define ERROR_WRITING_DEFAULTOFF()  (RASBASE+88)
define ERROR_READING_DEFAULTOFF()  (RASBASE+89)
define ERROR_EMPTY_INI_FILE()  (RASBASE+90)
define ERROR_AUTHENTICATION_FAILURE()  (RASBASE+91)
define ERROR_PORT_OR_DEVICE()  (RASBASE+92)
define ERROR_NOT_BINARY_MACRO()  (RASBASE+93)
define ERROR_DCB_NOT_FOUND()  (RASBASE+94)
define ERROR_STATE_MACHINES_NOT_STARTED()  (RASBASE+95)
define ERROR_STATE_MACHINES_ALREADY_STARTED()  (RASBASE+96)
define ERROR_PARTIAL_RESPONSE_LOOPING()  (RASBASE+97)
define ERROR_UNKNOWN_RESPONSE_KEY()  (RASBASE+98)
define ERROR_RECV_BUF_FULL()  (RASBASE+99)
define ERROR_CMD_TOO_LONG()  (RASBASE+100)
define ERROR_UNSUPPORTED_BPS()  (RASBASE+101)
define ERROR_UNEXPECTED_RESPONSE()  (RASBASE+102)
define ERROR_INTERACTIVE_MODE()  (RASBASE+103)
define ERROR_BAD_CALLBACK_NUMBER()  (RASBASE+104)
define ERROR_INVALID_AUTH_STATE()  (RASBASE+105)
define ERROR_WRITING_INITBPS()  (RASBASE+106)
define ERROR_X25_DIAGNOSTIC()  (RASBASE+107)
define ERROR_ACCT_EXPIRED()  (RASBASE+108)
define ERROR_CHANGING_PASSWORD()  (RASBASE+109)
define ERROR_OVERRUN()  (RASBASE+110)
define ERROR_RASMAN_CANNOT_INITIALIZE()  (RASBASE+111)
define ERROR_BIPLEX_PORT_NOT_AVAILABLE()  (RASBASE+112)
define ERROR_NO_ACTIVE_ISDN_LINES()  (RASBASE+113)
define ERROR_NO_ISDN_CHANNELS_AVAILABLE()  (RASBASE+114)
define ERROR_TOO_MANY_LINE_ERRORS()  (RASBASE+115)
define ERROR_IP_CONFIGURATION()  (RASBASE+116)
define ERROR_NO_IP_ADDRESSES()  (RASBASE+117)
define ERROR_PPP_TIMEOUT()  (RASBASE+118)
define ERROR_PPP_REMOTE_TERMINATED()  (RASBASE+119)
define ERROR_PPP_NO_PROTOCOLS_CONFIGURED()  (RASBASE+120)
define ERROR_PPP_NO_RESPONSE()  (RASBASE+121)
define ERROR_PPP_INVALID_PACKET()  (RASBASE+122)
define ERROR_PHONE_NUMBER_TOO_LONG()  (RASBASE+123)
define ERROR_IPXCP_NO_DIALOUT_CONFIGURED()  (RASBASE+124)
define ERROR_IPXCP_NO_DIALIN_CONFIGURED()  (RASBASE+125)
define ERROR_IPXCP_DIALOUT_ALREADY_ACTIVE()  (RASBASE+126)
define ERROR_ACCESSING_TCPCFGDLL()  (RASBASE+127)
define ERROR_NO_IP_RAS_ADAPTER()  (RASBASE+128)
define ERROR_SLIP_REQUIRES_IP()  (RASBASE+129)
define ERROR_PROJECTION_NOT_COMPLETE()  (RASBASE+130)
define ERROR_PROTOCOL_NOT_CONFIGURED()  (RASBASE+131)
define ERROR_PPP_NOT_CONVERGING()  (RASBASE+132)
define ERROR_PPP_CP_REJECTED()  (RASBASE+133)
define ERROR_PPP_LCP_TERMINATED()  (RASBASE+134)
define ERROR_PPP_REQUIRED_ADDRESS_REJECTED()  (RASBASE+135)
define ERROR_PPP_NCP_TERMINATED()  (RASBASE+136)
define ERROR_PPP_LOOPBACK_DETECTED()  (RASBASE+137)
define ERROR_PPP_NO_ADDRESS_ASSIGNED()  (RASBASE+138)
define ERROR_CANNOT_USE_LOGON_CREDENTIALS()  (RASBASE+139)
define ERROR_TAPI_CONFIGURATION()  (RASBASE+140)
define ERROR_NO_LOCAL_ENCRYPTION()  (RASBASE+141)
define ERROR_NO_REMOTE_ENCRYPTION()  (RASBASE+142)
define ERROR_REMOTE_REQUIRES_ENCRYPTION()  (RASBASE+143)
define ERROR_IPXCP_NET_NUMBER_CONFLICT()  (RASBASE+144)
define ERROR_INVALID_SMM()  (RASBASE+145)
define ERROR_SMM_UNINITIALIZED()  (RASBASE+146)
define ERROR_NO_MAC_FOR_PORT()  (RASBASE+147)
define ERROR_SMM_TIMEOUT()  (RASBASE+148)
define ERROR_BAD_PHONE_NUMBER()  (RASBASE+149)
define ERROR_WRONG_MODULE()  (RASBASE+150)
define ERROR_INVALID_CALLBACK_NUMBER()  (RASBASE+151)
define ERROR_SCRIPT_SYNTAX()  (RASBASE+152)
define RASBASEEND()  (RASBASE+152)

//------------------------------------[ rassapi.h ]-------------------------------------

define RASSAPI_MAX_PHONENUMBER_SIZE()  128
define RASSAPI_MAX_MEDIA_NAME()  16
define RASSAPI_MAX_PORT_NAME()  16
define RASSAPI_MAX_DEVICE_NAME()  128
define RASSAPI_MAX_DEVICETYPE_NAME()  16
define RASSAPI_MAX_PARAM_KEY_SIZE()  32
define RASPRIV_NoCallback()  1
define RASPRIV_AdminSetCallback()  2
define RASPRIV_CallerSetCallback()  4
define RASPRIV_DialinPrivilege()  8
define RASPRIV_CallbackType()  (RASPRIV_AdminSetCallback ...
                           + RASPRIV_CallerSetCallback ...
                           + RASPRIV_NoCallback)
define RAS_MODEM_OPERATIONAL()  1
define RAS_MODEM_NOT_RESPONDING()  2
define RAS_MODEM_HARDWARE_FAILURE()  3
define RAS_MODEM_INCORRECT_RESPONSE()  4
define RAS_MODEM_UNKNOWN()  5
define RAS_PORT_NON_OPERATIONAL()  1
define RAS_PORT_DISCONNECTED()  2
define RAS_PORT_CALLING_BACK()  3
define RAS_PORT_LISTENING()  4
define RAS_PORT_AUTHENTICATING()  5
define RAS_PORT_AUTHENTICATED()  6
define RAS_PORT_INITIALIZING()  7
define MEDIA_UNKNOWN()  0
define MEDIA_SERIAL()  1
define MEDIA_RAS10_SERIAL()  2
define MEDIA_X25()  3
define MEDIA_ISDN()  4
define USER_AUTHENTICATED()  1
define MESSENGER_PRESENT()  2
define PPP_CLIENT()  4
define GATEWAY_ACTIVE()  8
define REMOTE_LISTEN()  0x10
define PORT_MULTILINKED()  0x20
define RAS_IPADDRESSLEN()  15
define RAS_IPXADDRESSLEN()  22
define RAS_ATADDRESSLEN()  32
define RASDOWNLEVEL()  10
define RASADMIN_35()  35
define RASADMIN_CURRENT()  40
define ParamNumber()  0
define ParamString()  1

union RAS_PARAMS_VALUE
{
    int32   Number;
    struct STRUCT_RAS_PARAMS_VALUE
    {
        int32    iLength;
        int32    Data;
    }
}

struct RAS_PARAMETERS
{
    int8[RASSAPI_MAX_PARAM_KEY_SIZE]  P_Key;
    int32      P_Type;
    int8      P_Attributes;
    RAS_PARAMS_VALUE      P_Value;
}

struct RAS_USER_0
{
    int8      bfPrivilege;
    int16[RASSAPI_MAX_PHONENUMBER_SIZE+1]  szPhoneNumber;
}

struct RAS_PORT_0
{
    int16[RASSAPI_MAX_PORT_NAME]  wszPortName;
    int16[RASSAPI_MAX_DEVICETYPE_NAME]  wszDeviceType;
    int16[RASSAPI_MAX_DEVICE_NAME]  wszDeviceName;
    int16[RASSAPI_MAX_MEDIA_NAME]  wszMediaName;
    int32      reserved;
    int32      Flags;
    int16[UNLEN+1]  wszUserName;
    int16[NETBIOS_NAME_LEN]  wszComputer;
    int32      dwStartSessionTime;
    int16[DNLEN+1]  wszLogonDomain;
    BOOL      fAdvancedServer;
}

struct RAS_PPP_NBFCP_RESULT
{
    int32      dwError;
    int32      dwNetBiosError;
    int8[NETBIOS_NAME_LEN+1]  szName;
    int16[NETBIOS_NAME_LEN+1]  wszWksta;
}

struct RAS_PPP_IPCP_RESULT
{
    int32      dwError;
    int16[RAS_IPADDRESSLEN+1]  wszAddress;
}

struct RAS_PPP_IPXCP_RESULT
{
    int32      dwError;
    int16[RAS_IPXADDRESSLEN+1]  wszAddress;
}

struct RAS_PPP_ATCP_RESULT
{
    int32      dwError;
    int16[RAS_ATADDRESSLEN+1]  wszAddress;
}

struct RAS_PPP_PROJECTION_RESULT
{
    RAS_PPP_NBFCP_RESULT      nbf;
    RAS_PPP_IPCP_RESULT      ip;
    RAS_PPP_IPXCP_RESULT      ipx;
    RAS_PPP_ATCP_RESULT      at;
}

struct RAS_PORT_1
{
    RAS_PORT_0      rasport0;
    int32      LineCondition;
    int32      HardwareCondition;
    int32      LineSpeed;
    int16      NumStatistics;
    int16      NumMediaParms;
    int32      SizeMediaParms;
    RAS_PPP_PROJECTION_RESULT      ProjResult;
}

struct RAS_PORT_STATISTICS
{
    int32      dwBytesXmited;
    int32      dwBytesRcved;
    int32      dwFramesXmited;
    int32      dwFramesRcved;
    int32      dwCrcErr;
    int32      dwTimeoutErr;
    int32      dwAlignmentErr;
    int32      dwHardwareOverrunErr;
    int32      dwFramingErr;
    int32      dwBufferOverrunErr;
    int32      dwBytesXmitedUncompressed;
    int32      dwBytesRcvedUncompressed;
    int32      dwBytesXmitedCompressed;
    int32      dwBytesRcvedCompressed;
    int32      dwPortBytesXmited;
    int32      dwPortBytesRcved;
    int32      dwPortFramesXmited;
    int32      dwPortFramesRcved;
    int32      dwPortCrcErr;
    int32      dwPortTimeoutErr;
    int32      dwPortAlignmentErr;
    int32      dwPortHardwareOverrunErr;
    int32      dwPortFramingErr;
    int32      dwPortBufferOverrunErr;
    int32      dwPortBytesXmitedUncompressed;
    int32      dwPortBytesRcvedUncompressed;
    int32      dwPortBytesXmitedCompressed;
    int32      dwPortBytesRcvedCompressed;
}

struct RAS_SERVER_0
{
    int16      TotalPorts;
    int16      PortsInUse;
    int32      RasVersion;
}

//----------------------------------------[ cpl.h ]--------------------------------

define WM_CPL_LAUNCH()  WM_USER+1000
define WM_CPL_LAUNCHED()  WM_USER+1001
define CPL_DYNAMIC_RES()  0
define CPL_INIT()  1
define CPL_GETCOUNT()  2
define CPL_INQUIRE()  3
define CPL_SELECT()  4
define CPL_DBLCLK()  5
define CPL_STOP()  6
define CPL_EXIT()  7
define CPL_NEWINQUIRE()  8
define CPL_STARTWPARMSA()  9
define CPL_STARTWPARMSW()  10
define CPL_STARTWPARMS()  CPL_STARTWPARMSA
define CPL_SETUP()  200

struct CPLINFO
{
    int32      idIcon;
    int32      idName;
    int32      idInfo;
    int32      lData;
}

struct NEWCPLINFOA
{
    int32      dwSize;
    int32      dwFlags;
    int32      dwHelpContext;
    int32      lData;
    int32      hIcon;
    int8[32]  szName;
    int8[64]  szInfo;
    int8[128]  szHelpFile;
}

define NEWCPLINFO()  NEWCPLINFOA

//--------------------------------------[ cplext.h ]----------------------------------
define CPLPAGE_MOUSE_BUTTONS()  1
define CPLPAGE_MOUSE_PTRMOTION()  2
define CPLPAGE_KEYBOARD_SPEED()  1

//--------------------------------------[ ctl3d.h ]------------------------------------

define CTL3D_SUBCLASS_DYNCREATE()  1
define CTL3D_NOSUBCLASS_DYNCREATE()  2
define CTL3D_BUTTON_CTL()  0
define CTL3D_LISTBOX_CTL()  1
define CTL3D_EDIT_CTL()  2
define CTL3D_COMBO_CTL()  3
define CTL3D_STATIC_CTL()  4
define CTL3D_BUTTONS()  1
define CTL3D_LISTBOXES()  2
define CTL3D_EDITS()  4
define CTL3D_COMBOS()  8
define CTL3D_STATICTEXTS()  0x10
define CTL3D_STATICFRAMES()  0x20
define CTL3D_NODLGWINDOW()  0x10000
define CTL3D_ALL()  0ffffh
define WM_DLGBORDER()  WM_USER+3567
define CTL3D_NOBORDER()  0
define CTL3D_BORDER()  1
define WM_DLGSUBCLASS()  WM_USER+3568
define CTL3D_NOSUBCLASS()  0
define CTL3D_SUBCLASS()  1
define CTLMSGOFFSET()  3569
define CTL3D_CTLCOLORMSGBOX()  WM_USER+CTLMSGOFFSET
define CTL3D_CTLCOLOREDIT()  WM_USER+CTLMSGOFFSET+1
define CTL3D_CTLCOLORLISTBOX()  WM_USER+CTLMSGOFFSET+2
define CTL3D_CTLCOLORBTN()  WM_USER+CTLMSGOFFSET+3
define CTL3D_CTLCOLORSCROLLBAR()  WM_USER+CTLMSGOFFSET+4
define CTL3D_CTLCOLORSTATIC()  WM_USER+CTLMSGOFFSET+5
define CTL3D_CTLCOLORDLG()  WM_USER+CTLMSGOFFSET+6
define CTL3D_3DCHECK()  26567

//---------------------------------------[ mapi.h ]---------------------------------------

define MAPI_OLE()  1
define MAPI_OLE_STATIC()  2
define MAPI_ORIG()  0
define MAPI_TO()  1
define MAPI_CC()  2
define MAPI_BCC()  3
define MAPI_UNREAD()  1
define MAPI_RECEIPT_REQUESTED()  2
define MAPI_SENT()  4
define MAPI_LOGON_UI()  1
define MAPI_PASSWORD_UI()  0x20000
define MAPI_NEW_SESSION()  2
define MAPI_FORCE_DOWNLOAD()  0x1000
define MAPI_EXTENDED()  0x20
define MAPI_DIALOG()  8
define MAPI_UNREAD_ONLY()  0x20
define MAPI_GUARANTEE_FIFO()  0x100
define MAPI_LONG_MSGID()  0x4000
define MAPI_PEEK()  0x80
define MAPI_SUPPRESS_ATTACH()  0x800
define MAPI_ENVELOPE_ONLY()  0x40
define MAPI_BODY_AS_FILE()  0x200
define MAPI_AB_NOMODIFY()  0x400
define SUCCESS_SUCCESS()  0
define MAPI_USER_ABORT()  1
define MAPI_E_USER_ABORT()  MAPI_USER_ABORT
define MAPI_E_FAILURE()  2
define MAPI_E_LOGON_FAILURE()  3
define MAPI_E_LOGIN_FAILURE()  MAPI_E_LOGON_FAILURE
define MAPI_E_DISK_FULL()  4
define MAPI_E_INSUFFICIENT_MEMORY()  5
define MAPI_E_ACCESS_DENIED()  6
define MAPI_E_TOO_MANY_SESSIONS()  8
define MAPI_E_TOO_MANY_FILES()  9
define MAPI_E_TOO_MANY_RECIPIENTS()  10
define MAPI_E_ATTACHMENT_NOT_FOUND()  11
define MAPI_E_ATTACHMENT_OPEN_FAILURE()  12
define MAPI_E_ATTACHMENT_WRITE_FAILURE()  13
define MAPI_E_UNKNOWN_RECIPIENT()  14
define MAPI_E_BAD_RECIPTYPE()  15
define MAPI_E_NO_MESSAGES()  16
define MAPI_E_INVALID_MESSAGE()  17
define MAPI_E_TEXT_TOO_LARGE()  18
define MAPI_E_INVALID_SESSION()  19
define MAPI_E_TYPE_NOT_SUPPORTED()  20
define MAPI_E_AMBIGUOUS_RECIPIENT()  21
define MAPI_E_AMBIG_RECIP()  MAPI_E_AMBIGUOUS_RECIPIENT
define MAPI_E_MESSAGE_IN_USE()  22
define MAPI_E_NETWORK_FAILURE()  23
define MAPI_E_INVALID_EDITFIELDS()  24
define MAPI_E_INVALID_RECIPS()  25
define MAPI_E_NOT_SUPPORTED()  26

struct MapiFileDesc
{
    int32      ulReserved;
    int32      flFlags;
    int32      nPosition;
    int32      lpszPathName;
    int32      lpszFileName;
    int32      lpFileType;
}

struct MapiFileTagExt
{
    int32      ulReserved;
    int32      cbTag;
    int32      lpTag;
    int32      cbEncoding;
    int32      lpEncoding;
}

struct MapiRecipDesc
{
    int32      ulReserved;
    int32      ulRecipClass;
    int32      lpszName;
    int32      lpszAddress;
    int32      ulEIDSize;
    int32      lpEntryID;
}

struct MapiMessage
{
    int32      ulReserved;
    int32      lpszSubject;
    int32      lpszNoteText;
    int32      lpszMessageType;
    int32      lpszDateReceived;
    int32      lpszConversationID;
    int32      flFlags;
    int32      lpOriginator;
    int32      nRecipCount;
    int32      lpRecips;
    int32      nFileCount;
    int32      lpFiles;
}

//-------------------------------------[ mapicode.h ]-------------------------------------

define MAPI_E_CALL_FAILED()  E_FAIL
define MAPI_E_NOT_ENOUGH_MEMORY()  E_OUTOFMEMORY
define MAPI_E_INVALID_PARAMETER()  E_INVALIDARG
define MAPI_E_INTERFACE_NOT_SUPPORTED()  E_NOINTERFACE
define MAPI_E_NO_ACCESS()  E_ACCESSDENIED
define MAPI_E_NO_SUPPORT()  0x80040102
define MAPI_E_BAD_CHARWIDTH()  0x80040103
define MAPI_E_STRING_TOO_LONG()  0x80040105
define MAPI_E_UNKNOWN_FLAGS()  0x80040106
define MAPI_E_INVALID_ENTRYID()  0x80040107
define MAPI_E_INVALID_OBJECT()  0x80040108
define MAPI_E_OBJECT_CHANGED()  0x80040109
define MAPI_E_OBJECT_DELETED()  0x8004010A
define MAPI_E_BUSY()  0x8004010B
define MAPI_E_NOT_ENOUGH_DISK()  0x8004010D
define MAPI_E_NOT_ENOUGH_RESOURCES()  0x8004010E
define MAPI_E_NOT_FOUND()  0x8004010F
define MAPI_E_VERSION()  0x80040110
define MAPI_E_LOGON_FAILED()  0x80040111
define MAPI_E_SESSION_LIMIT()  0x80040112
define MAPI_E_USER_CANCEL()  0x80040113
define MAPI_E_UNABLE_TO_ABORT()  0x80040114
define MAPI_E_NETWORK_ERROR()  0x80040115
define MAPI_E_DISK_ERROR()  0x80040116
define MAPI_E_TOO_COMPLEX()  0x80040117
define MAPI_E_BAD_COLUMN()  0x80040118
define MAPI_E_EXTENDED_ERROR()  0x80040119
define MAPI_E_COMPUTED()  0x8004011A
define MAPI_E_CORRUPT_DATA()  0x8004011B
define MAPI_E_UNCONFIGURED()  0x8004011C
define MAPI_E_FAILONEPROVIDER()  0x8004011D
define MAPI_E_UNKNOWN_CPID()  0x8004011E
define MAPI_E_UNKNOWN_LCID()  0x8004011F
define MAPI_E_PASSWORD_CHANGE_REQUIRED()  0x80040120
define MAPI_E_PASSWORD_EXPIRED()  0x80040121
define MAPI_E_INVALID_WORKSTATION_ACCOUNT()  0x80040122
define MAPI_E_INVALID_ACCESS_TIME()  0x80040123
define MAPI_E_ACCOUNT_DISABLED()  0x80040124
define MAPI_E_END_OF_SESSION()  0x80040200
define MAPI_E_UNKNOWN_ENTRYID()  0x80040201
define MAPI_E_MISSING_REQUIRED_COLUMN()  0x80040202
define MAPI_W_NO_SERVICE()  0x40203
define MAPI_E_BAD_VALUE()  0x80040301
define MAPI_E_INVALID_TYPE()  0x80040302
define MAPI_E_TYPE_NO_SUPPORT()  0x80040303
define MAPI_E_UNEXPECTED_TYPE()  0x80040304
define MAPI_E_TOO_BIG()  0x80040305
define MAPI_E_DECLINE_COPY()  0x80040306
define MAPI_E_UNEXPECTED_ID()  0x80040307
define MAPI_W_ERRORS_RETURNED()  0x40380
define MAPI_E_UNABLE_TO_COMPLETE()  0x80040400
define MAPI_E_TIMEOUT()  0x80040401
define MAPI_E_TABLE_EMPTY()  0x80040402
define MAPI_E_TABLE_TOO_BIG()  0x80040403
define MAPI_E_INVALID_BOOKMARK()  0x80040405
define MAPI_W_POSITION_CHANGED()  0x40481
define MAPI_W_APPROX_COUNT()  0x40482
define MAPI_E_WAIT()  0x80040500
define MAPI_E_CANCEL()  0x80040501
define MAPI_E_NOT_ME()  0x80040502
define MAPI_W_CANCEL_MESSAGE()  0x40580
define MAPI_E_CORRUPT_STORE()  0x80040600
define MAPI_E_NOT_IN_QUEUE()  0x80040601
define MAPI_E_NO_SUPPRESS()  0x80040602
define MAPI_E_COLLISION()  0x80040604
define MAPI_E_NOT_INITIALIZED()  0x80040605
define MAPI_E_NON_STANDARD()  0x80040606
define MAPI_E_NO_RECIPIENTS()  0x80040607
define MAPI_E_SUBMITTED()  0x80040608
define MAPI_E_HAS_FOLDERS()  0x80040609
define MAPI_E_HAS_MESSAGES()  0x8004060A
define MAPI_E_FOLDER_CYCLE()  0x8004060B
define MAPI_W_PARTIAL_COMPLETION()  0x40680
define MAPI_E_AMBIGUOUS_RECIP()  0x80040700

//-----------------------------[ mapidefs.h ]-----------------------------
define MAPI_DIM()  1
define MAPI_NT_SERVICE()  0x10000
define MAPI_MODIFY()  1
define MAPI_ACCESS_MODIFY()  1
define MAPI_ACCESS_READ()  2
define MAPI_ACCESS_DELETE()  4
define MAPI_ACCESS_CREATE_HIERARCHY()  8
define MAPI_ACCESS_CREATE_CONTENTS()  0x10
define MAPI_ACCESS_CREATE_ASSOCIATED()  0x20
define MAPI_UNICODE()  0x80000000
define fMapiUnicode()  0
define hrSuccess()  0
//define MAPI_ORIG()  0
define MAPI_P1()  0x10000000
define MAPI_SUBMITTED()  0x80000000
define MAPI_SHORTTERM()  0x80
define MAPI_NOTRECIP()  0x40
define MAPI_THISSESSION()  0x20
define MAPI_NOW()  0x10
define MAPI_NOTRESERVED()  0x08
define MAPI_COMPOUND()  0x80
define MAPI_ONE_OFF_UID() {0x81, 0x2b, 0x1f, 0x0a4, 0x0be, 0x0a3, 0x10, 0x19,0x09d, 0x6e, 0x0, 0x0dd, 0x01, 0x0f, 0x54, 0x02}
define MAPI_ONE_OFF_UNICODE()  0x8000
define MAPI_ONE_OFF_NO_RICH_INFO()  0x1
define MAPI_STORE()  1
define MAPI_ADDRBOOK()  2
define MAPI_FOLDER()  3
define MAPI_ABCONT()  4
define MAPI_MESSAGE()  5
define MAPI_MAILUSER()  6
define MAPI_ATTACH()  7
define MAPI_DISTLIST()  8
define MAPI_PROFSECT()  9
define MAPI_STATUS()  0x0A
define MAPI_SESSION()  0x0B
define MAPI_FORMINFO()  0x0C
define cchProfileNameMax()  64
define cchProfilePassMax()  64
define MV_FLAG()  0x1000
define PT_UNSPECIFIED()  0
define PT_NULL()  1
define PT_I2()  2
define PT_LONG()  3
define PT_R4()  4
define PT_DOUBLE()  5
define PT_CURRENCY()  6
define PT_APPTIME()  7
define PT_ERROR()  10
define PT_BOOLEAN()  11
define PT_OBJECT()  13
define PT_I8()  20
define PT_STRING8()  30
define PT_UNICODE()  31
define PT_SYSTIME()  64
define PT_CLSID()  72
define PT_BINARY()  258
define PT_SHORT()  PT_I2
define PT_I4()  PT_LONG
define PT_FLOAT()  PT_R4
define PT_R8()  PT_DOUBLE
define PT_LONGLONG()  PT_I8
define PROP_TYPE_MASK()  0x0FFFF
define PROP_ID_NULL()  0
define PROP_ID_INVALID()  0x0FFFF
define PR_NULL()  (PROP_ID_NULL shl 16) +PT_NULL
define PT_MV_I2()  MV_FLAG+PT_I2
define PT_MV_LONG()  MV_FLAG+PT_LONG
define PT_MV_R4()  MV_FLAG+PT_R4
define PT_MV_DOUBLE()  MV_FLAG+PT_DOUBLE
define PT_MV_CURRENCY()  MV_FLAG+PT_CURRENCY
define PT_MV_APPTIME()  MV_FLAG+PT_APPTIME
define PT_MV_SYSTIME()  MV_FLAG+PT_SYSTIME
define PT_MV_STRING8()  MV_FLAG+PT_STRING8
define PT_MV_BINARY()  MV_FLAG+PT_BINARY
define PT_MV_UNICODE()  MV_FLAG+PT_UNICODE
define PT_MV_CLSID()  MV_FLAG+PT_CLSID
define PT_MV_I8()  MV_FLAG+PT_I8
define PT_MV_SHORT()  PT_MV_I2
define PT_MV_I4()  PT_MV_LONG
define PT_MV_FLOAT()  PT_MV_R4
define PT_MV_R8()  PT_MV_DOUBLE
define PT_MV_LONGLONG()  PT_MV_I8
define MV_INSTANCE()  0x2000
define MVI_FLAG()  MV_FLAG + MV_INSTANCE
define fnevCriticalError()  1
define fnevNewMail()  2
define fnevObjectCreated()  4
define fnevObjectDeleted()  8
define fnevObjectModified()  0x10
define fnevObjectMoved()  0x20
define fnevObjectCopied()  0x40
define fnevSearchComplete()  0x80
define fnevTableModified()  0x100
define fnevStatusObjectModified()  0x200
define fnevReservedForMapi()  0x40000000
define fnevExtended()  0x80000000
define TABLE_CHANGED()  1
define TABLE_ERROR()  2
define TABLE_ROW_ADDED()  3
define TABLE_ROW_DELETED()  4
define TABLE_ROW_MODIFIED()  5
define TABLE_SORT_DONE()  6
define TABLE_RESTRICT_DONE()  7
define TABLE_SETCOL_DONE()  8
define TABLE_RELOAD()  9
define MAPI_TOP_LEVEL()  0x01
define MAPI_ERROR_VERSION()  0
define KEEP_OPEN_READONLY()  1
define KEEP_OPEN_READWRITE()  2
define FORCE_SAVE()  4
define MAPI_CREATE()  2
define STREAM_APPEND()  4
define MAPI_MOVE()  1
define MAPI_NOREPLACE()  2
define MAPI_DECLINE_OK()  4
define MAPI_USE_DEFAULT()  0x40
define MAPI_NO_STRINGS()  1
define MAPI_NO_IDS()  2
define MNID_ID()  0
define MNID_STRING()  1
define TBLSTAT_COMPLETE()  0
define TBLSTAT_QCHANGED()  7
define TBLSTAT_SORTING()  9
define TBLSTAT_SORT_ERROR()  10
define TBLSTAT_SETTING_COLS()  11
define TBLSTAT_SETCOL_ERROR()  13
define TBLSTAT_RESTRICTING()  14
define TBLSTAT_RESTRICT_ERROR()  15
define TBLTYPE_SNAPSHOT()  0
define TBLTYPE_KEYSET()  1
define TBLTYPE_DYNAMIC()  2
define TABLE_SORT_ASCEND()  0
define TABLE_SORT_DESCEND()  1
define TABLE_SORT_COMBINE()  2
define BOOKMARK_BEGINNING()  0
define BOOKMARK_CURRENT()  1
define BOOKMARK_END()  2
define FL_FULLSTRING()  0
define FL_SUBSTRING()  1
define FL_PREFIX()  2
define FL_IGNORECASE()  0x10000
define FL_IGNORENONSPACE()  0x20000
define FL_LOOSE()  0x40000
define RES_AND()  0
define RES_OR()  1
define RES_NOT()  2
define RES_CONTENT()  3
define RES_PROPERTY()  4
define RES_COMPAREPROPS()  5
define RES_BITMASK()  6
define RES_SIZE()  7
define RES_EXIST()  8
define RES_SUBRESTRICTION()  9
define RES_COMMENT()  0x0A
define RELOP_LT()  0
define RELOP_LE()  1
define RELOP_GT()  2
define RELOP_GE()  3
define RELOP_EQ()  4
define RELOP_NE()  5
define RELOP_RE()  6
define BMR_EQZ()  0
define BMR_NEZ()  1
define TBL_ALL_COLUMNS()  1
define TBL_LEAF_ROW()  1
define TBL_EMPTY_CATEGORY()  2
define TBL_EXPANDED_CATEGORY()  3
define TBL_COLLAPSED_CATEGORY()  4
define TBL_NOWAIT()  1
define TBL_ASYNC()  1
define TBL_BATCH()  2
define DIR_BACKWARD()  1
define TBL_NOADVANCE()  1
define PS_PROFILE_PROPERTIES_INIT() {0x098, 0x15, 0x0AC, 0x08, 0x0AA, 0x0B0, 0x10, 0x1A,0x8C, 0x093, 0x08, 0x0, 0x2B, 0x2A, 0x56, 0x0C2}
define MAPI_STORE_PROVIDER()  33
define MAPI_AB()  34
define MAPI_AB_PROVIDER()  35
define MAPI_TRANSPORT_PROVIDER()  36
define MAPI_SPOOLER()  37
define MAPI_PROFILE_PROVIDER()  38
define MAPI_SUBSYSTEM()  39
define MAPI_HOOK_PROVIDER()  40
define STATUS_VALIDATE_STATE()  1
define STATUS_SETTINGS_DIALOG()  2
define STATUS_CHANGE_PASSWORD()  4
define STATUS_FLUSH_QUEUES()  8
define STATUS_DEFAULT_OUTBOUND()  1
define STATUS_DEFAULT_STORE()  2
define STATUS_PRIMARY_IDENTITY()  4
define STATUS_SIMPLE_STORE()  8
define STATUS_XP_PREFER_LAST()  0x10
define STATUS_NO_PRIMARY_IDENTITY()  0x20
define STATUS_NO_DEFAULT_STORE()  0x40
define STATUS_TEMP_SECTION()  0x80
define STATUS_OWN_STORE()  0x100
define STATUS_NEED_IPM_TREE()  0x800
define STATUS_PRIMARY_STORE()  0x1000
define STATUS_SECONDARY_STORE()  0x2000
define STATUS_AVAILABLE()  1
define STATUS_OFFLINE()  2
define STATUS_FAILURE()  4
define STATUS_INBOUND_ENABLED()  0x10000
define STATUS_INBOUND_ACTIVE()  0x20000
define STATUS_INBOUND_FLUSH()  0x40000
define STATUS_OUTBOUND_ENABLED()  0x100000
define STATUS_OUTBOUND_ACTIVE()  0x200000
define STATUS_OUTBOUND_FLUSH()  0x400000
define STATUS_REMOTE_ACCESS()  0x800000
define SUPPRESS_UI()  1
define REFRESH_XP_HEADER_CACHE()  0x10000
define PROCESS_XP_HEADER_CACHE()  0x20000
define FORCE_XP_CONNECT()  0x40000
define FORCE_XP_DISCONNECT()  0x80000
define CONFIG_CHANGED()  0x100000
define ABORT_XP_HEADER_OPERATION()  0x200000
define SHOW_XP_SESSION_UI()  0x400000
define UI_READONLY()  1
define FLUSH_UPLOAD()  2
define FLUSH_DOWNLOAD()  4
define FLUSH_FORCE()  8
define FLUSH_NO_UI()  0x10
define FLUSH_ASYNC_OK()  0x20
define MAPI_BEST_ACCESS()  0x10
define CONVENIENT_DEPTH()  1
define SEARCH_RUNNING()  1
define SEARCH_REBUILD()  2
define SEARCH_RECURSIVE()  4
define SEARCH_FOREGROUND()  8
define STOP_SEARCH()  1
define RESTART_SEARCH()  2
define RECURSIVE_SEARCH()  4
define SHALLOW_SEARCH()  8
define FOREGROUND_SEARCH()  0x10
define BACKGROUND_SEARCH()  0x20
define AB_RECIPIENTS()  1
define AB_SUBCONTAINERS()  2
define AB_MODIFIABLE()  4
define AB_UNMODIFIABLE()  8
define AB_FIND_ON_OPEN()  0x10
define AB_NOT_DEFAULT()  0x20
define CREATE_CHECK_DUP_STRICT()  1
define CREATE_CHECK_DUP_LOOSE()  2
define CREATE_REPLACE()  4
define MAPI_UNRESOLVED()  0
define MAPI_AMBIGUOUS()  1
define MAPI_RESOLVED()  2
define MAPI_SEND_NO_RICH_INFO()  0x10000
define MAPI_DIAG_NO_DIAGNOSTIC()  -1
define MAPI_DIAG_OR_NAME_UNRECOGNIZED()  0
define MAPI_DIAG_OR_NAME_AMBIGUOUS()  1
define MAPI_DIAG_MTS_CONGESTED()  2
define MAPI_DIAG_LOOP_DETECTED()  3
define MAPI_DIAG_RECIPIENT_UNAVAILABLE()  4
define MAPI_DIAG_MAXIMUM_TIME_EXPIRED()  5
define MAPI_DIAG_EITS_UNSUPPORTED()  6
define MAPI_DIAG_CONTENT_TOO_LONG()  7
define MAPI_DIAG_IMPRACTICAL_TO_CONVERT()  8
define MAPI_DIAG_PROHIBITED_TO_CONVERT()  9
define MAPI_DIAG_CONVERSION_UNSUBSCRIBED()  10
define MAPI_DIAG_PARAMETERS_INVALID()  11
define MAPI_DIAG_CONTENT_SYNTAX_IN_ERROR()  12
define MAPI_DIAG_LENGTH_CONSTRAINT_VIOLATD()  13
define MAPI_DIAG_NUMBER_CONSTRAINT_VIOLATD()  14
define MAPI_DIAG_CONTENT_TYPE_UNSUPPORTED()  15
define MAPI_DIAG_TOO_MANY_RECIPIENTS()  16
define MAPI_DIAG_NO_BILATERAL_AGREEMENT()  17
define MAPI_DIAG_CRITICAL_FUNC_UNSUPPORTED()  18
define MAPI_DIAG_CONVERSION_LOSS_PROHIB()  19
define MAPI_DIAG_LINE_TOO_LONG()  20
define MAPI_DIAG_PAGE_TOO_LONG()  21
define MAPI_DIAG_PICTORIAL_SYMBOL_LOST()  22
define MAPI_DIAG_PUNCTUATION_SYMBOL_LOST()  23
define MAPI_DIAG_ALPHABETIC_CHARACTER_LOST()  24
define MAPI_DIAG_MULTIPLE_INFO_LOSSES()  25
define MAPI_DIAG_REASSIGNMENT_PROHIBITED()  26
define MAPI_DIAG_REDIRECTION_LOOP_DETECTED()  27
define MAPI_DIAG_EXPANSION_PROHIBITED()  28
define MAPI_DIAG_SUBMISSION_PROHIBITED()  29
define MAPI_DIAG_EXPANSION_FAILED()  30
define MAPI_DIAG_RENDITION_UNSUPPORTED()  31
define MAPI_DIAG_MAIL_ADDRESS_INCORRECT()  32
define MAPI_DIAG_MAIL_OFFICE_INCOR_OR_INVD()  33
define MAPI_DIAG_MAIL_ADDRESS_INCOMPLETE()  34
define MAPI_DIAG_MAIL_RECIPIENT_UNKNOWN()  35
define MAPI_DIAG_MAIL_RECIPIENT_DECEASED()  36
define MAPI_DIAG_MAIL_ORGANIZATION_EXPIRED()  37
define MAPI_DIAG_MAIL_REFUSED()  38
define MAPI_DIAG_MAIL_UNCLAIMED()  39
define MAPI_DIAG_MAIL_RECIPIENT_MOVED()  40
define MAPI_DIAG_MAIL_RECIPIENT_TRAVELLING()  41
define MAPI_DIAG_MAIL_RECIPIENT_DEPARTED()  42
define MAPI_DIAG_MAIL_NEW_ADDRESS_UNKNOWN()  43
define MAPI_DIAG_MAIL_FORWARDING_UNWANTED()  44
define MAPI_DIAG_MAIL_FORWARDING_PROHIB()  45
define MAPI_DIAG_SECURE_MESSAGING_ERROR()  46
define MAPI_DIAG_DOWNGRADING_IMPOSSIBLE()  47
define MAPI_MH_DP_PUBLIC_UA()  0
define MAPI_MH_DP_PRIVATE_UA()  1
define MAPI_MH_DP_MS()  2
define MAPI_MH_DP_ML()  3
define MAPI_MH_DP_PDAU()  4
define MAPI_MH_DP_PDS_PATRON()  5
define MAPI_MH_DP_OTHER_AU()  6
define FOLDER_ROOT()  0
define FOLDER_GENERIC()  1
define FOLDER_SEARCH()  2
define MESSAGE_MOVE()  1
define MESSAGE_DIALOG()  2
define OPEN_IF_EXISTS()  1
define DEL_MESSAGES()  1
define FOLDER_DIALOG()  2
define DEL_FOLDERS()  4
define DEL_ASSOCIATED()  8
define FOLDER_MOVE()  1
define COPY_SUBFOLDERS()  0x10
define MSGSTATUS_HIGHLIGHTED()  0x01
define MSGSTATUS_TAGGED()  2
define MSGSTATUS_HIDDEN()  4
define MSGSTATUS_DELMARKED()  8
define MSGSTATUS_REMOTE_DOWNLOAD()  0x01000
define MSGSTATUS_REMOTE_DELETE()  0x02000
define RECURSIVE_SORT()  2
define FLDSTATUS_HIGHLIGHTED()  1
define FLDSTATUS_TAGGED()  2
define FLDSTATUS_HIDDEN()  4
define FLDSTATUS_DELMARKED()  8
define STORE_ENTRYID_UNIQUE()  1
define STORE_READONLY()  2
define STORE_SEARCH_OK()  4
define STORE_MODIFY_OK()  8
define STORE_CREATE_OK()  0x10
define STORE_ATTACH_OK()  0x20
define STORE_OLE_OK()  0x40
define STORE_SUBMIT_OK()  0x80
define STORE_NOTIFY_OK()  0x100
define STORE_MV_PROPS_OK()  0x200
define STORE_CATEGORIZE_OK()  0x400
define STORE_RTF_OK()  0x800
define STORE_RESTRICTION_OK()  0x1000
define STORE_SORT_OK()  0x2000
define STORE_PUBLIC_FOLDERS()  0x4000
define STORE_UNCOMPRESSED_RTF()  0x8000
define STORE_HAS_SEARCHES()  0x1000000
define LOGOFF_NO_WAIT()  1
define LOGOFF_ORDERLY()  2
define LOGOFF_PURGE()  4
define LOGOFF_ABORT()  8
define LOGOFF_QUIET()  0x10
define LOGOFF_COMPLETE()  0x10000
define LOGOFF_INBOUND()  0x20000
define LOGOFF_OUTBOUND()  0x40000
define LOGOFF_OUTBOUND_QUEUE()  0x80000
define MSG_LOCKED()  1
define MSG_UNLOCKED()  0
define FOLDER_IPM_SUBTREE_VALID()  1
define FOLDER_IPM_INBOX_VALID()  2
define FOLDER_IPM_OUTBOX_VALID()  4
define FOLDER_IPM_WASTEBASKET_VALID()  8
define FOLDER_IPM_SENTMAIL_VALID()  0x10
define FOLDER_VIEWS_VALID()  0x20
define FOLDER_COMMON_VIEWS_VALID()  0x40
define FOLDER_FINDER_VALID()  0x80
define FORCE_SUBMIT()  1
define MSGFLAG_READ()  1
define MSGFLAG_UNMODIFIED()  2
define MSGFLAG_SUBMIT()  4
define MSGFLAG_UNSENT()  8
define MSGFLAG_HASATTACH()  0x10
define MSGFLAG_FROMME()  0x20
define MSGFLAG_ASSOCIATED()  0x40
define MSGFLAG_RESEND()  0x80
define MSGFLAG_RN_PENDING()  0x100
define MSGFLAG_NRN_PENDING()  0x200
define SUBMITFLAG_LOCKED()  1
define SUBMITFLAG_PREPROCESS()  2
define MODRECIP_ADD()  2
define MODRECIP_MODIFY()  4
define MODRECIP_REMOVE()  8
define SUPPRESS_RECEIPT()  1
define CLEAR_READ_FLAG()  4
define GENERATE_RECEIPT_ONLY()  0x10
define CLEAR_RN_PENDING()  0x20
define CLEAR_NRN_PENDING()  0x40
define ATTACH_DIALOG()  1
define SECURITY_SIGNED()  1
define SECURITY_ENCRYPTED()  2
define PRIO_URGENT()  1
define PRIO_NORMAL()  0
define PRIO_NONURGENT()  -1
define SENSITIVITY_NONE()  0
define SENSITIVITY_PERSONAL()  1
define SENSITIVITY_PRIVATE()  2
define SENSITIVITY_COMPANY_CONFIDENTIAL()  3
define IMPORTANCE_LOW()  0
define IMPORTANCE_NORMAL()  1
define IMPORTANCE_HIGH()  2
define NO_ATTACHMENT()  0
define ATTACH_BY_VALUE()  1
define ATTACH_BY_REFERENCE()  2
define ATTACH_BY_REF_RESOLVE()  3
define ATTACH_BY_REF_ONLY()  4
define ATTACH_EMBEDDED_MSG()  5
define ATTACH_OLE()  6
define ADRPARM_HELP_CTX()  0
define DIALOG_MODAL()  1
define DIALOG_SDI()  2
define DIALOG_OPTIONS()  4
define ADDRESS_ONE()  8
define AB_SELECTONLY()  0x10
define AB_RESOLVE()  0x20
define DT_MAILUSER()  0
define DT_DISTLIST()  1
define DT_FORUM()  2
define DT_AGENT()  3
define DT_ORGANIZATION()  4
define DT_PRIVATE_DISTLIST()  5
define DT_REMOTE_MAILUSER()  6
define DT_MODIFIABLE()  0x10000
define DT_GLOBAL()  0x20000
define DT_LOCAL()  0x30000
define DT_WAN()  0x40000
define DT_NOT_SPECIFIC()  0x50000
define DT_FOLDER()  0x1000000
define DT_FOLDER_LINK()  0x2000000
define DT_FOLDER_SPECIAL()  0x4000000
define MAPI_DEFERRED_ERRORS()  0x8
define MAPI_ASSOCIATED()  0x40
define MDB_NO_DIALOG()  0x1
define MDB_WRITE()  0x4
define MDB_TEMPORARY()  0x20
define MDB_NO_MAIL()  0x80
define AB_NO_DIALOG()  1
define MAPI_ENABLED()  0
define MAPI_DISABLED()  1
define DT_MULTILINE()  1
define DT_EDITABLE()  2
define DT_REQUIRED()  4
define DT_SET_IMMEDIATE()  8
define DT_PASSWORD_EDIT()  0x10
define DT_ACCEPT_DBCS()  0x20
define DT_SET_SELECTION()  0x40
define DTCT_LABEL()  0
define DTCT_EDIT()  1
define DTCT_LBX()  2
define DTCT_COMBOBOX()  3
define DTCT_DDLBX()  4
define DTCT_CHECKBOX()  5
define DTCT_GROUPBOX()  6
define DTCT_BUTTON()  7
define DTCT_PAGE()  8
define DTCT_RADIOBUTTON()  9
define DTCT_MVLISTBOX()  0x0B
define DTCT_MVDDLBX()  0x0C
define MAPI_NO_HBAR()  1
define MAPI_NO_VBAR()  2
define UI_SERVICE()  2
define SERVICE_UI_ALWAYS()  2
define SERVICE_UI_ALLOWED()  0x10
define UI_CURRENT_PROVIDER_FIRST()  4

struct CY
{
    struct STRUCT_CY
    {
        int32          Lo;
        int32          Hi;
    }
    int64      _int64;
}

define CURRENCY CY

struct ENTRYID
{
    int8[4]  abFlags;
    int8[MAPI_DIM]  ab;
}

struct MAPIUID
{
    int8[16]  ab;
}

struct SPropTagArray
{
    int32      cValues;
    int32[MAPI_DIM]  aulPropTag;
}

struct SBinary
{
    int32      cb;
    int32      lpb;
}

struct SShortArray
{
    int32      cValues;
    int32      lpi;
}

struct SGuidArray
{
    int32      cValues;
    int32      lpguid;
}

struct SRealArray
{
    int32      cValues;
    int32      lpflt;
}

struct SLongArray
{
    int32      cValues;
    int32      lpl;
}

struct SLargeIntegerArray
{
    int32      cValues;
    int32      lpli;
}

struct SDateTimeArray
{
    int32      cValues;
    int32    lpft;
}

struct SAppTimeArray
{
    int32      cValues;
    int32      lpat;
}

struct SCurrencyArray
{
    int32      cValues;
    int32      lpcur;
}

struct SBinaryArray
{
    int32      cValues;
    int32      lpbin;
}

struct SDoubleArray
{
    int32      cValues;
    int32      lpdbl;
}

struct SWStringArray
{
    int32      cValues;
    int32      lppszW;
}

struct SLPSTRArray
{
    int32      cValues;
    int32      lppszA;
}

union UPV
{
    int16      i;
    int32      l;
    int32      ul;
    int32      flt;
    int64      dbl;
    int16      b;
    CURRENCY      cur;
    int64      at;
    FILETIME      ft    ;
    int32      lpszA;
    SBinary      bin;
    int32      lpszW;
    int32      lpguid;
    LARGE_INTEGER      li;
    SShortArray      MVi;
    SLongArray      MVl;
    SRealArray      MVflt;
    SDoubleArray      MVdbl;
    SCurrencyArray      MVcur;
    SAppTimeArray      MVat;
    SDateTimeArray      MVft;
    SBinaryArray      MVbin;
    SLPSTRArray      MVszA;
    SWStringArray      MVszW;
    SGuidArray      MVguid;
    SLargeIntegerArray      MVli;
    SCODE      err;
    LONG      x;
}

struct SPropValue
{
    int32      ulPropTag;
    int32      dwAlignPad;
    UPV      Value;
}

struct SPropProblem
{
    int32      ulIndex;
    int32      ulPropTag;
    SCODE      scode;
}

struct SPropProblemArray
{
    int32      cProblem;
    SPropProblem[MAPI_DIM]  aProblem;
}

struct FLATENTRY
{
    int32      cb;
    int8[MAPI_DIM]  abEntry;
}

struct FLATENTRYLIST
{
    int32      cEntries;
    int32      cbEntries;
    int8[MAPI_DIM]  abEntries;
}

struct MTSID
{
    int32      cb;
    int8[MAPI_DIM]  ab;
}

struct FLATMTSIDLIST
{
    int32      cMTSIDs;
    int32      cbMTSIDs;
    int8[MAPI_DIM]  abMTSIDs;
}

struct ADRENTRY
{
    int32      ulReserved1;
    int32      cValues;
    int32      rgPropVals;
}

struct ADRLIST
{
    int32      cEntries;
    ADRENTRY[MAPI_DIM]  aEntries;
}

struct SRow
{
    int32      ulAdrEntryPad;
    int32      cValues;
    int32      lpProps;
}

struct SRowSet
{
    int32      cRows;
    SRow[MAPI_DIM]  aRow;
}

struct MAPIERROR
{
    int32      ulVersion;
    int32      lpszError;
    int32      lpszComponent;
    int32      ulLowLevelError;
    int32      ulContext;
}

struct ERROR_NOTIFICATION
{
    int32      cbEntryID;
    int32      lpEntryID;
    SCODE      scode;
    int32      ulFlags;
    int32      lpMAPIError;
}

struct NEWMAIL_NOTIFICATION
{
    int32      cbEntryID;
    int32      lpEntryID;
    int32      cbParentID;
    int32      lpParentID;
    int32      ulFlags;
    int32      lpszMessageClass;
    int32      ulMessageFlags;
}

struct OBJECT_NOTIFICATION
{
    int32      cbEntryID;
    int32      lpEntryID;
    int32      ulObjType;
    int32      cbParentID;
    int32      lpParentID;
    int32      cbOldID;
    int32      lpOldID;
    int32      cbOldParentID;
    int32      lpOldParentID;
    int32      lpPropTagArray;
}

struct TABLE_NOTIFICATION
{
    int32      ulTableEvent;
    int32      hResult;
    SPropValue      propIndex    ;
    SPropValue      propPrior    ;
    SRow      row;
    int32      ulPad;
}

struct EXTENDED_NOTIFICATION
{
    int32      ulEvent;
    int32      cb;
    int32      pbEventParameters;
}

struct STATUS_OBJECT_NOTIFICATION
{
    int32      cbEntryID;
    int32      lpEntryID;
    int32      cValues;
    int32      lpPropVals;
}

struct NOTIFICATION
{
    int32      ulEventType;
    int32      ulAlignPad;
    union UNION_NOTIFICATION
    {
        ERROR_NOTIFICATION          err;
        NEWMAIL_NOTIFICATION          newmail;
        OBJECT_NOTIFICATION          obj;
        TABLE_NOTIFICATION          tab;
        EXTENDED_NOTIFICATION          ext;
        STATUS_OBJECT_NOTIFICATION          statobj;
    }
}

struct MAPINAMEID
{
    int32      lpguid;
    int32      ulKind;
    union UNION_MAPINAMEID
    {
        int32          lID;
        int32          lpwstrName;
    }
}

struct SSortOrder
{
    int32      ulPropTag;
    int32      ulOrder;
}

struct SSortOrderSet
{
    int32      cSorts;
    int32      cCategories;
    int32      cExpanded;
    SSortOrder[MAPI_DIM]  aSort;
}

struct SAndRestriction
{
    int32      cRes;
    int32      lpRes;
}

struct SOrRestriction
{
    int32      cRes;
    int32      lpRes;
}

struct SNotRestriction
{
    int32      ulReserved;
    int32      lpRes;
}

struct SContentRestriction
{
    int32      ulFuzzyLevel;
    int32      ulPropTag;
    int32      lpProp;
}

struct SBitMaskRestriction
{
    int32      relBMR;
    int32      ulPropTag;
    int32      ulMask;
}

struct SPropertyRestriction
{
    int32      relop;
    int32      ulPropTag;
    int32      lpProp;
}

struct SComparePropsRestriction
{
    int32      relop;
    int32      ulPropTag1;
    int32      ulPropTag2;
}

struct SSizeRestriction
{
    int32      relop;
    int32      ulPropTag;
    int32      cb;
}

struct SExistRestriction
{
    int32      ulReserved1;
    int32      ulPropTag;
    int32      ulReserved2;
}

struct SSubRestriction
{
    int32      ulSubObject;
    int32      lpRes;
}

struct SCommentRestriction
{
    int32      cValues;
    int32      lpRes;
    int32      lpProp;
}

struct SRestriction
{
    int32      rt;
    union UNION_SRestriction
    {
        SComparePropsRestriction          resCompareProps;
        SAndRestriction          resAnd;
        SOrRestriction          resOr;
        SNotRestriction          resNot;
        SContentRestriction          resContent;
        SPropertyRestriction          resProperty;
        SBitMaskRestriction          resBitMask;
        SSizeRestriction          resSize;
        SExistRestriction          resExist;
        SSubRestriction          resSub;
        SCommentRestriction          resComment;
    }
}

struct FlagList
{
    int32      cFlags;
    int32[MAPI_DIM]  ulFlag;
}

struct ADRPARM
{
    int32      cbABContEntryID;
    int32      lpABContEntryID;
    int32      ulFlags;
    int32      lpReserved;
    int32      ulHelpContext;
    int32      lpszHelpFileName;
    int32      lpfnABSDI;
    int32      lpfnDismiss;
    int32      lpvDismissContext;
    int32      lpszCaption;
    int32      lpszNewEntryTitle;
    int32      lpszDestWellsTitle;
    int32      cDestFields;
    int32      nDestFieldFocus;
    int32      lppszDestTitles;
    int32      lpulDestComps;
    int32      lpContRestriction;
    int32      lpHierRestriction;
}

struct DTBLLABEL
{
    int32      ulbLpszLabelName;
    int32      ulFlags;
}

struct DTBLEDIT
{
    int32      ulbLpszCharsAllowed;
    int32      ulFlags;
    int32      ulNumCharsAllowed;
    int32      ulPropTag;
}

struct DTBLLBX
{
    int32      ulFlags;
    int32      ulPRSetProperty;
    int32      ulPRTableName;
}

struct DTBLCOMBOBOX
{
    int32      ulbLpszCharsAllowed;
    int32      ulFlags;
    int32      ulNumCharsAllowed;
    int32      ulPRPropertyName;
    int32      ulPRTableName;
}

struct DTBLDDLBX
{
    int32      ulFlags;
    int32      ulPRDisplayProperty;
    int32      ulPRSetProperty;
    int32      ulPRTableName;
}

struct DTBLCHECKBOX
{
    int32      ulbLpszLabel;
    int32      ulFlags;
    int32      ulPRPropertyName;
}

struct DTBLGROUPBOX
{
    int32      ulbLpszLabel;
    int32      ulFlags;
}

struct DTBLBUTTON
{
    int32      ulbLpszLabel;
    int32      ulFlags;
    int32      ulPRControl;
}

struct DTBLPAGE
{
    int32      ulbLpszLabel;
    int32      ulFlags;
    int32      ulbLpszComponent;
    int32      ulContext;
}

struct DTBLRADIOBUTTON
{
    int32      ulbLpszLabel;
    int32      ulFlags;
    int32      ulcButtons;
    int32      ulPropTag;
    int32      lReturnValue;
}

struct DTBLMVLISTBOX
{
    int32      ulFlags;
    int32      ulMVPropTag;
}

struct DTBLMVDDLBX
{
    int32      ulFlags;
    int32      ulMVPropTag;
}

//-----------------------------------[ mapiform.h ]-------------------------------------
define HFRMREG_DEFAULT()  0
define HFRMREG_LOCAL()  1
define HFRMREG_PERSONAL()  2
define HFRMREG_FOLDER()  3
define SAVE_FORMAT_TEXT()  1
define SAVE_FORMAT_RICHTEXT()  2
define VCSTATUS_NEXT()  1
define VCSTATUS_PREV()  2
define VCSTATUS_MODAL()  4
define VCSTATUS_INTERACTIVE()  8
define VCSTATUS_READONLY()  0x10
define VCSTATUS_DELETE()  0x10000
define VCSTATUS_COPY()  0x20000
define VCSTATUS_MOVE()  0x40000
define VCSTATUS_SUBMIT()  0x80000
define VCSTATUS_DELETE_IS_MOVE()  0x100000
define VCSTATUS_SAVE()  0x200000
define VCSTATUS_NEW_MESSAGE()  0x400000
define VCDIR_NEXT()  VCSTATUS_NEXT
define VCDIR_PREV()  VCSTATUS_PREV
define VCDIR_DELETE()  VCSTATUS_DELETE
define VCDIR_MOVE()  VCSTATUS_MOVE
define FPST_VANILLA()  0
define FPST_ENUM_PROP()  1
define MAPI_MESSAGE_BEHAVIOR_IPM()  0
define MAPI_MESSAGE_BEHAVIOR_FOLDER()  1
define MAPIFORM_SELECT_ALL_REGISTRIES()  0
define MAPIFORM_SELECT_FOLDER_REGISTRY_ONLY()  1
define MAPIFORM_SELECT_NON_FOLDER_REGISTRY_ONLY()  2
define FORMPROPSET_UNION()  0
define FORMPROPSET_INTERSECTION()  1
define MAPIFORM_EXACTMATCH()  0x20
define MAPIFORM_CPU_X86()  1
define MAPIFORM_CPU_MIP()  2
define MAPIFORM_CPU_AXP()  3
define MAPIFORM_CPU_PPC()  4
define MAPIFORM_CPU_M68()  5
define MAPIFORM_OS_WIN_31()  1
define MAPIFORM_OS_WINNT_35()  2
define MAPIFORM_OS_WIN_95()  3
define MAPIFORM_OS_MAC_7x()  4
define MAPIFORM_OS_WINNT_40()  5
define MAPIFORM_INSTALL_DIALOG()  MAPI_DIALOG
define MAPIFORM_INSTALL_OVERWRITEONCONFLICT()  0x10

define SAVEOPTS_SAVEIFDIRTY()  0
define SAVEOPTS_NOSAVE()  1
define SAVEOPTS_PROMPTSAVE()  2

struct FORMPRINTSETUP
{
    int32      ulFlags;
    int32      hDevMode;
    int32      hDevNames;
    int32      ulFirstPageNumber;
    int32      fPrintAttachments;
}

struct SMAPIFormPropEnumVal
{
    int32      pszDisplayName;
    int32      nVal;
}

struct SMAPIFormProp
{
    int32      ulFlags;
    int32      nPropType;
    MAPINAMEID      nmid;
    int32      pszDisplayName;
    int32      nSpecialType;
    union UNION_SMAPIFormProp
    {
        struct STRUCT_SMAPIFormProp
        {
            MAPINAMEID              nmidIdx;
            int32              cfpevAvailable;
            int32              pfpevAvailable;
        }
    }
}

struct SMAPIFormPropArray
{
    int32      cProps;
    int32      ulPad;
    SMAPIFormProp[MAPI_DIM]  aFormProp;
}

struct SMAPIVerb
{
    int32      lVerb;
    int32      szVerbname;
    int32      fuFlags;
    int32      grfAttribs;
    int32      ulFlags;
}

struct SMAPIVerbArray
{
    int32      cMAPIVerb;
    SMAPIVerb[MAPI_DIM]  aMAPIVerb;
}


struct SMessageClassArray
{
    int32      cValues;
    int32[MAPI_DIM]  aMessageClass;
}

struct SMAPIFormInfoArray
{
    int32      cForms;
    int32[MAPI_DIM]  aFormInfo;
}

//--------------------------------[ mapinls.h ]---------------------------
define NORM_IGNOREKANATYPE()  0x10000
define NORM_IGNOREWIDTH()  0x20000
//define CP_ACP()  0

//---------------------------[ mapioid.h ]-------------------------------
define OID_TAG()  0x0A
define OID_ENCODING()  0x0B
define CB_OID_1()  9
define CB_OID_2()  10
define CB_OID_3()  11
define CB_OID_4()  12

//--------------------------[ mapispi.h ]--------------------------------

define CURRENT_SPI_VERSION()  0x10010
define PDK1_SPI_VERSION()  0x10000
define PDK2_SPI_VERSION()  0x10008
define PDK3_SPI_VERSION()  0x10010
define NOTIFY_SYNC()  0x40000000
define NOTIFY_CANCELED()  0x80000000
define CALLBACK_DISCONTINUE()  0x80000000
define NOTIFY_NEWMAIL()  1
define NOTIFY_READYTOSEND()  2
define NOTIFY_SENTDEFERRED()  4
define NOTIFY_CRITSEC()  0x1000
define NOTIFY_NONCRIT()  0x2000
define NOTIFY_CONFIG_CHANGE()  0x4000
define NOTIFY_CRITICAL_ERROR()  0x10000000
define NOTIFY_NEWMAIL_RECEIVED()  0x20000000
define STATUSROW_UPDATE()  0x10000000
define STGSTRM_RESET()  0
define STGSTRM_CURRENT()  0x10000000
define STGSTRM_MODIFY()  2
define STGSTRM_CREATE()  0x1000
define MAPI_NON_READ()  1
define FILL_ENTRY()  1
define DEINIT_NORMAL()  1
define DEINIT_HURRY()  0x80000000
define LOGON_NO_DIALOG()  1
define LOGON_NO_CONNECT()  4
define LOGON_NO_INBOUND()  8
define LOGON_NO_OUTBOUND()  0x10
define LOGON_SP_IDLE()  0x10000
define LOGON_SP_POLL()  0x20000
define LOGON_SP_RESOLVE()  0x40000
define OPTION_TYPE_RECIPIENT()  1
define OPTION_TYPE_MESSAGE()  2
define NOTIFY_ABORT_DEFERRED()  0x40000000
define NOTIFY_CANCEL_MESSAGE()  0x80000000
define NOTIFY_BEGIN_INBOUND()  1
define NOTIFY_END_INBOUND()  0x10000
define NOTIFY_BEGIN_OUTBOUND()  2
define NOTIFY_END_OUTBOUND()  0x20000
define NOTIFY_BEGIN_INBOUND_FLUSH()  4
define NOTIFY_END_INBOUND_FLUSH()  0x40000
define NOTIFY_BEGIN_OUTBOUND_FLUSH()  8
define NOTIFY_END_OUTBOUND_FLUSH()  0x80000
define LOGOFF_NORMAL()  1
define LOGOFF_HURRY()  0x80000000
define BEGIN_DEFERRED()  1
define END_RESEND_NOW()  0x10000
define END_RESEND_LATER()  0x20000
define END_DONT_RESEND()  0x40000
define LOGON_SP_TRANSPORT()  1
define LOGON_SP_PROMPT()  2
define LOGON_SP_NEWPW()  4
define LOGON_CHANGED()  8
define DIALOG_FOLDER()  1
define DIALOG_MESSAGE()  2
define DIALOG_PROP()  4
define DIALOG_ATTACH()  8
define DIALOG_MOVE()  0x10
define DIALOG_COPY()  0x20
define DIALOG_DELETE()  0x40
define DIALOG_ALLOW_CANCEL()  0x80
define DIALOG_CONFIRM_CANCEL()  0x100
define NEEDS_PREPROCESSING()  1
define NEEDS_SPOOLER()  2
define CHECK_SENDER()  1
define NON_STANDARD()  0x10000
define MSG_SERVICE_UI_READ_ONLY()  8
define SERVICE_LOGON_FAILED()  0x20
define MSG_SERVICE_INSTALL()  1
define MSG_SERVICE_CREATE()  2
define MSG_SERVICE_CONFIGURE()  3
define MSG_SERVICE_DELETE()  4
define MSG_SERVICE_UNINSTALL()  5
define MSG_SERVICE_PROVIDER_CREATE()  6
define MSG_SERVICE_PROVIDER_DELETE()  7

struct NOTIFKEY
{
    int32      cb;
    int8[MAPI_DIM]  ab;
}

struct OPTIONDATA
{
    int32      ulFlags;
    int32      lpRecipGUID;
    int32      lpszAdrType;
    int32      lpszDLLName;
    int32      ulOrdinal;
    int32      cbOptionsData;
    int32      lpbOptionsData;
    int32      cOptionsProps;
    int32      lpOptionsProps;
}

//--------------------------------[ mapitags.h ]-----------------------------------

define PR_ACKNOWLEDGEMENT_MODE()  (PT_LONG shl 16)+ 1
define PR_ALTERNATE_RECIPIENT_ALLOWED()  ( PT_BOOLEAN shl 16)+   2
define PR_AUTHORIZING_USERS()  ( PT_BINARY shl 16)+    3
define PR_AUTO_FORWARD_COMMENT()  ( PT_TSTRING shl 16)+   4
define PR_AUTO_FORWARD_COMMENT_W()  ( PT_UNICODE shl 16)+   4
define PR_AUTO_FORWARD_COMMENT_A()  ( PT_STRING8 shl 16)+   4
define PR_AUTO_FORWARDED()  ( PT_BOOLEAN shl 16)+   5
define PR_CONTENT_CONFIDENTIALITY_ALGORITHM_ID()  ( PT_BINARY shl 16)+    6
define PR_CONTENT_CORRELATOR()  ( PT_BINARY shl 16)+    7
define PR_CONTENT_IDENTIFIER()  ( PT_TSTRING shl 16)+   8
define PR_CONTENT_IDENTIFIER_W()  ( PT_UNICODE shl 16)+   8
define PR_CONTENT_IDENTIFIER_A()  ( PT_STRING8 shl 16)+   8
define PR_CONTENT_LENGTH()  ( PT_LONG shl 16)+      9
define PR_CONTENT_RETURN_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0A
define PR_CONVERSATION_KEY()  ( PT_BINARY shl 16)+    0x0B
define PR_CONVERSION_EITS()  ( PT_BINARY shl 16)+    0x0C
define PR_CONVERSION_WITH_LOSS_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x0D
define PR_CONVERTED_EITS()  ( PT_BINARY shl 16)+    0x0E
define PR_DEFERRED_DELIVERY_TIME()  ( PT_SYSTIME shl 16)+   0x0F
define PR_DELIVER_TIME()  ( PT_SYSTIME shl 16)+   0x10
define PR_DISCARD_REASON()  ( PT_LONG shl 16)+      0x11
define PR_DISCLOSURE_OF_RECIPIENTS()  ( PT_BOOLEAN shl 16)+   0x12
define PR_DL_EXPANSION_HISTORY()  ( PT_BINARY shl 16)+    0x13
define PR_DL_EXPANSION_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x14
define PR_EXPIRY_TIME()  ( PT_SYSTIME shl 16)+   0x15
define PR_IMPLICIT_CONVERSION_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x16
define PR_IMPORTANCE()  ( PT_LONG shl 16)+      0x17
define PR_IPM_ID()  ( PT_BINARY shl 16)+    0x18
define PR_LATEST_DELIVERY_TIME()  ( PT_SYSTIME shl 16)+   0x19
define PR_MESSAGE_CLASS()  ( PT_TSTRING shl 16)+   0x1A
define PR_MESSAGE_CLASS_W()  ( PT_UNICODE shl 16)+   0x1A
define PR_MESSAGE_CLASS_A()  ( PT_STRING8 shl 16)+   0x1A
define PR_MESSAGE_DELIVERY_ID()  ( PT_BINARY shl 16)+    0x1B
define PR_MESSAGE_SECURITY_LABEL()  ( PT_BINARY shl 16)+    0x1E
define PR_OBSOLETED_IPMS()  ( PT_BINARY shl 16)+    0x1F
define PR_ORIGINALLY_INTENDED_RECIPIENT_NAME()  ( PT_BINARY shl 16)+    0x20
define PR_ORIGINAL_EITS()  ( PT_BINARY shl 16)+    0x21
define PR_ORIGINATOR_CERTIFICATE()  ( PT_BINARY shl 16)+    0x22
define PR_ORIGINATOR_DELIVERY_REPORT_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x23
define PR_ORIGINATOR_RETURN_ADDRESS()  ( PT_BINARY shl 16)+    0x24
define PR_PARENT_KEY()  ( PT_BINARY shl 16)+    0x25
define PR_PRIORITY()  ( PT_LONG shl 16)+      0x26
define PR_ORIGIN_CHECK()  ( PT_BINARY shl 16)+    0x27
define PR_PROOF_OF_SUBMISSION_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x28
define PR_READ_RECEIPT_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x29
define PR_RECEIPT_TIME()  ( PT_SYSTIME shl 16)+   0x2A
define PR_RECIPIENT_REASSIGNMENT_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x2B
define PR_REDIRECTION_HISTORY()  ( PT_BINARY shl 16)+    0x2C
define PR_RELATED_IPMS()  ( PT_BINARY shl 16)+    0x2D
define PR_ORIGINAL_SENSITIVITY()  ( PT_LONG shl 16)+      0x2E
define PR_LANGUAGES()  ( PT_TSTRING shl 16)+   0x2F
define PR_LANGUAGES_W()  ( PT_UNICODE shl 16)+   0x2F
define PR_LANGUAGES_A()  ( PT_STRING8 shl 16)+   0x2F
define PR_REPLY_TIME()  ( PT_SYSTIME shl 16)+   0x30
define PR_REPORT_TAG()  ( PT_BINARY shl 16)+    0x31
define PR_REPORT_TIME()  ( PT_SYSTIME shl 16)+   0x32
define PR_RETURNED_IPM()  ( PT_BOOLEAN shl 16)+   0x33
define PR_SECURITY()  ( PT_LONG shl 16)+      0x34
define PR_INCOMPLETE_COPY()  ( PT_BOOLEAN shl 16)+   0x35
define PR_SENSITIVITY()  ( PT_LONG shl 16)+      0x36
define PR_SUBJECT()  ( PT_TSTRING shl 16)+   0x37
define PR_SUBJECT_W()  ( PT_UNICODE shl 16)+   0x37
define PR_SUBJECT_A()  ( PT_STRING8 shl 16)+   0x37
define PR_SUBJECT_IPM()  ( PT_BINARY shl 16)+    0x38
define PR_CLIENT_SUBMIT_TIME()  ( PT_SYSTIME shl 16)+   0x39
define PR_REPORT_NAME()  ( PT_TSTRING shl 16)+   0x3A
define PR_REPORT_NAME_W()  ( PT_UNICODE shl 16)+   0x3A
define PR_REPORT_NAME_A()  ( PT_STRING8 shl 16)+   0x3A
define PR_SENT_REPRESENTING_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3B
define PR_X400_CONTENT_TYPE()  ( PT_BINARY shl 16)+    0x3C
define PR_SUBJECT_PREFIX()  ( PT_TSTRING shl 16)+   0x3D
define PR_SUBJECT_PREFIX_W()  ( PT_UNICODE shl 16)+   0x3D
define PR_SUBJECT_PREFIX_A()  ( PT_STRING8 shl 16)+   0x3D
define PR_NON_RECEIPT_REASON()  ( PT_LONG shl 16)+      0x3E
define PR_RECEIVED_BY_ENTRYID()  ( PT_BINARY shl 16)+    0x3F
define PR_RECEIVED_BY_NAME()  ( PT_TSTRING shl 16)+   0x40
define PR_RECEIVED_BY_NAME_W()  ( PT_UNICODE shl 16)+   0x40
define PR_RECEIVED_BY_NAME_A()  ( PT_STRING8 shl 16)+   0x40
define PR_SENT_REPRESENTING_ENTRYID()  ( PT_BINARY shl 16)+    0x41
define PR_SENT_REPRESENTING_NAME()  ( PT_TSTRING shl 16)+   0x42
define PR_SENT_REPRESENTING_NAME_W()  ( PT_UNICODE shl 16)+   0x42
define PR_SENT_REPRESENTING_NAME_A()  ( PT_STRING8 shl 16)+   0x42
define PR_RCVD_REPRESENTING_ENTRYID()  ( PT_BINARY shl 16)+    0x43
define PR_RCVD_REPRESENTING_NAME()  ( PT_TSTRING shl 16)+   0x44
define PR_RCVD_REPRESENTING_NAME_W()  ( PT_UNICODE shl 16)+   0x44
define PR_RCVD_REPRESENTING_NAME_A()  ( PT_STRING8 shl 16)+   0x44
define PR_REPORT_ENTRYID()  ( PT_BINARY shl 16)+    0x45
define PR_READ_RECEIPT_ENTRYID()  ( PT_BINARY shl 16)+    0x46
define PR_MESSAGE_SUBMISSION_ID()  ( PT_BINARY shl 16)+    0x47
define PR_PROVIDER_SUBMIT_TIME()  ( PT_SYSTIME shl 16)+   0x48
define PR_ORIGINAL_SUBJECT()  ( PT_TSTRING shl 16)+   0x49
define PR_ORIGINAL_SUBJECT_W()  ( PT_UNICODE shl 16)+   0x49
define PR_ORIGINAL_SUBJECT_A()  ( PT_STRING8 shl 16)+   0x49
define PR_DISC_VAL()  ( PT_BOOLEAN shl 16)+   0x4A
define PR_ORIG_MESSAGE_CLASS()  ( PT_TSTRING shl 16)+   0x4B
define PR_ORIG_MESSAGE_CLASS_W()  ( PT_UNICODE shl 16)+   0x4B
define PR_ORIG_MESSAGE_CLASS_A()  ( PT_STRING8 shl 16)+   0x4B
define PR_ORIGINAL_AUTHOR_ENTRYID()  ( PT_BINARY shl 16)+    0x4C
define PR_ORIGINAL_AUTHOR_NAME()  ( PT_TSTRING shl 16)+   0x4D
define PR_ORIGINAL_AUTHOR_NAME_W()  ( PT_UNICODE shl 16)+   0x4D
define PR_ORIGINAL_AUTHOR_NAME_A()  ( PT_STRING8 shl 16)+   0x4D
define PR_ORIGINAL_SUBMIT_TIME()  ( PT_SYSTIME shl 16)+   0x4E
define PR_REPLY_RECIPIENT_ENTRIES()  ( PT_BINARY shl 16)+    0x4F
define PR_REPLY_RECIPIENT_NAMES()  ( PT_TSTRING shl 16)+   0x50
define PR_REPLY_RECIPIENT_NAMES_W()  ( PT_UNICODE shl 16)+   0x50
define PR_REPLY_RECIPIENT_NAMES_A()  ( PT_STRING8 shl 16)+   0x50
define PR_RECEIVED_BY_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x51
define PR_RCVD_REPRESENTING_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x52
define PR_READ_RECEIPT_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x53
define PR_REPORT_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x54
define PR_ORIGINAL_DELIVERY_TIME()  ( PT_SYSTIME shl 16)+   0x55
define PR_ORIGINAL_AUTHOR_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x56
define PR_MESSAGE_TO_ME()  ( PT_BOOLEAN shl 16)+   0x57
define PR_MESSAGE_CC_ME()  ( PT_BOOLEAN shl 16)+   0x58
define PR_MESSAGE_RECIP_ME()  ( PT_BOOLEAN shl 16)+   0x59
define PR_ORIGINAL_SENDER_NAME()  ( PT_TSTRING shl 16)+   0x5A
define PR_ORIGINAL_SENDER_NAME_W()  ( PT_UNICODE shl 16)+   0x5A
define PR_ORIGINAL_SENDER_NAME_A()  ( PT_STRING8 shl 16)+   0x5A
define PR_ORIGINAL_SENDER_ENTRYID()  ( PT_BINARY shl 16)+    0x5B
define PR_ORIGINAL_SENDER_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x5C
define PR_ORIGINAL_SENT_REPRESENTING_NAME()  ( PT_TSTRING shl 16)+   0x5D
define PR_ORIGINAL_SENT_REPRESENTING_NAME_W()  ( PT_UNICODE shl 16)+   0x5D
define PR_ORIGINAL_SENT_REPRESENTING_NAME_A()  ( PT_STRING8 shl 16)+   0x5D
define PR_ORIGINAL_SENT_REPRESENTING_ENTRYID()  ( PT_BINARY shl 16)+    0x5E
define PR_ORIGINAL_SENT_REPRESENTING_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x5F
define PR_START_DATE()  ( PT_SYSTIME shl 16)+   0x60
define PR_END_DATE()  ( PT_SYSTIME shl 16)+   0x61
define PR_OWNER_APPT_ID()  ( PT_LONG shl 16)+      0x62
define PR_RESPONSE_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x63
define PR_SENT_REPRESENTING_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x64
define PR_SENT_REPRESENTING_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x64
define PR_SENT_REPRESENTING_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x64
define PR_SENT_REPRESENTING_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x65
define PR_SENT_REPRESENTING_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x65
define PR_SENT_REPRESENTING_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x65
define PR_ORIGINAL_SENDER_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x66
define PR_ORIGINAL_SENDER_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x66
define PR_ORIGINAL_SENDER_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x66
define PR_ORIGINAL_SENDER_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x67
define PR_ORIGINAL_SENDER_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x67
define PR_ORIGINAL_SENDER_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x67
define PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x68
define PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x68
define PR_ORIGINAL_SENT_REPRESENTING_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x68
define PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x69
define PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x69
define PR_ORIGINAL_SENT_REPRESENTING_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x69
define PR_CONVERSATION_TOPIC()  ( PT_TSTRING shl 16)+   0x70
define PR_CONVERSATION_TOPIC_W()  ( PT_UNICODE shl 16)+   0x70
define PR_CONVERSATION_TOPIC_A()  ( PT_STRING8 shl 16)+   0x70
define PR_CONVERSATION_INDEX()  ( PT_BINARY shl 16)+    0x71
define PR_ORIGINAL_DISPLAY_BCC()  ( PT_TSTRING shl 16)+   0x72
define PR_ORIGINAL_DISPLAY_BCC_W()  ( PT_UNICODE shl 16)+   0x72
define PR_ORIGINAL_DISPLAY_BCC_A()  ( PT_STRING8 shl 16)+   0x72
define PR_ORIGINAL_DISPLAY_CC()  ( PT_TSTRING shl 16)+   0x73
define PR_ORIGINAL_DISPLAY_CC_W()  ( PT_UNICODE shl 16)+   0x73
define PR_ORIGINAL_DISPLAY_CC_A()  ( PT_STRING8 shl 16)+   0x73
define PR_ORIGINAL_DISPLAY_TO()  ( PT_TSTRING shl 16)+   0x74
define PR_ORIGINAL_DISPLAY_TO_W()  ( PT_UNICODE shl 16)+   0x74
define PR_ORIGINAL_DISPLAY_TO_A()  ( PT_STRING8 shl 16)+   0x74
define PR_RECEIVED_BY_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x75
define PR_RECEIVED_BY_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x75
define PR_RECEIVED_BY_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x75
define PR_RECEIVED_BY_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x76
define PR_RECEIVED_BY_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x76
define PR_RECEIVED_BY_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x76
define PR_RCVD_REPRESENTING_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x77
define PR_RCVD_REPRESENTING_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x77
define PR_RCVD_REPRESENTING_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x77
define PR_RCVD_REPRESENTING_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x78
define PR_RCVD_REPRESENTING_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x78
define PR_RCVD_REPRESENTING_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x78
define PR_ORIGINAL_AUTHOR_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x79
define PR_ORIGINAL_AUTHOR_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x79
define PR_ORIGINAL_AUTHOR_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x79
define PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x7A
define PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x7A
define PR_ORIGINAL_AUTHOR_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x7A
define PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x7B
define PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x7B
define PR_ORIGINALLY_INTENDED_RECIP_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x7B
define PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x7C
define PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x7C
define PR_ORIGINALLY_INTENDED_RECIP_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x7C
define PR_TRANSPORT_MESSAGE_HEADERS()  (PT_TSTRING shl 16)+    0x7D
define PR_TRANSPORT_MESSAGE_HEADERS_W()  (PT_UNICODE shl 16)+    0x7D
define PR_TRANSPORT_MESSAGE_HEADERS_A()  (PT_STRING8 shl 16)+    0x7D
define PR_DELEGATION()  (PT_BINARY shl 16)+     0x7E
define PR_TNEF_CORRELATION_KEY()  (PT_BINARY shl 16)+     0x7F
define PR_BODY()  ( PT_TSTRING shl 16)+   0x1000
define PR_BODY_W()  ( PT_UNICODE shl 16)+   0x1000
define PR_BODY_A()  ( PT_STRING8 shl 16)+   0x1000
define PR_REPORT_TEXT()  ( PT_TSTRING shl 16)+   0x1001
define PR_REPORT_TEXT_W()  ( PT_UNICODE shl 16)+   0x1001
define PR_REPORT_TEXT_A()  ( PT_STRING8 shl 16)+   0x1001
define PR_ORIGINATOR_AND_DL_EXPANSION_HISTORY()  ( PT_BINARY shl 16)+    0x1002
define PR_REPORTING_DL_NAME()  ( PT_BINARY shl 16)+    0x1003
define PR_REPORTING_MTA_CERTIFICATE()  ( PT_BINARY shl 16)+    0x1004
define PR_RTF_SYNC_BODY_CRC()  ( PT_LONG shl 16)+      0x1006
define PR_RTF_SYNC_BODY_COUNT()  ( PT_LONG shl 16)+      0x1007
define PR_RTF_SYNC_BODY_TAG()  ( PT_TSTRING shl 16)+   0x1008
define PR_RTF_SYNC_BODY_TAG_W()  ( PT_UNICODE shl 16)+   0x1008
define PR_RTF_SYNC_BODY_TAG_A()  ( PT_STRING8 shl 16)+   0x1008
define PR_RTF_COMPRESSED()  ( PT_BINARY shl 16)+    0x1009
define PR_RTF_SYNC_PREFIX_COUNT()  ( PT_LONG shl 16)+      0x1010
define PR_RTF_SYNC_TRAILING_COUNT()  ( PT_LONG shl 16)+      0x1011
define PR_ORIGINALLY_INTENDED_RECIP_ENTRYID()  ( PT_BINARY shl 16)+    0x1012
define PR_CONTENT_INTEGRITY_CHECK()  ( PT_BINARY shl 16)+    0x0C00
define PR_EXPLICIT_CONVERSION()  ( PT_LONG shl 16)+      0x0C01
define PR_IPM_RETURN_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C02
define PR_MESSAGE_TOKEN()  ( PT_BINARY shl 16)+    0x0C03
define PR_NDR_REASON_CODE()  ( PT_LONG shl 16)+      0x0C04
define PR_NDR_DIAG_CODE()  ( PT_LONG shl 16)+      0x0C05
define PR_NON_RECEIPT_NOTIFICATION_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C06
define PR_DELIVERY_POINT()  ( PT_LONG shl 16)+      0x0C07
define PR_ORIGINATOR_NON_DELIVERY_REPORT_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C08
define PR_ORIGINATOR_REQUESTED_ALTERNATE_RECIPIENT()  ( PT_BINARY shl 16)+    0x0C09
define PR_PHYSICAL_DELIVERY_BUREAU_FAX_DELIVERY()  ( PT_BOOLEAN shl 16)+   0x0C0A
define PR_PHYSICAL_DELIVERY_MODE()  ( PT_LONG shl 16)+      0x0C0B
define PR_PHYSICAL_DELIVERY_REPORT_REQUEST()  ( PT_LONG shl 16)+      0x0C0C
define PR_PHYSICAL_FORWARDING_ADDRESS()  ( PT_BINARY shl 16)+    0x0C0D
define PR_PHYSICAL_FORWARDING_ADDRESS_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C0E
define PR_PHYSICAL_FORWARDING_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x0C0F
define PR_PHYSICAL_RENDITION_ATTRIBUTES()  ( PT_BINARY shl 16)+    0x0C10
define PR_PROOF_OF_DELIVERY()  ( PT_BINARY shl 16)+    0x0C11
define PR_PROOF_OF_DELIVERY_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C12
define PR_RECIPIENT_CERTIFICATE()  ( PT_BINARY shl 16)+    0x0C13
define PR_RECIPIENT_NUMBER_FOR_ADVICE()  ( PT_TSTRING shl 16)+   0x0C14
define PR_RECIPIENT_NUMBER_FOR_ADVICE_W()  ( PT_UNICODE shl 16)+   0x0C14
define PR_RECIPIENT_NUMBER_FOR_ADVICE_A()  ( PT_STRING8 shl 16)+   0x0C14
define PR_RECIPIENT_TYPE()  ( PT_LONG shl 16)+      0x0C15
define PR_REGISTERED_MAIL_TYPE()  ( PT_LONG shl 16)+      0x0C16
define PR_REPLY_REQUESTED()  ( PT_BOOLEAN shl 16)+   0x0C17
define PR_REQUESTED_DELIVERY_METHOD()  ( PT_LONG shl 16)+      0x0C18
define PR_SENDER_ENTRYID()  ( PT_BINARY shl 16)+    0x0C19
define PR_SENDER_NAME()  ( PT_TSTRING shl 16)+   0x0C1A
define PR_SENDER_NAME_W()  ( PT_UNICODE shl 16)+   0x0C1A
define PR_SENDER_NAME_A()  ( PT_STRING8 shl 16)+   0x0C1A
define PR_SUPPLEMENTARY_INFO()  ( PT_TSTRING shl 16)+   0x0C1B
define PR_SUPPLEMENTARY_INFO_W()  ( PT_UNICODE shl 16)+   0x0C1B
define PR_SUPPLEMENTARY_INFO_A()  ( PT_STRING8 shl 16)+   0x0C1B
define PR_TYPE_OF_MTS_USER()  ( PT_LONG shl 16)+      0x0C1C
define PR_SENDER_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x0C1D
define PR_SENDER_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x0C1E
define PR_SENDER_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x0C1E
define PR_SENDER_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x0C1E
define PR_SENDER_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x0C1F
define PR_SENDER_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x0C1F
define PR_SENDER_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x0C1F
define PR_CURRENT_VERSION()  ( PT_I8 shl 16)+        0x0E00
define PR_DELETE_AFTER_SUBMIT()  ( PT_BOOLEAN shl 16)+   0x0E01
define PR_DISPLAY_BCC()  ( PT_TSTRING shl 16)+   0x0E02
define PR_DISPLAY_BCC_W()  ( PT_UNICODE shl 16)+   0x0E02
define PR_DISPLAY_BCC_A()  ( PT_STRING8 shl 16)+   0x0E02
define PR_DISPLAY_CC()  ( PT_TSTRING shl 16)+   0x0E03
define PR_DISPLAY_CC_W()  ( PT_UNICODE shl 16)+   0x0E03
define PR_DISPLAY_CC_A()  ( PT_STRING8 shl 16)+   0x0E03
define PR_DISPLAY_TO()  ( PT_TSTRING shl 16)+   0x0E04
define PR_DISPLAY_TO_W()  ( PT_UNICODE shl 16)+   0x0E04
define PR_DISPLAY_TO_A()  ( PT_STRING8 shl 16)+   0x0E04
define PR_PARENT_DISPLAY()  ( PT_TSTRING shl 16)+   0x0E05
define PR_PARENT_DISPLAY_W()  ( PT_UNICODE shl 16)+   0x0E05
define PR_PARENT_DISPLAY_A()  ( PT_STRING8 shl 16)+   0x0E05
define PR_MESSAGE_DELIVERY_TIME()  ( PT_SYSTIME shl 16)+   0x0E06
define PR_MESSAGE_FLAGS()  ( PT_LONG shl 16)+      0x0E07
define PR_MESSAGE_SIZE()  ( PT_LONG shl 16)+      0x0E08
define PR_PARENT_ENTRYID()  ( PT_BINARY shl 16)+    0x0E09
define PR_SENTMAIL_ENTRYID()  ( PT_BINARY shl 16)+    0x0E0A
define PR_CORRELATE()  ( PT_BOOLEAN shl 16)+   0x0E0C
define PR_CORRELATE_MTSID()  ( PT_BINARY shl 16)+    0x0E0D
define PR_DISCRETE_VALUES()  ( PT_BOOLEAN shl 16)+   0x0E0E
define PR_RESPONSIBILITY()  ( PT_BOOLEAN shl 16)+   0x0E0F
define PR_SPOOLER_STATUS()  ( PT_LONG shl 16)+      0x0E10
define PR_TRANSPORT_STATUS()  ( PT_LONG shl 16)+      0x0E11
define PR_MESSAGE_RECIPIENTS()  ( PT_OBJECT shl 16)+    0x0E12
define PR_MESSAGE_ATTACHMENTS()  ( PT_OBJECT shl 16)+    0x0E13
define PR_SUBMIT_FLAGS()  ( PT_LONG shl 16)+      0x0E14
define PR_RECIPIENT_STATUS()  ( PT_LONG shl 16)+      0x0E15
define PR_TRANSPORT_KEY()  ( PT_LONG shl 16)+      0x0E16
define PR_MSG_STATUS()  ( PT_LONG shl 16)+      0x0E17
define PR_MESSAGE_DOWNLOAD_TIME()  ( PT_LONG shl 16)+      0x0E18
define PR_CREATION_VERSION()  ( PT_I8 shl 16)+        0x0E19
define PR_MODIFY_VERSION()  ( PT_I8 shl 16)+        0x0E1A
define PR_HASATTACH()  ( PT_BOOLEAN shl 16)+   0x0E1B
define PR_BODY_CRC()  ( PT_LONG shl 16)+      0x0E1C
define PR_NORMALIZED_SUBJECT()  ( PT_TSTRING shl 16)+   0x0E1D
define PR_NORMALIZED_SUBJECT_W()  ( PT_UNICODE shl 16)+   0x0E1D
define PR_NORMALIZED_SUBJECT_A()  ( PT_STRING8 shl 16)+   0x0E1D
define PR_RTF_IN_SYNC()  ( PT_BOOLEAN shl 16)+   0x0E1F
define PR_ATTACH_SIZE()  ( PT_LONG shl 16)+      0x0E20
define PR_ATTACH_NUM()  ( PT_LONG shl 16)+      0x0E21
define PR_PREPROCESS()  ( PT_BOOLEAN shl 16)+   0x0E22
define PR_ORIGINATING_MTA_CERTIFICATE()  ( PT_BINARY shl 16)+    0x0E25
define PR_PROOF_OF_SUBMISSION()  ( PT_BINARY shl 16)+    0x0E26
define PR_ENTRYID()  ( PT_BINARY shl 16)+    0x0FFF
define PR_OBJECT_TYPE()  ( PT_LONG shl 16)+      0x0FFE
define PR_ICON()  ( PT_BINARY shl 16)+    0x0FFD
define PR_MINI_ICON()  ( PT_BINARY shl 16)+    0x0FFC
define PR_STORE_ENTRYID()  ( PT_BINARY shl 16)+    0x0FFB
define PR_STORE_RECORD_KEY()  ( PT_BINARY shl 16)+    0x0FFA
define PR_RECORD_KEY()  ( PT_BINARY shl 16)+    0x0FF9
define PR_MAPPING_SIGNATURE()  ( PT_BINARY shl 16)+    0x0FF8
define PR_ACCESS_LEVEL()  ( PT_LONG shl 16)+      0x0FF7
define PR_INSTANCE_KEY()  ( PT_BINARY shl 16)+    0x0FF6
define PR_ROW_TYPE()  ( PT_LONG shl 16)+      0x0FF5
define PR_ACCESS()  ( PT_LONG shl 16)+      0x0FF4
define PR_ROWID()  ( PT_LONG shl 16)+      0x3000
define PR_DISPLAY_NAME()  ( PT_TSTRING shl 16)+   0x3001
define PR_DISPLAY_NAME_W()  ( PT_UNICODE shl 16)+   0x3001
define PR_DISPLAY_NAME_A()  ( PT_STRING8 shl 16)+   0x3001
define PR_ADDRTYPE()  ( PT_TSTRING shl 16)+   0x3002
define PR_ADDRTYPE_W()  ( PT_UNICODE shl 16)+   0x3002
define PR_ADDRTYPE_A()  ( PT_STRING8 shl 16)+   0x3002
define PR_EMAIL_ADDRESS()  ( PT_TSTRING shl 16)+   0x3003
define PR_EMAIL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x3003
define PR_EMAIL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x3003
define PR_COMMENT()  ( PT_TSTRING shl 16)+   0x3004
define PR_COMMENT_W()  ( PT_UNICODE shl 16)+   0x3004
define PR_COMMENT_A()  ( PT_STRING8 shl 16)+   0x3004
define PR_DEPTH()  ( PT_LONG shl 16)+      0x3005
define PR_PROVIDER_DISPLAY()  ( PT_TSTRING shl 16)+   0x3006
define PR_PROVIDER_DISPLAY_W()  ( PT_UNICODE shl 16)+   0x3006
define PR_PROVIDER_DISPLAY_A()  ( PT_STRING8 shl 16)+   0x3006
define PR_CREATION_TIME()  ( PT_SYSTIME shl 16)+   0x3007
define PR_LAST_MODIFICATION_TIME()  ( PT_SYSTIME shl 16)+   0x3008
define PR_RESOURCE_FLAGS()  ( PT_LONG shl 16)+      0x3009
define PR_PROVIDER_DLL_NAME()  ( PT_TSTRING shl 16)+   0x300A
define PR_PROVIDER_DLL_NAME_W()  ( PT_UNICODE shl 16)+   0x300A
define PR_PROVIDER_DLL_NAME_A()  ( PT_STRING8 shl 16)+   0x300A
define PR_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x300B
define PR_PROVIDER_UID()  ( PT_BINARY shl 16)+    0x300C
define PR_PROVIDER_ORDINAL()  ( PT_LONG shl 16)+      0x300D
define PR_FORM_VERSION()  (PT_TSTRING shl 16)+    0x3301
define PR_FORM_VERSION_W()  (PT_UNICODE shl 16)+    0x3301
define PR_FORM_VERSION_A()  (PT_STRING8 shl 16)+    0x3301
define PR_FORM_CLSID()  (PT_CLSID shl 16)+      0x3302
define PR_FORM_CONTACT_NAME()  (PT_TSTRING shl 16)+    0x3303
define PR_FORM_CONTACT_NAME_W()  (PT_UNICODE shl 16)+    0x3303
define PR_FORM_CONTACT_NAME_A()  (PT_STRING8 shl 16)+    0x3303
define PR_FORM_CATEGORY()  (PT_TSTRING shl 16)+    0x3304
define PR_FORM_CATEGORY_W()  (PT_UNICODE shl 16)+    0x3304
define PR_FORM_CATEGORY_A()  (PT_STRING8 shl 16)+    0x3304
define PR_FORM_CATEGORY_SUB()  (PT_TSTRING shl 16)+    0x3305
define PR_FORM_CATEGORY_SUB_W()  (PT_UNICODE shl 16)+    0x3305
define PR_FORM_CATEGORY_SUB_A()  (PT_STRING8 shl 16)+    0x3305
define PR_FORM_HOST_MAP()  (PT_MV_LONG shl 16)+    0x3306
define PR_FORM_HIDDEN()  (PT_BOOLEAN shl 16)+    0x3307
define PR_FORM_DESIGNER_NAME()  (PT_TSTRING shl 16)+    0x3308
define PR_FORM_DESIGNER_NAME_W()  (PT_UNICODE shl 16)+    0x3308
define PR_FORM_DESIGNER_NAME_A()  (PT_STRING8 shl 16)+    0x3308
define PR_FORM_DESIGNER_GUID()  (PT_CLSID shl 16)+      0x3309
define PR_FORM_MESSAGE_BEHAVIOR()  (PT_LONG shl 16)+       0x330A
define PR_DEFAULT_STORE()  ( PT_BOOLEAN shl 16)+   0x3400
define PR_STORE_SUPPORT_MASK()  ( PT_LONG shl 16)+      0x340D
define PR_STORE_STATE()  ( PT_LONG shl 16)+      0x340E
define PR_IPM_SUBTREE_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3410
define PR_IPM_OUTBOX_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3411
define PR_IPM_WASTEBASKET_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3412
define PR_IPM_SENTMAIL_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3413
define PR_MDB_PROVIDER()  ( PT_BINARY shl 16)+    0x3414
define PR_RECEIVE_FOLDER_SETTINGS()  ( PT_OBJECT shl 16)+    0x3415
define PR_VALID_FOLDER_MASK()  ( PT_LONG shl 16)+      0x35DF
define PR_IPM_SUBTREE_ENTRYID()  ( PT_BINARY shl 16)+    0x35E0
define PR_IPM_OUTBOX_ENTRYID()  ( PT_BINARY shl 16)+    0x35E2
define PR_IPM_WASTEBASKET_ENTRYID()  ( PT_BINARY shl 16)+    0x35E3
define PR_IPM_SENTMAIL_ENTRYID()  ( PT_BINARY shl 16)+    0x35E4
define PR_VIEWS_ENTRYID()  ( PT_BINARY shl 16)+    0x35E5
define PR_COMMON_VIEWS_ENTRYID()  ( PT_BINARY shl 16)+    0x35E6
define PR_FINDER_ENTRYID()  ( PT_BINARY shl 16)+    0x35E7
define PR_CONTAINER_FLAGS()  ( PT_LONG shl 16)+      0x3600
define PR_FOLDER_TYPE()  ( PT_LONG shl 16)+      0x3601
define PR_CONTENT_COUNT()  ( PT_LONG shl 16)+      0x3602
define PR_CONTENT_UNREAD()  ( PT_LONG shl 16)+      0x3603
define PR_CREATE_TEMPLATES()  ( PT_OBJECT shl 16)+    0x3604
define PR_DETAILS_TABLE()  ( PT_OBJECT shl 16)+    0x3605
define PR_SEARCH()  ( PT_OBJECT shl 16)+    0x3607
define PR_SELECTABLE()  ( PT_BOOLEAN shl 16)+   0x3609
define PR_SUBFOLDERS()  ( PT_BOOLEAN shl 16)+   0x360A
define PR_STATUS()  ( PT_LONG shl 16)+      0x360B
define PR_ANR()  ( PT_TSTRING shl 16)+   0x360C
define PR_ANR_W()  ( PT_UNICODE shl 16)+   0x360C
define PR_ANR_A()  ( PT_STRING8 shl 16)+   0x360C
define PR_CONTENTS_SORT_ORDER()  ( PT_MV_LONG shl 16)+   0x360D
define PR_CONTAINER_HIERARCHY()  ( PT_OBJECT shl 16)+    0x360E
define PR_CONTAINER_CONTENTS()  ( PT_OBJECT shl 16)+    0x360F
define PR_FOLDER_ASSOCIATED_CONTENTS()  ( PT_OBJECT shl 16)+    0x3610
define PR_DEF_CREATE_DL()  ( PT_BINARY shl 16)+    0x3611
define PR_DEF_CREATE_MAILUSER()  ( PT_BINARY shl 16)+    0x3612
define PR_CONTAINER_CLASS()  ( PT_TSTRING shl 16)+   0x3613
define PR_CONTAINER_CLASS_W()  ( PT_UNICODE shl 16)+   0x3613
define PR_CONTAINER_CLASS_A()  ( PT_STRING8 shl 16)+   0x3613
define PR_CONTAINER_MODIFY_VERSION()  ( PT_I8 shl 16)+        0x3614
define PR_AB_PROVIDER_ID()  ( PT_BINARY shl 16)+    0x3615
define PR_DEFAULT_VIEW_ENTRYID()  ( PT_BINARY shl 16)+    0x3616
define PR_ASSOC_CONTENT_COUNT()  ( PT_LONG shl 16)+      0x3617
define PR_ATTACHMENT_X400_PARAMETERS()  ( PT_BINARY shl 16)+    0x3700
define PR_ATTACH_DATA_OBJ()  ( PT_OBJECT shl 16)+    0x3701
define PR_ATTACH_DATA_BIN()  ( PT_BINARY shl 16)+    0x3701
define PR_ATTACH_ENCODING()  ( PT_BINARY shl 16)+    0x3702
define PR_ATTACH_EXTENSION()  ( PT_TSTRING shl 16)+   0x3703
define PR_ATTACH_EXTENSION_W()  ( PT_UNICODE shl 16)+   0x3703
define PR_ATTACH_EXTENSION_A()  ( PT_STRING8 shl 16)+   0x3703
define PR_ATTACH_FILENAME()  ( PT_TSTRING shl 16)+   0x3704
define PR_ATTACH_FILENAME_W()  ( PT_UNICODE shl 16)+   0x3704
define PR_ATTACH_FILENAME_A()  ( PT_STRING8 shl 16)+   0x3704
define PR_ATTACH_METHOD()  ( PT_LONG shl 16)+      0x3705
define PR_ATTACH_LONG_FILENAME()  ( PT_TSTRING shl 16)+   0x3707
define PR_ATTACH_LONG_FILENAME_W()  ( PT_UNICODE shl 16)+   0x3707
define PR_ATTACH_LONG_FILENAME_A()  ( PT_STRING8 shl 16)+   0x3707
define PR_ATTACH_PATHNAME()  ( PT_TSTRING shl 16)+   0x3708
define PR_ATTACH_PATHNAME_W()  ( PT_UNICODE shl 16)+   0x3708
define PR_ATTACH_PATHNAME_A()  ( PT_STRING8 shl 16)+   0x3708
define PR_ATTACH_RENDERING()  ( PT_BINARY shl 16)+    0x3709
define PR_ATTACH_TAG()  ( PT_BINARY shl 16)+    0x370A
define PR_RENDERING_POSITION()  ( PT_LONG shl 16)+      0x370B
define PR_ATTACH_TRANSPORT_NAME()  ( PT_TSTRING shl 16)+   0x370C
define PR_ATTACH_TRANSPORT_NAME_W()  ( PT_UNICODE shl 16)+   0x370C
define PR_ATTACH_TRANSPORT_NAME_A()  ( PT_STRING8 shl 16)+   0x370C
define PR_ATTACH_LONG_PATHNAME()  ( PT_TSTRING shl 16)+   0x370D
define PR_ATTACH_LONG_PATHNAME_W()  ( PT_UNICODE shl 16)+   0x370D
define PR_ATTACH_LONG_PATHNAME_A()  ( PT_STRING8 shl 16)+   0x370D
define PR_ATTACH_MIME_TAG()  ( PT_TSTRING shl 16)+   0x370E
define PR_ATTACH_MIME_TAG_W()  ( PT_UNICODE shl 16)+   0x370E
define PR_ATTACH_MIME_TAG_A()  ( PT_STRING8 shl 16)+   0x370E
define PR_ATTACH_ADDITIONAL_INFO()  ( PT_BINARY shl 16)+    0x370F
define PR_DISPLAY_TYPE()  ( PT_LONG shl 16)+      0x3900
define PR_TEMPLATEID()  ( PT_BINARY shl 16)+    0x3902
define PR_PRIMARY_CAPABILITY()  ( PT_BINARY shl 16)+    0x3904
define PR_7BIT_DISPLAY_NAME()  ( PT_STRING8 shl 16)+   0x39FF
define PR_ACCOUNT()  ( PT_TSTRING shl 16)+   0x3A00
define PR_ACCOUNT_W()  ( PT_UNICODE shl 16)+   0x3A00
define PR_ACCOUNT_A()  ( PT_STRING8 shl 16)+   0x3A00
define PR_ALTERNATE_RECIPIENT()  ( PT_BINARY shl 16)+    0x3A01
define PR_CALLBACK_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A02
define PR_CALLBACK_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A02
define PR_CALLBACK_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A02
define PR_CONVERSION_PROHIBITED()  ( PT_BOOLEAN shl 16)+   0x3A03
define PR_DISCLOSE_RECIPIENTS()  ( PT_BOOLEAN shl 16)+   0x3A04
define PR_GENERATION()  ( PT_TSTRING shl 16)+   0x3A05
define PR_GENERATION_W()  ( PT_UNICODE shl 16)+   0x3A05
define PR_GENERATION_A()  ( PT_STRING8 shl 16)+   0x3A05
define PR_GIVEN_NAME()  ( PT_TSTRING shl 16)+   0x3A06
define PR_GIVEN_NAME_W()  ( PT_UNICODE shl 16)+   0x3A06
define PR_GIVEN_NAME_A()  ( PT_STRING8 shl 16)+   0x3A06
define PR_GOVERNMENT_ID_NUMBER()  ( PT_TSTRING shl 16)+   0x3A07
define PR_GOVERNMENT_ID_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A07
define PR_GOVERNMENT_ID_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A07
define PR_BUSINESS_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A08
define PR_BUSINESS_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A08
define PR_BUSINESS_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A08
define PR_OFFICE_TELEPHONE_NUMBER()  PR_BUSINESS_TELEPHONE_NUMBER
define PR_OFFICE_TELEPHONE_NUMBER_W()  PR_BUSINESS_TELEPHONE_NUMBER_W
define PR_OFFICE_TELEPHONE_NUMBER_A()  PR_BUSINESS_TELEPHONE_NUMBER_A
define PR_HOME_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A09
define PR_HOME_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A09
define PR_HOME_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A09
define PR_INITIALS()  ( PT_TSTRING shl 16)+   0x3A0A
define PR_INITIALS_W()  ( PT_UNICODE shl 16)+   0x3A0A
define PR_INITIALS_A()  ( PT_STRING8 shl 16)+   0x3A0A
define PR_KEYWORD()  ( PT_TSTRING shl 16)+   0x3A0B
define PR_KEYWORD_W()  ( PT_UNICODE shl 16)+   0x3A0B
define PR_KEYWORD_A()  ( PT_STRING8 shl 16)+   0x3A0B
define PR_LANGUAGE()  ( PT_TSTRING shl 16)+   0x3A0C
define PR_LANGUAGE_W()  ( PT_UNICODE shl 16)+   0x3A0C
define PR_LANGUAGE_A()  ( PT_STRING8 shl 16)+   0x3A0C
define PR_LOCATION()  ( PT_TSTRING shl 16)+   0x3A0D
define PR_LOCATION_W()  ( PT_UNICODE shl 16)+   0x3A0D
define PR_LOCATION_A()  ( PT_STRING8 shl 16)+   0x3A0D
define PR_MAIL_PERMISSION()  ( PT_BOOLEAN shl 16)+   0x3A0E
define PR_MHS_COMMON_NAME()  ( PT_TSTRING shl 16)+   0x3A0F
define PR_MHS_COMMON_NAME_W()  ( PT_UNICODE shl 16)+   0x3A0F
define PR_MHS_COMMON_NAME_A()  ( PT_STRING8 shl 16)+   0x3A0F
define PR_ORGANIZATIONAL_ID_NUMBER()  ( PT_TSTRING shl 16)+   0x3A10
define PR_ORGANIZATIONAL_ID_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A10
define PR_ORGANIZATIONAL_ID_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A10
define PR_SURNAME()  ( PT_TSTRING shl 16)+   0x3A11
define PR_SURNAME_W()  ( PT_UNICODE shl 16)+   0x3A11
define PR_SURNAME_A()  ( PT_STRING8 shl 16)+   0x3A11
define PR_ORIGINAL_ENTRYID()  ( PT_BINARY shl 16)+    0x3A12
define PR_ORIGINAL_DISPLAY_NAME()  ( PT_TSTRING shl 16)+   0x3A13
define PR_ORIGINAL_DISPLAY_NAME_W()  ( PT_UNICODE shl 16)+   0x3A13
define PR_ORIGINAL_DISPLAY_NAME_A()  ( PT_STRING8 shl 16)+   0x3A13
define PR_ORIGINAL_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3A14
define PR_POSTAL_ADDRESS()  ( PT_TSTRING shl 16)+   0x3A15
define PR_POSTAL_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x3A15
define PR_POSTAL_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x3A15
define PR_COMPANY_NAME()  ( PT_TSTRING shl 16)+   0x3A16
define PR_COMPANY_NAME_W()  ( PT_UNICODE shl 16)+   0x3A16
define PR_COMPANY_NAME_A()  ( PT_STRING8 shl 16)+   0x3A16
define PR_TITLE()  ( PT_TSTRING shl 16)+   0x3A17
define PR_TITLE_W()  ( PT_UNICODE shl 16)+   0x3A17
define PR_TITLE_A()  ( PT_STRING8 shl 16)+   0x3A17
define PR_DEPARTMENT_NAME()  ( PT_TSTRING shl 16)+   0x3A18
define PR_DEPARTMENT_NAME_W()  ( PT_UNICODE shl 16)+   0x3A18
define PR_DEPARTMENT_NAME_A()  ( PT_STRING8 shl 16)+   0x3A18
define PR_OFFICE_LOCATION()  ( PT_TSTRING shl 16)+   0x3A19
define PR_OFFICE_LOCATION_W()  ( PT_UNICODE shl 16)+   0x3A19
define PR_OFFICE_LOCATION_A()  ( PT_STRING8 shl 16)+   0x3A19
define PR_PRIMARY_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1A
define PR_PRIMARY_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1A
define PR_PRIMARY_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1A
define PR_BUSINESS2_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1B
define PR_BUSINESS2_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1B
define PR_BUSINESS2_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1B
define PR_OFFICE2_TELEPHONE_NUMBER()  PR_BUSINESS2_TELEPHONE_NUMBER
define PR_OFFICE2_TELEPHONE_NUMBER_W()  PR_BUSINESS2_TELEPHONE_NUMBER_W
define PR_OFFICE2_TELEPHONE_NUMBER_A()  PR_BUSINESS2_TELEPHONE_NUMBER_A
define PR_MOBILE_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1C
define PR_MOBILE_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1C
define PR_MOBILE_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1C
define PR_CELLULAR_TELEPHONE_NUMBER()  PR_MOBILE_TELEPHONE_NUMBER
define PR_CELLULAR_TELEPHONE_NUMBER_W()  PR_MOBILE_TELEPHONE_NUMBER_W
define PR_CELLULAR_TELEPHONE_NUMBER_A()  PR_MOBILE_TELEPHONE_NUMBER_A
define PR_RADIO_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1D
define PR_RADIO_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1D
define PR_RADIO_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1D
define PR_CAR_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1E
define PR_CAR_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1E
define PR_CAR_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1E
define PR_OTHER_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A1F
define PR_OTHER_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A1F
define PR_OTHER_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A1F
define PR_TRANSMITABLE_DISPLAY_NAME()  ( PT_TSTRING shl 16)+   0x3A20
define PR_TRANSMITABLE_DISPLAY_NAME_W()  ( PT_UNICODE shl 16)+   0x3A20
define PR_TRANSMITABLE_DISPLAY_NAME_A()  ( PT_STRING8 shl 16)+   0x3A20
define PR_PAGER_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A21
define PR_PAGER_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A21
define PR_PAGER_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A21
define PR_BEEPER_TELEPHONE_NUMBER()  PR_PAGER_TELEPHONE_NUMBER
define PR_BEEPER_TELEPHONE_NUMBER_W()  PR_PAGER_TELEPHONE_NUMBER_W
define PR_BEEPER_TELEPHONE_NUMBER_A()  PR_PAGER_TELEPHONE_NUMBER_A
define PR_USER_CERTIFICATE()  ( PT_BINARY shl 16)+    0x3A22
define PR_PRIMARY_FAX_NUMBER()  ( PT_TSTRING shl 16)+   0x3A23
define PR_PRIMARY_FAX_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A23
define PR_PRIMARY_FAX_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A23
define PR_BUSINESS_FAX_NUMBER()  ( PT_TSTRING shl 16)+   0x3A24
define PR_BUSINESS_FAX_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A24
define PR_BUSINESS_FAX_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A24
define PR_HOME_FAX_NUMBER()  ( PT_TSTRING shl 16)+   0x3A25
define PR_HOME_FAX_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A25
define PR_HOME_FAX_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A25
define PR_COUNTRY()  ( PT_TSTRING shl 16)+   0x3A26
define PR_COUNTRY_W()  ( PT_UNICODE shl 16)+   0x3A26
define PR_COUNTRY_A()  ( PT_STRING8 shl 16)+   0x3A26
define PR_BUSINESS_ADDRESS_COUNTRY()  PR_COUNTRY
define PR_BUSINESS_ADDRESS_COUNTRY_W()  PR_COUNTRY_W
define PR_BUSINESS_ADDRESS_COUNTRY_A()  PR_COUNTRY_A
define PR_LOCALITY()  ( PT_TSTRING shl 16)+   0x3A27
define PR_LOCALITY_W()  ( PT_UNICODE shl 16)+   0x3A27
define PR_LOCALITY_A()  ( PT_STRING8 shl 16)+   0x3A27
define PR_BUSINESS_ADDRESS_CITY()  PR_LOCALITY
define PR_BUSINESS_ADDRESS_CITY_W()  PR_LOCALITY_W
define PR_BUSINESS_ADDRESS_CITY_A()  PR_LOCALITY_A
define PR_STATE_OR_PROVINCE()  ( PT_TSTRING shl 16)+   0x3A28
define PR_STATE_OR_PROVINCE_W()  ( PT_UNICODE shl 16)+   0x3A28
define PR_STATE_OR_PROVINCE_A()  ( PT_STRING8 shl 16)+   0x3A28
define PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE()  PR_STATE_OR_PROVINCE
define PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_W()  PR_STATE_OR_PROVINCE_W
define PR_BUSINESS_ADDRESS_STATE_OR_PROVINCE_A()  PR_STATE_OR_PROVINCE_A
define PR_STREET_ADDRESS()  ( PT_TSTRING shl 16)+   0x3A29
define PR_STREET_ADDRESS_W()  ( PT_UNICODE shl 16)+   0x3A29
define PR_STREET_ADDRESS_A()  ( PT_STRING8 shl 16)+   0x3A29
define PR_BUSINESS_ADDRESS_STREET()  PR_STREET_ADDRESS
define PR_BUSINESS_ADDRESS_STREET_W()  PR_STREET_ADDRESS_W
define PR_BUSINESS_ADDRESS_STREET_A()  PR_STREET_ADDRESS_A
define PR_POSTAL_CODE()  ( PT_TSTRING shl 16)+   0x3A2A
define PR_POSTAL_CODE_W()  ( PT_UNICODE shl 16)+   0x3A2A
define PR_POSTAL_CODE_A()  ( PT_STRING8 shl 16)+   0x3A2A
define PR_BUSINESS_ADDRESS_POSTAL_CODE()  PR_POSTAL_CODE
define PR_BUSINESS_ADDRESS_POSTAL_CODE_W()  PR_POSTAL_CODE_W
define PR_BUSINESS_ADDRESS_POSTAL_CODE_A()  PR_POSTAL_CODE_A
define PR_POST_OFFICE_BOX()  ( PT_TSTRING shl 16)+   0x3A2B
define PR_POST_OFFICE_BOX_W()  ( PT_UNICODE shl 16)+   0x3A2B
define PR_POST_OFFICE_BOX_A()  ( PT_STRING8 shl 16)+   0x3A2B
define PR_BUSINESS_ADDRESS_POST_OFFICE_BOX()  PR_POST_OFFICE_BOX
define PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_W()  PR_POST_OFFICE_BOX_W
define PR_BUSINESS_ADDRESS_POST_OFFICE_BOX_A()  PR_POST_OFFICE_BOX_A
define PR_TELEX_NUMBER()  ( PT_TSTRING shl 16)+   0x3A2C
define PR_TELEX_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A2C
define PR_TELEX_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A2C
define PR_ISDN_NUMBER()  ( PT_TSTRING shl 16)+   0x3A2D
define PR_ISDN_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A2D
define PR_ISDN_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A2D
define PR_ASSISTANT_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A2E
define PR_ASSISTANT_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A2E
define PR_ASSISTANT_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A2E
define PR_HOME2_TELEPHONE_NUMBER()  ( PT_TSTRING shl 16)+   0x3A2F
define PR_HOME2_TELEPHONE_NUMBER_W()  ( PT_UNICODE shl 16)+   0x3A2F
define PR_HOME2_TELEPHONE_NUMBER_A()  ( PT_STRING8 shl 16)+   0x3A2F
define PR_ASSISTANT()  ( PT_TSTRING shl 16)+   0x3A30
define PR_ASSISTANT_W()  ( PT_UNICODE shl 16)+   0x3A30
define PR_ASSISTANT_A()  ( PT_STRING8 shl 16)+   0x3A30
define PR_SEND_RICH_INFO()  ( PT_BOOLEAN shl 16)+   0x3A40
define PR_WEDDING_ANNIVERSARY()  ( PT_SYSTIME shl 16)+ 0x3A41
define PR_BIRTHDAY()  ( PT_SYSTIME shl 16)+ 0x3A42
define PR_HOBBIES()  ( PT_TSTRING shl 16)+ 0x3A43
define PR_HOBBIES_W()  ( PT_UNICODE shl 16)+ 0x3A43
define PR_HOBBIES_A()  ( PT_STRING8 shl 16)+ 0x3A43
define PR_MIDDLE_NAME()  ( PT_TSTRING shl 16)+ 0x3A44
define PR_MIDDLE_NAME_W()  ( PT_UNICODE shl 16)+ 0x3A44
define PR_MIDDLE_NAME_A()  ( PT_STRING8 shl 16)+ 0x3A44
define PR_DISPLAY_NAME_PREFIX()  ( PT_TSTRING shl 16)+ 0x3A45
define PR_DISPLAY_NAME_PREFIX_W()  ( PT_UNICODE shl 16)+ 0x3A45
define PR_DISPLAY_NAME_PREFIX_A()  ( PT_STRING8 shl 16)+ 0x3A45
define PR_PROFESSION()  ( PT_TSTRING shl 16)+ 0x3A46
define PR_PROFESSION_W()  ( PT_UNICODE shl 16)+ 0x3A46
define PR_PROFESSION_A()  ( PT_STRING8 shl 16)+ 0x3A46
define PR_PREFERRED_BY_NAME()  ( PT_TSTRING shl 16)+ 0x3A47
define PR_PREFERRED_BY_NAME_W()  ( PT_UNICODE shl 16)+ 0x3A47
define PR_PREFERRED_BY_NAME_A()  ( PT_STRING8 shl 16)+ 0x3A47
define PR_SPOUSE_NAME()  ( PT_TSTRING shl 16)+ 0x3A48
define PR_SPOUSE_NAME_W()  ( PT_UNICODE shl 16)+ 0x3A48
define PR_SPOUSE_NAME_A()  ( PT_STRING8 shl 16)+ 0x3A48
define PR_COMPUTER_NETWORK_NAME()  ( PT_TSTRING shl 16)+ 0x3A49
define PR_COMPUTER_NETWORK_NAME_W()  ( PT_UNICODE shl 16)+ 0x3A49
define PR_COMPUTER_NETWORK_NAME_A()  ( PT_STRING8 shl 16)+ 0x3A49
define PR_CUSTOMER_ID()  ( PT_TSTRING shl 16)+ 0x3A4A
define PR_CUSTOMER_ID_W()  ( PT_UNICODE shl 16)+ 0x3A4A
define PR_CUSTOMER_ID_A()  ( PT_STRING8 shl 16)+ 0x3A4A
define PR_TTYTDD_PHONE_NUMBER()  ( PT_TSTRING shl 16)+ 0x3A4B
define PR_TTYTDD_PHONE_NUMBER_W()  ( PT_UNICODE shl 16)+ 0x3A4B
define PR_TTYTDD_PHONE_NUMBER_A()  ( PT_STRING8 shl 16)+ 0x3A4B
define PR_FTP_SITE()  ( PT_TSTRING shl 16)+ 0x3A4C
define PR_FTP_SITE_W()  ( PT_UNICODE shl 16)+ 0x3A4C
define PR_FTP_SITE_A()  ( PT_STRING8 shl 16)+ 0x3A4C
define PR_GENDER()  ( PT_SHORT shl 16)+ 0x3A4D
define PR_MANAGER_NAME()  ( PT_TSTRING shl 16)+ 0x3A4E
define PR_MANAGER_NAME_W()  ( PT_UNICODE shl 16)+ 0x3A4E
define PR_MANAGER_NAME_A()  ( PT_STRING8 shl 16)+ 0x3A4E
define PR_NICKNAME()  ( PT_TSTRING shl 16)+ 0x3A4F
define PR_NICKNAME_W()  ( PT_UNICODE shl 16)+ 0x3A4F
define PR_NICKNAME_A()  ( PT_STRING8 shl 16)+ 0x3A4F
define PR_PERSONAL_HOME_PAGE()  ( PT_TSTRING shl 16)+ 0x3A50
define PR_PERSONAL_HOME_PAGE_W()  ( PT_UNICODE shl 16)+ 0x3A50
define PR_PERSONAL_HOME_PAGE_A()  ( PT_STRING8 shl 16)+ 0x3A50
define PR_BUSINESS_HOME_PAGE()  ( PT_TSTRING shl 16)+ 0x3A51
define PR_BUSINESS_HOME_PAGE_W()  ( PT_UNICODE shl 16)+ 0x3A51
define PR_BUSINESS_HOME_PAGE_A()  ( PT_STRING8 shl 16)+ 0x3A51
define PR_CONTACT_VERSION()  ( PT_CLSID shl 16)+ 0x3A52
define PR_CONTACT_ENTRYIDS()  ( PT_MV_BINARY shl 16)+ 0x3A53
define PR_CONTACT_ADDRTYPES()  ( PT_MV_TSTRING shl 16)+ 0x3A54
define PR_CONTACT_ADDRTYPES_W()  ( PT_MV_UNICODE shl 16)+ 0x3A54
define PR_CONTACT_ADDRTYPES_A()  ( PT_MV_STRING8 shl 16)+ 0x3A54
define PR_CONTACT_DEFAULT_ADDRESS_INDEX()  ( PT_LONG shl 16)+ 0x3A55
define PR_CONTACT_EMAIL_ADDRESSES()  ( PT_MV_TSTRING shl 16)+ 0x3A56
define PR_CONTACT_EMAIL_ADDRESSES_W()  ( PT_MV_UNICODE shl 16)+ 0x3A56
define PR_CONTACT_EMAIL_ADDRESSES_A()  ( PT_MV_STRING8 shl 16)+ 0x3A56
define PR_COMPANY_MAIN_PHONE_NUMBER()  ( PT_TSTRING shl 16)+ 0x3A57
define PR_COMPANY_MAIN_PHONE_NUMBER_W()  ( PT_UNICODE shl 16)+ 0x3A57
define PR_COMPANY_MAIN_PHONE_NUMBER_A()  ( PT_STRING8 shl 16)+ 0x3A57
define PR_CHILDRENS_NAMES()  ( PT_MV_TSTRING shl 16)+ 0x3A58
define PR_CHILDRENS_NAMES_W()  ( PT_MV_UNICODE shl 16)+ 0x3A58
define PR_CHILDRENS_NAMES_A()  ( PT_MV_STRING8 shl 16)+ 0x3A58
define PR_HOME_ADDRESS_CITY()  ( PT_TSTRING shl 16)+ 0x3A59
define PR_HOME_ADDRESS_CITY_W()  ( PT_UNICODE shl 16)+ 0x3A59
define PR_HOME_ADDRESS_CITY_A()  ( PT_STRING8 shl 16)+ 0x3A59
define PR_HOME_ADDRESS_COUNTRY()  ( PT_TSTRING shl 16)+ 0x3A5A
define PR_HOME_ADDRESS_COUNTRY_W()  ( PT_UNICODE shl 16)+ 0x3A5A
define PR_HOME_ADDRESS_COUNTRY_A()  ( PT_STRING8 shl 16)+ 0x3A5A
define PR_HOME_ADDRESS_POSTAL_CODE()  ( PT_TSTRING shl 16)+ 0x3A5B
define PR_HOME_ADDRESS_POSTAL_CODE_W()  ( PT_UNICODE shl 16)+ 0x3A5B
define PR_HOME_ADDRESS_POSTAL_CODE_A()  ( PT_STRING8 shl 16)+ 0x3A5B
define PR_HOME_ADDRESS_STATE_OR_PROVINCE()  ( PT_TSTRING shl 16)+ 0x3A5C
define PR_HOME_ADDRESS_STATE_OR_PROVINCE_W()  ( PT_UNICODE shl 16)+ 0x3A5C
define PR_HOME_ADDRESS_STATE_OR_PROVINCE_A()  ( PT_STRING8 shl 16)+ 0x3A5C
define PR_HOME_ADDRESS_STREET()  ( PT_TSTRING shl 16)+ 0x3A5D
define PR_HOME_ADDRESS_STREET_W()  ( PT_UNICODE shl 16)+ 0x3A5D
define PR_HOME_ADDRESS_STREET_A()  ( PT_STRING8 shl 16)+ 0x3A5D
define PR_HOME_ADDRESS_POST_OFFICE_BOX()  ( PT_TSTRING shl 16)+ 0x3A5E
define PR_HOME_ADDRESS_POST_OFFICE_BOX_W()  ( PT_UNICODE shl 16)+ 0x3A5E
define PR_HOME_ADDRESS_POST_OFFICE_BOX_A()  ( PT_STRING8 shl 16)+ 0x3A5E
define PR_OTHER_ADDRESS_CITY()  ( PT_TSTRING shl 16)+ 0x3A5F
define PR_OTHER_ADDRESS_CITY_W()  ( PT_UNICODE shl 16)+ 0x3A5F
define PR_OTHER_ADDRESS_CITY_A()  ( PT_STRING8 shl 16)+ 0x3A5F
define PR_OTHER_ADDRESS_COUNTRY()  ( PT_TSTRING shl 16)+ 0x3A60
define PR_OTHER_ADDRESS_COUNTRY_W()  ( PT_UNICODE shl 16)+ 0x3A60
define PR_OTHER_ADDRESS_COUNTRY_A()  ( PT_STRING8 shl 16)+ 0x3A60
define PR_OTHER_ADDRESS_POSTAL_CODE()  ( PT_TSTRING shl 16)+ 0x3A61
define PR_OTHER_ADDRESS_POSTAL_CODE_W()  ( PT_UNICODE shl 16)+ 0x3A61
define PR_OTHER_ADDRESS_POSTAL_CODE_A()  ( PT_STRING8 shl 16)+ 0x3A61
define PR_OTHER_ADDRESS_STATE_OR_PROVINCE()  ( PT_TSTRING shl 16)+ 0x3A62
define PR_OTHER_ADDRESS_STATE_OR_PROVINCE_W()  ( PT_UNICODE shl 16)+ 0x3A62
define PR_OTHER_ADDRESS_STATE_OR_PROVINCE_A()  ( PT_STRING8 shl 16)+ 0x3A62
define PR_OTHER_ADDRESS_STREET()  ( PT_TSTRING shl 16)+ 0x3A63
define PR_OTHER_ADDRESS_STREET_W()  ( PT_UNICODE shl 16)+ 0x3A63
define PR_OTHER_ADDRESS_STREET_A()  ( PT_STRING8 shl 16)+ 0x3A63
define PR_OTHER_ADDRESS_POST_OFFICE_BOX()  ( PT_TSTRING shl 16)+ 0x3A64
define PR_OTHER_ADDRESS_POST_OFFICE_BOX_W()  ( PT_UNICODE shl 16)+ 0x3A64
define PR_OTHER_ADDRESS_POST_OFFICE_BOX_A()  ( PT_STRING8 shl 16)+ 0x3A64
define PR_STORE_PROVIDERS()  ( PT_BINARY shl 16)+    0x3D00
define PR_AB_PROVIDERS()  ( PT_BINARY shl 16)+    0x3D01
define PR_TRANSPORT_PROVIDERS()  ( PT_BINARY shl 16)+    0x3D02
define PR_DEFAULT_PROFILE()  ( PT_BOOLEAN shl 16)+   0x3D04
define PR_AB_SEARCH_PATH()  ( PT_MV_BINARY shl 16)+ 0x3D05
define PR_AB_DEFAULT_DIR()  ( PT_BINARY shl 16)+    0x3D06
define PR_AB_DEFAULT_PAB()  ( PT_BINARY shl 16)+    0x3D07
define PR_FILTERING_HOOKS()  ( PT_BINARY shl 16)+    0x3D08
define PR_SERVICE_NAME()  ( PT_TSTRING shl 16)+   0x3D09
define PR_SERVICE_NAME_W()  ( PT_UNICODE shl 16)+   0x3D09
define PR_SERVICE_NAME_A()  ( PT_STRING8 shl 16)+   0x3D09
define PR_SERVICE_DLL_NAME()  ( PT_TSTRING shl 16)+   0x3D0A
define PR_SERVICE_DLL_NAME_W()  ( PT_UNICODE shl 16)+   0x3D0A
define PR_SERVICE_DLL_NAME_A()  ( PT_STRING8 shl 16)+   0x3D0A
define PR_SERVICE_ENTRY_NAME()  ( PT_STRING8 shl 16)+   0x3D0B
define PR_SERVICE_UID()  ( PT_BINARY shl 16)+    0x3D0C
define PR_SERVICE_EXTRA_UIDS()  ( PT_BINARY shl 16)+    0x3D0D
define PR_SERVICES()  ( PT_BINARY shl 16)+    0x3D0E
define PR_SERVICE_SUPPORT_FILES()  ( PT_MV_TSTRING shl 16)+ 0x3D0F
define PR_SERVICE_SUPPORT_FILES_W()  ( PT_MV_UNICODE shl 16)+ 0x3D0F
define PR_SERVICE_SUPPORT_FILES_A()  ( PT_MV_STRING8 shl 16)+ 0x3D0F
define PR_SERVICE_DELETE_FILES()  ( PT_MV_TSTRING shl 16)+ 0x3D10
define PR_SERVICE_DELETE_FILES_W()  ( PT_MV_UNICODE shl 16)+ 0x3D10
define PR_SERVICE_DELETE_FILES_A()  ( PT_MV_STRING8 shl 16)+ 0x3D10
define PR_AB_SEARCH_PATH_UPDATE()  ( PT_BINARY shl 16)+     0x3D11
define PR_PROFILE_NAME()  ( PT_TSTRING shl 16)+   0x3D12
define PR_PROFILE_NAME_A()  ( PT_STRING8 shl 16)+   0x3D12
define PR_PROFILE_NAME_W()  ( PT_UNICODE shl 16)+   0x3D12
define PR_IDENTITY_DISPLAY()  ( PT_TSTRING shl 16)+   0x3E00
define PR_IDENTITY_DISPLAY_W()  ( PT_UNICODE shl 16)+   0x3E00
define PR_IDENTITY_DISPLAY_A()  ( PT_STRING8 shl 16)+   0x3E00
define PR_IDENTITY_ENTRYID()  ( PT_BINARY shl 16)+    0x3E01
define PR_RESOURCE_METHODS()  ( PT_LONG shl 16)+      0x3E02
define PR_RESOURCE_TYPE()  ( PT_LONG shl 16)+      0x3E03
define PR_STATUS_CODE()  ( PT_LONG shl 16)+      0x3E04
define PR_IDENTITY_SEARCH_KEY()  ( PT_BINARY shl 16)+    0x3E05
define PR_OWN_STORE_ENTRYID()  ( PT_BINARY shl 16)+    0x3E06
define PR_RESOURCE_PATH()  ( PT_TSTRING shl 16)+   0x3E07
define PR_RESOURCE_PATH_W()  ( PT_UNICODE shl 16)+   0x3E07
define PR_RESOURCE_PATH_A()  ( PT_STRING8 shl 16)+   0x3E07
define PR_STATUS_STRING()  ( PT_TSTRING shl 16)+   0x3E08
define PR_STATUS_STRING_W()  ( PT_UNICODE shl 16)+   0x3E08
define PR_STATUS_STRING_A()  ( PT_STRING8 shl 16)+   0x3E08
define PR_X400_DEFERRED_DELIVERY_CANCEL()  ( PT_BOOLEAN shl 16)+   0x3E09
define PR_HEADER_FOLDER_ENTRYID()  ( PT_BINARY shl 16)+    0x3E0A
define PR_REMOTE_PROGRESS()  ( PT_LONG shl 16)+      0x3E0B
define PR_REMOTE_PROGRESS_TEXT()  ( PT_TSTRING shl 16)+   0x3E0C
define PR_REMOTE_PROGRESS_TEXT_W()  ( PT_UNICODE shl 16)+   0x3E0C
define PR_REMOTE_PROGRESS_TEXT_A()  ( PT_STRING8 shl 16)+   0x3E0C
define PR_REMOTE_VALIDATE_OK()  ( PT_BOOLEAN shl 16)+   0x3E0D
define PR_CONTROL_FLAGS()  ( PT_LONG shl 16)+      0x3F00
define PR_CONTROL_STRUCTURE()  ( PT_BINARY shl 16)+    0x3F01
define PR_CONTROL_TYPE()  ( PT_LONG shl 16)+      0x3F02
define PR_DELTAX()  ( PT_LONG shl 16)+      0x3F03
define PR_DELTAY()  ( PT_LONG shl 16)+      0x3F04
define PR_XPOS()  ( PT_LONG shl 16)+      0x3F05
define PR_YPOS()  ( PT_LONG shl 16)+      0x3F06
define PR_CONTROL_ID()  ( PT_BINARY shl 16)+    0x3F07
define PR_INITIAL_DETAILS_PANE()  ( PT_LONG shl 16)+      0x3F08
define PROP_ID_SECURE_MIN()  0x67F0
define PROP_ID_SECURE_MAX()  0x67FF

//----------------------------------[ mapiutil.h ]------------------------
define IPROP_READONLY()  1
define IPROP_READWRITE()  2
define IPROP_CLEAN()  0x10000
define IPROP_DIRTY()  0x20000
define PRILOWEST()  -32768
define PRIHIGHEST()  32767
define PRIUSER()  0
define IRONULL()  0
define FIROWAIT()  1
define FIROINTERVAL()  2
define FIROPERBLOCK()  4
define FIRODISABLED()  0x20
define FIROONCEONLY()  0x40
define IRCNULL()  0
define FIRCPFN()  1
define FIRCPV()  2
define FIRCPRI()  4
define FIRCCSEC()  8
define FIRCIRO()  0x10
define MAPI_FORCE_CREATE()  1
define MAPI_FULL_IPM_TREE()  2
define RTF_SYNC_RTF_CHANGED()  1
define RTF_SYNC_BODY_CHANGED()  2

struct DTCTL
{
    int32      ulCtlType;
    int32      ulCtlFlags;
    int32      lpbNotif;
    int32      cbNotif;
    int32      lpszFilter;
    int32      ulItemID;
    union UNION_DTCTL
    {
        int32          lpv;
        int32          lplabel;
        int32          lpedit;
        int32          lplbx;
        int32          lpcombobox;
        int32          lpddlbx;
        int32          lpcheckbox;
        int32          lpgroupbox;
        int32          lpbutton;
        int32          lpradiobutton;
        int32          lpmvlbx;
        int32          lpmvddlbx;
        int32          lppage;
    }
}

struct DTPAGE
{
    int32      cctl;
    int32      lpszResourceName;
    union UNION_DTPAGE
    {
        int32          lpszComponent;
        int32          ulItemID;
    }
    int32      lpctl;
}

//-----------------------------------[mapiwz.h]-------------------------------
define WIZ_QUERYNUMPAGES()  WM_USER+10
define WIZ_NEXT()  WM_USER +11
define WIZ_PREV()  WM_USER +12
define MAPI_PW_FIRST_PROFILE()  1
define MAPI_PW_LAUNCHED_BY_CONFIG()  2
define MAPI_PW_ADD_SERVICE_ONLY()  4
define MAPI_PW_PROVIDER_UI_ONLY()  8
define MAPI_PW_HIDE_SERVICES_LIST()  0x10
define PR_WIZARD_NO_PST_PAGE()  (PT_BOOLEAN shl 16)+6700h
define LAUNCHWIZARDENTRYNAME()  "LAUNCHWIZARD"

//--------------------------------[ mapix.h]-----------------------------
define MAPI_ALLOW_OTHERS()  8
define MAPI_EXPLICIT_PROFILE()  0x10
define MAPI_SERVICE_UI_ALWAYS()  0x2000
define MAPI_NO_MAIL()  0x8000
define MAPI_TIMEOUT_SHORT()  0x100000
define MAPI_SIMPLE_DEFAULT()  (MAPI_LOGON_UI + MAPI_FORCE_DOWNLOAD + MAPI_ALLOW_OTHERS)
define MAPI_SIMPLE_EXPLICIT()  (MAPI_NEW_SESSION + MAPI_FORCE_DOWNLOAD + MAPI_EXPLICIT_PROFILE)
define MAPI_INIT_VERSION()  0
define MAPI_MULTITHREAD_NOTIFICATIONS()  1
define MAPI_LOGOFF_SHARED()  1
define MAPI_LOGOFF_UI()  2
define MAPI_DEFAULT_STORE()  1
define MAPI_SIMPLE_STORE_TEMPORARY()  2
define MAPI_SIMPLE_STORE_PERMANENT()  3
define MAPI_PRIMARY_STORE()  4
define MAPI_SECONDARY_STORE()  5
define MAPI_POST_MESSAGE()  1
define MAPI_NEW_MESSAGE()  2
define MAPI_DEFAULT_SERVICES()  1
define SERVICE_DEFAULT_STORE()  1
define SERVICE_SINGLE_COPY()  2
define SERVICE_CREATE_WITH_STORE()  4
define SERVICE_PRIMARY_IDENTITY()  8
define SERVICE_NO_PRIMARY_IDENTITY()  0x20

struct MAPIINIT_0
{
    int32      ulVersion;
    int32      ulFlags;
}

//------------------------------------------------------------------------------------------
//                                   ODBCInst.h
//------------------------------------------------------------------------------------------
define ODBC_ADD_DSN()  1
define ODBC_CONFIG_DSN()  2
define ODBC_REMOVE_DSN()  3
define ODBC_ADD_SYS_DSN()  4
define ODBC_CONFIG_SYS_DSN()  5
define ODBC_REMOVE_SYS_DSN()  6
define ODBC_REMOVE_DEFAULT_DSN()  7
define ODBC_INSTALL_INQUIRY()  1
define ODBC_INSTALL_COMPLETE()  2
define ODBC_INSTALL_DRIVER()  1
define ODBC_REMOVE_DRIVER()  2
define ODBC_CONFIG_DRIVER()  3
define ODBC_CONFIG_DRIVER_MAX()  100
define ODBC_BOTH_DSN()  0
define ODBC_USER_DSN()  1
define ODBC_SYSTEM_DSN()  2
define ODBC_ERROR_GENERAL_ERR()  1
define ODBC_ERROR_INVALID_BUFF_LEN()  2
define ODBC_ERROR_INVALID_HWND()  3
define ODBC_ERROR_INVALID_STR()  4
define ODBC_ERROR_INVALID_REQUEST_TYPE()  5
define ODBC_ERROR_COMPONENT_NOT_FOUND()  6
define ODBC_ERROR_INVALID_NAME()  7
define ODBC_ERROR_INVALID_KEYWORD_VALUE()  8
define ODBC_ERROR_INVALID_DSN()  9
define ODBC_ERROR_INVALID_INF()  10
define ODBC_ERROR_REQUEST_FAILED()  11
define ODBC_ERROR_INVALID_PATH()  12
define ODBC_ERROR_LOAD_LIB_FAILED()  13
define ODBC_ERROR_INVALID_PARAM_SEQUENCE()  14
define ODBC_ERROR_INVALID_LOG_FILE()  15
define ODBC_ERROR_USER_CANCELED()  16
define ODBC_ERROR_USAGE_UPDATE_FAILED()  17
define ODBC_ERROR_CREATE_DSN_FAILED()  18
define ODBC_ERROR_WRITING_SYSINFO_FAILED()  19
define ODBC_ERROR_REMOVE_DSN_FAILED()  20
define ODBC_ERROR_OUT_OF_MEM()  21
define ODBC_ERROR_OUTPUT_STRING_TRUNCATED()  22
//---------------------------------------------------------------------------------------------------------------
//       sql.h
//---------------------------------------------------------------------------------------------------------------
define SQL_NULL_DATA()  (-1)
define SQL_DATA_AT_EXEC()  (-2)
define SQL_SUCCESS()  0
define SQL_SUCCESS_WITH_INFO()  1
define SQL_NO_DATA()  100
define SQL_ERROR()  (-1)
define SQL_INVALID_HANDLE()  (-2)
define SQL_STILL_EXECUTING()  2
define SQL_NEED_DATA()  99
define SQL_NTS()  (-3)
define SQL_NTSL()  (-3)
define SQL_MAX_MESSAGE_LENGTH()  512
define SQL_DATE_LEN()  10
define SQL_TIME_LEN()  8
define SQL_TIMESTAMP_LEN()  19
define SQL_HANDLE_ENV()  1
define SQL_HANDLE_DBC()  2
define SQL_HANDLE_STMT()  3
define SQL_HANDLE_DESC()  4
define SQL_ATTR_OUTPUT_NTS()  10001
define SQL_ATTR_AUTO_IPD()  10001
define SQL_ATTR_METADATA_ID()  10014
define SQL_ATTR_APP_ROW_DESC()  10010
define SQL_ATTR_APP_PARAM_DESC()  10011
define SQL_ATTR_IMP_ROW_DESC()  10012
define SQL_ATTR_IMP_PARAM_DESC()  10013
define SQL_ATTR_CURSOR_SCROLLABLE()  (-1)
define SQL_ATTR_CURSOR_SENSITIVITY()  (-2)
define SQL_NONSCROLLABLE()  0
define SQL_SCROLLABLE()  1
define SQL_DESC_COUNT()  1001
define SQL_DESC_TYPE()  1002
define SQL_DESC_LENGTH()  1003
define SQL_DESC_OCTET_LENGTH_PTR()  1004
define SQL_DESC_PRECISION()  1005
define SQL_DESC_SCALE()  1006
define SQL_DESC_DATETIME_INTERVAL_CODE()  1007
define SQL_DESC_NULLABLE()  1008
define SQL_DESC_INDICATOR_PTR()  1009
define SQL_DESC_DATA_PTR()  1010
define SQL_DESC_NAME()  1011
define SQL_DESC_UNNAMED()  1012
define SQL_DESC_OCTET_LENGTH()  1013
define SQL_DESC_ALLOC_TYPE()  1099
define SQL_DIAG_RETURNCODE()  1
define SQL_DIAG_NUMBER()  2
define SQL_DIAG_ROW_COUNT()  3
define SQL_DIAG_SQLSTATE()  4
define SQL_DIAG_NATIVE()  5
define SQL_DIAG_MESSAGE_TEXT()  6
define SQL_DIAG_DYNAMIC_FUNCTION()  7
define SQL_DIAG_CLASS_ORIGIN()  8
define SQL_DIAG_SUBCLASS_ORIGIN()  9
define SQL_DIAG_CONNECTION_NAME()  10
define SQL_DIAG_SERVER_NAME()  11
define SQL_DIAG_DYNAMIC_FUNCTION_CODE()  12
define SQL_DIAG_ALTER_DOMAIN()  3
define SQL_DIAG_ALTER_TABLE()  4
define SQL_DIAG_CALL()  7
define SQL_DIAG_CREATE_ASSERTION()  6
define SQL_DIAG_CREATE_CHARACTER_SET()  8
define SQL_DIAG_CREATE_COLLATION()  10
define SQL_DIAG_CREATE_DOMAIN()  23
define SQL_DIAG_CREATE_INDEX()  (-1)
define SQL_DIAG_CREATE_SCHEMA()  64
define SQL_DIAG_CREATE_TABLE()  77
define SQL_DIAG_CREATE_TRANSLATION()  79
define SQL_DIAG_CREATE_VIEW()  84
define SQL_DIAG_DELETE_WHERE()  19
define SQL_DIAG_DROP_ASSERTION()  24
define SQL_DIAG_DROP_CHARACTER_SET()  25
define SQL_DIAG_DROP_COLLATION()  26
define SQL_DIAG_DROP_DOMAIN()  27
define SQL_DIAG_DROP_INDEX()  (-2)
define SQL_DIAG_DROP_SCHEMA()  31
define SQL_DIAG_DROP_TABLE()  32
define SQL_DIAG_DROP_TRANSLATION()  33
define SQL_DIAG_DROP_VIEW()  36
define SQL_DIAG_DYNAMIC_DELETE_CURSOR()  38
define SQL_DIAG_DYNAMIC_UPDATE_CURSOR()  81
define SQL_DIAG_GRANT()  48
define SQL_DIAG_INSERT()  50
define SQL_DIAG_REVOKE()  59
define SQL_DIAG_SELECT_CURSOR()  85
define SQL_DIAG_UNKNOWN_STATEMENT()  0
define SQL_DIAG_UPDATE_WHERE()  82
define SQL_UNKNOWN_TYPE()  0
define SQL_CHAR()  1
define SQL_NUMERIC()  2
define SQL_DECIMAL()  3
define SQL_INTEGER()  4
define SQL_SMALLINT()  5
define SQL_FLOAT()  6
define SQL_REAL()  7
define SQL_DOUBLE()  8
define SQL_DATETIME()  9
define SQL_VARCHAR()  12
define SQL_TYPE_DATE()  91
define SQL_TYPE_TIME()  92
define SQL_TYPE_TIMESTAMP()  93
define SQL_UNSPECIFIED()  0
define SQL_INSENSITIVE()  1
define SQL_SENSITIVE()  2
define SQL_ALL_TYPES()  0
define SQL_DEFAULT()  99
define SQL_ARD_TYPE()  (-99)
define SQL_CODE_DATE()  1
define SQL_CODE_TIME()  2
define SQL_CODE_TIMESTAMP()  3
define SQL_FALSE()  0
define SQL_TRUE()  1
define SQL_NO_NULLS()  0
define SQL_NULLABLE()  1
define SQL_NULLABLE_UNKNOWN()  2
define SQL_PRED_NONE()  0
define SQL_PRED_CHAR()  1
define SQL_PRED_BASIC()  2
define SQL_NAMED()  0
define SQL_UNNAMED()  1
define SQL_DESC_ALLOC_AUTO()  1
define SQL_DESC_ALLOC_USER()  2
define SQL_CLOSE()  0
define SQL_DROP()  1
define SQL_UNBIND()  2
define SQL_RESET_PARAMS()  3
define SQL_FETCH_NEXT()  1
define SQL_FETCH_FIRST()  2
define SQL_FETCH_LAST()  3
define SQL_FETCH_PRIOR()  4
define SQL_FETCH_ABSOLUTE()  5
define SQL_FETCH_RELATIVE()  6
define SQL_COMMIT()  0
define SQL_ROLLBACK()  1
define SQL_NULL_HENV()  0
define SQL_NULL_HDBC()  0
define SQL_NULL_HSTMT()  0
define SQL_NULL_HDESC()  0
define SQL_NULL_HANDLE()  0
define SQL_SCOPE_CURROW()  0
define SQL_SCOPE_TRANSACTION()  1
define SQL_SCOPE_SESSION()  2
define SQL_PC_UNKNOWN()  0
define SQL_PC_NON_PSEUDO()  1
define SQL_PC_PSEUDO()  2
define SQL_ROW_IDENTIFIER()  1
define SQL_INDEX_UNIQUE()  0
define SQL_INDEX_ALL()  1
define SQL_INDEX_CLUSTERED()  1
define SQL_INDEX_HASHED()  2
define SQL_INDEX_OTHER()  3
define SQL_API_SQLALLOCCONNECT()  1
define SQL_API_SQLALLOCENV()  2
define SQL_API_SQLALLOCHANDLE()  1001
define SQL_API_SQLALLOCSTMT()  3
define SQL_API_SQLBINDCOL()  4
define SQL_API_SQLBINDPARAM()  1002
define SQL_API_SQLCANCEL()  5
define SQL_API_SQLCLOSECURSOR()  1003
define SQL_API_SQLCOLATTRIBUTE()  6
define SQL_API_SQLCOLUMNS()  40
define SQL_API_SQLCONNECT()  7
define SQL_API_SQLCOPYDESC()  1004
define SQL_API_SQLDATASOURCES()  57
define SQL_API_SQLDESCRIBECOL()  8
define SQL_API_SQLDISCONNECT()  9
define SQL_API_SQLENDTRAN()  1005
define SQL_API_SQLERROR()  10
define SQL_API_SQLEXECDIRECT()  11
define SQL_API_SQLEXECUTE()  12
define SQL_API_SQLFETCH()  13
define SQL_API_SQLFETCHSCROLL()  1021
define SQL_API_SQLFREECONNECT()  14
define SQL_API_SQLFREEENV()  15
define SQL_API_SQLFREEHANDLE()  1006
define SQL_API_SQLFREESTMT()  16
define SQL_API_SQLGETCONNECTATTR()  1007
define SQL_API_SQLGETCONNECTOPTION()  42
define SQL_API_SQLGETCURSORNAME()  17
define SQL_API_SQLGETDATA()  43
define SQL_API_SQLGETDESCFIELD()  1008
define SQL_API_SQLGETDESCREC()  1009
define SQL_API_SQLGETDIAGFIELD()  1010
define SQL_API_SQLGETDIAGREC()  1011
define SQL_API_SQLGETENVATTR()  1012
define SQL_API_SQLGETFUNCTIONS()  44
define SQL_API_SQLGETINFO()  45
define SQL_API_SQLGETSTMTATTR()  1014
define SQL_API_SQLGETSTMTOPTION()  46
define SQL_API_SQLGETTYPEINFO()  47
define SQL_API_SQLNUMRESULTCOLS()  18
define SQL_API_SQLPARAMDATA()  48
define SQL_API_SQLPREPARE()  19
define SQL_API_SQLPUTDATA()  49
define SQL_API_SQLROWCOUNT()  20
define SQL_API_SQLSETCONNECTATTR()  1016
define SQL_API_SQLSETCONNECTOPTION()  50
define SQL_API_SQLSETCURSORNAME()  21
define SQL_API_SQLSETDESCFIELD()  1017
define SQL_API_SQLSETDESCREC()  1018
define SQL_API_SQLSETENVATTR()  1019
define SQL_API_SQLSETPARAM()  22
define SQL_API_SQLSETSTMTATTR()  1020
define SQL_API_SQLSETSTMTOPTION()  51
define SQL_API_SQLSPECIALCOLUMNS()  52
define SQL_API_SQLSTATISTICS()  53
define SQL_API_SQLTABLES()  54
define SQL_API_SQLTRANSACT()  23
define SQL_MAX_DRIVER_CONNECTIONS()  0
define SQL_MAXIMUM_DRIVER_CONNECTIONS()  SQL_MAX_DRIVER_CONNECTIONS
define SQL_MAX_CONCURRENT_ACTIVITIES()  1
define SQL_MAXIMUM_CONCURRENT_ACTIVITIES()  SQL_MAX_CONCURRENT_ACTIVITIES
define SQL_DATA_SOURCE_NAME()  2
define SQL_FETCH_DIRECTION()  8
define SQL_SERVER_NAME()  13
define SQL_SEARCH_PATTERN_ESCAPE()  14
define SQL_DBMS_NAME()  17
define SQL_DBMS_VER()  18
define SQL_ACCESSIBLE_TABLES()  19
define SQL_ACCESSIBLE_PROCEDURES()  20
define SQL_CURSOR_COMMIT_BEHAVIOR()  23
define SQL_DATA_SOURCE_READ_ONLY()  25
define SQL_DEFAULT_TXN_ISOLATION()  26
define SQL_IDENTIFIER_CASE()  28
define SQL_IDENTIFIER_QUOTE_CHAR()  29
define SQL_MAX_COLUMN_NAME_LEN()  30
define SQL_MAXIMUM_COLUMN_NAME_LENGTH()  SQL_MAX_COLUMN_NAME_LEN
define SQL_MAX_CURSOR_NAME_LEN()  31
define SQL_MAXIMUM_CURSOR_NAME_LENGTH()  SQL_MAX_CURSOR_NAME_LEN
define SQL_MAX_SCHEMA_NAME_LEN()  32
define SQL_MAXIMUM_SCHEMA_NAME_LENGTH()  SQL_MAX_SCHEMA_NAME_LEN
define SQL_MAX_CATALOG_NAME_LEN()  34
define SQL_MAXIMUM_CATALOG_NAME_LENGTH()  SQL_MAX_CATALOG_NAME_LEN
define SQL_MAX_TABLE_NAME_LEN()  35
define SQL_SCROLL_CONCURRENCY()  43
define SQL_TXN_CAPABLE()  46
define SQL_TRANSACTION_CAPABLE()  SQL_TXN_CAPABLE
define SQL_USER_NAME()  47
define SQL_TXN_ISOLATION_OPTION()  72
define SQL_TRANSACTION_ISOLATION_OPTION()  SQL_TXN_ISOLATION_OPTION
define SQL_INTEGRITY()  73
define SQL_GETDATA_EXTENSIONS()  81
define SQL_NULL_COLLATION()  85
define SQL_ALTER_TABLE()  86
define SQL_ORDER_BY_COLUMNS_IN_SELECT()  90
define SQL_SPECIAL_CHARACTERS()  94
define SQL_MAX_COLUMNS_IN_GROUP_BY()  97
define SQL_MAXIMUM_COLUMNS_IN_GROUP_BY()  SQL_MAX_COLUMNS_IN_GROUP_BY
define SQL_MAX_COLUMNS_IN_INDEX()  98
define SQL_MAXIMUM_COLUMNS_IN_INDEX()  SQL_MAX_COLUMNS_IN_INDEX
define SQL_MAX_COLUMNS_IN_ORDER_BY()  99
define SQL_MAXIMUM_COLUMNS_IN_ORDER_BY()  SQL_MAX_COLUMNS_IN_ORDER_BY
define SQL_MAX_COLUMNS_IN_SELECT()  100
define SQL_MAXIMUM_COLUMNS_IN_SELECT()  SQL_MAX_COLUMNS_IN_SELECT
define SQL_MAX_COLUMNS_IN_TABLE()  101
define SQL_MAX_INDEX_SIZE()  102
define SQL_MAXIMUM_INDEX_SIZE()  SQL_MAX_INDEX_SIZE
define SQL_MAX_ROW_SIZE()  104
define SQL_MAXIMUM_ROW_SIZE()  SQL_MAX_ROW_SIZE
define SQL_MAX_STATEMENT_LEN()  105
define SQL_MAXIMUM_STATEMENT_LENGTH()  SQL_MAX_STATEMENT_LEN
define SQL_MAX_TABLES_IN_SELECT()  106
define SQL_MAXIMUM_TABLES_IN_SELECT()  SQL_MAX_TABLES_IN_SELECT
define SQL_MAX_USER_NAME_LEN()  107
define SQL_MAXIMUM_USER_NAME_LENGTH()  SQL_MAX_USER_NAME_LEN
define SQL_OJ_CAPABILITIES()  115
define SQL_OUTER_JOIN_CAPABILITIES()  SQL_OJ_CAPABILITIES
define SQL_XOPEN_CLI_YEAR()  10000
define SQL_CURSOR_SENSITIVITY()  10001
define SQL_DESCRIBE_PARAMETER()  10002
define SQL_CATALOG_NAME()  10003
define SQL_COLLATION_SEQ()  10004
define SQL_MAX_IDENTIFIER_LEN()  10005
define SQL_MAXIMUM_IDENTIFIER_LENGTH()  SQL_MAX_IDENTIFIER_LEN
define SQL_AT_ADD_COLUMN()  1
define SQL_AT_DROP_COLUMN()  2
define SQL_AT_ADD_CONSTRAINT()  8
define SQL_AT_COLUMN_SINGLE()  0x20
define SQL_AT_ADD_COLUMN_DEFAULT()  0x40
define SQL_AT_ADD_COLUMN_COLLATION()  0x80
define SQL_AT_SET_COLUMN_DEFAULT()  0x100
define SQL_AT_DROP_COLUMN_DEFAULT()  0x200
define SQL_AT_DROP_COLUMN_CASCADE()  0x400
define SQL_AT_DROP_COLUMN_RESTRICT()  0x800
define SQL_AT_ADD_TABLE_CONSTRAINT()  0x1000
define SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE()  0x2000
define SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT()  0x4000
define SQL_AT_CONSTRAINT_NAME_DEFINITION()  0x8000
define SQL_AT_CONSTRAINT_INITIALLY_DEFERRED()  0x10000
define SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE()  0x20000
define SQL_AT_CONSTRAINT_DEFERRABLE()  0x40000
define SQL_AT_CONSTRAINT_NON_DEFERRABLE()  0x80000
define SQL_AM_NONE()  0
define SQL_AM_CONNECTION()  1
define SQL_AM_STATEMENT()  2
define SQL_CB_DELETE()  0
define SQL_CB_CLOSE()  1
define SQL_CB_PRESERVE()  2
define SQL_FD_FETCH_NEXT()  1
define SQL_FD_FETCH_FIRST()  2
define SQL_FD_FETCH_LAST()  4
define SQL_FD_FETCH_PRIOR()  8
define SQL_FD_FETCH_ABSOLUTE()  0x10
define SQL_FD_FETCH_RELATIVE()  0x20
define SQL_GD_ANY_COLUMN()  1
define SQL_GD_ANY_ORDER()  2
define SQL_IC_UPPER()  1
define SQL_IC_LOWER()  2
define SQL_IC_SENSITIVE()  3
define SQL_IC_MIXED()  4
define SQL_OJ_LEFT()  1
define SQL_OJ_RIGHT()  2
define SQL_OJ_FULL()  4
define SQL_OJ_NESTED()  8
define SQL_OJ_NOT_ORDERED()  0x10
define SQL_OJ_INNER()  0x20
define SQL_OJ_ALL_COMPARISON_OPS()  0x40
define SQL_SCCO_READ_ONLY()  1
define SQL_SCCO_LOCK()  2
define SQL_SCCO_OPT_ROWVER()  4
define SQL_SCCO_OPT_VALUES()  8
define SQL_TC_NONE()  0
define SQL_TC_DML()  1
define SQL_TC_ALL()  2
define SQL_TC_DDL_COMMIT()  3
define SQL_TC_DDL_IGNORE()  4
define SQL_TXN_READ_UNCOMMITTED()  1
define SQL_TRANSACTION_READ_UNCOMMITTED()  SQL_TXN_READ_UNCOMMITTED
define SQL_TXN_READ_COMMITTED()  2
define SQL_TRANSACTION_READ_COMMITTED()  SQL_TXN_READ_COMMITTED
define SQL_TXN_REPEATABLE_READ()  4
define SQL_TRANSACTION_REPEATABLE_READ()  SQL_TXN_REPEATABLE_READ
define SQL_TXN_SERIALIZABLE()  8
define SQL_TRANSACTION_SERIALIZABLE()  SQL_TXN_SERIALIZABLE
define SQL_NC_HIGH()  0
define SQL_NC_LOW()  1

//------------------------------------------------------------------------------------------------------------
//     sqlext.h
//-------------------------------------------------------------------------------------------------------------

define SQL_SPEC_MAJOR()  3
define SQL_SPEC_MINOR()  51
define SQL_SPEC_STRING()  "03.51"
define SQL_SQLSTATE_SIZE()  5
define SQL_MAX_DSN_LENGTH()  32
define SQL_MAX_OPTION_STRING_LENGTH()  256
define SQL_NO_DATA_FOUND()  SQL_NO_DATA
define SQL_HANDLE_SENV()  5
define SQL_ATTR_ODBC_VERSION()  200
define SQL_ATTR_CONNECTION_POOLING()  201
define SQL_ATTR_CP_MATCH()  202
define SQL_CP_OFF()  0
define SQL_CP_ONE_PER_DRIVER()  1
define SQL_CP_ONE_PER_HENV()  2
define SQL_CP_DEFAULT()  SQL_CP_OFF
define SQL_CP_STRICT_MATCH()  0
define SQL_CP_RELAXED_MATCH()  1
define SQL_CP_MATCH_DEFAULT()  SQL_CP_STRICT_MATCH
define SQL_OV_ODBC2()  2
define SQL_OV_ODBC3()  3
define SQL_ACCESS_MODE()  101
define SQL_AUTOCOMMIT()  102
define SQL_LOGIN_TIMEOUT()  103
define SQL_OPT_TRACE()  104
define SQL_OPT_TRACEFILE()  105
define SQL_TRANSLATE_DLL()  106
define SQL_TRANSLATE_OPTION()  107
define SQL_TXN_ISOLATION()  108
define SQL_CURRENT_QUALIFIER()  109
define SQL_ODBC_CURSORS()  110
define SQL_QUIET_MODE()  111
define SQL_PACKET_SIZE()  112
define SQL_ATTR_ACCESS_MODE()  SQL_ACCESS_MODE
define SQL_ATTR_AUTOCOMMIT()  SQL_AUTOCOMMIT
define SQL_ATTR_CONNECTION_TIMEOUT()  113
define SQL_ATTR_CURRENT_CATALOG()  SQL_CURRENT_QUALIFIER
define SQL_ATTR_DISCONNECT_BEHAVIOR()  114
define SQL_ATTR_ENLIST_IN_DTC()  1207
define SQL_ATTR_ENLIST_IN_XA()  1208
define SQL_ATTR_LOGIN_TIMEOUT()  SQL_LOGIN_TIMEOUT
define SQL_ATTR_ODBC_CURSORS()  SQL_ODBC_CURSORS
define SQL_ATTR_PACKET_SIZE()  SQL_PACKET_SIZE
define SQL_ATTR_QUIET_MODE()  SQL_QUIET_MODE
define SQL_ATTR_TRACE()  SQL_OPT_TRACE
define SQL_ATTR_TRACEFILE()  SQL_OPT_TRACEFILE
define SQL_ATTR_TRANSLATE_LIB()  SQL_TRANSLATE_DLL
define SQL_ATTR_TRANSLATE_OPTION()  SQL_TRANSLATE_OPTION
define SQL_ATTR_TXN_ISOLATION()  SQL_TXN_ISOLATION
define SQL_ATTR_CONNECTION_DEAD()  1209
define SQL_ATTR_ANSI_APP()  115
define SQL_MODE_READ_WRITE()  0
define SQL_MODE_READ_ONLY()  1
define SQL_MODE_DEFAULT()  SQL_MODE_READ_WRITE
define SQL_AUTOCOMMIT_OFF()  0
define SQL_AUTOCOMMIT_ON()  1
define SQL_AUTOCOMMIT_DEFAULT()  SQL_AUTOCOMMIT_ON
define SQL_LOGIN_TIMEOUT_DEFAULT()  15
define SQL_OPT_TRACE_OFF()  0
define SQL_OPT_TRACE_ON()  1
define SQL_OPT_TRACE_DEFAULT()  SQL_OPT_TRACE_OFF
define SQL_OPT_TRACE_FILE_DEFAULT()  "\\SQL.LOG"
define SQL_CUR_USE_IF_NEEDED()  0
define SQL_CUR_USE_ODBC()  1
define SQL_CUR_USE_DRIVER()  2
define SQL_CUR_DEFAULT()  SQL_CUR_USE_DRIVER
define SQL_DB_RETURN_TO_POOL()  0
define SQL_DB_DISCONNECT()  1
define SQL_DB_DEFAULT()  SQL_DB_RETURN_TO_POOL
define SQL_DTC_DONE()  0
define SQL_CD_TRUE()  1
define SQL_CD_FALSE()  0
define SQL_AA_TRUE()  1
define SQL_AA_FALSE()  0
define SQL_QUERY_TIMEOUT()  0
define SQL_MAX_ROWS()  1
define SQL_NOSCAN()  2
define SQL_MAX_LENGTH()  3
define SQL_ASYNC_ENABLE()  4
define SQL_BIND_TYPE()  5
define SQL_CURSOR_TYPE()  6
define SQL_CONCURRENCY()  7
define SQL_KEYSET_SIZE()  8
define SQL_ROWSET_SIZE()  9
define SQL_SIMULATE_CURSOR()  10
define SQL_RETRIEVE_DATA()  11
define SQL_USE_BOOKMARKS()  12
define SQL_GET_BOOKMARK()  13
define SQL_ROW_NUMBER()  14
define SQL_ATTR_ASYNC_ENABLE()  4
define SQL_ATTR_CONCURRENCY()  SQL_CONCURRENCY
define SQL_ATTR_CURSOR_TYPE()  SQL_CURSOR_TYPE
define SQL_ATTR_ENABLE_AUTO_IPD()  15
define SQL_ATTR_FETCH_BOOKMARK_PTR()  16
define SQL_ATTR_KEYSET_SIZE()  SQL_KEYSET_SIZE
define SQL_ATTR_MAX_LENGTH()  SQL_MAX_LENGTH
define SQL_ATTR_MAX_ROWS()  SQL_MAX_ROWS
define SQL_ATTR_NOSCAN()  SQL_NOSCAN
define SQL_ATTR_PARAM_BIND_OFFSET_PTR()  17
define SQL_ATTR_PARAM_BIND_TYPE()  18
define SQL_ATTR_PARAM_OPERATION_PTR()  19
define SQL_ATTR_PARAM_STATUS_PTR()  20
define SQL_ATTR_PARAMS_PROCESSED_PTR()  21
define SQL_ATTR_PARAMSET_SIZE()  22
define SQL_ATTR_QUERY_TIMEOUT()  SQL_QUERY_TIMEOUT
define SQL_ATTR_RETRIEVE_DATA()  SQL_RETRIEVE_DATA
define SQL_ATTR_ROW_BIND_OFFSET_PTR()  23
define SQL_ATTR_ROW_BIND_TYPE()  SQL_BIND_TYPE
define SQL_ATTR_ROW_NUMBER()  SQL_ROW_NUMBER
define SQL_ATTR_ROW_OPERATION_PTR()  24
define SQL_ATTR_ROW_STATUS_PTR()  25
define SQL_ATTR_ROWS_FETCHED_PTR()  26
define SQL_ATTR_ROW_ARRAY_SIZE()  27
define SQL_ATTR_SIMULATE_CURSOR()  SQL_SIMULATE_CURSOR
define SQL_ATTR_USE_BOOKMARKS()  SQL_USE_BOOKMARKS
define SQL_COL_PRED_CHAR()  SQL_LIKE_ONLY
define SQL_COL_PRED_BASIC()  SQL_ALL_EXCEPT_LIKE
define SQL_IS_POINTER()  (-4)
define SQL_IS_UINTEGER()  (-5)
define SQL_IS_INTEGER()  (-6)
define SQL_IS_USMALLINT()  (-7)
define SQL_IS_SMALLINT()  (-8)
define SQL_PARAM_BIND_BY_COLUMN()  0
define SQL_PARAM_BIND_TYPE_DEFAULT()  SQL_PARAM_BIND_BY_COLUMN
define SQL_QUERY_TIMEOUT_DEFAULT()  0
define SQL_MAX_ROWS_DEFAULT()  0
define SQL_NOSCAN_OFF()  0
define SQL_NOSCAN_ON()  1
define SQL_NOSCAN_DEFAULT()  SQL_NOSCAN_OFF
define SQL_MAX_LENGTH_DEFAULT()  0
define SQL_ASYNC_ENABLE_OFF()  0
define SQL_ASYNC_ENABLE_ON()  1
define SQL_ASYNC_ENABLE_DEFAULT()  SQL_ASYNC_ENABLE_OFF
define SQL_BIND_BY_COLUMN()  0
define SQL_BIND_TYPE_DEFAULT()  SQL_BIND_BY_COLUMN
define SQL_CONCUR_READ_ONLY()  1
define SQL_CONCUR_LOCK()  2
define SQL_CONCUR_ROWVER()  3
define SQL_CONCUR_VALUES()  4
define SQL_CONCUR_DEFAULT()  SQL_CONCUR_READ_ONLY
define SQL_CURSOR_FORWARD_ONLY()  0
define SQL_CURSOR_KEYSET_DRIVEN()  1
define SQL_CURSOR_DYNAMIC()  2
define SQL_CURSOR_STATIC()  3
define SQL_CURSOR_TYPE_DEFAULT()  SQL_CURSOR_FORWARD_ONLY
define SQL_ROWSET_SIZE_DEFAULT()  1
define SQL_KEYSET_SIZE_DEFAULT()  0
define SQL_SC_NON_UNIQUE()  0
define SQL_SC_TRY_UNIQUE()  1
define SQL_SC_UNIQUE()  2
define SQL_RD_OFF()  0
define SQL_RD_ON()  1
define SQL_RD_DEFAULT()  SQL_RD_ON
define SQL_UB_OFF()  0
define SQL_UB_ON()  01
define SQL_UB_DEFAULT()  SQL_UB_OFF
define SQL_UB_FIXED()  SQL_UB_ON
define SQL_UB_VARIABLE()  2
define SQL_DESC_ARRAY_SIZE()  20
define SQL_DESC_ARRAY_STATUS_PTR()  21
define SQL_DESC_AUTO_UNIQUE_VALUE()  SQL_COLUMN_AUTO_INCREMENT
define SQL_DESC_BASE_COLUMN_NAME()  22
define SQL_DESC_BASE_TABLE_NAME()  23
define SQL_DESC_BIND_OFFSET_PTR()  24
define SQL_DESC_BIND_TYPE()  25
define SQL_DESC_CASE_SENSITIVE()  SQL_COLUMN_CASE_SENSITIVE
define SQL_DESC_CATALOG_NAME()  SQL_COLUMN_QUALIFIER_NAME
define SQL_DESC_CONCISE_TYPE()  SQL_COLUMN_TYPE
define SQL_DESC_DATETIME_INTERVAL_PRECISION()  26
define SQL_DESC_DISPLAY_SIZE()  SQL_COLUMN_DISPLAY_SIZE
define SQL_DESC_FIXED_PREC_SCALE()  SQL_COLUMN_MONEY
define SQL_DESC_LABEL()  SQL_COLUMN_LABEL
define SQL_DESC_LITERAL_PREFIX()  27
define SQL_DESC_LITERAL_SUFFIX()  28
define SQL_DESC_LOCAL_TYPE_NAME()  29
define SQL_DESC_MAXIMUM_SCALE()  30
define SQL_DESC_MINIMUM_SCALE()  31
define SQL_DESC_NUM_PREC_RADIX()  32
define SQL_DESC_PARAMETER_TYPE()  33
define SQL_DESC_ROWS_PROCESSED_PTR()  34
define SQL_DESC_ROWVER()  35
define SQL_DESC_SCHEMA_NAME()  SQL_COLUMN_OWNER_NAME
define SQL_DESC_SEARCHABLE()  SQL_COLUMN_SEARCHABLE
define SQL_DESC_TYPE_NAME()  SQL_COLUMN_TYPE_NAME
define SQL_DESC_TABLE_NAME()  SQL_COLUMN_TABLE_NAME
define SQL_DESC_UNSIGNED()  SQL_COLUMN_UNSIGNED
define SQL_DESC_UPDATABLE()  SQL_COLUMN_UPDATABLE
define SQL_DIAG_CURSOR_ROW_COUNT()  (-1249)
define SQL_DIAG_ROW_NUMBER()  (-1248)
define SQL_DIAG_COLUMN_NUMBER()  (-1247)
define SQL_DATE()  9
define SQL_INTERVAL()  10
define SQL_TIME()  10
define SQL_TIMESTAMP()  11
define SQL_LONGVARCHAR()  (-1)
define SQL_BINARY()  (-2)
define SQL_VARBINARY()  (-3)
define SQL_LONGVARBINARY()  (-4)
define SQL_BIGINT()  (-5)
define SQL_TINYINT()  (-6)
define SQL_BIT()  (-7)
define SQL_GUID()  (-11)
define SQL_CODE_YEAR()  1
define SQL_CODE_MONTH()  2
define SQL_CODE_DAY()  3
define SQL_CODE_HOUR()  4
define SQL_CODE_MINUTE()  5
define SQL_CODE_SECOND()  6
define SQL_CODE_YEAR_TO_MONTH()  7
define SQL_CODE_DAY_TO_HOUR()  8
define SQL_CODE_DAY_TO_MINUTE()  9
define SQL_CODE_DAY_TO_SECOND()  10
define SQL_CODE_HOUR_TO_MINUTE()  11
define SQL_CODE_HOUR_TO_SECOND()  12
define SQL_CODE_MINUTE_TO_SECOND()  13
define SQL_INTERVAL_YEAR()  (100 + SQL_CODE_YEAR)
define SQL_INTERVAL_MONTH()  (100 + SQL_CODE_MONTH)
define SQL_INTERVAL_DAY()  (100 + SQL_CODE_DAY)
define SQL_INTERVAL_HOUR()  (100 + SQL_CODE_HOUR)
define SQL_INTERVAL_MINUTE()  (100 + SQL_CODE_MINUTE)
define SQL_INTERVAL_SECOND()  (100 + SQL_CODE_SECOND)
define SQL_INTERVAL_YEAR_TO_MONTH()  (100 + SQL_CODE_YEAR_TO_MONTH)
define SQL_INTERVAL_DAY_TO_HOUR()  (100 + SQL_CODE_DAY_TO_HOUR)
define SQL_INTERVAL_DAY_TO_MINUTE()  (100 + SQL_CODE_DAY_TO_MINUTE)
define SQL_INTERVAL_DAY_TO_SECOND()  (100 + SQL_CODE_DAY_TO_SECOND)
define SQL_INTERVAL_HOUR_TO_MINUTE()  (100 + SQL_CODE_HOUR_TO_MINUTE)
define SQL_INTERVAL_HOUR_TO_SECOND()  (100 + SQL_CODE_HOUR_TO_SECOND)
define SQL_INTERVAL_MINUTE_TO_SECOND()  (100 + SQL_CODE_MINUTE_TO_SECOND)
define SQL_WCHAR()  (-8)
define SQL_UNICODE()  SQL_WCHAR
define SQL_WVARCHAR()  (-9)
define SQL_UNICODE_VARCHAR()  SQL_WVARCHAR
define SQL_WLONGVARCHAR()  (-10)
define SQL_UNICODE_LONGVARCHAR()  SQL_WLONGVARCHAR
define SQL_UNICODE_CHAR()  SQL_WCHAR
define SQL_C_CHAR()  SQL_CHAR
define SQL_C_LONG()  SQL_INTEGER
define SQL_C_SHORT()  SQL_SMALLINT
define SQL_C_FLOAT()  SQL_REAL
define SQL_C_DOUBLE()  SQL_DOUBLE
define SQL_C_NUMERIC()  SQL_NUMERIC
define SQL_C_DEFAULT()  99
define SQL_SIGNED_OFFSET()  (-20)
define SQL_UNSIGNED_OFFSET()  (-22)
define SQL_C_DATE()  SQL_DATE
define SQL_C_TIME()  SQL_TIME
define SQL_C_TIMESTAMP()  SQL_TIMESTAMP
define SQL_C_TYPE_DATE()  SQL_TYPE_DATE
define SQL_C_TYPE_TIME()  SQL_TYPE_TIME
define SQL_C_TYPE_TIMESTAMP()  SQL_TYPE_TIMESTAMP
define SQL_C_INTERVAL_YEAR()  SQL_INTERVAL_YEAR
define SQL_C_INTERVAL_MONTH()  SQL_INTERVAL_MONTH
define SQL_C_INTERVAL_DAY()  SQL_INTERVAL_DAY
define SQL_C_INTERVAL_HOUR()  SQL_INTERVAL_HOUR
define SQL_C_INTERVAL_MINUTE()  SQL_INTERVAL_MINUTE
define SQL_C_INTERVAL_SECOND()  SQL_INTERVAL_SECOND
define SQL_C_INTERVAL_YEAR_TO_MONTH()  SQL_INTERVAL_YEAR_TO_MONTH
define SQL_C_INTERVAL_DAY_TO_HOUR()  SQL_INTERVAL_DAY_TO_HOUR
define SQL_C_INTERVAL_DAY_TO_MINUTE()  SQL_INTERVAL_DAY_TO_MINUTE
define SQL_C_INTERVAL_DAY_TO_SECOND()  SQL_INTERVAL_DAY_TO_SECOND
define SQL_C_INTERVAL_HOUR_TO_MINUTE()  SQL_INTERVAL_HOUR_TO_MINUTE
define SQL_C_INTERVAL_HOUR_TO_SECOND()  SQL_INTERVAL_HOUR_TO_SECOND
define SQL_C_INTERVAL_MINUTE_TO_SECOND()  SQL_INTERVAL_MINUTE_TO_SECOND
define SQL_C_BINARY()  SQL_BINARY
define SQL_C_BIT()  SQL_BIT
define SQL_C_SBIGINT()  (SQL_BIGINT+SQL_SIGNED_OFFSET)
define SQL_C_UBIGINT()  (SQL_BIGINT+SQL_UNSIGNED_OFFSET)
define SQL_C_TINYINT()  SQL_TINYINT
define SQL_C_SLONG()  (SQL_C_LONG+SQL_SIGNED_OFFSET)
define SQL_C_SSHORT()  (SQL_C_SHORT+SQL_SIGNED_OFFSET)
define SQL_C_STINYINT()  (SQL_TINYINT+SQL_SIGNED_OFFSET)
define SQL_C_ULONG()  (SQL_C_LONG+SQL_UNSIGNED_OFFSET)
define SQL_C_USHORT()  (SQL_C_SHORT+SQL_UNSIGNED_OFFSET)
define SQL_C_UTINYINT()  (SQL_TINYINT+SQL_UNSIGNED_OFFSET)
define SQL_C_BOOKMARK()  SQL_C_ULONG
define SQL_C_GUID()  SQL_GUID
define SQL_TYPE_NULL()  0
define SQL_C_VARBOOKMARK()  SQL_C_BINARY
define SQL_NO_ROW_NUMBER()  (-1)
define SQL_NO_COLUMN_NUMBER()  (-1)
define SQL_ROW_NUMBER_UNKNOWN()  (-2)
define SQL_COLUMN_NUMBER_UNKNOWN()  (-2)
define SQL_DEFAULT_PARAM()  (-5)
define SQL_IGNORE()  (-6)
define SQL_COLUMN_IGNORE()  SQL_IGNORE
define SQL_LEN_DATA_AT_EXEC_OFFSET()  (-100)
define SQL_LEN_BINARY_ATTR_OFFSET()  (-100)
define SQL_PARAM_TYPE_DEFAULT()  SQL_PARAM_INPUT_OUTPUT
define SQL_SETPARAM_VALUE_MAX()  (-1)
define SQL_COLUMN_COUNT()  0
define SQL_COLUMN_NAME()  1
define SQL_COLUMN_TYPE()  2
define SQL_COLUMN_LENGTH()  3
define SQL_COLUMN_PRECISION()  4
define SQL_COLUMN_SCALE()  5
define SQL_COLUMN_DISPLAY_SIZE()  6
define SQL_COLUMN_NULLABLE()  7
define SQL_COLUMN_UNSIGNED()  8
define SQL_COLUMN_MONEY()  9
define SQL_COLUMN_UPDATABLE()  10
define SQL_COLUMN_AUTO_INCREMENT()  11
define SQL_COLUMN_CASE_SENSITIVE()  12
define SQL_COLUMN_SEARCHABLE()  13
define SQL_COLUMN_TYPE_NAME()  14
define SQL_COLUMN_TABLE_NAME()  15
define SQL_COLUMN_OWNER_NAME()  16
define SQL_COLUMN_QUALIFIER_NAME()  17
define SQL_COLUMN_LABEL()  18
define SQL_COLATT_OPT_MAX()  SQL_COLUMN_LABEL
define SQL_COLATT_OPT_MIN()  SQL_COLUMN_COUNT
define SQL_ATTR_READONLY()  0
define SQL_ATTR_WRITE()  1
define SQL_ATTR_READWRITE_UNKNOWN()  2
define SQL_UNSEARCHABLE()  0
define SQL_LIKE_ONLY()  1
define SQL_ALL_EXCEPT_LIKE()  2
define SQL_SEARCHABLE()  3
define SQL_PRED_SEARCHABLE()  SQL_SEARCHABLE
define SQL_NO_TOTAL()  (-4)
define SQL_API_SQLALLOCHANDLESTD()  73
define SQL_API_SQLBULKOPERATIONS()  24
define SQL_API_SQLBINDPARAMETER()  72
define SQL_API_SQLBROWSECONNECT()  55
define SQL_API_SQLCOLATTRIBUTES()  6
define SQL_API_SQLCOLUMNPRIVILEGES()  56
define SQL_API_SQLDESCRIBEPARAM()  58
define SQL_API_SQLDRIVERCONNECT()  41
define SQL_API_SQLDRIVERS()  71
define SQL_API_SQLEXTENDEDFETCH()  59
define SQL_API_SQLFOREIGNKEYS()  60
define SQL_API_SQLMORERESULTS()  61
define SQL_API_SQLNATIVESQL()  62
define SQL_API_SQLNUMPARAMS()  63
define SQL_API_SQLPARAMOPTIONS()  64
define SQL_API_SQLPRIMARYKEYS()  65
define SQL_API_SQLPROCEDURECOLUMNS()  66
define SQL_API_SQLPROCEDURES()  67
define SQL_API_SQLSETPOS()  68
define SQL_API_SQLSETSCROLLOPTIONS()  69
define SQL_API_SQLTABLEPRIVILEGES()  70
define SQL_API_ALL_FUNCTIONS()  0
define SQL_API_LOADBYORDINAL()  199
define SQL_API_ODBC3_ALL_FUNCTIONS()  999
define SQL_API_ODBC3_ALL_FUNCTIONS_SIZE()  250
define SQL_INFO_FIRST()  0
define SQL_ACTIVE_CONNECTIONS()  0
define SQL_ACTIVE_STATEMENTS()  1
define SQL_DRIVER_HDBC()  3
define SQL_DRIVER_HENV()  4
define SQL_DRIVER_HSTMT()  5
define SQL_DRIVER_NAME()  6
define SQL_DRIVER_VER()  7
define SQL_ODBC_API_CONFORMANCE()  9
define SQL_ODBC_VER()  10
define SQL_ROW_UPDATES()  11
define SQL_ODBC_SAG_CLI_CONFORMANCE()  12
define SQL_ODBC_SQL_CONFORMANCE()  15
define SQL_PROCEDURES()  21
define SQL_CONCAT_NULL_BEHAVIOR()  22
define SQL_CURSOR_ROLLBACK_BEHAVIOR()  24
define SQL_EXPRESSIONS_IN_ORDERBY()  27
define SQL_MAX_OWNER_NAME_LEN()  32
define SQL_MAX_PROCEDURE_NAME_LEN()  33
define SQL_MAX_QUALIFIER_NAME_LEN()  34
define SQL_MULT_RESULT_SETS()  36
define SQL_MULTIPLE_ACTIVE_TXN()  37
define SQL_OUTER_JOINS()  38
define SQL_OWNER_TERM()  39
define SQL_PROCEDURE_TERM()  40
define SQL_QUALIFIER_NAME_SEPARATOR()  41
define SQL_QUALIFIER_TERM()  42
define SQL_SCROLL_OPTIONS()  44
define SQL_TABLE_TERM()  45
define SQL_CONVERT_FUNCTIONS()  48
define SQL_NUMERIC_FUNCTIONS()  49
define SQL_STRING_FUNCTIONS()  50
define SQL_SYSTEM_FUNCTIONS()  51
define SQL_TIMEDATE_FUNCTIONS()  52
define SQL_CONVERT_BIGINT()  53
define SQL_CONVERT_BINARY()  54
define SQL_CONVERT_BIT()  55
define SQL_CONVERT_CHAR()  56
define SQL_CONVERT_DATE()  57
define SQL_CONVERT_DECIMAL()  58
define SQL_CONVERT_DOUBLE()  59
define SQL_CONVERT_FLOAT()  60
define SQL_CONVERT_INTEGER()  61
define SQL_CONVERT_LONGVARCHAR()  62
define SQL_CONVERT_NUMERIC()  63
define SQL_CONVERT_REAL()  64
define SQL_CONVERT_SMALLINT()  65
define SQL_CONVERT_TIME()  66
define SQL_CONVERT_TIMESTAMP()  67
define SQL_CONVERT_TINYINT()  68
define SQL_CONVERT_VARBINARY()  69
define SQL_CONVERT_VARCHAR()  70
define SQL_CONVERT_LONGVARBINARY()  71
define SQL_ODBC_SQL_OPT_IEF()  73
define SQL_CORRELATION_NAME()  74
define SQL_NON_NULLABLE_COLUMNS()  75
define SQL_DRIVER_HLIB()  76
define SQL_DRIVER_ODBC_VER()  77
define SQL_LOCK_TYPES()  78
define SQL_POS_OPERATIONS()  79
define SQL_POSITIONED_STATEMENTS()  80
define SQL_BOOKMARK_PERSISTENCE()  82
define SQL_STATIC_SENSITIVITY()  83
define SQL_FILE_USAGE()  84
define SQL_COLUMN_ALIAS()  87
define SQL_GROUP_BY()  88
define SQL_KEYWORDS()  89
define SQL_OWNER_USAGE()  91
define SQL_QUALIFIER_USAGE()  92
define SQL_QUOTED_IDENTIFIER_CASE()  93
define SQL_SUBQUERIES()  95
define SQL_UNION()  96
define SQL_MAX_ROW_SIZE_INCLUDES_LONG()  103
define SQL_MAX_CHAR_LITERAL_LEN()  108
define SQL_TIMEDATE_ADD_INTERVALS()  109
define SQL_TIMEDATE_DIFF_INTERVALS()  110
define SQL_NEED_LONG_DATA_LEN()  111
define SQL_MAX_BINARY_LITERAL_LEN()  112
define SQL_LIKE_ESCAPE_CLAUSE()  113
define SQL_QUALIFIER_LOCATION()  114
define SQL_ACTIVE_ENVIRONMENTS()  116
define SQL_ALTER_DOMAIN()  117
define SQL_SQL_CONFORMANCE()  118
define SQL_DATETIME_LITERALS()  119
define SQL_ASYNC_MODE()  10021
define SQL_BATCH_ROW_COUNT()  120
define SQL_BATCH_SUPPORT()  121
define SQL_CATALOG_LOCATION()  SQL_QUALIFIER_LOCATION
define SQL_CATALOG_NAME_SEPARATOR()  SQL_QUALIFIER_NAME_SEPARATOR
define SQL_CATALOG_TERM()  SQL_QUALIFIER_TERM
define SQL_CATALOG_USAGE()  SQL_QUALIFIER_USAGE
define SQL_CONVERT_WCHAR()  122
define SQL_CONVERT_INTERVAL_DAY_TIME()  123
define SQL_CONVERT_INTERVAL_YEAR_MONTH()  124
define SQL_CONVERT_WLONGVARCHAR()  125
define SQL_CONVERT_WVARCHAR()  126
define SQL_CREATE_ASSERTION()  127
define SQL_CREATE_CHARACTER_SET()  128
define SQL_CREATE_COLLATION()  129
define SQL_CREATE_DOMAIN()  130
define SQL_CREATE_SCHEMA()  131
define SQL_CREATE_TABLE()  132
define SQL_CREATE_TRANSLATION()  133
define SQL_CREATE_VIEW()  134
define SQL_DRIVER_HDESC()  135
define SQL_DROP_ASSERTION()  136
define SQL_DROP_CHARACTER_SET()  137
define SQL_DROP_COLLATION()  138
define SQL_DROP_DOMAIN()  139
define SQL_DROP_SCHEMA()  140
define SQL_DROP_TABLE()  141
define SQL_DROP_TRANSLATION()  142
define SQL_DROP_VIEW()  143
define SQL_DYNAMIC_CURSOR_ATTRIBUTES1()  144
define SQL_DYNAMIC_CURSOR_ATTRIBUTES2()  145
define SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1()  146
define SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2()  147
define SQL_INDEX_KEYWORDS()  148
define SQL_INFO_SCHEMA_VIEWS()  149
define SQL_KEYSET_CURSOR_ATTRIBUTES1()  150
define SQL_KEYSET_CURSOR_ATTRIBUTES2()  151
define SQL_MAX_ASYNC_CONCURRENT_STATEMENTS()  10022
define SQL_ODBC_INTERFACE_CONFORMANCE()  152
define SQL_PARAM_ARRAY_ROW_COUNTS()  153
define SQL_PARAM_ARRAY_SELECTS()  154
define SQL_SCHEMA_TERM()  SQL_OWNER_TERM
define SQL_SCHEMA_USAGE()  SQL_OWNER_USAGE
define SQL_SQL92_DATETIME_FUNCTIONS()  155
define SQL_SQL92_FOREIGN_KEY_DELETE_RULE()  156
define SQL_SQL92_FOREIGN_KEY_UPDATE_RULE()  157
define SQL_SQL92_GRANT()  158
define SQL_SQL92_NUMERIC_VALUE_FUNCTIONS()  159
define SQL_SQL92_PREDICATES()  160
define SQL_SQL92_RELATIONAL_JOIN_OPERATORS()  161
define SQL_SQL92_REVOKE()  162
define SQL_SQL92_ROW_VALUE_CONSTRUCTOR()  163
define SQL_SQL92_STRING_FUNCTIONS()  164
define SQL_SQL92_VALUE_EXPRESSIONS()  165
define SQL_STANDARD_CLI_CONFORMANCE()  166
define SQL_STATIC_CURSOR_ATTRIBUTES1()  167
define SQL_STATIC_CURSOR_ATTRIBUTES2()  168
define SQL_AGGREGATE_FUNCTIONS()  169
define SQL_DDL_INDEX()  170
define SQL_DM_VER()  171
define SQL_INSERT_STATEMENT()  172
define SQL_UNION_STATEMENT()  SQL_UNION
define SQL_DTC_TRANSITION_COST()  1750
define SQL_AT_ADD_COLUMN_SINGLE()  0x20
define SQL_CVT_CHAR()  1
define SQL_CVT_NUMERIC()  2
define SQL_CVT_DECIMAL()  4
define SQL_CVT_INTEGER()  8
define SQL_CVT_SMALLINT()  0x10
define SQL_CVT_FLOAT()  0x20
define SQL_CVT_REAL()  0x40
define SQL_CVT_DOUBLE()  0x80
define SQL_CVT_VARCHAR()  0x100
define SQL_CVT_LONGVARCHAR()  0x200
define SQL_CVT_BINARY()  0x400
define SQL_CVT_VARBINARY()  0x800
define SQL_CVT_BIT()  0x1000
define SQL_CVT_TINYINT()  0x2000
define SQL_CVT_BIGINT()  0x4000
define SQL_CVT_DATE()  0x8000
define SQL_CVT_TIME()  0x10000
define SQL_CVT_TIMESTAMP()  0x20000
define SQL_CVT_LONGVARBINARY()  0x40000
define SQL_CVT_INTERVAL_YEAR_MONTH()  0x80000
define SQL_CVT_INTERVAL_DAY_TIME()  0x100000
define SQL_CVT_WCHAR()  0x200000
define SQL_CVT_WLONGVARCHAR()  0x400000
define SQL_CVT_WVARCHAR()  0x800000
define SQL_FN_CVT_CONVERT()  1
define SQL_FN_CVT_CAST()  2
define SQL_FN_STR_CONCAT()  1
define SQL_FN_STR_INSERT()  2
define SQL_FN_STR_LEFT()  4
define SQL_FN_STR_LTRIM()  8
define SQL_FN_STR_LENGTH()  0x10
define SQL_FN_STR_LOCATE()  0x20
define SQL_FN_STR_LCASE()  0x40
define SQL_FN_STR_REPEAT()  0x80
define SQL_FN_STR_REPLACE()  0x100
define SQL_FN_STR_RIGHT()  0x200
define SQL_FN_STR_RTRIM()  0x400
define SQL_FN_STR_SUBSTRING()  0x800
define SQL_FN_STR_UCASE()  0x1000
define SQL_FN_STR_ASCII()  0x2000
define SQL_FN_STR_CHAR()  0x4000
define SQL_FN_STR_DIFFERENCE()  0x8000
define SQL_FN_STR_LOCATE_2()  0x10000
define SQL_FN_STR_SOUNDEX()  0x20000
define SQL_FN_STR_SPACE()  0x40000
define SQL_FN_STR_BIT_LENGTH()  0x80000
define SQL_FN_STR_CHAR_LENGTH()  0x100000
define SQL_FN_STR_CHARACTER_LENGTH()  0x200000
define SQL_FN_STR_OCTET_LENGTH()  0x400000
define SQL_FN_STR_POSITION()  0x800000
define SQL_SSF_CONVERT()  1
define SQL_SSF_LOWER()  2
define SQL_SSF_UPPER()  4
define SQL_SSF_SUBSTRING()  8
define SQL_SSF_TRANSLATE()  0x10
define SQL_SSF_TRIM_BOTH()  0x20
define SQL_SSF_TRIM_LEADING()  0x40
define SQL_SSF_TRIM_TRAILING()  0x80
define SQL_FN_NUM_ABS()  1
define SQL_FN_NUM_ACOS()  2
define SQL_FN_NUM_ASIN()  4
define SQL_FN_NUM_ATAN()  8
define SQL_FN_NUM_ATAN2()  0x10
define SQL_FN_NUM_CEILING()  0x20
define SQL_FN_NUM_COS()  0x40
define SQL_FN_NUM_COT()  0x80
define SQL_FN_NUM_EXP()  0x100
define SQL_FN_NUM_FLOOR()  0x200
define SQL_FN_NUM_LOG()  0x400
define SQL_FN_NUM_MOD()  0x800
define SQL_FN_NUM_SIGN()  0x1000
define SQL_FN_NUM_SIN()  0x2000
define SQL_FN_NUM_SQRT()  0x4000
define SQL_FN_NUM_TAN()  0x8000
define SQL_FN_NUM_PI()  0x10000
define SQL_FN_NUM_RAND()  0x20000
define SQL_FN_NUM_DEGREES()  0x40000
define SQL_FN_NUM_LOG10()  0x80000
define SQL_FN_NUM_POWER()  0x100000
define SQL_FN_NUM_RADIANS()  0x200000
define SQL_FN_NUM_ROUND()  0x400000
define SQL_FN_NUM_TRUNCATE()  0x800000
define SQL_SNVF_BIT_LENGTH()  1
define SQL_SNVF_CHAR_LENGTH()  2
define SQL_SNVF_CHARACTER_LENGTH()  4
define SQL_SNVF_EXTRACT()  8
define SQL_SNVF_OCTET_LENGTH()  0x10
define SQL_SNVF_POSITION()  0x20
define SQL_FN_TD_NOW()  1
define SQL_FN_TD_CURDATE()  2
define SQL_FN_TD_DAYOFMONTH()  4
define SQL_FN_TD_DAYOFWEEK()  8
define SQL_FN_TD_DAYOFYEAR()  0x10
define SQL_FN_TD_MONTH()  0x20
define SQL_FN_TD_QUARTER()  0x40
define SQL_FN_TD_WEEK()  0x80
define SQL_FN_TD_YEAR()  0x100
define SQL_FN_TD_CURTIME()  0x200
define SQL_FN_TD_HOUR()  0x400
define SQL_FN_TD_MINUTE()  0x800
define SQL_FN_TD_SECOND()  0x1000
define SQL_FN_TD_TIMESTAMPADD()  0x2000
define SQL_FN_TD_TIMESTAMPDIFF()  0x4000
define SQL_FN_TD_DAYNAME()  0x8000
define SQL_FN_TD_MONTHNAME()  0x10000
define SQL_FN_TD_CURRENT_DATE()  0x20000
define SQL_FN_TD_CURRENT_TIME()  0x40000
define SQL_FN_TD_CURRENT_TIMESTAMP()  0x80000
define SQL_FN_TD_EXTRACT()  0x100000
define SQL_SDF_CURRENT_DATE()  1
define SQL_SDF_CURRENT_TIME()  2
define SQL_SDF_CURRENT_TIMESTAMP()  4
define SQL_FN_SYS_USERNAME()  1
define SQL_FN_SYS_DBNAME()  2
define SQL_FN_SYS_IFNULL()  4
define SQL_FN_TSI_FRAC_SECOND()  1
define SQL_FN_TSI_SECOND()  2
define SQL_FN_TSI_MINUTE()  4
define SQL_FN_TSI_HOUR()  8
define SQL_FN_TSI_DAY()  0x10
define SQL_FN_TSI_WEEK()  0x20
define SQL_FN_TSI_MONTH()  0x40
define SQL_FN_TSI_QUARTER()  0x80
define SQL_FN_TSI_YEAR()  0x100
define SQL_CA1_NEXT()  1
define SQL_CA1_ABSOLUTE()  2
define SQL_CA1_RELATIVE()  4
define SQL_CA1_BOOKMARK()  8
define SQL_CA1_LOCK_NO_CHANGE()  0x40
define SQL_CA1_LOCK_EXCLUSIVE()  0x80
define SQL_CA1_LOCK_UNLOCK()  0x100
define SQL_CA1_POS_POSITION()  0x200
define SQL_CA1_POS_UPDATE()  0x400
define SQL_CA1_POS_DELETE()  0x800
define SQL_CA1_POS_REFRESH()  0x1000
define SQL_CA1_POSITIONED_UPDATE()  0x2000
define SQL_CA1_POSITIONED_DELETE()  0x4000
define SQL_CA1_SELECT_FOR_UPDATE()  0x8000
define SQL_CA1_BULK_ADD()  0x10000
define SQL_CA1_BULK_UPDATE_BY_BOOKMARK()  0x20000
define SQL_CA1_BULK_DELETE_BY_BOOKMARK()  0x40000
define SQL_CA1_BULK_FETCH_BY_BOOKMARK()  0x80000
define SQL_CA2_READ_ONLY_CONCURRENCY()  1
define SQL_CA2_LOCK_CONCURRENCY()  2
define SQL_CA2_OPT_ROWVER_CONCURRENCY()  4
define SQL_CA2_OPT_VALUES_CONCURRENCY()  8
define SQL_CA2_SENSITIVITY_ADDITIONS()  0x10
define SQL_CA2_SENSITIVITY_DELETIONS()  0x20
define SQL_CA2_SENSITIVITY_UPDATES()  0x40
define SQL_CA2_MAX_ROWS_SELECT()  0x80
define SQL_CA2_MAX_ROWS_INSERT()  0x100
define SQL_CA2_MAX_ROWS_DELETE()  0x200
define SQL_CA2_MAX_ROWS_UPDATE()  0x400
define SQL_CA2_MAX_ROWS_CATALOG()  0x800
define SQL_CA2_MAX_ROWS_AFFECTS_ALL()  (SQL_CA2_MAX_ROWS_SELECT + ...
                                   SQL_CA2_MAX_ROWS_INSERT + SQL_CA2_MAX_ROWS_DELETE + ...
                                   SQL_CA2_MAX_ROWS_UPDATE + SQL_CA2_MAX_ROWS_CATALOG)
define SQL_CA2_CRC_EXACT()  0x1000
define SQL_CA2_CRC_APPROXIMATE()  0x2000
define SQL_CA2_SIMULATE_NON_UNIQUE()  0x4000
define SQL_CA2_SIMULATE_TRY_UNIQUE()  0x8000
define SQL_CA2_SIMULATE_UNIQUE()  0x10000
define SQL_OAC_NONE()  0
define SQL_OAC_LEVEL1()  1
define SQL_OAC_LEVEL2()  2
define SQL_OSCC_NOT_COMPLIANT()  0
define SQL_OSCC_COMPLIANT()  1
define SQL_OSC_MINIMUM()  0
define SQL_OSC_CORE()  1
define SQL_OSC_EXTENDED()  2
define SQL_CB_NULL()  0
define SQL_CB_NON_NULL()  1
define SQL_SO_FORWARD_ONLY()  1
define SQL_SO_KEYSET_DRIVEN()  2
define SQL_SO_DYNAMIC()  4
define SQL_SO_MIXED()  8
define SQL_SO_STATIC()  0x10
define SQL_FD_FETCH_BOOKMARK()  0x80
define SQL_CN_NONE()  0
define SQL_CN_DIFFERENT()  1
define SQL_CN_ANY()  2
define SQL_NNC_NULL()  0
define SQL_NNC_NON_NULL()  1
define SQL_NC_START()  2
define SQL_NC_END()  4
define SQL_FILE_NOT_SUPPORTED()  0
define SQL_FILE_TABLE()  1
define SQL_FILE_QUALIFIER()  2
define SQL_FILE_CATALOG()  SQL_FILE_QUALIFIER
define SQL_GD_BLOCK()  4
define SQL_GD_BOUND()  8
define SQL_PS_POSITIONED_DELETE()  1
define SQL_PS_POSITIONED_UPDATE()  2
define SQL_PS_SELECT_FOR_UPDATE()  4
define SQL_GB_NOT_SUPPORTED()  0
define SQL_GB_GROUP_BY_EQUALS_SELECT()  1
define SQL_GB_GROUP_BY_CONTAINS_SELECT()  2
define SQL_GB_NO_RELATION()  3
define SQL_GB_COLLATE()  4
define SQL_OU_DML_STATEMENTS()  1
define SQL_OU_PROCEDURE_INVOCATION()  2
define SQL_OU_TABLE_DEFINITION()  4
define SQL_OU_INDEX_DEFINITION()  8
define SQL_OU_PRIVILEGE_DEFINITION()  0x10
define SQL_SU_DML_STATEMENTS()  SQL_OU_DML_STATEMENTS
define SQL_SU_PROCEDURE_INVOCATION()  SQL_OU_PROCEDURE_INVOCATION
define SQL_SU_TABLE_DEFINITION()  SQL_OU_TABLE_DEFINITION
define SQL_SU_INDEX_DEFINITION()  SQL_OU_INDEX_DEFINITION
define SQL_SU_PRIVILEGE_DEFINITION()  SQL_OU_PRIVILEGE_DEFINITION
define SQL_QU_DML_STATEMENTS()  1
define SQL_QU_PROCEDURE_INVOCATION()  2
define SQL_QU_TABLE_DEFINITION()  4
define SQL_QU_INDEX_DEFINITION()  8
define SQL_QU_PRIVILEGE_DEFINITION()  0x10
define SQL_CU_DML_STATEMENTS()  SQL_QU_DML_STATEMENTS
define SQL_CU_PROCEDURE_INVOCATION()  SQL_QU_PROCEDURE_INVOCATION
define SQL_CU_TABLE_DEFINITION()  SQL_QU_TABLE_DEFINITION
define SQL_CU_INDEX_DEFINITION()  SQL_QU_INDEX_DEFINITION
define SQL_CU_PRIVILEGE_DEFINITION()  SQL_QU_PRIVILEGE_DEFINITION
define SQL_SQ_COMPARISON()  1
define SQL_SQ_EXISTS()  2
define SQL_SQ_IN()  4
define SQL_SQ_QUANTIFIED()  8
define SQL_SQ_CORRELATED_SUBQUERIES()  0x10
define SQL_U_UNION()  1
define SQL_U_UNION_ALL()  2
define SQL_BP_CLOSE()  1
define SQL_BP_DELETE()  2
define SQL_BP_DROP()  4
define SQL_BP_TRANSACTION()  8
define SQL_BP_UPDATE()  0x10
define SQL_BP_OTHER_HSTMT()  0x20
define SQL_BP_SCROLL()  0x40
define SQL_SS_ADDITIONS()  1
define SQL_SS_DELETIONS()  2
define SQL_SS_UPDATES()  4
define SQL_CV_CREATE_VIEW()  1
define SQL_CV_CHECK_OPTION()  2
define SQL_CV_CASCADED()  4
define SQL_CV_LOCAL()  8
define SQL_LCK_NO_CHANGE()  1
define SQL_LCK_EXCLUSIVE()  2
define SQL_LCK_UNLOCK()  4
define SQL_POS_POSITION()  1
define SQL_POS_REFRESH()  2
define SQL_POS_UPDATE()  4
define SQL_POS_DELETE()  8
define SQL_POS_ADD()  0x10
define SQL_QL_START()  1
define SQL_QL_END()  2
define SQL_AF_AVG()  1
define SQL_AF_COUNT()  2
define SQL_AF_MAX()  4
define SQL_AF_MIN()  8
define SQL_AF_SUM()  0x10
define SQL_AF_DISTINCT()  0x20
define SQL_AF_ALL()  0x40
define SQL_SC_SQL92_ENTRY()  1
define SQL_SC_FIPS127_2_TRANSITIONAL()  2
define SQL_SC_SQL92_INTERMEDIATE()  4
define SQL_SC_SQL92_FULL()  8
define SQL_DL_SQL92_DATE()  1
define SQL_DL_SQL92_TIME()  2
define SQL_DL_SQL92_TIMESTAMP()  4
define SQL_DL_SQL92_INTERVAL_YEAR()  8
define SQL_DL_SQL92_INTERVAL_MONTH()  0x10
define SQL_DL_SQL92_INTERVAL_DAY()  0x20
define SQL_DL_SQL92_INTERVAL_HOUR()  0x40
define SQL_DL_SQL92_INTERVAL_MINUTE()  0x80
define SQL_DL_SQL92_INTERVAL_SECOND()  0x100
define SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH()  0x200
define SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR()  0x400
define SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE()  0x800
define SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND()  0x1000
define SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE()  0x2000
define SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND()  0x4000
define SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND()  0x8000
define SQL_CL_START()  SQL_QL_START
define SQL_CL_END()  SQL_QL_END
define SQL_BRC_PROCEDURES()  1
define SQL_BRC_EXPLICIT()  2
define SQL_BRC_ROLLED_UP()  4
define SQL_BS_SELECT_EXPLICIT()  1
define SQL_BS_ROW_COUNT_EXPLICIT()  2
define SQL_BS_SELECT_PROC()  4
define SQL_BS_ROW_COUNT_PROC()  8
define SQL_PARC_BATCH()  1
define SQL_PARC_NO_BATCH()  2
define SQL_PAS_BATCH()  1
define SQL_PAS_NO_BATCH()  2
define SQL_PAS_NO_SELECT()  3
define SQL_IK_NONE()  0
define SQL_IK_ASC()  1
define SQL_IK_DESC()  2
define SQL_IK_ALL()  (SQL_IK_ASC + SQL_IK_DESC)
define SQL_ISV_ASSERTIONS()  1
define SQL_ISV_CHARACTER_SETS()  2
define SQL_ISV_CHECK_CONSTRAINTS()  4
define SQL_ISV_COLLATIONS()  8
define SQL_ISV_COLUMN_DOMAIN_USAGE()  0x10
define SQL_ISV_COLUMN_PRIVILEGES()  0x20
define SQL_ISV_COLUMNS()  0x40
define SQL_ISV_CONSTRAINT_COLUMN_USAGE()  0x80
define SQL_ISV_CONSTRAINT_TABLE_USAGE()  0x100
define SQL_ISV_DOMAIN_CONSTRAINTS()  0x200
define SQL_ISV_DOMAINS()  0x400
define SQL_ISV_KEY_COLUMN_USAGE()  0x800
define SQL_ISV_REFERENTIAL_CONSTRAINTS()  0x1000
define SQL_ISV_SCHEMATA()  0x2000
define SQL_ISV_SQL_LANGUAGES()  0x4000
define SQL_ISV_TABLE_CONSTRAINTS()  0x8000
define SQL_ISV_TABLE_PRIVILEGES()  0x10000
define SQL_ISV_TABLES()  0x20000
define SQL_ISV_TRANSLATIONS()  0x40000
define SQL_ISV_USAGE_PRIVILEGES()  0x80000
define SQL_ISV_VIEW_COLUMN_USAGE()  0x100000
define SQL_ISV_VIEW_TABLE_USAGE()  0x200000
define SQL_ISV_VIEWS()  0x400000
//define SQL_AM_NONE()  0
define SQL_AD_CONSTRAINT_NAME_DEFINITION()  1
define SQL_AD_ADD_DOMAIN_CONSTRAINT()  2
define SQL_AD_DROP_DOMAIN_CONSTRAINT()  4
define SQL_AD_ADD_DOMAIN_DEFAULT()  8
define SQL_AD_DROP_DOMAIN_DEFAULT()  0x10
define SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED()  0x20
define SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE()  0x40
define SQL_AD_ADD_CONSTRAINT_DEFERRABLE()  0x80
define SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE()  0x100
define SQL_CS_CREATE_SCHEMA()  1
define SQL_CS_AUTHORIZATION()  2
define SQL_CS_DEFAULT_CHARACTER_SET()  4
define SQL_CTR_CREATE_TRANSLATION()  1
define SQL_CA_CREATE_ASSERTION()  1
define SQL_CA_CONSTRAINT_INITIALLY_DEFERRED()  0x10
define SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE()  0x20
define SQL_CA_CONSTRAINT_DEFERRABLE()  0x40
define SQL_CA_CONSTRAINT_NON_DEFERRABLE()  0x80
define SQL_CCS_CREATE_CHARACTER_SET()  1
define SQL_CCS_COLLATE_CLAUSE()  2
define SQL_CCS_LIMITED_COLLATION()  4
define SQL_CCOL_CREATE_COLLATION()  1
define SQL_CDO_CREATE_DOMAIN()  1
define SQL_CDO_DEFAULT()  2
define SQL_CDO_CONSTRAINT()  4
define SQL_CDO_COLLATION()  8
define SQL_CDO_CONSTRAINT_NAME_DEFINITION()  0x10
define SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED()  0x20
define SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE()  0x40
define SQL_CDO_CONSTRAINT_DEFERRABLE()  0x80
define SQL_CDO_CONSTRAINT_NON_DEFERRABLE()  0x100
define SQL_CT_CREATE_TABLE()  1
define SQL_CT_COMMIT_PRESERVE()  2
define SQL_CT_COMMIT_DELETE()  4
define SQL_CT_GLOBAL_TEMPORARY()  8
define SQL_CT_LOCAL_TEMPORARY()  0x10
define SQL_CT_CONSTRAINT_INITIALLY_DEFERRED()  0x20
define SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE()  0x40
define SQL_CT_CONSTRAINT_DEFERRABLE()  0x80
define SQL_CT_CONSTRAINT_NON_DEFERRABLE()  0x100
define SQL_CT_COLUMN_CONSTRAINT()  0x200
define SQL_CT_COLUMN_DEFAULT()  0x400
define SQL_CT_COLUMN_COLLATION()  0x800
define SQL_CT_TABLE_CONSTRAINT()  0x1000
define SQL_CT_CONSTRAINT_NAME_DEFINITION()  0x2000
define SQL_DI_CREATE_INDEX()  1
define SQL_DI_DROP_INDEX()  2
define SQL_DC_DROP_COLLATION()  1
define SQL_DD_DROP_DOMAIN()  1
define SQL_DD_RESTRICT()  2
define SQL_DD_CASCADE()  4
define SQL_DS_DROP_SCHEMA()  1
define SQL_DS_RESTRICT()  2
define SQL_DS_CASCADE()  4
define SQL_DCS_DROP_CHARACTER_SET()  1
define SQL_DA_DROP_ASSERTION()  1
define SQL_DT_DROP_TABLE()  1
define SQL_DT_RESTRICT()  2
define SQL_DT_CASCADE()  4
define SQL_DTR_DROP_TRANSLATION()  1
define SQL_DV_DROP_VIEW()  1
define SQL_DV_RESTRICT()  2
define SQL_DV_CASCADE()  4
define SQL_IS_INSERT_LITERALS()  1
define SQL_IS_INSERT_SEARCHED()  2
define SQL_IS_SELECT_INTO()  4
define SQL_OIC_CORE()  1
define SQL_OIC_LEVEL1()  2
define SQL_OIC_LEVEL2()  3
define SQL_SFKD_CASCADE()  1
define SQL_SFKD_NO_ACTION()  2
define SQL_SFKD_SET_DEFAULT()  4
define SQL_SFKD_SET_NULL()  8
define SQL_SFKU_CASCADE()  1
define SQL_SFKU_NO_ACTION()  2
define SQL_SFKU_SET_DEFAULT()  4
define SQL_SFKU_SET_NULL()  8
define SQL_SG_USAGE_ON_DOMAIN()  1
define SQL_SG_USAGE_ON_CHARACTER_SET()  2
define SQL_SG_USAGE_ON_COLLATION()  4
define SQL_SG_USAGE_ON_TRANSLATION()  8
define SQL_SG_WITH_GRANT_OPTION()  0x10
define SQL_SG_DELETE_TABLE()  0x20
define SQL_SG_INSERT_TABLE()  0x40
define SQL_SG_INSERT_COLUMN()  0x80
define SQL_SG_REFERENCES_TABLE()  0x100
define SQL_SG_REFERENCES_COLUMN()  0x200
define SQL_SG_SELECT_TABLE()  0x400
define SQL_SG_UPDATE_TABLE()  0x800
define SQL_SG_UPDATE_COLUMN()  0x1000
define SQL_SP_EXISTS()  1
define SQL_SP_ISNOTNULL()  2
define SQL_SP_ISNULL()  4
define SQL_SP_MATCH_FULL()  8
define SQL_SP_MATCH_PARTIAL()  0x10
define SQL_SP_MATCH_UNIQUE_FULL()  0x20
define SQL_SP_MATCH_UNIQUE_PARTIAL()  0x40
define SQL_SP_OVERLAPS()  0x80
define SQL_SP_UNIQUE()  0x100
define SQL_SP_LIKE()  0x200
define SQL_SP_IN()  0x400
define SQL_SP_BETWEEN()  0x800
define SQL_SP_COMPARISON()  0x1000
define SQL_SP_QUANTIFIED_COMPARISON()  0x2000
define SQL_SRJO_CORRESPONDING_CLAUSE()  1
define SQL_SRJO_CROSS_JOIN()  2
define SQL_SRJO_EXCEPT_JOIN()  4
define SQL_SRJO_FULL_OUTER_JOIN()  8
define SQL_SRJO_INNER_JOIN()  0x10
define SQL_SRJO_INTERSECT_JOIN()  0x20
define SQL_SRJO_LEFT_OUTER_JOIN()  0x40
define SQL_SRJO_NATURAL_JOIN()  0x80
define SQL_SRJO_RIGHT_OUTER_JOIN()  0x100
define SQL_SRJO_UNION_JOIN()  0x200
define SQL_SR_USAGE_ON_DOMAIN()  1
define SQL_SR_USAGE_ON_CHARACTER_SET()  2
define SQL_SR_USAGE_ON_COLLATION()  4
define SQL_SR_USAGE_ON_TRANSLATION()  8
define SQL_SR_GRANT_OPTION_FOR()  0x10
define SQL_SR_CASCADE()  0x20
define SQL_SR_RESTRICT()  0x40
define SQL_SR_DELETE_TABLE()  0x80
define SQL_SR_INSERT_TABLE()  0x100
define SQL_SR_INSERT_COLUMN()  0x200
define SQL_SR_REFERENCES_TABLE()  0x400
define SQL_SR_REFERENCES_COLUMN()  0x800
define SQL_SR_SELECT_TABLE()  0x1000
define SQL_SR_UPDATE_TABLE()  0x2000
define SQL_SR_UPDATE_COLUMN()  0x4000
define SQL_SRVC_VALUE_EXPRESSION()  1
define SQL_SRVC_NULL()  2
define SQL_SRVC_DEFAULT()  4
define SQL_SRVC_ROW_SUBQUERY()  8
define SQL_SVE_CASE()  1
define SQL_SVE_CAST()  2
define SQL_SVE_COALESCE()  4
define SQL_SVE_NULLIF()  8
define SQL_SCC_XOPEN_CLI_VERSION1()  1
define SQL_SCC_ISO92_CLI()  2
define SQL_US_UNION()  SQL_U_UNION
define SQL_US_UNION_ALL()  SQL_U_UNION_ALL
define SQL_DTC_ENLIST_EXPENSIVE()  1
define SQL_DTC_UNENLIST_EXPENSIVE()  2
define SQL_FETCH_FIRST_USER()  31
define SQL_FETCH_FIRST_SYSTEM()  32
define SQL_ENTIRE_ROWSET()  0
define SQL_POSITION()  0
define SQL_REFRESH()  1
define SQL_UPDATE()  2
define SQL_DELETE()  3
define SQL_ADD()  4
define SQL_SETPOS_MAX_OPTION_VALUE()  SQL_ADD
define SQL_UPDATE_BY_BOOKMARK()  5
define SQL_DELETE_BY_BOOKMARK()  6
define SQL_FETCH_BY_BOOKMARK()  7
define SQL_LOCK_NO_CHANGE()  0
define SQL_LOCK_EXCLUSIVE()  1
define SQL_LOCK_UNLOCK()  2
define SQL_SETPOS_MAX_LOCK_VALUE()  SQL_LOCK_UNLOCK
define SQL_BEST_ROWID()  1
define SQL_ROWVER()  2
define SQL_PC_NOT_PSEUDO()  1
define SQL_QUICK()  0
define SQL_ENSURE()  1
define SQL_TABLE_STAT()  0
define SQL_ALL_CATALOGS()  "%"
define SQL_ALL_SCHEMAS()  "%"
define SQL_ALL_TABLE_TYPES()  "%"
define SQL_DRIVER_NOPROMPT()  0
define SQL_DRIVER_COMPLETE()  1
define SQL_DRIVER_PROMPT()  2
define SQL_DRIVER_COMPLETE_REQUIRED()  3
define SQL_FETCH_BOOKMARK()  8
define SQL_ROW_SUCCESS()  0
define SQL_ROW_DELETED()  1
define SQL_ROW_UPDATED()  2
define SQL_ROW_NOROW()  3
define SQL_ROW_ADDED()  4
define SQL_ROW_ERROR()  5
define SQL_ROW_SUCCESS_WITH_INFO()  6
define SQL_ROW_PROCEED()  0
define SQL_ROW_IGNORE()  1
define SQL_PARAM_SUCCESS()  0
define SQL_PARAM_SUCCESS_WITH_INFO()  6
define SQL_PARAM_ERROR()  5
define SQL_PARAM_UNUSED()  7
define SQL_PARAM_DIAG_UNAVAILABLE()  1
define SQL_PARAM_PROCEED()  0
define SQL_PARAM_IGNORE()  1
define SQL_CASCADE()  0
define SQL_RESTRICT()  1
define SQL_SET_NULL()  2
define SQL_NO_ACTION()  3
define SQL_SET_DEFAULT()  4
define SQL_INITIALLY_DEFERRED()  5
define SQL_INITIALLY_IMMEDIATE()  6
define SQL_NOT_DEFERRABLE()  7
define SQL_PARAM_TYPE_UNKNOWN()  0
define SQL_PARAM_INPUT()  1
define SQL_PARAM_INPUT_OUTPUT()  2
define SQL_RESULT_COL()  3
define SQL_PARAM_OUTPUT()  4
define SQL_RETURN_VALUE()  5
define SQL_PT_UNKNOWN()  0
define SQL_PT_PROCEDURE()  1
define SQL_PT_FUNCTION()  2
define SQL_YEAR()  SQL_CODE_YEAR
define SQL_MONTH()  SQL_CODE_MONTH
define SQL_DAY()  SQL_CODE_DAY
define SQL_HOUR()  SQL_CODE_HOUR
define SQL_MINUTE()  SQL_CODE_MINUTE
define SQL_SECOND()  SQL_CODE_SECOND
define SQL_YEAR_TO_MONTH()  SQL_CODE_YEAR_TO_MONTH
define SQL_DAY_TO_HOUR()  SQL_CODE_DAY_TO_HOUR
define SQL_DAY_TO_MINUTE()  SQL_CODE_DAY_TO_MINUTE
define SQL_DAY_TO_SECOND()  SQL_CODE_DAY_TO_SECOND
define SQL_HOUR_TO_MINUTE()  SQL_CODE_HOUR_TO_MINUTE
define SQL_HOUR_TO_SECOND()  SQL_CODE_HOUR_TO_SECOND
define SQL_MINUTE_TO_SECOND()  SQL_CODE_MINUTE_TO_SECOND
define SQL_DATABASE_NAME()  16
define SQL_FD_FETCH_PREV()  SQL_FD_FETCH_PRIOR
define SQL_FETCH_PREV()  SQL_FETCH_PRIOR
define SQL_CONCUR_TIMESTAMP()  SQL_CONCUR_ROWVER
define SQL_SCCO_OPT_TIMESTAMP()  SQL_SCCO_OPT_ROWVER
define SQL_CC_DELETE()  SQL_CB_DELETE
define SQL_CR_DELETE()  SQL_CB_DELETE
define SQL_CC_CLOSE()  SQL_CB_CLOSE
define SQL_CR_CLOSE()  SQL_CB_CLOSE
define SQL_CC_PRESERVE()  SQL_CB_PRESERVE
define SQL_CR_PRESERVE()  SQL_CB_PRESERVE
define SQL_SCROLL_FORWARD_ONLY()  0
define SQL_SCROLL_KEYSET_DRIVEN()  (-1)
define SQL_SCROLL_DYNAMIC()  (-2)
define SQL_SCROLL_STATIC()  (-3)
define TRACE_VERSION()  1000
define TRACE_ON()  1
define TRACE_VS_EVENT_ON()  2
define ODBC_VS_FLAG_UNICODE_ARG()  1
define ODBC_VS_FLAG_UNICODE_COR()  2
define ODBC_VS_FLAG_RETCODE()  4
define ODBC_VS_FLAG_STOP()  8
//-----------------------------------------------------------------------------------------
//    sqltypes.h
//-----------------------------------------------------------------------------------------
struct DATE_STRUCT
{
    int16           year;
    int16          month;
    int16          day;
}
define SQL_DATE_STRUCT()  DATE_STRUCT
struct TIME_STRUCT
{
    int16          hour;
    int16          minute;
    int16          second;
}
define SQL_TIME_STRUCT()  TIME_STRUCT
struct TIMESTAMP_STRUCT
{
    int16          year;
    int16          month;
    int16          day;
    int16          hour;
    int16          minute;
    int16          second;
    int32          fraction;
}
define SQL_TIMESTAMP_STRUCT()  TIMESTAMP_STRUCT
define SQL_IS_YEAR()  1
define SQL_IS_MONTH()  2
define SQL_IS_DAY()  3
define SQL_IS_HOUR()  4
define SQL_IS_MINUTE()  5
define SQL_IS_SECOND()  6
define SQL_IS_YEAR_TO_MONTH()  7
define SQL_IS_DAY_TO_HOUR()  8
define SQL_IS_DAY_TO_MINUTE()  9
define SQL_IS_DAY_TO_SECOND()  10
define SQL_IS_HOUR_TO_MINUTE()  11
define SQL_IS_HOUR_TO_SECOND()  12
define SQL_IS_MINUTE_TO_SECOND()  13
struct SQL_YEAR_MONTH_STRUCT
{
    int32    year;
    int32    month;
}
struct SQL_DAY_SECOND_STRUCT
{
    int32    day;
    int32    hour;
    int32    minute;
    int32    second;
    int32    fraction;
}

struct SQL_INTERVAL_STRUCT
{
    int32   interval_type;
    int32   interval_sign;
    union UNION_SQL_INTERVAL_STRUCT
    {
        SQL_YEAR_MONTH_STRUCT    year_month;
        SQL_DAY_SECOND_STRUCT    day_second;
    }
}
define SQL_MAX_NUMERIC_LEN()  16
struct SQL_NUMERIC_STRUCT
{
    int8   precision;
    int8   scale;
    int8   sign;
    int8[SQL_MAX_NUMERIC_LEN]  val;
}
struct SQLGUID
{
    int32      Data1;
    int16      Data2;
    int16      Data3;
    int8[8]  Data4;
}
// ------------------------- equates for opengl ----------------------------

define GL_VERSION_1_1()  1
define GL_ACCUM()  0x00100
define GL_LOAD()  0x00101
define GL_RETURN()  0x00102
define GL_MULT()  0x00103
define GL_ADD()  0x00104
define GL_NEVER()  0x00200
define GL_LESS()  0x00201
define GL_EQUAL()  0x00202
define GL_LEQUAL()  0x00203
define GL_GREATER()  0x00204
define GL_NOTEQUAL()  0x00205
define GL_GEQUAL()  0x00206
define GL_ALWAYS()  0x00207
define GL_CURRENT_BIT()  0x000000001
define GL_POINT_BIT()  0x000000002
define GL_LINE_BIT()  0x000000004
define GL_POLYGON_BIT()  0x000000008
define GL_POLYGON_STIPPLE_BIT()  0x000000010
define GL_PIXEL_MODE_BIT()  0x000000020
define GL_LIGHTING_BIT()  0x000000040
define GL_FOG_BIT()  0x000000080
define GL_DEPTH_BUFFER_BIT()  0x000000100
define GL_ACCUM_BUFFER_BIT()  0x000000200
define GL_STENCIL_BUFFER_BIT()  0x000000400
define GL_VIEWPORT_BIT()  0x000000800
define GL_TRANSFORM_BIT()  0x000001000
define GL_ENABLE_BIT()  0x000002000
define GL_COLOR_BUFFER_BIT()  0x000004000
define GL_HINT_BIT()  0x000008000
define GL_EVAL_BIT()  0x000010000
define GL_LIST_BIT()  0x000020000
define GL_TEXTURE_BIT()  0x000040000
define GL_SCISSOR_BIT()  0x000080000
define GL_ALL_ATTRIB_BITS()  0x0000fffff
define GL_POINTS()  0x00000
define GL_LINES()  0x00001
define GL_LINE_LOOP()  0x00002
define GL_LINE_STRIP()  0x00003
define GL_TRIANGLES()  0x00004
define GL_TRIANGLE_STRIP()  0x00005
define GL_TRIANGLE_FAN()  0x00006
define GL_QUADS()  0x00007
define GL_QUAD_STRIP()  0x00008
define GL_POLYGON()  0x00009
define GL_ZERO()  0
define GL_ONE()  1
define GL_SRC_COLOR()  0x00300
define GL_ONE_MINUS_SRC_COLOR()  0x00301
define GL_SRC_ALPHA()  0x00302
define GL_ONE_MINUS_SRC_ALPHA()  0x00303
define GL_DST_ALPHA()  0x00304
define GL_ONE_MINUS_DST_ALPHA()  0x00305
define GL_DST_COLOR()  0x00306
define GL_ONE_MINUS_DST_COLOR()  0x00307
define GL_SRC_ALPHA_SATURATE()  0x00308
define GL_TRUE()  1
define GL_FALSE()  0
define GL_CLIP_PLANE0()  0x03000
define GL_CLIP_PLANE1()  0x03001
define GL_CLIP_PLANE2()  0x03002
define GL_CLIP_PLANE3()  0x03003
define GL_CLIP_PLANE4()  0x03004
define GL_CLIP_PLANE5()  0x03005
define GL_BYTE()  0x01400
define GL_UNSIGNED_BYTE()  0x01401
define GL_SHORT()  0x01402
define GL_UNSIGNED_SHORT()  0x01403
define GL_INT()  0x01404
define GL_UNSIGNED_INT()  0x01405
define GL_FLOAT()  0x01406
define GL_2_BYTES()  0x01407
define GL_3_BYTES()  0x01408
define GL_4_BYTES()  0x01409
define GL_DOUBLE()  0x0140A
define GL_NONE()  0
define GL_FRONT_LEFT()  0x00400
define GL_FRONT_RIGHT()  0x00401
define GL_BACK_LEFT()  0x00402
define GL_BACK_RIGHT()  0x00403
define GL_FRONT()  0x00404
define GL_BACK()  0x00405
define GL_LEFT()  0x00406
define GL_RIGHT()  0x00407
define GL_FRONT_AND_BACK()  0x00408
define GL_AUX0()  0x00409
define GL_AUX1()  0x0040A
define GL_AUX2()  0x0040B
define GL_AUX3()  0x0040C
define GL_NO_ERROR()  0
define GL_INVALID_ENUM()  0x00500
define GL_INVALID_VALUE()  0x00501
define GL_INVALID_OPERATION()  0x00502
define GL_STACK_OVERFLOW()  0x00503
define GL_STACK_UNDERFLOW()  0x00504
define GL_OUT_OF_MEMORY()  0x00505
define GL_2D()  0x00600
define GL_3D()  0x00601
define GL_3D_COLOR()  0x00602
define GL_3D_COLOR_TEXTURE()  0x00603
define GL_4D_COLOR_TEXTURE()  0x00604
define GL_PASS_THROUGH_TOKEN()  0x00700
define GL_POINT_TOKEN()  0x00701
define GL_LINE_TOKEN()  0x00702
define GL_POLYGON_TOKEN()  0x00703
define GL_BITMAP_TOKEN()  0x00704
define GL_DRAW_PIXEL_TOKEN()  0x00705
define GL_COPY_PIXEL_TOKEN()  0x00706
define GL_LINE_RESET_TOKEN()  0x00707
define GL_EXP()  0x00800
define GL_EXP2()  0x00801
define GL_CW()  0x00900
define GL_CCW()  0x00901
define GL_COEFF()  0x00A00
define GL_ORDER()  0x00A01
define GL_DOMAIN()  0x00A02
define GL_CURRENT_COLOR()  0x00B00
define GL_CURRENT_INDEX()  0x00B01
define GL_CURRENT_NORMAL()  0x00B02
define GL_CURRENT_TEXTURE_COORDS()  0x00B03
define GL_CURRENT_RASTER_COLOR()  0x00B04
define GL_CURRENT_RASTER_INDEX()  0x00B05
define GL_CURRENT_RASTER_TEXTURE_COORDS()  0x00B06
define GL_CURRENT_RASTER_POSITION()  0x00B07
define GL_CURRENT_RASTER_POSITION_VALID()  0x00B08
define GL_CURRENT_RASTER_DISTANCE()  0x00B09
define GL_POINT_SMOOTH()  0x00B10
define GL_POINT_SIZE()  0x00B11
define GL_POINT_SIZE_RANGE()  0x00B12
define GL_POINT_SIZE_GRANULARITY()  0x00B13
define GL_LINE_SMOOTH()  0x00B20
define GL_LINE_WIDTH()  0x00B21
define GL_LINE_WIDTH_RANGE()  0x00B22
define GL_LINE_WIDTH_GRANULARITY()  0x00B23
define GL_LINE_STIPPLE()  0x00B24
define GL_LINE_STIPPLE_PATTERN()  0x00B25
define GL_LINE_STIPPLE_REPEAT()  0x00B26
define GL_LIST_MODE()  0x00B30
define GL_MAX_LIST_NESTING()  0x00B31
define GL_LIST_BASE()  0x00B32
define GL_LIST_INDEX()  0x00B33
define GL_POLYGON_MODE()  0x00B40
define GL_POLYGON_SMOOTH()  0x00B41
define GL_POLYGON_STIPPLE()  0x00B42
define GL_EDGE_FLAG()  0x00B43
define GL_CULL_FACE()  0x00B44
define GL_CULL_FACE_MODE()  0x00B45
define GL_FRONT_FACE()  0x00B46
define GL_LIGHTING()  0x00B50
define GL_LIGHT_MODEL_LOCAL_VIEWER()  0x00B51
define GL_LIGHT_MODEL_TWO_SIDE()  0x00B52
define GL_LIGHT_MODEL_AMBIENT()  0x00B53
define GL_SHADE_MODEL()  0x00B54
define GL_COLOR_MATERIAL_FACE()  0x00B55
define GL_COLOR_MATERIAL_PARAMETER()  0x00B56
define GL_COLOR_MATERIAL()  0x00B57
define GL_FOG()  0x00B60
define GL_FOG_INDEX()  0x00B61
define GL_FOG_DENSITY()  0x00B62
define GL_FOG_START()  0x00B63
define GL_FOG_END()  0x00B64
define GL_FOG_MODE()  0x00B65
define GL_FOG_COLOR()  0x00B66
define GL_DEPTH_RANGE()  0x00B70
define GL_DEPTH_TEST()  0x00B71
define GL_DEPTH_WRITEMASK()  0x00B72
define GL_DEPTH_CLEAR_VALUE()  0x00B73
define GL_DEPTH_FUNC()  0x00B74
define GL_ACCUM_CLEAR_VALUE()  0x00B80
define GL_STENCIL_TEST()  0x00B90
define GL_STENCIL_CLEAR_VALUE()  0x00B91
define GL_STENCIL_FUNC()  0x00B92
define GL_STENCIL_VALUE_MASK()  0x00B93
define GL_STENCIL_FAIL()  0x00B94
define GL_STENCIL_PASS_DEPTH_FAIL()  0x00B95
define GL_STENCIL_PASS_DEPTH_PASS()  0x00B96
define GL_STENCIL_REF()  0x00B97
define GL_STENCIL_WRITEMASK()  0x00B98
define GL_MATRIX_MODE()  0x00BA0
define GL_NORMALIZE()  0x00BA1
define GL_VIEWPORT()  0x00BA2
define GL_MODELVIEW_STACK_DEPTH()  0x00BA3
define GL_PROJECTION_STACK_DEPTH()  0x00BA4
define GL_TEXTURE_STACK_DEPTH()  0x00BA5
define GL_MODELVIEW_MATRIX()  0x00BA6
define GL_PROJECTION_MATRIX()  0x00BA7
define GL_TEXTURE_MATRIX()  0x00BA8
define GL_ATTRIB_STACK_DEPTH()  0x00BB0
define GL_CLIENT_ATTRIB_STACK_DEPTH()  0x00BB1
define GL_ALPHA_TEST()  0x00BC0
define GL_ALPHA_TEST_FUNC()  0x00BC1
define GL_ALPHA_TEST_REF()  0x00BC2
define GL_DITHER()  0x00BD0
define GL_BLEND_DST()  0x00BE0
define GL_BLEND_SRC()  0x00BE1
define GL_BLEND()  0x00BE2
define GL_LOGIC_OP_MODE()  0x00BF0
define GL_INDEX_LOGIC_OP()  0x00BF1
define GL_COLOR_LOGIC_OP()  0x00BF2
define GL_AUX_BUFFERS()  0x00C00
define GL_DRAW_BUFFER()  0x00C01
define GL_READ_BUFFER()  0x00C02
define GL_SCISSOR_BOX()  0x00C10
define GL_SCISSOR_TEST()  0x00C11
define GL_INDEX_CLEAR_VALUE()  0x00C20
define GL_INDEX_WRITEMASK()  0x00C21
define GL_COLOR_CLEAR_VALUE()  0x00C22
define GL_COLOR_WRITEMASK()  0x00C23
define GL_INDEX_MODE()  0x00C30
define GL_RGBA_MODE()  0x00C31
define GL_DOUBLEBUFFER()  0x00C32
define GL_STEREO()  0x00C33
define GL_RENDER_MODE()  0x00C40
define GL_PERSPECTIVE_CORRECTION_HINT()  0x00C50
define GL_POINT_SMOOTH_HINT()  0x00C51
define GL_LINE_SMOOTH_HINT()  0x00C52
define GL_POLYGON_SMOOTH_HINT()  0x00C53
define GL_FOG_HINT()  0x00C54
define GL_TEXTURE_GEN_S()  0x00C60
define GL_TEXTURE_GEN_T()  0x00C61
define GL_TEXTURE_GEN_R()  0x00C62
define GL_TEXTURE_GEN_Q()  0x00C63
define GL_PIXEL_MAP_I_TO_I()  0x00C70
define GL_PIXEL_MAP_S_TO_S()  0x00C71
define GL_PIXEL_MAP_I_TO_R()  0x00C72
define GL_PIXEL_MAP_I_TO_G()  0x00C73
define GL_PIXEL_MAP_I_TO_B()  0x00C74
define GL_PIXEL_MAP_I_TO_A()  0x00C75
define GL_PIXEL_MAP_R_TO_R()  0x00C76
define GL_PIXEL_MAP_G_TO_G()  0x00C77
define GL_PIXEL_MAP_B_TO_B()  0x00C78
define GL_PIXEL_MAP_A_TO_A()  0x00C79
define GL_PIXEL_MAP_I_TO_I_SIZE()  0x00CB0
define GL_PIXEL_MAP_S_TO_S_SIZE()  0x00CB1
define GL_PIXEL_MAP_I_TO_R_SIZE()  0x00CB2
define GL_PIXEL_MAP_I_TO_G_SIZE()  0x00CB3
define GL_PIXEL_MAP_I_TO_B_SIZE()  0x00CB4
define GL_PIXEL_MAP_I_TO_A_SIZE()  0x00CB5
define GL_PIXEL_MAP_R_TO_R_SIZE()  0x00CB6
define GL_PIXEL_MAP_G_TO_G_SIZE()  0x00CB7
define GL_PIXEL_MAP_B_TO_B_SIZE()  0x00CB8
define GL_PIXEL_MAP_A_TO_A_SIZE()  0x00CB9
define GL_UNPACK_SWAP_BYTES()  0x00CF0
define GL_UNPACK_LSB_FIRST()  0x00CF1
define GL_UNPACK_ROW_LENGTH()  0x00CF2
define GL_UNPACK_SKIP_ROWS()  0x00CF3
define GL_UNPACK_SKIP_PIXELS()  0x00CF4
define GL_UNPACK_ALIGNMENT()  0x00CF5
define GL_PACK_SWAP_BYTES()  0x00D00
define GL_PACK_LSB_FIRST()  0x00D01
define GL_PACK_ROW_LENGTH()  0x00D02
define GL_PACK_SKIP_ROWS()  0x00D03
define GL_PACK_SKIP_PIXELS()  0x00D04
define GL_PACK_ALIGNMENT()  0x00D05
define GL_MAP_COLOR()  0x00D10
define GL_MAP_STENCIL()  0x00D11
define GL_INDEX_SHIFT()  0x00D12
define GL_INDEX_OFFSET()  0x00D13
define GL_RED_SCALE()  0x00D14
define GL_RED_BIAS()  0x00D15
define GL_ZOOM_X()  0x00D16
define GL_ZOOM_Y()  0x00D17
define GL_GREEN_SCALE()  0x00D18
define GL_GREEN_BIAS()  0x00D19
define GL_BLUE_SCALE()  0x00D1A
define GL_BLUE_BIAS()  0x00D1B
define GL_ALPHA_SCALE()  0x00D1C
define GL_ALPHA_BIAS()  0x00D1D
define GL_DEPTH_SCALE()  0x00D1E
define GL_DEPTH_BIAS()  0x00D1F
define GL_MAX_EVAL_ORDER()  0x00D30
define GL_MAX_LIGHTS()  0x00D31
define GL_MAX_CLIP_PLANES()  0x00D32
define GL_MAX_TEXTURE_SIZE()  0x00D33
define GL_MAX_PIXEL_MAP_TABLE()  0x00D34
define GL_MAX_ATTRIB_STACK_DEPTH()  0x00D35
define GL_MAX_MODELVIEW_STACK_DEPTH()  0x00D36
define GL_MAX_NAME_STACK_DEPTH()  0x00D37
define GL_MAX_PROJECTION_STACK_DEPTH()  0x00D38
define GL_MAX_TEXTURE_STACK_DEPTH()  0x00D39
define GL_MAX_VIEWPORT_DIMS()  0x00D3A
define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH()  0x00D3B
define GL_SUBPIXEL_BITS()  0x00D50
define GL_INDEX_BITS()  0x00D51
define GL_RED_BITS()  0x00D52
define GL_GREEN_BITS()  0x00D53
define GL_BLUE_BITS()  0x00D54
define GL_ALPHA_BITS()  0x00D55
define GL_DEPTH_BITS()  0x00D56
define GL_STENCIL_BITS()  0x00D57
define GL_ACCUM_RED_BITS()  0x00D58
define GL_ACCUM_GREEN_BITS()  0x00D59
define GL_ACCUM_BLUE_BITS()  0x00D5A
define GL_ACCUM_ALPHA_BITS()  0x00D5B
define GL_NAME_STACK_DEPTH()  0x00D70
define GL_AUTO_NORMAL()  0x00D80
define GL_MAP1_COLOR_4()  0x00D90
define GL_MAP1_INDEX()  0x00D91
define GL_MAP1_NORMAL()  0x00D92
define GL_MAP1_TEXTURE_COORD_1()  0x00D93
define GL_MAP1_TEXTURE_COORD_2()  0x00D94
define GL_MAP1_TEXTURE_COORD_3()  0x00D95
define GL_MAP1_TEXTURE_COORD_4()  0x00D96
define GL_MAP1_VERTEX_3()  0x00D97
define GL_MAP1_VERTEX_4()  0x00D98
define GL_MAP2_COLOR_4()  0x00DB0
define GL_MAP2_INDEX()  0x00DB1
define GL_MAP2_NORMAL()  0x00DB2
define GL_MAP2_TEXTURE_COORD_1()  0x00DB3
define GL_MAP2_TEXTURE_COORD_2()  0x00DB4
define GL_MAP2_TEXTURE_COORD_3()  0x00DB5
define GL_MAP2_TEXTURE_COORD_4()  0x00DB6
define GL_MAP2_VERTEX_3()  0x00DB7
define GL_MAP2_VERTEX_4()  0x00DB8
define GL_MAP1_GRID_DOMAIN()  0x00DD0
define GL_MAP1_GRID_SEGMENTS()  0x00DD1
define GL_MAP2_GRID_DOMAIN()  0x00DD2
define GL_MAP2_GRID_SEGMENTS()  0x00DD3
define GL_TEXTURE_1D()  0x00DE0
define GL_TEXTURE_2D()  0x00DE1
define GL_FEEDBACK_BUFFER_POINTER()  0x00DF0
define GL_FEEDBACK_BUFFER_SIZE()  0x00DF1
define GL_FEEDBACK_BUFFER_TYPE()  0x00DF2
define GL_SELECTION_BUFFER_POINTER()  0x00DF3
define GL_SELECTION_BUFFER_SIZE()  0x00DF4
define GL_TEXTURE_WIDTH()  0x01000
define GL_TEXTURE_HEIGHT()  0x01001
define GL_TEXTURE_INTERNAL_FORMAT()  0x01003
define GL_TEXTURE_BORDER_COLOR()  0x01004
define GL_TEXTURE_BORDER()  0x01005
define GL_DONT_CARE()  0x01100
define GL_FASTEST()  0x01101
define GL_NICEST()  0x01102
define GL_LIGHT0()  0x04000
define GL_LIGHT1()  0x04001
define GL_LIGHT2()  0x04002
define GL_LIGHT3()  0x04003
define GL_LIGHT4()  0x04004
define GL_LIGHT5()  0x04005
define GL_LIGHT6()  0x04006
define GL_LIGHT7()  0x04007
define GL_AMBIENT()  0x01200
define GL_DIFFUSE()  0x01201
define GL_SPECULAR()  0x01202
define GL_POSITION()  0x01203
define GL_SPOT_DIRECTION()  0x01204
define GL_SPOT_EXPONENT()  0x01205
define GL_SPOT_CUTOFF()  0x01206
define GL_CONSTANT_ATTENUATION()  0x01207
define GL_LINEAR_ATTENUATION()  0x01208
define GL_QUADRATIC_ATTENUATION()  0x01209
define GL_COMPILE()  0x01300
define GL_COMPILE_AND_EXECUTE()  0x01301
define GL_CLEAR()  0x01500
define GL_AND()  0x01501
define GL_AND_REVERSE()  0x01502
define GL_COPY()  0x01503
define GL_AND_INVERTED()  0x01504
define GL_NOOP()  0x01505
define GL_XOR()  0x01506
define GL_OR()  0x01507
define GL_NOR()  0x01508
define GL_EQUIV()  0x01509
define GL_INVERT()  0x0150A
define GL_OR_REVERSE()  0x0150B
define GL_COPY_INVERTED()  0x0150C
define GL_OR_INVERTED()  0x0150D
define GL_NAND()  0x0150E
define GL_SET()  0x0150F
define GL_EMISSION()  0x01600
define GL_SHININESS()  0x01601
define GL_AMBIENT_AND_DIFFUSE()  0x01602
define GL_COLOR_INDEXES()  0x01603
define GL_MODELVIEW()  0x01700
define GL_PROJECTION()  0x01701
define GL_TEXTURE()  0x01702
define GL_COLOR()  0x01800
define GL_DEPTH()  0x01801
define GL_STENCIL()  0x01802
define GL_COLOR_INDEX()  0x01900
define GL_STENCIL_INDEX()  0x01901
define GL_DEPTH_COMPONENT()  0x01902
define GL_RED()  0x01903
define GL_GREEN()  0x01904
define GL_BLUE()  0x01905
define GL_ALPHA()  0x01906
define GL_RGB()  0x01907
define GL_RGBA()  0x01908
define GL_LUMINANCE()  0x01909
define GL_LUMINANCE_ALPHA()  0x0190A
define GL_BITMAP()  0x01A00
define GL_POINT()  0x01B00
define GL_LINE()  0x01B01
define GL_FILL()  0x01B02
define GL_RENDER()  0x01C00
define GL_FEEDBACK()  0x01C01
define GL_SELECT()  0x01C02
define GL_FLAT()  0x01D00
define GL_SMOOTH()  0x01D01
define GL_KEEP()  0x01E00
define GL_REPLACE()  0x01E01
define GL_INCR()  0x01E02
define GL_DECR()  0x01E03
define GL_VENDOR()  0x01F00
define GL_RENDERER()  0x01F01
define GL_VERSION()  0x01F02
define GL_EXTENSIONS()  0x01F03
define GL_S()  0x02000
define GL_T()  0x02001
define GL_R()  0x02002
define GL_Q()  0x02003
define GL_MODULATE()  0x02100
define GL_DECAL()  0x02101
define GL_TEXTURE_ENV_MODE()  0x02200
define GL_TEXTURE_ENV_COLOR()  0x02201
define GL_TEXTURE_ENV()  0x02300
define GL_EYE_LINEAR()  0x02400
define GL_OBJECT_LINEAR()  0x02401
define GL_SPHERE_MAP()  0x02402
define GL_TEXTURE_GEN_MODE()  0x02500
define GL_OBJECT_PLANE()  0x02501
define GL_EYE_PLANE()  0x02502
define GL_NEAREST()  0x02600
define GL_LINEAR()  0x02601
define GL_NEAREST_MIPMAP_NEAREST()  0x02700
define GL_LINEAR_MIPMAP_NEAREST()  0x02701
define GL_NEAREST_MIPMAP_LINEAR()  0x02702
define GL_LINEAR_MIPMAP_LINEAR()  0x02703
define GL_TEXTURE_MAG_FILTER()  0x02800
define GL_TEXTURE_MIN_FILTER()  0x02801
define GL_TEXTURE_WRAP_S()  0x02802
define GL_TEXTURE_WRAP_T()  0x02803
define GL_CLAMP()  0x02900
define GL_REPEAT()  0x02901
define GL_CLIENT_PIXEL_STORE_BIT()  0x000000001
define GL_CLIENT_VERTEX_ARRAY_BIT()  0x000000002
define GL_CLIENT_ALL_ATTRIB_BITS()  0x0ffffffff
define GL_POLYGON_OFFSET_FACTOR()  0x08038
define GL_POLYGON_OFFSET_UNITS()  0x02A00
define GL_POLYGON_OFFSET_POINT()  0x02A01
define GL_POLYGON_OFFSET_LINE()  0x02A02
define GL_POLYGON_OFFSET_FILL()  0x08037
define GL_ALPHA4()  0x0803B
define GL_ALPHA8()  0x0803C
define GL_ALPHA12()  0x0803D
define GL_ALPHA16()  0x0803E
define GL_LUMINANCE4()  0x0803F
define GL_LUMINANCE8()  0x08040
define GL_LUMINANCE12()  0x08041
define GL_LUMINANCE16()  0x08042
define GL_LUMINANCE4_ALPHA4()  0x08043
define GL_LUMINANCE6_ALPHA2()  0x08044
define GL_LUMINANCE8_ALPHA8()  0x08045
define GL_LUMINANCE12_ALPHA4()  0x08046
define GL_LUMINANCE12_ALPHA12()  0x08047
define GL_LUMINANCE16_ALPHA16()  0x08048
define GL_INTENSITY()  0x08049
define GL_INTENSITY4()  0x0804A
define GL_INTENSITY8()  0x0804B
define GL_INTENSITY12()  0x0804C
define GL_INTENSITY16()  0x0804D
define GL_R3_G3_B2()  0x02A10
define GL_RGB4()  0x0804F
define GL_RGB5()  0x08050
define GL_RGB8()  0x08051
define GL_RGB10()  0x08052
define GL_RGB12()  0x08053
define GL_RGB16()  0x08054
define GL_RGBA2()  0x08055
define GL_RGBA4()  0x08056
define GL_RGB5_A1()  0x08057
define GL_RGBA8()  0x08058
define GL_RGB10_A2()  0x08059
define GL_RGBA12()  0x0805A
define GL_RGBA16()  0x0805B
define GL_TEXTURE_RED_SIZE()  0x0805C
define GL_TEXTURE_GREEN_SIZE()  0x0805D
define GL_TEXTURE_BLUE_SIZE()  0x0805E
define GL_TEXTURE_ALPHA_SIZE()  0x0805F
define GL_TEXTURE_LUMINANCE_SIZE()  0x08060
define GL_TEXTURE_INTENSITY_SIZE()  0x08061
define GL_PROXY_TEXTURE_1D()  0x08063
define GL_PROXY_TEXTURE_2D()  0x08064
define GL_TEXTURE_PRIORITY()  0x08066
define GL_TEXTURE_RESIDENT()  0x08067
define GL_TEXTURE_BINDING_1D()  0x08068
define GL_TEXTURE_BINDING_2D()  0x08069
define GL_VERTEX_ARRAY()  0x08074
define GL_NORMAL_ARRAY()  0x08075
define GL_COLOR_ARRAY()  0x08076
define GL_INDEX_ARRAY()  0x08077
define GL_TEXTURE_COORD_ARRAY()  0x08078
define GL_EDGE_FLAG_ARRAY()  0x08079
define GL_VERTEX_ARRAY_SIZE()  0x0807A
define GL_VERTEX_ARRAY_TYPE()  0x0807B
define GL_VERTEX_ARRAY_STRIDE()  0x0807C
define GL_NORMAL_ARRAY_TYPE()  0x0807E
define GL_NORMAL_ARRAY_STRIDE()  0x0807F
define GL_COLOR_ARRAY_SIZE()  0x08081
define GL_COLOR_ARRAY_TYPE()  0x08082
define GL_COLOR_ARRAY_STRIDE()  0x08083
define GL_INDEX_ARRAY_TYPE()  0x08085
define GL_INDEX_ARRAY_STRIDE()  0x08086
define GL_TEXTURE_COORD_ARRAY_SIZE()  0x08088
define GL_TEXTURE_COORD_ARRAY_TYPE()  0x08089
define GL_TEXTURE_COORD_ARRAY_STRIDE()  0x0808A
define GL_EDGE_FLAG_ARRAY_STRIDE()  0x0808C
define GL_VERTEX_ARRAY_POINTER()  0x0808E
define GL_NORMAL_ARRAY_POINTER()  0x0808F
define GL_COLOR_ARRAY_POINTER()  0x08090
define GL_INDEX_ARRAY_POINTER()  0x08091
define GL_TEXTURE_COORD_ARRAY_POINTER()  0x08092
define GL_EDGE_FLAG_ARRAY_POINTER()  0x08093
define GL_V2F()  0x02A20
define GL_V3F()  0x02A21
define GL_C4UB_V2F()  0x02A22
define GL_C4UB_V3F()  0x02A23
define GL_C3F_V3F()  0x02A24
define GL_N3F_V3F()  0x02A25
define GL_C4F_N3F_V3F()  0x02A26
define GL_T2F_V3F()  0x02A27
define GL_T4F_V4F()  0x02A28
define GL_T2F_C4UB_V3F()  0x02A29
define GL_T2F_C3F_V3F()  0x02A2A
define GL_T2F_N3F_V3F()  0x02A2B
define GL_T2F_C4F_N3F_V3F()  0x02A2C
define GL_T4F_C4F_N3F_V4F()  0x02A2D
define GL_EXT_vertex_array()  1
define GL_EXT_bgra()  1
define GL_EXT_paletted_texture()  1
define GL_WIN_swap_hint()  1
define GL_WIN_draw_range_elements()  1
define GL_VERTEX_ARRAY_EXT()  0x08074
define GL_NORMAL_ARRAY_EXT()  0x08075
define GL_COLOR_ARRAY_EXT()  0x08076
define GL_INDEX_ARRAY_EXT()  0x08077
define GL_TEXTURE_COORD_ARRAY_EXT()  0x08078
define GL_EDGE_FLAG_ARRAY_EXT()  0x08079
define GL_VERTEX_ARRAY_SIZE_EXT()  0x0807A
define GL_VERTEX_ARRAY_TYPE_EXT()  0x0807B
define GL_VERTEX_ARRAY_STRIDE_EXT()  0x0807C
define GL_VERTEX_ARRAY_COUNT_EXT()  0x0807D
define GL_NORMAL_ARRAY_TYPE_EXT()  0x0807E
define GL_NORMAL_ARRAY_STRIDE_EXT()  0x0807F
define GL_NORMAL_ARRAY_COUNT_EXT()  0x08080
define GL_COLOR_ARRAY_SIZE_EXT()  0x08081
define GL_COLOR_ARRAY_TYPE_EXT()  0x08082
define GL_COLOR_ARRAY_STRIDE_EXT()  0x08083
define GL_COLOR_ARRAY_COUNT_EXT()  0x08084
define GL_INDEX_ARRAY_TYPE_EXT()  0x08085
define GL_INDEX_ARRAY_STRIDE_EXT()  0x08086
define GL_INDEX_ARRAY_COUNT_EXT()  0x08087
define GL_TEXTURE_COORD_ARRAY_SIZE_EXT()  0x08088
define GL_TEXTURE_COORD_ARRAY_TYPE_EXT()  0x08089
define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT()  0x0808A
define GL_TEXTURE_COORD_ARRAY_COUNT_EXT()  0x0808B
define GL_EDGE_FLAG_ARRAY_STRIDE_EXT()  0x0808C
define GL_EDGE_FLAG_ARRAY_COUNT_EXT()  0x0808D
define GL_VERTEX_ARRAY_POINTER_EXT()  0x0808E
define GL_NORMAL_ARRAY_POINTER_EXT()  0x0808F
define GL_COLOR_ARRAY_POINTER_EXT()  0x08090
define GL_INDEX_ARRAY_POINTER_EXT()  0x08091
define GL_TEXTURE_COORD_ARRAY_POINTER_EXT()  0x08092
define GL_EDGE_FLAG_ARRAY_POINTER_EXT()  0x08093
define GL_DOUBLE_EXT()  GL_DOUBLE
define GL_BGR_EXT()  0x080E0
define GL_BGRA_EXT()  0x080E1
define GL_COLOR_TABLE_FORMAT_EXT()  0x080D8
define GL_COLOR_TABLE_WIDTH_EXT()  0x080D9
define GL_COLOR_TABLE_RED_SIZE_EXT()  0x080DA
define GL_COLOR_TABLE_GREEN_SIZE_EXT()  0x080DB
define GL_COLOR_TABLE_BLUE_SIZE_EXT()  0x080DC
define GL_COLOR_TABLE_ALPHA_SIZE_EXT()  0x080DD
define GL_COLOR_TABLE_LUMINANCE_SIZE_EXT()  0x080DE
define GL_COLOR_TABLE_INTENSITY_SIZE_EXT()  0x080DF
define GL_COLOR_INDEX1_EXT()  0x080E2
define GL_COLOR_INDEX2_EXT()  0x080E3
define GL_COLOR_INDEX4_EXT()  0x080E4
define GL_COLOR_INDEX8_EXT()  0x080E5
define GL_COLOR_INDEX12_EXT()  0x080E6
define GL_COLOR_INDEX16_EXT()  0x080E7
define GL_MAX_ELEMENTS_VERTICES_WIN()  0x080E8
define GL_MAX_ELEMENTS_INDICES_WIN()  0x080E9
define GL_PHONG_WIN()  0x080EA
define GL_PHONG_HINT_WIN()  0x080EB
define GL_FOG_SPECULAR_TEXTURE_WIN()  0x080EC
define GL_LOGIC_OP()  GL_INDEX_LOGIC_OP
define GL_TEXTURE_COMPONENTS()  GL_TEXTURE_INTERNAL_FORMAT

define GLU_VERSION_1_1()  1
define GLU_VERSION_1_2()  1
define GLU_INVALID_ENUM()  100900
define GLU_INVALID_VALUE()  100901
define GLU_OUT_OF_MEMORY()  100902
define GLU_INCOMPATIBLE_GL_VERSION()  100903
define GLU_VERSION()  100800
define GLU_EXTENSIONS()  100801
define GLU_TRUE()  GL_TRUE
define GLU_FALSE()  GL_FALSE
define GLU_SMOOTH()  100000
define GLU_FLAT()  100001
define GLU_NONE()  100002
define GLU_POINT()  100010
define GLU_LINE()  100011
define GLU_FILL()  100012
define GLU_SILHOUETTE()  100013
define GLU_OUTSIDE()  100020
define GLU_INSIDE()  100021
define GLU_TESS_MAX_COORD()  1.0e150
define GLU_TESS_WINDING_RULE()  100140
define GLU_TESS_BOUNDARY_ONLY()  100141
define GLU_TESS_TOLERANCE()  100142
define GLU_TESS_WINDING_ODD()  100130
define GLU_TESS_WINDING_NONZERO()  100131
define GLU_TESS_WINDING_POSITIVE()  100132
define GLU_TESS_WINDING_NEGATIVE()  100133
define GLU_TESS_WINDING_ABS_GEQ_TWO()  100134
define GLU_TESS_BEGIN()  100100
define GLU_TESS_VERTEX()  100101
define GLU_TESS_END()  100102
define GLU_TESS_ERROR()  100103
define GLU_TESS_EDGE_FLAG()  100104
define GLU_TESS_COMBINE()  100105
define GLU_TESS_BEGIN_DATA()  100106
define GLU_TESS_VERTEX_DATA()  100107
define GLU_TESS_END_DATA()  100108
define GLU_TESS_ERROR_DATA()  100109
define GLU_TESS_EDGE_FLAG_DATA()  100110
define GLU_TESS_COMBINE_DATA()  100111
define GLU_TESS_ERROR1()  100151
define GLU_TESS_ERROR2()  100152
define GLU_TESS_ERROR3()  100153
define GLU_TESS_ERROR4()  100154
define GLU_TESS_ERROR5()  100155
define GLU_TESS_ERROR6()  100156
define GLU_TESS_ERROR7()  100157
define GLU_TESS_ERROR8()  100158
define GLU_TESS_MISSING_BEGIN_POLYGON()  GLU_TESS_ERROR1
define GLU_TESS_MISSING_BEGIN_CONTOUR()  GLU_TESS_ERROR2
define GLU_TESS_MISSING_END_POLYGON()  GLU_TESS_ERROR3
define GLU_TESS_MISSING_END_CONTOUR()  GLU_TESS_ERROR4
define GLU_TESS_COORD_TOO_LARGE()  GLU_TESS_ERROR5
define GLU_TESS_NEED_COMBINE_CALLBACK()  GLU_TESS_ERROR6
define GLU_AUTO_LOAD_MATRIX()  100200
define GLU_CULLING()  100201
define GLU_SAMPLING_TOLERANCE()  100203
define GLU_DISPLAY_MODE()  100204
define GLU_PARAMETRIC_TOLERANCE()  100202
define GLU_SAMPLING_METHOD()  100205
define GLU_U_STEP()  100206
define GLU_V_STEP()  100207
define GLU_PATH_LENGTH()  100215
define GLU_PARAMETRIC_ERROR()  100216
define GLU_DOMAIN_DISTANCE()  100217
define GLU_MAP1_TRIM_2()  100210
define GLU_MAP1_TRIM_3()  100211
define GLU_OUTLINE_POLYGON()  100240
define GLU_OUTLINE_PATCH()  100241
define GLU_NURBS_ERROR1()  100251
define GLU_NURBS_ERROR2()  100252
define GLU_NURBS_ERROR3()  100253
define GLU_NURBS_ERROR4()  100254
define GLU_NURBS_ERROR5()  100255
define GLU_NURBS_ERROR6()  100256
define GLU_NURBS_ERROR7()  100257
define GLU_NURBS_ERROR8()  100258
define GLU_NURBS_ERROR9()  100259
define GLU_NURBS_ERROR10()  100260
define GLU_NURBS_ERROR11()  100261
define GLU_NURBS_ERROR12()  100262
define GLU_NURBS_ERROR13()  100263
define GLU_NURBS_ERROR14()  100264
define GLU_NURBS_ERROR15()  100265
define GLU_NURBS_ERROR16()  100266
define GLU_NURBS_ERROR17()  100267
define GLU_NURBS_ERROR18()  100268
define GLU_NURBS_ERROR19()  100269
define GLU_NURBS_ERROR20()  100270
define GLU_NURBS_ERROR21()  100271
define GLU_NURBS_ERROR22()  100272
define GLU_NURBS_ERROR23()  100273
define GLU_NURBS_ERROR24()  100274
define GLU_NURBS_ERROR25()  100275
define GLU_NURBS_ERROR26()  100276
define GLU_NURBS_ERROR27()  100277
define GLU_NURBS_ERROR28()  100278
define GLU_NURBS_ERROR29()  100279
define GLU_NURBS_ERROR30()  100280
define GLU_NURBS_ERROR31()  100281
define GLU_NURBS_ERROR32()  100282
define GLU_NURBS_ERROR33()  100283
define GLU_NURBS_ERROR34()  100284
define GLU_NURBS_ERROR35()  100285
define GLU_NURBS_ERROR36()  100286
define GLU_NURBS_ERROR37()  100287
define GLU_CW()  100120
define GLU_CCW()  100121
define GLU_INTERIOR()  100122
define GLU_EXTERIOR()  100123
define GLU_UNKNOWN()  100124
define GLU_BEGIN()  GLU_TESS_BEGIN
define GLU_VERTEX()  GLU_TESS_VERTEX
define GLU_END()  GLU_TESS_END
define GLU_ERROR()  GLU_TESS_ERROR
define GLU_EDGE_FLAG()  GLU_TESS_EDGE_FLAG

// ---------------------------- ShellAPI.h -------------------------------

//define ABE_LEFT()  0
define FOF_NOERRORUI()  0x400
define FOF_NOCOPYSECURITYATTRIBS()  0x800
define SEE_MASK_UNICODE()  0x4000
define SEE_MASK_NO_CONSOLE()  0x8000
define SEE_MASK_ASYNCOK()  0x100000
define SEE_MASK_HMONITOR()  0x200000
define SHERB_NOCONFIRMATION()  1
define SHERB_NOPROGRESSUI()  2
define SHERB_NOSOUND()  4
define SHGFI_ATTR_SPECIFIED()  0x20000
define SHGNLI_NOUNIQUE()  4
define PRINTACTION_OPEN()  0
define PRINTACTION_PROPERTIES()  1
define PRINTACTION_NETINSTALL()  2
define PRINTACTION_NETINSTALLLINK()  3
define PRINTACTION_TESTPAGE()  4
define PRINTACTION_OPENNETPRN()  5
define PRINTACTION_DOCUMENTDEFAULTS()  6
define PRINTACTION_SERVERPROPERTIES()  7

struct SHQUERYRBINFO
{
    int32   cbSize;
    int64   i64Size;
    int64   i64NumItems;
}

//wininet.h

define INTERNET_INVALID_PORT_NUMBER()  0
define INTERNET_DEFAULT_FTP_PORT()  21
define INTERNET_DEFAULT_GOPHER_PORT()  70
define INTERNET_DEFAULT_HTTP_PORT()  80
define INTERNET_DEFAULT_HTTPS_PORT()  443
define INTERNET_DEFAULT_SOCKS_PORT()  1080
define INTERNET_MAX_HOST_NAME_LENGTH()  256
define INTERNET_MAX_USER_NAME_LENGTH()  128
define INTERNET_MAX_PASSWORD_LENGTH()  128
define INTERNET_MAX_PORT_NUMBER_LENGTH()  5
define INTERNET_MAX_PORT_NUMBER_VALUE()  65535
define INTERNET_MAX_PATH_LENGTH()  2048
define INTERNET_MAX_SCHEME_LENGTH()  32
define INTERNET_MAX_URL_LENGTH()  INTERNET_MAX_SCHEME_LENGTH + 3 + INTERNET_MAX_PATH_LENGTH
define INTERNET_KEEP_ALIVE_UNKNOWN()  0x0ffffffff
define INTERNET_KEEP_ALIVE_ENABLED()  1
define INTERNET_KEEP_ALIVE_DISABLED()  0
define INTERNET_REQFLAG_FROM_CACHE()  1
define INTERNET_REQFLAG_ASYNC()  2
define INTERNET_REQFLAG_VIA_PROXY()  4
define INTERNET_REQFLAG_NO_HEADERS()  8
define INTERNET_REQFLAG_PASSIVE()  0x10
define INTERNET_REQFLAG_CACHE_WRITE_DISABLED()  0x40
define INTERNET_FLAG_RELOAD()  0x80000000
define INTERNET_FLAG_RAW_DATA()  0x40000000
define INTERNET_FLAG_EXISTING_CONNECT()  0x20000000
define INTERNET_FLAG_ASYNC()  0x10000000
define INTERNET_FLAG_PASSIVE()  0x8000000
define INTERNET_FLAG_NO_CACHE_WRITE()  0x4000000
define INTERNET_FLAG_DONT_CACHE()  INTERNET_FLAG_NO_CACHE_WRITE
define INTERNET_FLAG_MAKE_PERSISTENT()  0x2000000
define INTERNET_FLAG_FROM_CACHE()  0x1000000
define INTERNET_FLAG_OFFLINE()  INTERNET_FLAG_FROM_CACHE
define INTERNET_FLAG_SECURE()  0x800000
define INTERNET_FLAG_KEEP_CONNECTION()  0x400000
define INTERNET_FLAG_NO_AUTO_REDIRECT()  0x200000
define INTERNET_FLAG_READ_PREFETCH()  0x100000
define INTERNET_FLAG_NO_COOKIES()  0x80000
define INTERNET_FLAG_NO_AUTH()  0x40000
define INTERNET_FLAG_CACHE_IF_NET_FAIL()  0x10000
define INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP()  0x8000
define INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS()  0x4000
define INTERNET_FLAG_IGNORE_CERT_DATE_INVALID()  0x2000
define INTERNET_FLAG_IGNORE_CERT_CN_INVALID()  0x1000
define INTERNET_FLAG_RESYNCHRONIZE()  0x800
define INTERNET_FLAG_HYPERLINK()  0x400
define INTERNET_FLAG_NO_UI()  0x200
define INTERNET_FLAG_PRAGMA_NOCACHE()  0x100
define INTERNET_FLAG_CACHE_ASYNC()  0x80
define INTERNET_FLAG_FORMS_SUBMIT()  0x40
define INTERNET_FLAG_NEED_FILE()  0x10
define INTERNET_FLAG_MUST_CACHE_REQUEST()  INTERNET_FLAG_NEED_FILE
define INTERNET_FLAG_TRANSFER_ASCII()  FTP_TRANSFER_TYPE_ASCII
define INTERNET_FLAG_TRANSFER_BINARY()  FTP_TRANSFER_TYPE_BINARY
define SECURITY_INTERNET_MASK()  INTERNET_FLAG_IGNORE_CERT_CN_INVALID + INTERNET_FLAG_IGNORE_CERT_DATE_INVALID + INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS + INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP
define INTERNET_ERROR_MASK_INSERT_CDROM()  1
define INTERNET_OPTIONS_MASK()  not INTERNET_FLAGS_MASK
define WININET_API_FLAG_ASYNC()  1
define WININET_API_FLAG_SYNC()  4
define WININET_API_FLAG_USE_CONTEXT()  8
define INTERNET_NO_CALLBACK()  0
define INTERNET_RFC1123_FORMAT()  0
define INTERNET_RFC1123_BUFSIZE()  30
define ICU_ESCAPE()  0x80000000
define ICU_USERNAME()  0x40000000
define ICU_NO_ENCODE()  0x20000000
define ICU_DECODE()  0x10000000
define ICU_NO_META()  0x8000000
define ICU_ENCODE_SPACES_ONLY()  0x4000000
define ICU_BROWSER_MODE()  0x2000000
define INTERNET_OPEN_TYPE_PRECONFIG()  0
define INTERNET_OPEN_TYPE_DIRECT()  1
define INTERNET_OPEN_TYPE_PROXY()  3
define INTERNET_OPEN_TYPE_PRECONFIG_WITH_NO_AUTOPROXY()  4
define PRE_CONFIG_INTERNET_ACCESS()  INTERNET_OPEN_TYPE_PRECONFIG
define LOCAL_INTERNET_ACCESS()  INTERNET_OPEN_TYPE_DIRECT
define CERN_PROXY_INTERNET_ACCESS()  INTERNET_OPEN_TYPE_PROXY
define INTERNET_SERVICE_URL()  0
define INTERNET_SERVICE_FTP()  1
define INTERNET_SERVICE_GOPHER()  2
define INTERNET_SERVICE_HTTP()  3
define IRF_ASYNC()  WININET_API_FLAG_ASYNC
define IRF_SYNC()  WININET_API_FLAG_SYNC
define IRF_USE_CONTEXT()  WININET_API_FLAG_USE_CONTEXT
define IRF_NO_WAIT()  8
define ISO_GLOBAL()  1
define ISO_REGISTRY()  2
define ISO_VALID_FLAGS()  (ISO_GLOBAL + ISO_REGISTRY)
define INTERNET_OPTION_CALLBACK()  1
define INTERNET_OPTION_CONNECT_TIMEOUT()  2
define INTERNET_OPTION_CONNECT_RETRIES()  3
define INTERNET_OPTION_CONNECT_BACKOFF()  4
define INTERNET_OPTION_SEND_TIMEOUT()  5
define INTERNET_OPTION_CONTROL_SEND_TIMEOUT()  INTERNET_OPTION_SEND_TIMEOUT
define INTERNET_OPTION_RECEIVE_TIMEOUT()  6
define INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT()  INTERNET_OPTION_RECEIVE_TIMEOUT
define INTERNET_OPTION_DATA_SEND_TIMEOUT()  7
define INTERNET_OPTION_DATA_RECEIVE_TIMEOUT()  8
define INTERNET_OPTION_HANDLE_TYPE()  9
define INTERNET_OPTION_LISTEN_TIMEOUT()  11
define INTERNET_OPTION_READ_BUFFER_SIZE()  12
define INTERNET_OPTION_WRITE_BUFFER_SIZE()  13
define INTERNET_OPTION_ASYNC_ID()  15
define INTERNET_OPTION_ASYNC_PRIORITY()  16
define INTERNET_OPTION_PARENT_HANDLE()  21
define INTERNET_OPTION_KEEP_CONNECTION()  22
define INTERNET_OPTION_REQUEST_FLAGS()  23
define INTERNET_OPTION_EXTENDED_ERROR()  24
define INTERNET_OPTION_OFFLINE_MODE()  26
define INTERNET_OPTION_CACHE_STREAM_HANDLE()  27
define INTERNET_OPTION_USERNAME()  28
define INTERNET_OPTION_PASSWORD()  29
define INTERNET_OPTION_ASYNC()  30
define INTERNET_OPTION_SECURITY_FLAGS()  31
define INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT()  32
define INTERNET_OPTION_DATAFILE_NAME()  33
define INTERNET_OPTION_URL()  34
define INTERNET_OPTION_SECURITY_CERTIFICATE()  35
define INTERNET_OPTION_SECURITY_KEY_BITNESS()  36
define INTERNET_OPTION_REFRESH()  37
define INTERNET_OPTION_PROXY()  38
define INTERNET_OPTION_SETTINGS_CHANGED()  39
define INTERNET_OPTION_VERSION()  40
define INTERNET_OPTION_USER_AGENT()  41
define INTERNET_OPTION_END_BROWSER_SESSION()  42
define INTERNET_OPTION_PROXY_USERNAME()  43
define INTERNET_OPTION_PROXY_PASSWORD()  44
define INTERNET_OPTION_CONTEXT_VALUE()  45
define INTERNET_OPTION_CONNECT_LIMIT()  46
define INTERNET_OPTION_SECURITY_SELECT_CLIENT_CERT()  47
define INTERNET_OPTION_POLICY()  48
define INTERNET_OPTION_DISCONNECTED_TIMEOUT()  49
define INTERNET_OPTION_CONNECTED_STATE()  50
define INTERNET_OPTION_IDLE_STATE()  51
define INTERNET_OPTION_OFFLINE_SEMANTICS()  52
define INTERNET_OPTION_SECONDARY_CACHE_KEY()  53
define INTERNET_OPTION_CALLBACK_FILTER()  54
define INTERNET_OPTION_CONNECT_TIME()  55
define INTERNET_OPTION_SEND_THROUGHPUT()  56
define INTERNET_OPTION_RECEIVE_THROUGHPUT()  57
define INTERNET_OPTION_REQUEST_PRIORITY()  58
define INTERNET_OPTION_HTTP_VERSION()  59
define INTERNET_OPTION_RESET_URLCACHE_SESSION()  60
define INTERNET_OPTION_ERROR_MASK()  62
define INTERNET_FIRST_OPTION()  INTERNET_OPTION_CALLBACK
define INTERNET_LAST_OPTION()  INTERNET_OPTION_ERROR_MASK
define INTERNET_PRIORITY_FOREGROUND()  1000
define INTERNET_HANDLE_TYPE_INTERNET()  1
define INTERNET_HANDLE_TYPE_CONNECT_FTP()  2
define INTERNET_HANDLE_TYPE_CONNECT_GOPHER()  3
define INTERNET_HANDLE_TYPE_CONNECT_HTTP()  4
define INTERNET_HANDLE_TYPE_FTP_FIND()  5
define INTERNET_HANDLE_TYPE_FTP_FIND_HTML()  6
define INTERNET_HANDLE_TYPE_FTP_FILE()  7
define INTERNET_HANDLE_TYPE_FTP_FILE_HTML()  8
define INTERNET_HANDLE_TYPE_GOPHER_FIND()  9
define INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML()  10
define INTERNET_HANDLE_TYPE_GOPHER_FILE()  11
define INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML()  12
define INTERNET_HANDLE_TYPE_HTTP_REQUEST()  13
define SECURITY_FLAG_SECURE()  1
define SECURITY_FLAG_STRENGTH_WEAK()  0x10000000
define SECURITY_FLAG_STRENGTH_MEDIUM()  0x40000000
define SECURITY_FLAG_STRENGTH_STRONG()  0x20000000
define SECURITY_FLAG_UNKNOWNBIT()  0x80000000
define SECURITY_FLAG_NORMALBITNESS()  SECURITY_FLAG_STRENGTH_WEAK
define SECURITY_FLAG_SSL()  2
define SECURITY_FLAG_SSL3()  4
define SECURITY_FLAG_PCT()  8
define SECURITY_FLAG_PCT4()  0x10
define SECURITY_FLAG_IETFSSL4()  0x20
define SECURITY_FLAG_40BIT()  SECURITY_FLAG_STRENGTH_WEAK
define SECURITY_FLAG_128BIT()  SECURITY_FLAG_STRENGTH_STRONG
define SECURITY_FLAG_56BIT()  SECURITY_FLAG_STRENGTH_MEDIUM
define SECURITY_FLAG_IGNORE_REVOCATION()  0x80
define SECURITY_FLAG_IGNORE_UNKNOWN_CA()  0x100
define SECURITY_FLAG_IGNORE_WRONG_USAGE()  0x200
define SECURITY_FLAG_IGNORE_CERT_CN_INVALID()  INTERNET_FLAG_IGNORE_CERT_CN_INVALID
define SECURITY_FLAG_IGNORE_CERT_DATE_INVALID()  INTERNET_FLAG_IGNORE_CERT_DATE_INVALID
define SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS()  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS
define SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP()  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP
define SECURITY_SET_MASK()  (SECURITY_FLAG_IGNORE_REVOCATION +...
                        SECURITY_FLAG_IGNORE_UNKNOWN_CA +...
                        SECURITY_FLAG_IGNORE_CERT_CN_INVALID +...
                        SECURITY_FLAG_IGNORE_CERT_DATE_INVALID +...
                        SECURITY_FLAG_IGNORE_WRONG_USAGE)

define INTERNET_STATUS_RESOLVING_NAME()  10
define INTERNET_STATUS_NAME_RESOLVED()  11
define INTERNET_STATUS_CONNECTING_TO_SERVER()  20
define INTERNET_STATUS_CONNECTED_TO_SERVER()  21
define INTERNET_STATUS_SENDING_REQUEST()  30
define INTERNET_STATUS_REQUEST_SENT()  31
define INTERNET_STATUS_RECEIVING_RESPONSE()  40
define INTERNET_STATUS_RESPONSE_RECEIVED()  41
define INTERNET_STATUS_CTL_RESPONSE_RECEIVED()  42
define INTERNET_STATUS_PREFETCH()  43
define INTERNET_STATUS_CLOSING_CONNECTION()  50
define INTERNET_STATUS_CONNECTION_CLOSED()  51
define INTERNET_STATUS_HANDLE_CREATED()  60
define INTERNET_STATUS_HANDLE_CLOSING()  70
define INTERNET_STATUS_REQUEST_COMPLETE()  100
define INTERNET_STATUS_REDIRECT()  110
define INTERNET_STATUS_INTERMEDIATE_RESPONSE()  120
define INTERNET_STATUS_STATE_CHANGE()  200
define INTERNET_STATE_CONNECTED()  1
define INTERNET_STATE_DISCONNECTED()  2
define INTERNET_STATE_DISCONNECTED_BY_USER()  0x10
define INTERNET_STATE_IDLE()  0x100
define INTERNET_STATE_BUSY()  0x200
define INTERNET_INVALID_STATUS_CALLBACK()  0x0ffffffff
define FTP_TRANSFER_TYPE_UNKNOWN()  0
define FTP_TRANSFER_TYPE_ASCII()  1
define FTP_TRANSFER_TYPE_BINARY()  2
define FTP_TRANSFER_TYPE_MASK()  (FTP_TRANSFER_TYPE_ASCII + FTP_TRANSFER_TYPE_BINARY)
define MAX_GOPHER_DISPLAY_TEXT()  128
define MAX_GOPHER_SELECTOR_TEXT()  256
define MAX_GOPHER_HOST_NAME()  INTERNET_MAX_HOST_NAME_LENGTH
define MAX_GOPHER_LOCATOR_LENGTH()  1+ MAX_GOPHER_DISPLAY_TEXT+ 1 + MAX_GOPHER_SELECTOR_TEXT+ 1+ MAX_GOPHER_HOST_NAME+ 1+ INTERNET_MAX_PORT_NUMBER_LENGTH+ 1+ 1+ 2
define GOPHER_TYPE_TEXT_FILE()  1
define GOPHER_TYPE_DIRECTORY()  2
define GOPHER_TYPE_CSO()  4
define GOPHER_TYPE_ERROR()  8
define GOPHER_TYPE_MAC_BINHEX()  0x10
define GOPHER_TYPE_DOS_ARCHIVE()  0x20
define GOPHER_TYPE_UNIX_UUENCODED()  0x40
define GOPHER_TYPE_INDEX_SERVER()  0x80
define GOPHER_TYPE_TELNET()  0x100
define GOPHER_TYPE_BINARY()  0x200
define GOPHER_TYPE_REDUNDANT()  0x400
define GOPHER_TYPE_TN3270()  0x800
define GOPHER_TYPE_GIF()  0x1000
define GOPHER_TYPE_IMAGE()  0x2000
define GOPHER_TYPE_BITMAP()  0x4000
define GOPHER_TYPE_MOVIE()  0x8000
define GOPHER_TYPE_SOUND()  0x10000
define GOPHER_TYPE_HTML()  0x20000
define GOPHER_TYPE_PDF()  0x40000
define GOPHER_TYPE_CALENDAR()  0x80000
define GOPHER_TYPE_INLINE()  0x100000
define GOPHER_TYPE_UNKNOWN()  0x20000000
define GOPHER_TYPE_ASK()  0x40000000
define GOPHER_TYPE_GOPHER_PLUS()  0x80000000
define GOPHER_TEMP()  GOPHER_TYPE_TEXT_FILE+GOPHER_TYPE_MAC_BINHEX+GOPHER_TYPE_DOS_ARCHIVE+GOPHER_TYPE_UNIX_UUENCODED+GOPHER_TYPE_BINARY
define GOPHER_TYPE_FILE_MASK()  GOPHER_TEMP+ GOPHER_TYPE_GIF+ GOPHER_TYPE_IMAGE+ GOPHER_TYPE_BITMAP+GOPHER_TYPE_MOVIE+GOPHER_TYPE_SOUND+ GOPHER_TYPE_HTML+GOPHER_TYPE_PDF+GOPHER_TYPE_CALENDAR+GOPHER_TYPE_INLINE
define MAX_GOPHER_CATEGORY_NAME()  128
define MAX_GOPHER_ATTRIBUTE_NAME()  128
define MIN_GOPHER_ATTRIBUTE_LENGTH()  256
define GOPHER_INFO_CATEGORY()  "+INFO"
define GOPHER_ADMIN_CATEGORY()  "+ADMIN"
define GOPHER_VIEWS_CATEGORY()  "+VIEWS"
define GOPHER_ABSTRACT_CATEGORY()  "+ABSTRACT"
define GOPHER_VERONICA_CATEGORY()  "+VERONICA"
define GOPHER_ADMIN_ATTRIBUTE()  "Admin"
define GOPHER_MOD_DATE_ATTRIBUTE()  "Mod-Date"
define GOPHER_TTL_ATTRIBUTE()  "TTL"
define GOPHER_SCORE_ATTRIBUTE()  "Score"
define GOPHER_RANGE_ATTRIBUTE()  "Score-range"
define GOPHER_SITE_ATTRIBUTE()  "Site"
define GOPHER_ORG_ATTRIBUTE()  "Org"
define GOPHER_LOCATION_ATTRIBUTE()  "Loc"
define GOPHER_GEOG_ATTRIBUTE()  "Geog"
define GOPHER_TIMEZONE_ATTRIBUTE()  "TZ"
define GOPHER_PROVIDER_ATTRIBUTE()  "Provider"
define GOPHER_VERSION_ATTRIBUTE()  "Version"
define GOPHER_ABSTRACT_ATTRIBUTE()  "Abstract"
define GOPHER_VIEW_ATTRIBUTE()  "View"
define GOPHER_TREEWALK_ATTRIBUTE()  "treewalk"
define GOPHER_ATTRIBUTE_ID_BASE()  0x0abcccc00
define GOPHER_CATEGORY_ID_ALL()  (GOPHER_ATTRIBUTE_ID_BASE + 1)
define GOPHER_CATEGORY_ID_INFO()  (GOPHER_ATTRIBUTE_ID_BASE + 2)
define GOPHER_CATEGORY_ID_ADMIN()  (GOPHER_ATTRIBUTE_ID_BASE + 3)
define GOPHER_CATEGORY_ID_VIEWS()  (GOPHER_ATTRIBUTE_ID_BASE + 4)
define GOPHER_CATEGORY_ID_ABSTRACT()  (GOPHER_ATTRIBUTE_ID_BASE + 5)
define GOPHER_CATEGORY_ID_VERONICA()  (GOPHER_ATTRIBUTE_ID_BASE + 6)
define GOPHER_CATEGORY_ID_ASK()  (GOPHER_ATTRIBUTE_ID_BASE + 7)
define GOPHER_CATEGORY_ID_UNKNOWN()  (GOPHER_ATTRIBUTE_ID_BASE + 8)
define GOPHER_ATTRIBUTE_ID_ALL()  (GOPHER_ATTRIBUTE_ID_BASE + 9)
define GOPHER_ATTRIBUTE_ID_ADMIN()  (GOPHER_ATTRIBUTE_ID_BASE + 10)
define GOPHER_ATTRIBUTE_ID_MOD_DATE()  (GOPHER_ATTRIBUTE_ID_BASE + 11)
define GOPHER_ATTRIBUTE_ID_TTL()  (GOPHER_ATTRIBUTE_ID_BASE + 12)
define GOPHER_ATTRIBUTE_ID_SCORE()  (GOPHER_ATTRIBUTE_ID_BASE + 13)
define GOPHER_ATTRIBUTE_ID_RANGE()  (GOPHER_ATTRIBUTE_ID_BASE + 14)
define GOPHER_ATTRIBUTE_ID_SITE()  (GOPHER_ATTRIBUTE_ID_BASE + 15)
define GOPHER_ATTRIBUTE_ID_ORG()  (GOPHER_ATTRIBUTE_ID_BASE + 16)
define GOPHER_ATTRIBUTE_ID_LOCATION()  (GOPHER_ATTRIBUTE_ID_BASE + 17)
define GOPHER_ATTRIBUTE_ID_GEOG()  (GOPHER_ATTRIBUTE_ID_BASE + 18)
define GOPHER_ATTRIBUTE_ID_TIMEZONE()  (GOPHER_ATTRIBUTE_ID_BASE + 19)
define GOPHER_ATTRIBUTE_ID_PROVIDER()  (GOPHER_ATTRIBUTE_ID_BASE + 20)
define GOPHER_ATTRIBUTE_ID_VERSION()  (GOPHER_ATTRIBUTE_ID_BASE + 21)
define GOPHER_ATTRIBUTE_ID_ABSTRACT()  (GOPHER_ATTRIBUTE_ID_BASE + 22)
define GOPHER_ATTRIBUTE_ID_VIEW()  (GOPHER_ATTRIBUTE_ID_BASE + 23)
define GOPHER_ATTRIBUTE_ID_TREEWALK()  (GOPHER_ATTRIBUTE_ID_BASE + 24)
define GOPHER_ATTRIBUTE_ID_UNKNOWN()  (GOPHER_ATTRIBUTE_ID_BASE + 25)
define HTTP_MAJOR_VERSION()  1
define HTTP_MINOR_VERSION()  0
define HTTP_VERSION()  "HTTP/1.0"
define HTTP_QUERY_MIME_VERSION()  0
define HTTP_QUERY_CONTENT_TYPE()  1
define HTTP_QUERY_CONTENT_TRANSFER_ENCODING()  2
define HTTP_QUERY_CONTENT_ID()  3
define HTTP_QUERY_CONTENT_DESCRIPTION()  4
define HTTP_QUERY_CONTENT_LENGTH()  5
define HTTP_QUERY_CONTENT_LANGUAGE()  6
define HTTP_QUERY_ALLOW()  7
define HTTP_QUERY_PUBLIC()  8
define HTTP_QUERY_DATE()  9
define HTTP_QUERY_EXPIRES()  10
define HTTP_QUERY_LAST_MODIFIED()  11
define HTTP_QUERY_MESSAGE_ID()  12
define HTTP_QUERY_URI()  13
define HTTP_QUERY_DERIVED_FROM()  14
define HTTP_QUERY_COST()  15
define HTTP_QUERY_LINK()  16
define HTTP_QUERY_PRAGMA()  17
define HTTP_QUERY_VERSION()  18
define HTTP_QUERY_STATUS_CODE()  19
define HTTP_QUERY_STATUS_TEXT()  20
define HTTP_QUERY_RAW_HEADERS()  21
define HTTP_QUERY_RAW_HEADERS_CRLF()  22
define HTTP_QUERY_CONNECTION()  23
define HTTP_QUERY_ACCEPT()  24
define HTTP_QUERY_ACCEPT_CHARSET()  25
define HTTP_QUERY_ACCEPT_ENCODING()  26
define HTTP_QUERY_ACCEPT_LANGUAGE()  27
define HTTP_QUERY_AUTHORIZATION()  28
define HTTP_QUERY_CONTENT_ENCODING()  29
define HTTP_QUERY_FORWARDED()  30
define HTTP_QUERY_FROM()  31
define HTTP_QUERY_IF_MODIFIED_SINCE()  32
define HTTP_QUERY_LOCATION()  33
define HTTP_QUERY_ORIG_URI()  34
define HTTP_QUERY_REFERER()  35
define HTTP_QUERY_RETRY_AFTER()  36
define HTTP_QUERY_SERVER()  37
define HTTP_QUERY_TITLE()  38
define HTTP_QUERY_USER_AGENT()  39
define HTTP_QUERY_WWW_AUTHENTICATE()  40
define HTTP_QUERY_PROXY_AUTHENTICATE()  41
define HTTP_QUERY_ACCEPT_RANGES()  42
define HTTP_QUERY_SET_COOKIE()  43
define HTTP_QUERY_COOKIE()  44
define HTTP_QUERY_REQUEST_METHOD()  45
define HTTP_QUERY_REFRESH()  46
define HTTP_QUERY_CONTENT_DISPOSITION()  47
define HTTP_QUERY_AGE()  48
define HTTP_QUERY_CACHE_CONTROL()  49
define HTTP_QUERY_CONTENT_BASE()  50
define HTTP_QUERY_CONTENT_LOCATION()  51
define HTTP_QUERY_CONTENT_MD5()  52
define HTTP_QUERY_CONTENT_RANGE()  53
define HTTP_QUERY_ETAG()  54
define HTTP_QUERY_HOST()  55
define HTTP_QUERY_IF_MATCH()  56
define HTTP_QUERY_IF_NONE_MATCH()  57
define HTTP_QUERY_IF_RANGE()  58
define HTTP_QUERY_IF_UNMODIFIED_SINCE()  59
define HTTP_QUERY_MAX_FORWARDS()  60
define HTTP_QUERY_PROXY_AUTHORIZATION()  61
define HTTP_QUERY_RANGE()  62
define HTTP_QUERY_TRANSFER_ENCODING()  63
define HTTP_QUERY_UPGRADE()  64
define HTTP_QUERY_VARY()  65
define HTTP_QUERY_VIA()  66
define HTTP_QUERY_WARNING()  67
define HTTP_QUERY_MAX()  67
define HTTP_QUERY_CUSTOM()  65535
define HTTP_QUERY_FLAG_REQUEST_HEADERS()  0x80000000
define HTTP_QUERY_FLAG_SYSTEMTIME()  0x40000000
define HTTP_QUERY_FLAG_NUMBER()  0x20000000
define HTTP_QUERY_FLAG_COALESCE()  0x10000000

define HTTP_QUERY_MODIFIER_FLAGS_MASK()  (HTTP_QUERY_FLAG_REQUEST_HEADERS ...
                                     + HTTP_QUERY_FLAG_SYSTEMTIME ...
                                     + HTTP_QUERY_FLAG_NUMBER ...
                                     + HTTP_QUERY_FLAG_COALESCE)

define HTTP_QUERY_HEADER_MASK()  not HTTP_QUERY_MODIFIER_FLAGS_MASK
define HTTP_STATUS_CONTINUE()  100
define HTTP_STATUS_SWITCH_PROTOCOLS()  101
define HTTP_STATUS_OK()  200
define HTTP_STATUS_CREATED()  201
define HTTP_STATUS_ACCEPTED()  202
define HTTP_STATUS_PARTIAL()  203
define HTTP_STATUS_NO_CONTENT()  204
define HTTP_STATUS_RESET_CONTENT()  205
define HTTP_STATUS_PARTIAL_CONTENT()  206
define HTTP_STATUS_AMBIGUOUS()  300
define HTTP_STATUS_MOVED()  301
define HTTP_STATUS_REDIRECT()  302
define HTTP_STATUS_REDIRECT_METHOD()  303
define HTTP_STATUS_NOT_MODIFIED()  304
define HTTP_STATUS_USE_PROXY()  305
define HTTP_STATUS_REDIRECT_KEEP_VERB()  307
define HTTP_STATUS_BAD_REQUEST()  400
define HTTP_STATUS_DENIED()  401
define HTTP_STATUS_PAYMENT_REQ()  402
define HTTP_STATUS_FORBIDDEN()  403
define HTTP_STATUS_NOT_FOUND()  404
define HTTP_STATUS_BAD_METHOD()  405
define HTTP_STATUS_NONE_ACCEPTABLE()  406
define HTTP_STATUS_PROXY_AUTH_REQ()  407
define HTTP_STATUS_REQUEST_TIMEOUT()  408
define HTTP_STATUS_CONFLICT()  409
define HTTP_STATUS_GONE()  410
define HTTP_STATUS_LENGTH_REQUIRED()  411
define HTTP_STATUS_PRECOND_FAILED()  412
define HTTP_STATUS_REQUEST_TOO_LARGE()  413
define HTTP_STATUS_URI_TOO_LONG()  414
define HTTP_STATUS_UNSUPPORTED_MEDIA()  415
define HTTP_STATUS_SERVER_ERROR()  500
define HTTP_STATUS_NOT_SUPPORTED()  501
define HTTP_STATUS_BAD_GATEWAY()  502
define HTTP_STATUS_SERVICE_UNAVAIL()  503
define HTTP_STATUS_GATEWAY_TIMEOUT()  504
define HTTP_STATUS_VERSION_NOT_SUP()  505
define HTTP_STATUS_FIRST()  HTTP_STATUS_CONTINUE
define HTTP_STATUS_LAST()  HTTP_STATUS_VERSION_NOT_SUP
define HTTP_ADDREQ_INDEX_MASK()  0x0FFFF
define HTTP_ADDREQ_FLAGS_MASK()  0x0FFFF0000
define HTTP_ADDREQ_FLAG_ADD_IF_NEW()  0x10000000
define HTTP_ADDREQ_FLAG_ADD()  0x20000000
define HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA()  0x40000000
define HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON()  0x1000000
define HTTP_ADDREQ_FLAG_COALESCE()  HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA
define HTTP_ADDREQ_FLAG_REPLACE()  0x80000000
define HSR_ASYNC()  WININET_API_FLAG_ASYNC
define HSR_SYNC()  WININET_API_FLAG_SYNC
define HSR_USE_CONTEXT()  WININET_API_FLAG_USE_CONTEXT
define HSR_INITIATE()  8
define HSR_DOWNLOAD()  0x10
define HSR_CHUNKED()  0x20
define FLAGS_ERROR_UI_FILTER_FOR_ERRORS()  1
define FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS()  2
define FLAGS_ERROR_UI_FLAGS_GENERATE_DATA()  4
define FLAGS_ERROR_UI_FLAGS_NO_UI()  8
define FLAGS_ERROR_UI_SERIALIZE_DIALOGS()  0x10
define INTERNET_ERROR_BASE()  12000
define ERROR_INTERNET_OUT_OF_HANDLES()  (INTERNET_ERROR_BASE + 1)
define ERROR_INTERNET_TIMEOUT()  (INTERNET_ERROR_BASE + 2)
define ERROR_INTERNET_EXTENDED_ERROR()  (INTERNET_ERROR_BASE + 3)
define ERROR_INTERNET_INTERNAL_ERROR()  (INTERNET_ERROR_BASE + 4)
define ERROR_INTERNET_INVALID_URL()  (INTERNET_ERROR_BASE + 5)
define ERROR_INTERNET_UNRECOGNIZED_SCHEME()  (INTERNET_ERROR_BASE + 6)
define ERROR_INTERNET_NAME_NOT_RESOLVED()  (INTERNET_ERROR_BASE + 7)
define ERROR_INTERNET_PROTOCOL_NOT_FOUND()  (INTERNET_ERROR_BASE + 8)
define ERROR_INTERNET_INVALID_OPTION()  (INTERNET_ERROR_BASE + 9)
define ERROR_INTERNET_BAD_OPTION_LENGTH()  (INTERNET_ERROR_BASE + 10)
define ERROR_INTERNET_OPTION_NOT_SETTABLE()  (INTERNET_ERROR_BASE + 11)
define ERROR_INTERNET_SHUTDOWN()  (INTERNET_ERROR_BASE + 12)
define ERROR_INTERNET_INCORRECT_USER_NAME()  (INTERNET_ERROR_BASE + 13)
define ERROR_INTERNET_INCORRECT_PASSWORD()  (INTERNET_ERROR_BASE + 14)
define ERROR_INTERNET_LOGIN_FAILURE()  (INTERNET_ERROR_BASE + 15)
define ERROR_INTERNET_INVALID_OPERATION()  (INTERNET_ERROR_BASE + 16)
define ERROR_INTERNET_OPERATION_CANCELLED()  (INTERNET_ERROR_BASE + 17)
define ERROR_INTERNET_INCORRECT_HANDLE_TYPE()  (INTERNET_ERROR_BASE + 18)
define ERROR_INTERNET_INCORRECT_HANDLE_STATE()  (INTERNET_ERROR_BASE + 19)
define ERROR_INTERNET_NOT_PROXY_REQUEST()  (INTERNET_ERROR_BASE + 20)
define ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND()  (INTERNET_ERROR_BASE + 21)
define ERROR_INTERNET_BAD_REGISTRY_PARAMETER()  (INTERNET_ERROR_BASE + 22)
define ERROR_INTERNET_NO_DIRECT_ACCESS()  (INTERNET_ERROR_BASE + 23)
define ERROR_INTERNET_NO_CONTEXT()  (INTERNET_ERROR_BASE + 24)
define ERROR_INTERNET_NO_CALLBACK()  (INTERNET_ERROR_BASE + 25)
define ERROR_INTERNET_REQUEST_PENDING()  (INTERNET_ERROR_BASE + 26)
define ERROR_INTERNET_INCORRECT_FORMAT()  (INTERNET_ERROR_BASE + 27)
define ERROR_INTERNET_ITEM_NOT_FOUND()  (INTERNET_ERROR_BASE + 28)
define ERROR_INTERNET_CANNOT_CONNECT()  (INTERNET_ERROR_BASE + 29)
define ERROR_INTERNET_CONNECTION_ABORTED()  (INTERNET_ERROR_BASE + 30)
define ERROR_INTERNET_CONNECTION_RESET()  (INTERNET_ERROR_BASE + 31)
define ERROR_INTERNET_FORCE_RETRY()  (INTERNET_ERROR_BASE + 32)
define ERROR_INTERNET_INVALID_PROXY_REQUEST()  (INTERNET_ERROR_BASE + 33)
define ERROR_INTERNET_NEED_UI()  (INTERNET_ERROR_BASE + 34)
define ERROR_INTERNET_HANDLE_EXISTS()  (INTERNET_ERROR_BASE + 36)
define ERROR_INTERNET_SEC_CERT_DATE_INVALID()  (INTERNET_ERROR_BASE + 37)
define ERROR_INTERNET_SEC_CERT_CN_INVALID()  (INTERNET_ERROR_BASE + 38)
define ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR()  (INTERNET_ERROR_BASE + 39)
define ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR()  (INTERNET_ERROR_BASE + 40)
define ERROR_INTERNET_MIXED_SECURITY()  (INTERNET_ERROR_BASE + 41)
define ERROR_INTERNET_CHG_POST_IS_NON_SECURE()  (INTERNET_ERROR_BASE + 42)
define ERROR_INTERNET_POST_IS_NON_SECURE()  (INTERNET_ERROR_BASE + 43)
define ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED()  (INTERNET_ERROR_BASE + 44)
define ERROR_INTERNET_INVALID_CA()  (INTERNET_ERROR_BASE + 45)
define ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP()  (INTERNET_ERROR_BASE + 46)
define ERROR_INTERNET_ASYNC_THREAD_FAILED()  (INTERNET_ERROR_BASE + 47)
define ERROR_INTERNET_REDIRECT_SCHEME_CHANGE()  (INTERNET_ERROR_BASE + 48)
define ERROR_INTERNET_DIALOG_PENDING()  (INTERNET_ERROR_BASE + 49)
define ERROR_INTERNET_RETRY_DIALOG()  (INTERNET_ERROR_BASE + 50)
define ERROR_INTERNET_HTTPS_HTTP_SUBMIT_REDIR()  (INTERNET_ERROR_BASE + 52)
define ERROR_INTERNET_INSERT_CDROM()  (INTERNET_ERROR_BASE + 53)
define ERROR_FTP_TRANSFER_IN_PROGRESS()  (INTERNET_ERROR_BASE + 110)
define ERROR_FTP_DROPPED()  (INTERNET_ERROR_BASE + 111)
define ERROR_FTP_NO_PASSIVE_MODE()  (INTERNET_ERROR_BASE + 112)
define ERROR_GOPHER_PROTOCOL_ERROR()  (INTERNET_ERROR_BASE + 130)
define ERROR_GOPHER_NOT_FILE()  (INTERNET_ERROR_BASE + 131)
define ERROR_GOPHER_DATA_ERROR()  (INTERNET_ERROR_BASE + 132)
define ERROR_GOPHER_END_OF_DATA()  (INTERNET_ERROR_BASE + 133)
define ERROR_GOPHER_INVALID_LOCATOR()  (INTERNET_ERROR_BASE + 134)
define ERROR_GOPHER_INCORRECT_LOCATOR_TYPE()  (INTERNET_ERROR_BASE + 135)
define ERROR_GOPHER_NOT_GOPHER_PLUS()  (INTERNET_ERROR_BASE + 136)
define ERROR_GOPHER_ATTRIBUTE_NOT_FOUND()  (INTERNET_ERROR_BASE + 137)
define ERROR_GOPHER_UNKNOWN_LOCATOR()  (INTERNET_ERROR_BASE + 138)
define ERROR_HTTP_HEADER_NOT_FOUND()  (INTERNET_ERROR_BASE + 150)
define ERROR_HTTP_DOWNLEVEL_SERVER()  (INTERNET_ERROR_BASE + 151)
define ERROR_HTTP_INVALID_SERVER_RESPONSE()  (INTERNET_ERROR_BASE + 152)
define ERROR_HTTP_INVALID_HEADER()  (INTERNET_ERROR_BASE + 153)
define ERROR_HTTP_INVALID_QUERY_REQUEST()  (INTERNET_ERROR_BASE + 154)
define ERROR_HTTP_HEADER_ALREADY_EXISTS()  (INTERNET_ERROR_BASE + 155)
define ERROR_HTTP_REDIRECT_FAILED()  (INTERNET_ERROR_BASE + 156)
define ERROR_HTTP_NOT_REDIRECTED()  (INTERNET_ERROR_BASE + 160)
define ERROR_HTTP_COOKIE_NEEDS_CONFIRMATION()  (INTERNET_ERROR_BASE + 161)
define ERROR_HTTP_COOKIE_DECLINED()  (INTERNET_ERROR_BASE + 162)
define ERROR_HTTP_REDIRECT_NEEDS_CONFIRMATION()  (INTERNET_ERROR_BASE + 168)
define ERROR_INTERNET_SECURITY_CHANNEL_ERROR()  (INTERNET_ERROR_BASE + 157)
define ERROR_INTERNET_UNABLE_TO_CACHE_FILE()  (INTERNET_ERROR_BASE + 158)
define ERROR_INTERNET_TCPIP_NOT_INSTALLED()  (INTERNET_ERROR_BASE + 159)
define ERROR_INTERNET_DISCONNECTED()  (INTERNET_ERROR_BASE + 163)
define ERROR_INTERNET_SERVER_UNREACHABLE()  (INTERNET_ERROR_BASE + 164)
define ERROR_INTERNET_PROXY_SERVER_UNREACHABLE()  (INTERNET_ERROR_BASE + 165)
define ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT()  (INTERNET_ERROR_BASE + 166)
define ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT()  (INTERNET_ERROR_BASE + 167)
define ERROR_INTERNET_SEC_INVALID_CERT()  (INTERNET_ERROR_BASE + 169)
define ERROR_INTERNET_SEC_CERT_REVOKED()  (INTERNET_ERROR_BASE + 170)
define ERROR_INTERNET_FAILED_DUETOSECURITYCHECK()  (INTERNET_ERROR_BASE + 171)
define INTERNET_ERROR_LAST()  ERROR_INTERNET_FAILED_DUETOSECURITYCHECK
define NORMAL_CACHE_ENTRY()  1
define COOKIE_CACHE_ENTRY()  0x100000
define URLHISTORY_CACHE_ENTRY()  0x200000
define TRACK_OFFLINE_CACHE_ENTRY()  0x10
define TRACK_ONLINE_CACHE_ENTRY()  0x20
define STICKY_CACHE_ENTRY()  4
define SPARSE_CACHE_ENTRY()  0x10000
define URLCACHE_FIND_DEFAULT_FILTER()  NORMAL_CACHE_ENTRY ...
+ COOKIE_CACHE_ENTRY ...
+ URLHISTORY_CACHE_ENTRY ...
+ TRACK_OFFLINE_CACHE_ENTRY ...
+ TRACK_ONLINE_CACHE_ENTRY ...
+ STICKY_CACHE_ENTRY
define CACHE_ENTRY_ATTRIBUTE_FC()  4
define CACHE_ENTRY_HITRATE_FC()  0x10
define CACHE_ENTRY_MODTIME_FC()  0x40
define CACHE_ENTRY_EXPTIME_FC()  0x80
define CACHE_ENTRY_ACCTIME_FC()  0x100
define CACHE_ENTRY_SYNCTIME_FC()  0x200
define CACHE_ENTRY_HEADERINFO_FC()  0x400
define CACHE_ENTRY_EXEMPT_DELTA_FC()  0x800
define INTERNET_DIAL_UNATTENDED()  0x8000
define INTERENT_GOONLINE_REFRESH()  1
define INTERENT_GOONLINE_MASK()  1
define INTERNET_AUTODIAL_FORCE_ONLINE()  1
define INTERNET_AUTODIAL_FORCE_UNATTENDED()  2
define INTERNET_AUTODIAL_FAILIFSECURITYCHECK()  4
define INTERNET_AUTODIAL_FLAGS_MASK()  (INTERNET_AUTODIAL_FORCE_ONLINE + INTERNET_AUTODIAL_FORCE_UNATTENDED + INTERNET_AUTODIAL_FAILIFSECURITYCHECK)
define INTERNET_CONNECTION_MODEM()  1
define INTERNET_CONNECTION_LAN()  2
define INTERNET_CONNECTION_PROXY()  4
define INTERNET_CONNECTION_MODEM_BUSY()  8
define INTERNET_CUSTOMDIAL_CONNECT()  0
define INTERNET_CUSTOMDIAL_UNATTENDED()  1
define INTERNET_CUSTOMDIAL_DISCONNECT()  2
define INTERNET_CUSTOMDIAL_SHOWOFFLINE()  4
define INTERNET_CUSTOMDIAL_SAFE_FOR_UNATTENDED()  1
define INTERNET_CUSTOMDIAL_WILL_SUPPLY_STATE()  2
define INTERNET_CUSTOMDIAL_CAN_HANGUP()  4
define INTERNET_DIALSTATE_DISCONNECTED()  1
define ISO_FORCE_DISCONNECTED()  1
define INTERNET_SCHEME_PARTIAL()  -2
define INTERNET_SCHEME_UNKNOWN()  -1
define INTERNET_SCHEME_DEFAULT()  0
define INTERNET_SCHEME_FTP()  1
define INTERNET_SCHEME_GOPHER()  2
define INTERNET_SCHEME_HTTP()  3
define INTERNET_SCHEME_HTTPS()  4
define INTERNET_SCHEME_FILE()  5
define INTERNET_SCHEME_NEWS()  6
define INTERNET_SCHEME_MAILTO()  7
define INTERNET_SCHEME_SOCKS()  8
define INTERNET_SCHEME_FIRST()  INTERNET_SCHEME_FTP
define INTERNET_SCHEME_LAST()  INTERNET_SCHEME_SOCKS

struct INTERNET_ASYNC_RESULT
{
    int32   dwResult;
    int32   dwError;
}

struct INTERNET_PROXY_INFO
{
    int32   dwAccessType;
    int32   lpszProxy;
    int32   lpszProxyBypass;
}

struct INTERNET_VERSION_INFO
{
    int32   dwMajorVersion;
    int32   dwMinorVersion;
}

struct HTTP_VERSION_INFO
{
    int32   dwMajorVersion;
    int32   dwMinorVersion;
}

struct INTERNET_CONNECTED_INFO
{
    int32   dwConnectedState;
    int32   dwFlags;
}

struct URL_COMPONENTSA
{
    int32   dwStructSize;
    int32   lpszScheme;
    int32   dwSchemeLength;
    int32   nScheme;
    int32   lpszHostName;
    int32   dwHostNameLength;
    int16   nPort;
    int32   lpszUserName;
    int32   dwUserNameLength;
    int32   lpszPassword;
    int32   dwPasswordLength;
    int32   lpszUrlPath;
    int32   dwUrlPathLength;
    int32   lpszExtraInfo;
    int32   dwExtraInfoLength;
}
define URL_COMPONENTS()  URL_COMPONENTSA

struct INTERNET_CERTIFICATE_INFO
{
    FILETIME   ftExpiry;
    FILETIME   ftStart    ;
    int32   lpszSubjectInfo;
    int32   lpszIssuerInfo;
    int32   lpszProtocolName;
    int32   lpszSignatureAlgName;
    int32   lpszEncryptionAlgName;
    int32   dwKeySize;
}

struct INTERNET_BUFFERSA
{
    int32   dwStructSize;
    int32   Next;
    int32   lpcszHeader;
    int32   dwHeadersLength;
    int32   dwHeadersTotal;
    int32   lpvBuffer;
    int32   dwBufferLength;
    int32   dwBufferTotal;
    int32   dwOffsetLow;
    int32   dwOffsetHigh;
}
define INTERNET_BUFFERS()  INTERNET_BUFFERSA

struct GOPHER_FIND_DATAA
{
    int8[MAX_GOPHER_DISPLAY_TEXT+1]  DisplayString;
    int32   GopherType;
    int32   SizeLow;
    int32   SizeHigh;
    FILETIME   LastModificationTime    ;
    int8[MAX_GOPHER_LOCATOR_LENGTH+1]  Locator;
}
define GOPHER_FIND_DATA()  GOPHER_FIND_DATAA

struct GOPHER_ADMIN_ATTRIBUTE_TYPE
{
    int32  Comment;
    int32   EmailAddress;
}

struct GOPHER_MOD_DATE_ATTRIBUTE_TYPE
{
    FILETIME   DateAndTime    ;
}

struct GOPHER_TTL_ATTRIBUTE_TYPE
{
    int32   Ttl;
}

struct GOPHER_SCORE_ATTRIBUTE_TYPE
{
    int32   Score;
}

struct GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
{
    int32   LowerBound;
    int32   UpperBound;
}

struct GOPHER_SITE_ATTRIBUTE_TYPE
{
    int32   Site;
}

struct GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
{
    int32   Organization;
}

struct GOPHER_LOCATION_ATTRIBUTE_TYPE
{
    int32   Location;
}

struct GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
{
    int32   DegreesNorth;
    int32   MinutesNorth;
    int32   SecondsNorth;
    int32   DegreesEast;
    int32   MinutesEast;
    int32   SecondsEast;
}

struct GOPHER_TIMEZONE_ATTRIBUTE_TYPE
{
    int32   Zone;
}

struct GOPHER_PROVIDER_ATTRIBUTE_TYPE
{
    int32   Provider;
}

struct GOPHER_VERSION_ATTRIBUTE_TYPE
{
    int32   Version;
}

struct GOPHER_ABSTRACT_ATTRIBUTE_TYPE
{
    int32   ShortAbstract;
    int32   AbstractFile;
}

struct GOPHER_VIEW_ATTRIBUTE_TYPE
{
    int32   ContentType;
    int32   Language;
    int32   iSize;
}

struct GOPHER_VERONICA_ATTRIBUTE_TYPE
{
    int32   TreeWalk;
}

struct GOPHER_ASK_ATTRIBUTE_TYPE
{
    int32   QuestionType;
    int32   QuestionText;
}

struct GOPHER_UNKNOWN_ATTRIBUTE_TYPE
{
    int32   Text;
}

struct GOPHER_ATTRIBUTE_TYPE
{
    int32   CategoryId;
    int32   AttributeId;
    union UNION_GOPHER_ATTRIBUTE_TYPE
    {
        GOPHER_ADMIN_ATTRIBUTE_TYPE   Admin;
        GOPHER_MOD_DATE_ATTRIBUTE_TYPE   ModDate;
        GOPHER_TTL_ATTRIBUTE_TYPE   Ttl;
        GOPHER_SCORE_ATTRIBUTE_TYPE   Score;
        GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE   ScoreRange;
        GOPHER_SITE_ATTRIBUTE_TYPE   Site;
        GOPHER_ORGANIZATION_ATTRIBUTE_TYPE   Organization;
        GOPHER_LOCATION_ATTRIBUTE_TYPE   Location;
        GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE   GeographicalLocation;
        GOPHER_TIMEZONE_ATTRIBUTE_TYPE   TimeZone;
        GOPHER_PROVIDER_ATTRIBUTE_TYPE   Provider;
        GOPHER_VERSION_ATTRIBUTE_TYPE   Version;
        GOPHER_ABSTRACT_ATTRIBUTE_TYPE   Abstract;
        GOPHER_VIEW_ATTRIBUTE_TYPE   View;
        GOPHER_VERONICA_ATTRIBUTE_TYPE   Veronica;
        GOPHER_ASK_ATTRIBUTE_TYPE   Ask;
        GOPHER_UNKNOWN_ATTRIBUTE_TYPE   Unknown;
    }
}

struct INTERNET_AUTH_NOTIFY_DATA
{
    int32   cbStruct;
    int32   dwOptions;
    int32   pfnNotify;
    int32   dwContext;
}

struct INTERNET_CACHE_ENTRY_INFOA
{
    int32   dwStructSize;
    int32   lpszSourceUrlName;
    int32   lpszLocalFileName;
    int32   CacheEntryType;
    int32   dwUseCount;
    int32   dwHitRate;
    int32   dwSizeLow;
    int32   dwSizeHigh;
    FILETIME   LastModifiedTime    ;
    FILETIME   ExpireTime    ;
    FILETIME   LastAccessTime    ;
    int32   lpHeaderInfo;
    int32   dwHeaderInfoSize;
    int32   lpszFileExtension;
    union RESERVED
    {
        int32   dwReserved;
        int32   dwExemptDelta;
    }
}
define INTERNET_CACHE_ENTRY_INFO()  INTERNET_CACHE_ENTRY_INFOA

// ----------------------------- shlobj.h -----------------------------

define CMF_NORMAL()  0
define CMF_DEFAULTONLY()  1
define CMF_VERBSONLY()  2
define CMF_EXPLORE()  4
define CMF_NOVERBS()  8
define CMF_CANRENAME()  0x10
define CMF_NODEFAULT()  0x20
define CMF_INCLUDESTATIC()  0x40
define CMF_RESERVED()  0ffff0000h
define GCS_VERBA()  0
define GCS_HELPTEXTA()  1
define GCS_VALIDATEA()  2
define GCS_VERBW()  4
define GCS_HELPTEXTW()  5
define GCS_VALIDATEW()  6
define GCS_UNICODE()  4
define GCS_VERB()  GCS_VERBA
define GCS_HELPTEXT()  GCS_HELPTEXTA
define GCS_VALIDATE()  GCS_VALIDATEA
define CMDSTR_NEWFOLDERA()  "NewFolder"
define CMDSTR_VIEWLISTA()  "ViewList"
define CMDSTR_VIEWDETAILSA()  "ViewDetails"
define CMDSTR_NEWFOLDER()  CMDSTR_NEWFOLDERA
define CMDSTR_VIEWLIST()  CMDSTR_VIEWLISTA
define CMDSTR_VIEWDETAILS()  CMDSTR_VIEWDETAILSA
define CMIC_MASK_HOTKEY()  SEE_MASK_HOTKEY
define CMIC_MASK_ICON()  SEE_MASK_ICON
define CMIC_MASK_FLAG_NO_UI()  SEE_MASK_FLAG_NO_UI
define CMIC_MASK_UNICODE()  SEE_MASK_UNICODE
define CMIC_MASK_NO_CONSOLE()  SEE_MASK_NO_CONSOLE
define CMIC_MASK_HASLINKNAME()  SEE_MASK_HASLINKNAME
define CMIC_MASK_FLAG_SEP_VDM()  SEE_MASK_FLAG_SEPVDM
define CMIC_MASK_HASTITLE()  SEE_MASK_HASTITLE
define CMIC_MASK_ASYNCOK()  SEE_MASK_ASYNCOK
define CMIC_MASK_PTINVOKE()  0x20000000
define GIL_OPENICON()  1
define GIL_FORSHELL()  2
define GIL_ASYNC()  0x20
define GIL_SIMULATEDOC()  1
define GIL_PERINSTANCE()  2
define GIL_PERCLASS()  4
define GIL_NOTFILENAME()  8
define GIL_DONTCACHE()  0x10
define ISIOI_ICONFILE()  1
define ISIOI_ICONINDEX()  2
define ISIOI_SYSIMAGELISTINDEX()  4
define FVSIF_RECT()  1
define FVSIF_PINNED()  2
define FVSIF_NEWFAILED()  0x8000000
define FVSIF_NEWFILE()  0x80000000
define FVSIF_CANVIEWIT()  0x40000000
define FCIDM_SHVIEWFIRST()  0
define FCIDM_SHVIEWLAST()  0x7fff
define FCIDM_BROWSERFIRST()  0x0a000
define FCIDM_BROWSERLAST()  0x0bf00
define FCIDM_GLOBALFIRST()  0x8000
define FCIDM_GLOBALLAST()  0x9fff
define FCIDM_MENU_FILE()  (FCIDM_GLOBALFIRST+0)
define FCIDM_MENU_EDIT()  (FCIDM_GLOBALFIRST+0x40)
define FCIDM_MENU_VIEW()  (FCIDM_GLOBALFIRST+0x80)
define FCIDM_MENU_VIEW_SEP_OPTIONS()  (FCIDM_GLOBALFIRST+0x81)
define FCIDM_MENU_TOOLS()  (FCIDM_GLOBALFIRST+0x0c0)
define FCIDM_MENU_TOOLS_SEP_GOTO()  (FCIDM_GLOBALFIRST+0x0c1)
define FCIDM_MENU_HELP()  (FCIDM_GLOBALFIRST+0x100)
define FCIDM_MENU_FIND()  (FCIDM_GLOBALFIRST+0x140)
define FCIDM_MENU_EXPLORE()  (FCIDM_GLOBALFIRST+0x150)
define FCIDM_MENU_FAVORITES()  (FCIDM_GLOBALFIRST+0x170)
define FCIDM_TOOLBAR()  (FCIDM_BROWSERFIRST + 0)
define FCIDM_STATUS()  (FCIDM_BROWSERFIRST + 1)
define IDC_OFFLINE_HAND()  103
define SBSP_DEFBROWSER()  0
define SBSP_SAMEBROWSER()  1
define SBSP_NEWBROWSER()  2
define SBSP_DEFMODE()  0
define SBSP_OPENMODE()  0x10
define SBSP_EXPLOREMODE()  0x20
define SBSP_ABSOLUTE()  0
define SBSP_RELATIVE()  0x1000
define SBSP_PARENT()  0x2000
define SBSP_NAVIGATEBACK()  0x4000
define SBSP_NAVIGATEFORWARD()  0x8000
define SBSP_ALLOW_AUTONAVIGATE()  0x10000
define SBSP_INITIATEDBYHLINKFRAME()  0x80000000
define SBSP_REDIRECT()  0x40000000
define SBSP_WRITENOHISTORY()  0x8000000
define SBSP_NOAUTOSELECT()  0x4000000
define FCW_STATUS()  1
define FCW_TOOLBAR()  2
define FCW_TREE()  3
define FCW_INTERNETBAR()  6
define FCW_PROGRESS()  8
define FCT_MERGE()  1
define FCT_CONFIGABLE()  2
define FCT_ADDTOEND()  4
define CDBOSC_SETFOCUS()  0
define CDBOSC_KILLFOCUS()  1
define CDBOSC_SELCHANGE()  2
define CDBOSC_RENAME()  3
define SVSI_DESELECT()  0
define SVSI_SELECT()  1
define SVSI_EDIT()  3
define SVSI_DESELECTOTHERS()  4
define SVSI_ENSUREVISIBLE()  8
define SVSI_FOCUSED()  0x10
define SVSI_TRANSLATEPT()  0x20
define SVGIO_BACKGROUND()  0
define SVGIO_SELECTION()  1
define SVGIO_ALLVIEW()  2
define SV2GV_CURRENTVIEW()  0ffffffffh
define SV2GV_DEFAULTVIEW()  0fffffffeh
define STRRET_WSTR()  0
define STRRET_OFFSET()  1
define STRRET_CSTR()  2
define CSIDL_DESKTOP()  0
define CSIDL_INTERNET()  1
define CSIDL_PROGRAMS()  2
define CSIDL_CONTROLS()  3
define CSIDL_PRINTERS()  4
define CSIDL_PERSONAL()  5
define CSIDL_FAVORITES()  6
define CSIDL_STARTUP()  7
define CSIDL_RECENT()  8
define CSIDL_SENDTO()  9
define CSIDL_BITBUCKET()  0x0a
define CSIDL_STARTMENU()  0x0b
define CSIDL_DESKTOPDIRECTORY()  0x10
define CSIDL_DRIVES()  0x11
define CSIDL_NETWORK()  0x12
define CSIDL_NETHOOD()  0x13
define CSIDL_FONTS()  0x14
define CSIDL_TEMPLATES()  0x15
define CSIDL_COMMON_STARTMENU()  0x16
define CSIDL_COMMON_PROGRAMS()  0x17
define CSIDL_COMMON_STARTUP()  0x18
define CSIDL_COMMON_DESKTOPDIRECTORY()  0x19
define CSIDL_APPDATA()  0x1a
define CSIDL_PRINTHOOD()  0x1b
define CSIDL_ALTSTARTUP()  0x1d
define CSIDL_COMMON_ALTSTARTUP()  0x1e
define CSIDL_COMMON_FAVORITES()  0x1f
define CSIDL_INTERNET_CACHE()  0x20
define CSIDL_COOKIES()  0x21
define CSIDL_HISTORY()  0x22
define BIF_RETURNONLYFSDIRS()  1
define BIF_DONTGOBELOWDOMAIN()  2
define BIF_STATUSTEXT()  4
define BIF_RETURNFSANCESTORS()  8
define BIF_EDITBOX()  0x10
define BIF_VALIDATE()  0x20
define BIF_BROWSEFORCOMPUTER()  0x1000
define BIF_BROWSEFORPRINTER()  0x2000
define BIF_BROWSEINCLUDEFILES()  0x4000
define BFFM_INITIALIZED()  1
define BFFM_SELCHANGED()  2
define BFFM_VALIDATEFAILEDA()  3
define BFFM_VALIDATEFAILEDW()  4
define BFFM_SETSTATUSTEXTA()  (WM_USER + 100)
define BFFM_ENABLEOK()  (WM_USER + 101)
define BFFM_SETSELECTIONA()  (WM_USER + 102)
define BFFM_SETSELECTIONW()  (WM_USER + 103)
define BFFM_SETSTATUSTEXTW()  (WM_USER + 104)
define DROPEFFECT_COPY()  1
define SFGAO_CANCOPY()  DROPEFFECT_COPY
define DROPEFFECT_MOVE()  2
define SFGAO_CANMOVE()  DROPEFFECT_MOVE
define DROPEFFECT_LINK()  3
define SFGAO_CANLINK()  DROPEFFECT_LINK
define SFGAO_CANRENAME()  0x10
define SFGAO_CANDELETE()  0x20
define SFGAO_HASPROPSHEET()  0x40
define SFGAO_DROPTARGET()  0x100
define SFGAO_CAPABILITYMASK()  0x177
define SFGAO_LINK()  0x10000
define SFGAO_SHARE()  0x20000
define SFGAO_READONLY()  0x40000
define SFGAO_GHOSTED()  0x80000
define SFGAO_HIDDEN()  0x80000
define SFGAO_DISPLAYATTRMASK()  0x0F0000
define SFGAO_FILESYSANCESTOR()  0x10000000
define SFGAO_FOLDER()  0x20000000
define SFGAO_FILESYSTEM()  0x40000000
define SFGAO_HASSUBFOLDER()  0x80000000
define SFGAO_CONTENTSMASK()  0x80000000
define SFGAO_VALIDATE()  0x1000000
define SFGAO_REMOVABLE()  0x2000000
define SFGAO_COMPRESSED()  0x4000000
define SFGAO_BROWSABLE()  0x8000000
define SFGAO_NONENUMERATED()  0x100000
define SFGAO_NEWCONTENT()  0x200000
define DWFRF_NORMAL()  0
define DWFRF_DELETECONFIGDATA()  1
define DWFAF_HIDDEN()  1
define DBIM_MINSIZE()  1
define DBIM_MAXSIZE()  2
define DBIM_INTEGRAL()  4
define DBIM_ACTUAL()  8
define DBIM_TITLE()  0x10
define DBIM_MODEFLAGS()  0x20
define DBIM_BKCOLOR()  0x40
define DBIMF_NORMAL()  0
define DBIMF_VARIABLEHEIGHT()  8
define DBIMF_DEBOSSED()  0x20
define DBIMF_BKCOLOR()  0x40
define DBIF_VIEWMODE_NORMAL()  0
define DBIF_VIEWMODE_VERTICAL()  1
define DBIF_VIEWMODE_FLOATING()  2
define DBIF_VIEWMODE_TRANSPARENT()  4
define COMPONENT_TOP()  (0x7fffffff)
define COMP_TYPE_HTMLDOC()  0
define COMP_TYPE_PICTURE()  1
define COMP_TYPE_WEBSITE()  2
define COMP_TYPE_CONTROL()  3
define COMP_TYPE_CFHTML()  4
define COMP_TYPE_MAX()  4
define AD_APPLY_SAVE()  1
define AD_APPLY_HTMLGEN()  2
define AD_APPLY_REFRESH()  4
define AD_APPLY_ALL()  (AD_APPLY_SAVE + AD_APPLY_HTMLGEN + AD_APPLY_REFRESH)
define AD_APPLY_FORCE()  8
define AD_APPLY_BUFFERED_REFRESH()  0x10
define WPSTYLE_CENTER()  0
define WPSTYLE_TILE()  1
define WPSTYLE_STRETCH()  2
define WPSTYLE_MAX()  3
define COMP_ELEM_TYPE()  1
define COMP_ELEM_CHECKED()  2
define COMP_ELEM_DIRTY()  4
define COMP_ELEM_NOSCROLL()  8
define COMP_ELEM_POS_LEFT()  0x10
define COMP_ELEM_POS_TOP()  0x20
define COMP_ELEM_SIZE_WIDTH()  0x40
define COMP_ELEM_SIZE_HEIGHT()  0x80
define COMP_ELEM_POS_ZINDEX()  0x100
define COMP_ELEM_SOURCE()  0x200
define COMP_ELEM_FRIENDLYNAME()  0x400
define COMP_ELEM_SUBSCRIBEDURL()  0x800
define COMP_ELEM_ALL()  (COMP_ELEM_TYPE + COMP_ELEM_CHECKED + COMP_ELEM_DIRTY + ...
                    COMP_ELEM_NOSCROLL + COMP_ELEM_POS_LEFT + COMP_ELEM_SIZE_WIDTH + ...
                    COMP_ELEM_SIZE_HEIGHT + COMP_ELEM_POS_ZINDEX + COMP_ELEM_SOURCE + ...
                    COMP_ELEM_FRIENDLYNAME )
define ADDURL_SILENT()  1
define CFSTR_SHELLIDLIST()  "Shell IDList Array"
define CFSTR_SHELLIDLISTOFFSET()  "Shell Object Offsets"
define CFSTR_NETRESOURCES()  "Net Resource"
define CFSTR_FILEDESCRIPTORA()  "FileGroupDescriptor"
define CFSTR_FILECONTENTS()  "FileContents"
define CFSTR_FILENAMEA()  "FileName"
define CFSTR_PRINTERGROUP()  "PrinterFriendlyName"
define CFSTR_FILENAMEMAPA()  "FileNameMap"
define CFSTR_SHELLURL()  "UniformResourceLocator"
define CFSTR_PREFERREDDROPEFFECT()  "Preferred DropEffect"
define CFSTR_PERFORMEDDROPEFFECT()  "Performed DropEffect"
define CFSTR_PASTESUCCEEDED()  "Paste Succeeded"
define CFSTR_INDRAGLOOP()  "InShellDragLoop"
define CFSTR_FILEDESCRIPTOR()  CFSTR_FILEDESCRIPTORA
define CFSTR_FILENAME()  CFSTR_FILENAMEA
define CFSTR_FILENAMEMAP()  CFSTR_FILENAMEMAPA
define DVASPECT_SHORTNAME()  2
define SHCNE_RENAMEITEM()  1
define SHCNE_CREATE()  2
define SHCNE_DELETE()  4
define SHCNE_MKDIR()  8
define SHCNE_RMDIR()  0x10
define SHCNE_MEDIAINSERTED()  0x20
define SHCNE_MEDIAREMOVED()  0x40
define SHCNE_DRIVEREMOVED()  0x80
define SHCNE_DRIVEADD()  0x100
define SHCNE_NETSHARE()  0x200
define SHCNE_NETUNSHARE()  0x400
define SHCNE_ATTRIBUTES()  0x800
define SHCNE_UPDATEDIR()  0x1000
define SHCNE_UPDATEITEM()  0x2000
define SHCNE_SERVERDISCONNECT()  0x4000
define SHCNE_UPDATEIMAGE()  0x8000
define SHCNE_DRIVEADDGUI()  0x10000
define SHCNE_RENAMEFOLDER()  0x20000
define SHCNE_FREESPACE()  0x40000
define SHCNE_EXTENDED_EVENT()  0x4000000
define SHCNE_ASSOCCHANGED()  0x8000000
define SHCNE_DISKEVENTS()  0x2381F
define SHCNE_GLOBALEVENTS()  0x0C0581E0
define SHCNE_ALLEVENTS()  0x7FFFFFFF
define SHCNE_INTERRUPT()  0x80000000
define SHCNEE_ORDERCHANGED()  2
define SHCNF_IDLIST()  0
define SHCNF_PATHA()  1
define SHCNF_PRINTERA()  2
define SHCNF_DWORD()  3
define SHCNF_PATHW()  5
define SHCNF_PRINTERW()  6
define SHCNF_TYPE()  0x0FF
define SHCNF_FLUSH()  0x1000
define SHCNF_FLUSHNOWAIT()  0x2000
define SHCNF_PATH()  SHCNF_PATHA
define SHCNF_PRINTER()  SHCNF_PRINTERA
define QIF_CACHED()  1
define QIF_DONTEXPANDFOLDER()  2
define SHARD_PIDL()  1
define SHARD_PATHA()  2
define SHARD_PATHW()  3
define SHARD_PATH()  SHARD_PATHA
define SHGDFIL_FINDDATA()  1
define SHGDFIL_NETRESOURCE()  2
define SHGDFIL_DESCRIPTIONID()  3
define SHDID_ROOT_REGITEM()  1
define SHDID_FS_FILE()  2
define SHDID_FS_DIRECTORY()  3
define SHDID_FS_OTHER()  4
define SHDID_COMPUTER_DRIVE35()  5
define SHDID_COMPUTER_DRIVE525()  6
define SHDID_COMPUTER_REMOVABLE()  7
define SHDID_COMPUTER_FIXED()  8
define SHDID_COMPUTER_NETDRIVE()  9
define SHDID_COMPUTER_CDROM()  10
define SHDID_COMPUTER_RAMDISK()  11
define SHDID_COMPUTER_OTHER()  12
define SHDID_NET_DOMAIN()  13
define SHDID_NET_SERVER()  14
define SHDID_NET_SHARE()  15
define SHDID_NET_RESTOFNET()  16
define SHDID_NET_OTHER()  17
define PID_IS_URL()  2
define PID_IS_NAME()  4
define PID_IS_WORKINGDIR()  5
define PID_IS_HOTKEY()  6
define PID_IS_SHOWCMD()  7
define PID_IS_ICONINDEX()  8
define PID_IS_ICONFILE()  9
define PID_IS_WHATSNEW()  10
define PID_IS_AUTHOR()  11
define PID_IS_DESCRIPTION()  12
define PID_IS_COMMENT()  13
define PID_INTSITE_WHATSNEW()  2
define PID_INTSITE_AUTHOR()  3
define PID_INTSITE_LASTVISIT()  4
define PID_INTSITE_LASTMOD()  5
define PID_INTSITE_VISITCOUNT()  6
define PID_INTSITE_DESCRIPTION()  7
define PID_INTSITE_COMMENT()  8
define PID_INTSITE_FLAGS()  9
define PID_INTSITE_CONTENTLEN()  10
define PID_INTSITE_CONTENTCODE()  11
define PID_INTSITE_RECURSE()  12
define PID_INTSITE_WATCH()  13
define PID_INTSITE_SUBSCRIPTION()  14
define PID_INTSITE_URL()  15
define PID_INTSITE_TITLE()  16
define PID_INTSITE_CODEPAGE()  18
define PID_INTSITE_TRACKING()  19
define PIDISF_RECENTLYCHANGED()  1
define PIDISF_CACHEDSTICKY()  2
define PIDISF_CACHEIMAGES()  0x10
define PIDISF_FOLLOWALLLINKS()  0x20
define PIDISM_GLOBAL()  0
define PIDISM_WATCH()  1
define PIDISM_DONTWATCH()  2
define SSF_SHOWALLOBJECTS()  1
define SSF_SHOWEXTENSIONS()  2
define SSF_SHOWCOMPCOLOR()  8
define SSF_SHOWSYSFILES()  0x20
define SSF_DOUBLECLICKINWEBVIEW()  0x80
define SSF_SHOWATTRIBCOL()  0x100
define SSF_DESKTOPHTML()  0x200
define SSF_WIN95CLASSIC()  0x400
define SSF_DONTPRETTYPATH()  0x800
define SSF_SHOWINFOTIP()  0x2000
define SSF_MAPNETDRVBUTTON()  0x1000
define SSF_NOCONFIRMRECYCLE()  0x8000
define SSF_HIDEICONS()  0x4000
define SLR_NO_UI()  1
define SLR_ANY_MATCH()  2
define SLR_UPDATE()  4
define SLR_NOUPDATE()  8
define SLGP_SHORTPATH()  1
define SLGP_UNCPRIORITY()  2
define SLGP_RAWPATH()  4
define FWF_AUTOARRANGE()  1
define FWF_ABBREVIATEDNAMES()  2
define FWF_SNAPTOGRID()  4
define FWF_OWNERDATA()  8
define FWF_BESTFITWINDOW()  0x10
define FWF_DESKTOP()  0x20
define FWF_SINGLESEL()  0x40
define FWF_NOSUBFOLDERS()  0x80
define FWF_TRANSPARENT()  0x100
define FWF_NOCLIENTEDGE()  0x200
define FWF_NOSCROLL()  0x400
define FWF_ALIGNLEFT()  0x800
define FWF_NOICONS()  0x1000
define FWF_SINGLECLICKACTIVATE()  0x8000
define FVM_ICON()  1
define FVM_SMALLICON()  2
define FVM_LIST()  3
define FVM_DETAILS()  4
define SBSC_HIDE()  0
define SBSC_SHOW()  1
define SBSC_TOGGLE()  2
define SBSC_QUERY()  3
define SBO_DEFAULT()  0
define SBO_NOBROWSERPAGES()  1
define SVUIA_DEACTIVATE()  0
define SVUIA_ACTIVATE_NOFOCUS()  1
define SVUIA_ACTIVATE_FOCUS()  2
define SVUIA_INPLACEACTIVATE()  3
define SHGDN_NORMAL()  0
define SHGDN_INFOLDER()  1
define SHGDN_INCLUDE_NONFILESYS()  0x2000
define SHGDN_FORADDRESSBAR()  0x4000
define SHGDN_FORPARSING()  0x8000
define SHCONTF_FOLDERS()  32
define SHCONTF_NONFOLDERS()  64
define SHCONTF_INCLUDEHIDDEN()  128
define DBID_BANDINFOCHANGED()  0
define DBID_SHOWONLY()  1
define DBID_MAXIMIZEBAND()  2
define DTI_ADDUI_DEFAULT()  0
define DTI_ADDUI_DISPSUBWIZARD()  1
define FD_CLSID()  1
define FD_SIZEPOINT()  2
define FD_ATTRIBUTES()  4
define FD_CREATETIME()  8
define FD_ACCESSTIME()  0x10
define FD_WRITESTIME()  0x20
define FD_FILESIZE()  0x40
define FD_LINKUI()  0x8000

//SHELLFLAGSTATE record fShowAllObjects:1,fShowExtensions:1, fNoConfirmRecycle:1,fShowSysFiles:1,fShowCompColor:1,fDoubleClickInWebView:1,fDesktopHTML:1,fWin95Classic:1,fDontPrettyPath:1,fShowAttribCol:1,fMapNetDrvBtn:1,fShowInfoTip:1,fHideIcons:1, fRestFlags:3

struct SHITEMID
{
    int16   cb;
    int8[1]  abID;
}

struct ITEMIDLIST
{
    SHITEMID   mkid;
}

struct CMINVOKECOMMANDINFO
{
    int32   cbSize;
    int32   fMask;
    int32   hwnd;
    int32   lpVerb;
    int32   lpParameters;
    int32  lpDirectory;
    int32   nShow;
    int32   dwHotKey;
    int32   hIcon;
}

struct CMINVOKECOMMANDINFOEX
{
    int32   cbSize;
    int32   fMask;
    int32   hwnd;
    int32   lpVerb;
    int32   lpParameters;
    int32   lpDirectory;
    int32   nShow;
    int32   dwHotKey;
    int32   hIcon;
    int32   lpTitle;
    int32   lpVerbW;
    int32   lpParametersW;
    int32   lpDirectoryW;
    int32   lpTitleW;
    POINT   ptInvoke;
}

struct FVSHOWINFO
{
    int32   cbSize;
    int32   hwndOwner;
    int32   iShow;
    int32   dwFlags;
    RECT   rect;
    int32   punkRel;
    int8[MAX_PATH]  strNewFile;
}

struct FOLDERSETTINGS
{
    int32   ViewMode;
    int32   fFlags;
}

struct SV2CVW2_PARAMS
{
    int32   cbSize;
    int32   psvPrev;
    int32   pfs;
    int32   psbOwner;
    int32   prcView;
    int32   pvid;
    int32   hwndView;
}


struct BROWSEINFOA
{
    int32   hwndOwner;
    int32   pidlRoot;
    int32   pszDisplayName;
    int32   lpszTitle;
    int32   ulFlags;
    int32   lpfn;
    int32   lParam;
    int32   iImage;
}
define BROWSEINFO()  BROWSEINFOA

struct DESKBANDINFO
{
    int32   dwMask;
    POINT   ptMinSize;
    POINT   ptMaxSize;
    POINT   ptIntegral;
    POINT   ptActual;
    WCHAR[256]  wszTitle;
    int32   dwModeFlags;
    COLORREF   crBkgnd;
}

struct WALLPAPEROPT
{
    int32   dwSize;
    int32   dwStyle;
}

struct COMPONENTSOPT
{
    int32   dwSize;
    int32   fEnableComponents;
    int32   fActiveDesktop;
}

struct COMPPOS
{
    int32   dwSize;
    int32   iLeft;
    int32   iTop;
    int32   dwWidth;
    int32   dwHeight;
    int32   izIndex;
    int32   fCanResize;
    int32   fCanResizeX;
    int32   fCanResizeY;
    int32   iPreferredLeftPercent;
    int32   iPreferredTopPercent;
}

struct COMPONENT
{
    int32   dwSize;
    int32   dwID;
    int32   iComponentType;
    int32   fChecked;
    int32   fDirty;
    int32   fNoScroll;
    COMPPOS   cpPos;
    WCHAR[MAX_PATH]  wszFriendlyName;
    WCHAR[INTERNET_MAX_URL_LENGTH]  wszSource;
    WCHAR[INTERNET_MAX_URL_LENGTH]  wszSubscribedURL;
}

struct NRESARRAY
{
    int32   cItems;
    NETRESOURCE   nr;
}

struct CIDA
{
    int32   cidl;
    int32[1]  aoffset;
}

struct FILEDESCRIPTORA
{
    int32   dwFlags;
    CLSID   clsid;
    SIZEL   sizel;
    POINTL   pointl;
    int32   dwFileAttributes;
    FILETIME   ftCreationTime    ;
    FILETIME   ftLastAccessTime    ;
    FILETIME   ftLastWriteTime    ;
    int32   nFileSizeHigh;
    int32   nFileSizeLow;
    int8[MAX_PATH]  cFileName;
}
define FILEDESCRIPTOR()  FILEDESCRIPTORA

struct FILEGROUPDESCRIPTORA
{
    int32   cItems;
    FILEDESCRIPTOR   fgd;
}
define FILEGROUPDESCRIPTOR()  FILEGROUPDESCRIPTORA

struct DROPFILES
{
    int32   pFiles;
    POINT   pt;
    int32   fNC;
    int32   fWide;
}

struct SHDESCRIPTIONID
{
    int32   dwDescriptionId;
    CLSID   clsid;
}

//==================================== LMServer.h =================================
define SV_PLATFORM_ID_OS2()  400
define SV_PLATFORM_ID_NT()  500
define MAJOR_VERSION_MASK()  0x0F
define SV_TYPE_WORKSTATION()  1
define SV_TYPE_SERVER()  2
define SV_TYPE_SQLSERVER()  4
define SV_TYPE_DOMAIN_CTRL()  8
define SV_TYPE_DOMAIN_BAKCTRL()  0x10
define SV_TYPE_TIME_SOURCE()  0x20
define SV_TYPE_AFP()  0x40
define SV_TYPE_NOVELL()  0x80
define SV_TYPE_DOMAIN_MEMBER()  0x100
define SV_TYPE_PRINTQ_SERVER()  0x200
define SV_TYPE_DIALIN_SERVER()  0x400
define SV_TYPE_XENIX_SERVER()  0x800
define SV_TYPE_SERVER_UNIX()  SV_TYPE_XENIX_SERVER
define SV_TYPE_NT()  0x1000
define SV_TYPE_WFW()  0x2000
define SV_TYPE_SERVER_MFPN()  0x4000
define SV_TYPE_SERVER_NT()  0x8000
define SV_TYPE_POTENTIAL_BROWSER()  0x10000
define SV_TYPE_BACKUP_BROWSER()  0x20000
define SV_TYPE_MASTER_BROWSER()  0x40000
define SV_TYPE_DOMAIN_MASTER()  0x80000
define SV_TYPE_SERVER_OSF()  0x100000
define SV_TYPE_SERVER_VMS()  0x200000
define SV_TYPE_WINDOWS()  0x400000
define SV_TYPE_DFS()  0x800000
define SV_TYPE_CLUSTER_NT()  0x1000000
define SV_TYPE_DCE()  0x10000000
define SV_TYPE_ALTERNATE_XPORT()  0x20000000
define SV_TYPE_LOCAL_LIST_ONLY()  0x40000000
define SV_TYPE_DOMAIN_ENUM()  0x80000000
define SV_TYPE_ALL()  0x0FFFFFFFF
define SV_NODISC()  (-1)
define SV_USERSECURITY()  1
define SV_SHARESECURITY()  0
define SV_HIDDEN()  1
define SV_VISIBLE()  0
define SV_PLATFORM_ID_PARMNUM()  101
define SV_NAME_PARMNUM()  102
define SV_VERSION_MAJOR_PARMNUM()  103
define SV_VERSION_MINOR_PARMNUM()  104
define SV_TYPE_PARMNUM()  105
define SV_COMMENT_PARMNUM()  5
define SV_USERS_PARMNUM()  107
define SV_DISC_PARMNUM()  10
define SV_HIDDEN_PARMNUM()  16
define SV_ANNOUNCE_PARMNUM()  17
define SV_ANNDELTA_PARMNUM()  18
define SV_USERPATH_PARMNUM()  112
define SV_ULIST_MTIME_PARMNUM()  401
define SV_GLIST_MTIME_PARMNUM()  402
define SV_ALIST_MTIME_PARMNUM()  403
define SV_ALERTS_PARMNUM()  11
define SV_SECURITY_PARMNUM()  405
define SV_NUMADMIN_PARMNUM()  406
define SV_LANMASK_PARMNUM()  407
define SV_GUESTACC_PARMNUM()  408
define SV_CHDEVQ_PARMNUM()  410
define SV_CHDEVJOBS_PARMNUM()  411
define SV_CONNECTIONS_PARMNUM()  412
define SV_SHARES_PARMNUM()  413
define SV_OPENFILES_PARMNUM()  414
define SV_SESSREQS_PARMNUM()  417
define SV_ACTIVELOCKS_PARMNUM()  419
define SV_NUMREQBUF_PARMNUM()  420
define SV_NUMBIGBUF_PARMNUM()  422
define SV_NUMFILETASKS_PARMNUM()  423
define SV_ALERTSCHED_PARMNUM()  37
define SV_ERRORALERT_PARMNUM()  38
define SV_LOGONALERT_PARMNUM()  39
define SV_ACCESSALERT_PARMNUM()  40
define SV_DISKALERT_PARMNUM()  41
define SV_NETIOALERT_PARMNUM()  42
define SV_MAXAUDITSZ_PARMNUM()  43
define SV_SRVHEURISTICS_PARMNUM()  431
define SV_SESSOPENS_PARMNUM()  501
define SV_SESSVCS_PARMNUM()  502
define SV_OPENSEARCH_PARMNUM()  503
define SV_SIZREQBUF_PARMNUM()  504
define SV_INITWORKITEMS_PARMNUM()  505
define SV_MAXWORKITEMS_PARMNUM()  506
define SV_RAWWORKITEMS_PARMNUM()  507
define SV_IRPSTACKSIZE_PARMNUM()  508
define SV_MAXRAWBUFLEN_PARMNUM()  509
define SV_SESSUSERS_PARMNUM()  510
define SV_SESSCONNS_PARMNUM()  511
define SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM()  512
define SV_MAXPAGEDMEMORYUSAGE_PARMNUM()  513
define SV_ENABLESOFTCOMPAT_PARMNUM()  514
define SV_ENABLEFORCEDLOGOFF_PARMNUM()  515
define SV_TIMESOURCE_PARMNUM()  516
define SV_ACCEPTDOWNLEVELAPIS_PARMNUM()  517
define SV_LMANNOUNCE_PARMNUM()  518
define SV_DOMAIN_PARMNUM()  519
define SV_MAXCOPYREADLEN_PARMNUM()  520
define SV_MAXCOPYWRITELEN_PARMNUM()  521
define SV_MINKEEPSEARCH_PARMNUM()  522
define SV_MAXKEEPSEARCH_PARMNUM()  523
define SV_MINKEEPCOMPLSEARCH_PARMNUM()  524
define SV_MAXKEEPCOMPLSEARCH_PARMNUM()  525
define SV_THREADCOUNTADD_PARMNUM()  526
define SV_NUMBLOCKTHREADS_PARMNUM()  527
define SV_SCAVTIMEOUT_PARMNUM()  528
define SV_MINRCVQUEUE_PARMNUM()  529
define SV_MINFREEWORKITEMS_PARMNUM()  530
define SV_XACTMEMSIZE_PARMNUM()  531
define SV_THREADPRIORITY_PARMNUM()  532
define SV_MAXMPXCT_PARMNUM()  533
define SV_OPLOCKBREAKWAIT_PARMNUM()  534
define SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM()  535
define SV_ENABLEOPLOCKS_PARMNUM()  536
define SV_ENABLEOPLOCKFORCECLOSE_PARMNUM()  537
define SV_ENABLEFCBOPENS_PARMNUM()  538
define SV_ENABLERAW_PARMNUM()  539
define SV_ENABLESHAREDNETDRIVES_PARMNUM()  540
define SV_MINFREECONNECTIONS_PARMNUM()  541
define SV_MAXFREECONNECTIONS_PARMNUM()  542
define SV_INITSESSTABLE_PARMNUM()  543
define SV_INITCONNTABLE_PARMNUM()  544
define SV_INITFILETABLE_PARMNUM()  545
define SV_INITSEARCHTABLE_PARMNUM()  546
define SV_ALERTSCHEDULE_PARMNUM()  547
define SV_ERRORTHRESHOLD_PARMNUM()  548
define SV_NETWORKERRORTHRESHOLD_PARMNUM()  549
define SV_DISKSPACETHRESHOLD_PARMNUM()  550
define SV_MAXLINKDELAY_PARMNUM()  552
define SV_MINLINKTHROUGHPUT_PARMNUM()  553
define SV_LINKINFOVALIDTIME_PARMNUM()  554
define SV_SCAVQOSINFOUPDATETIME_PARMNUM()  555
define SV_MAXWORKITEMIDLETIME_PARMNUM()  556
define SV_MAXRAWWORKITEMS_PARMNUM()  557
define SV_PRODUCTTYPE_PARMNUM()  560
define SV_SERVERSIZE_PARMNUM()  561
define SV_CONNECTIONLESSAUTODISC_PARMNUM()  562
define SV_SHARINGVIOLATIONRETRIES_PARMNUM()  563
define SV_SHARINGVIOLATIONDELAY_PARMNUM()  564
define SV_MAXGLOBALOPENSEARCH_PARMNUM()  565
define SV_REMOVEDUPLICATESEARCHES_PARMNUM()  566
define SV_LOCKVIOLATIONRETRIES_PARMNUM()  567
define SV_LOCKVIOLATIONOFFSET_PARMNUM()  568
define SV_LOCKVIOLATIONDELAY_PARMNUM()  569
define SV_MDLREADSWITCHOVER_PARMNUM()  570
define SV_CACHEDOPENLIMIT_PARMNUM()  571
define SV_CRITICALTHREADS_PARMNUM()  572
define SV_RESTRICTNULLSESSACCESS_PARMNUM()  573
define SV_ENABLEWFW311DIRECTIPX_PARMNUM()  574
define SV_OTHERQUEUEAFFINITY_PARMNUM()  575
define SV_QUEUESAMPLESECS_PARMNUM()  576
define SV_BALANCECOUNT_PARMNUM()  577
define SV_PREFERREDAFFINITY_PARMNUM()  578
define SV_MAXFREERFCBS_PARMNUM()  579
define SV_MAXFREEMFCBS_PARMNUM()  580
define SV_MAXFREELFCBS_PARMNUM()  581
define SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM()  582
define SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM()  583
define SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM()  584
define SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM()  585
define SV_MAXTHREADSPERQUEUE_PARMNUM()  586
define SV_CACHEDDIRECTORYLIMIT_PARMNUM()  587
define SV_MAXCOPYLENGTH_PARMNUM()  588
define SV_ENABLEBULKTRANSFER_PARMNUM()  589
define SV_ENABLECOMPRESSION_PARMNUM()  590
define SV_AUTOSHAREWKS_PARMNUM()  591
define SV_AUTOSHARESERVER_PARMNUM()  592
define SV_ENABLESECURITYSIGNATURE_PARMNUM()  593
define SV_REQUIRESECURITYSIGNATURE_PARMNUM()  594
define SV_MINCLIENTBUFFERSIZE_PARMNUM()  595
define SV_CONNECTIONNOSESSIONSTIMEOUT_PARMNUM()  596
define SV_COMMENT_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SV_COMMENT_PARMNUM)
define SV_USERS_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SV_USERS_PARMNUM)
define SV_DISC_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SV_DISC_PARMNUM)
define SV_HIDDEN_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SV_HIDDEN_PARMNUM)
define SV_ANNOUNCE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ANNOUNCE_PARMNUM)
define SV_ANNDELTA_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ANNDELTA_PARMNUM)
define SV_SESSOPENS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SESSOPENS_PARMNUM)
define SV_SESSVCS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SESSVCS_PARMNUM)
define SV_OPENSEARCH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_OPENSEARCH_PARMNUM)
define SV_MAXWORKITEMS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXWORKITEMS_PARMNUM)
define SV_MAXRAWBUFLEN_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXRAWBUFLEN_PARMNUM)
define SV_SESSUSERS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SESSUSERS_PARMNUM)
define SV_SESSCONNS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SESSCONNS_PARMNUM)
define SV_MAXNONPAGEDMEMORYUSAGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM)
define SV_MAXPAGEDMEMORYUSAGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXPAGEDMEMORYUSAGE_PARMNUM)
define SV_ENABLESOFTCOMPAT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLESOFTCOMPAT_PARMNUM)
define SV_ENABLEFORCEDLOGOFF_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEFORCEDLOGOFF_PARMNUM)
define SV_TIMESOURCE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_TIMESOURCE_PARMNUM)
define SV_LMANNOUNCE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_LMANNOUNCE_PARMNUM)
define SV_MAXCOPYREADLEN_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXCOPYREADLEN_PARMNUM)
define SV_MAXCOPYWRITELEN_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXCOPYWRITELEN_PARMNUM)
define SV_MINKEEPSEARCH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINKEEPSEARCH_PARMNUM)
define SV_MAXKEEPSEARCH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXKEEPSEARCH_PARMNUM)
define SV_MINKEEPCOMPLSEARCH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINKEEPCOMPLSEARCH_PARMNUM)
define SV_MAXKEEPCOMPLSEARCH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXKEEPCOMPLSEARCH_PARMNUM)
define SV_SCAVTIMEOUT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SCAVTIMEOUT_PARMNUM)
define SV_MINRCVQUEUE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINRCVQUEUE_PARMNUM)
define SV_MINFREEWORKITEMS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINFREEWORKITEMS_PARMNUM)
define SV_MAXMPXCT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXMPXCT_PARMNUM)
define SV_OPLOCKBREAKWAIT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_OPLOCKBREAKWAIT_PARMNUM)
define SV_OPLOCKBREAKRESPONSEWAIT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM)
define SV_ENABLEOPLOCKS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEOPLOCKS_PARMNUM)
define SV_ENABLEOPLOCKFORCECLOSE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEOPLOCKFORCECLOSE_PARMNUM)
define SV_ENABLEFCBOPENS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEFCBOPENS_PARMNUM)
define SV_ENABLERAW_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLERAW_PARMNUM)
define SV_ENABLESHAREDNETDRIVES_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLESHAREDNETDRIVES_PARMNUM)
define SV_MINFREECONNECTIONS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINFREECONNECTIONS_PARMNUM)
define SV_MAXFREECONNECTIONS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXFREECONNECTIONS_PARMNUM)
define SV_INITSESSTABLE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_INITSESSTABLE_PARMNUM)
define SV_INITCONNTABLE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_INITCONNTABLE_PARMNUM)
define SV_INITFILETABLE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_INITFILETABLE_PARMNUM)
define SV_INITSEARCHTABLE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_INITSEARCHTABLE_PARMNUM)
define SV_ALERTSCHEDULE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ALERTSCHEDULE_PARMNUM)
define SV_ERRORTHRESHOLD_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ERRORTHRESHOLD_PARMNUM)
define SV_NETWORKERRORTHRESHOLD_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_NETWORKERRORTHRESHOLD_PARMNUM)
define SV_DISKSPACETHRESHOLD_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_DISKSPACETHRESHOLD_PARMNUM)
define SV_MAXLINKDELAY_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXLINKDELAY_PARMNUM)
define SV_MINLINKTHROUGHPUT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINLINKTHROUGHPUT_PARMNUM)
define SV_LINKINFOVALIDTIME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_LINKINFOVALIDTIME_PARMNUM)
define SV_SCAVQOSINFOUPDATETIME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SCAVQOSINFOUPDATETIME_PARMNUM)
define SV_MAXWORKITEMIDLETIME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXWORKITEMIDLETIME_PARMNUM)
define SV_MAXRAWWORKITEMS_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXRAWWORKITEMS_PARMNUM)
define SV_PRODUCTTYPE_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_PRODUCTTYPE_PARMNUM)
define SV_SERVERSIZE_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SERVERSIZE_PARMNUM)
define SV_CONNECTIONLESSAUTODISC_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_CONNECTIONLESSAUTODISC_PARMNUM)
define SV_SHARINGVIOLATIONRETRIES_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SHARINGVIOLATIONRETRIES_PARMNUM)
define SV_SHARINGVIOLATIONDELAY_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_SHARINGVIOLATIONDELAY_PARMNUM)
define SV_MAXGLOBALOPENSEARCH_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXGLOBALOPENSEARCH_PARMNUM)
define SV_REMOVEDUPLICATESEARCHES_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_REMOVEDUPLICATESEARCHES_PARMNUM)
define SV_LOCKVIOLATIONRETRIES_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_LOCKVIOLATIONRETRIES_PARMNUM)
define SV_LOCKVIOLATIONOFFSET_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_LOCKVIOLATIONOFFSET_PARMNUM)
define SV_LOCKVIOLATIONDELAY_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_LOCKVIOLATIONDELAY_PARMNUM)
define SV_MDLREADSWITCHOVER_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MDLREADSWITCHOVER_PARMNUM)
define SV_CACHEDOPENLIMIT_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_CACHEDOPENLIMIT_PARMNUM)
define SV_CRITICALTHREADS_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_CRITICALTHREADS_PARMNUM)
define SV_RESTRICTNULLSESSACCESS_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_RESTRICTNULLSESSACCESS_PARMNUM)
define SV_ENABLEWFW311DIRECTIPX_INFOLOEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEWFW311DIRECTIPX_PARMNUM)
define SV_OTHERQUEUEAFFINITY_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_OTHERQUEUEAFFINITY_PARMNUM)
define SV_QUEUESAMPLESECS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_QUEUESAMPLESECS_PARMNUM)
define SV_BALANCECOUNT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_BALANCECOUNT_PARMNUM)
define SV_PREFERREDAFFINITY_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_PREFERREDAFFINITY_PARMNUM)
define SV_MAXFREERFCBS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXFREERFCBS_PARMNUM)
define SV_MAXFREEMFCBS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXFREEMFCBS_PARMNUM)
define SV_MAXFREELFCBS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXFREELFCBS_PARMNUM)
define SV_MAXFREEPAGEDPOOLCHUNKS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM)
define SV_MINPAGEDPOOLCHUNKSIZE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM)
define SV_MAXPAGEDPOOLCHUNKSIZE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM)
define SV_SENDSFROMPREFERREDPROCESSOR_INFOLEVEL()  ...
}
define SV_MAXTHREADSPERQUEUE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXTHREADSPERQUEUE_PARMNUM)
define SV_CACHEDDIRECTORYLIMIT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_CACHEDDIRECTORYLIMIT_PARMNUM)
define SV_MAXCOPYLENGTH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MAXCOPYLENGTH_PARMNUM)
define SV_ENABLEBULKTRANSFER_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLEBULKTRANSFER_PARMNUM)
define SV_ENABLECOMPRESSION_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLECOMPRESSION_PARMNUM)
define SV_AUTOSHAREWKS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_AUTOSHAREWKS_PARMNUM)
define SV_AUTOSHARESERVER_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_AUTOSHARESERVER_PARMNUM)
define SV_ENABLESECURITYSIGNATURE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_ENABLESECURITYSIGNATURE_PARMNUM)
define SV_REQUIRESECURITYSIGNATURE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_REQUIRESECURITYSIGNATURE_PARMNUM)
define SV_MINCLIENTBUFFERSIZE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_MINCLIENTBUFFERSIZE_PARMNUM)
define SV_CONNECTIONNOSESSIONSTIMEOUT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + SV_CONNECTIONNOSESSIONSTIMEOUT_PARMNUM)
define SVI1_NUM_ELEMENTS()  5
define SVI2_NUM_ELEMENTS()  40
define SVI3_NUM_ELEMENTS()  44
define SV_MAX_CMD_LEN()  PATHLEN
define SW_AUTOPROF_LOAD_MASK()  1
define SW_AUTOPROF_SAVE_MASK()  2
define SV_MAX_SRV_HEUR_LEN()  32
define SV_USERS_PER_LICENSE()  5
define SVTI2_REMAP_PIPE_NAMES()  2

struct SERVER_INFO_100
{
    int32      sv100_platform_id;
    int32      sv100_name;
}

struct SERVER_INFO_101
{
    int32      sv101_platform_id;
    int32      sv101_name;
    int32      sv101_version_major;
    int32      sv101_version_minor;
    int32      sv101_type;
    int32      sv101_comment;
}

struct SERVER_INFO_102
{
    int32       sv102_platform_id;
    int32       sv102_name;
    int32       sv102_version_major;
    int32       sv102_version_minor;
    int32       sv102_type;
    int32       sv102_comment;
    int32       sv102_users;
    int32       sv102_disc;
    int32       sv102_hidden;
    int32       sv102_announce;
    int32       sv102_anndelta;
    int32       sv102_licenses;
    int32       sv102_userpath;
}

struct SERVER_INFO_402
{
    int32       sv402_ulist_mtime;
    int32       sv402_glist_mtime;
    int32       sv402_alist_mtime;
    int32       sv402_alerts;
    int32       sv402_security;
    int32       sv402_numadmin;
    int32       sv402_lanmask;
    int32       sv402_guestacct;
    int32       sv402_chdevs;
    int32       sv402_chdevq;
    int32       sv402_chdevjobs;
    int32       sv402_connections;
    int32       sv402_shares;
    int32       sv402_openfiles;
    int32       sv402_sessopens;
    int32       sv402_sessvcs;
    int32       sv402_sessreqs;
    int32       sv402_opensearch;
    int32       sv402_activelocks;
    int32       sv402_numreqbuf;
    int32       sv402_sizreqbuf;
    int32       sv402_numbigbuf;
    int32       sv402_numfiletasks;
    int32       sv402_alertsched;
    int32       sv402_erroralert;
    int32       sv402_logonalert;
    int32       sv402_accessalert;
    int32       sv402_diskalert;
    int32       sv402_netioalert;
    int32       sv402_maxauditsz;
    int32       sv402_srvheuristics;
}

struct SERVER_INFO_403
{
    int32       sv403_ulist_mtime;
    int32       sv403_glist_mtime;
    int32       sv403_alist_mtime;
    int32       sv403_alerts;
    int32       sv403_security;
    int32       sv403_numadmin;
    int32       sv403_lanmask;
    int32       sv403_guestacct;
    int32       sv403_chdevs;
    int32       sv403_chdevq;
    int32       sv403_chdevjobs;
    int32       sv403_connections;
    int32       sv403_shares;
    int32       sv403_openfiles;
    int32       sv403_sessopens;
    int32       sv403_sessvcs;
    int32       sv403_sessreqs;
    int32       sv403_opensearch;
    int32       sv403_activelocks;
    int32       sv403_numreqbuf;
    int32       sv403_sizreqbuf;
    int32       sv403_numbigbuf;
    int32       sv403_numfiletasks;
    int32       sv403_alertsched;
    int32       sv403_erroralert;
    int32       sv403_logonalert;
    int32       sv403_accessalert;
    int32       sv403_diskalert;
    int32       sv403_netioalert;
    int32       sv403_maxauditsz;
    int32       sv403_srvheuristics;
    int32       sv403_auditedevents;
    int32       sv403_autoprofile;
    int32       sv403_autopath;
}

struct SERVER_INFO_502
{
    int32      sv502_sessopens;
    int32      sv502_sessvcs;
    int32      sv502_opensearch;
    int32      sv502_sizreqbuf;
    int32      sv502_initworkitems;
    int32      sv502_maxworkitems;
    int32      sv502_rawworkitems;
    int32      sv502_irpstacksize;
    int32      sv502_maxrawbuflen;
    int32      sv502_sessusers;
    int32      sv502_sessconns;
    int32      sv502_maxpagedmemoryusage;
    int32      sv502_maxnonpagedmemoryusage;
    int32      sv502_enablesoftcompat;
    int32      sv502_enableforcedlogoff;
    int32      sv502_timesource;
    int32      sv502_acceptdownlevelapis;
    int32      sv502_lmannounce;
}

struct SERVER_INFO_503
{
    int32      sv503_sessopens;
    int32      sv503_sessvcs;
    int32      sv503_opensearch;
    int32      sv503_sizreqbuf;
    int32      sv503_initworkitems;
    int32      sv503_maxworkitems;
    int32      sv503_rawworkitems;
    int32      sv503_irpstacksize;
    int32      sv503_maxrawbuflen;
    int32      sv503_sessusers;
    int32      sv503_sessconns;
    int32      sv503_maxpagedmemoryusage;
    int32      sv503_maxnonpagedmemoryusage;
    int32      sv503_enablesoftcompat;
    int32      sv503_enableforcedlogoff;
    int32      sv503_timesource;
    int32      sv503_acceptdownlevelapis;
    int32      sv503_lmannounce;
    int32      sv503_domain;
    int32      sv503_maxcopyreadlen;
    int32      sv503_maxcopywritelen;
    int32      sv503_minkeepsearch;
    int32      sv503_maxkeepsearch;
    int32      sv503_minkeepcomplsearch;
    int32      sv503_maxkeepcomplsearch;
    int32      sv503_threadcountadd;
    int32      sv503_numblockthreads;
    int32      sv503_scavtimeout;
    int32      sv503_minrcvqueue;
    int32      sv503_minfreeworkitems;
    int32      sv503_xactmemsize;
    int32      sv503_threadpriority;
    int32      sv503_maxmpxct;
    int32      sv503_oplockbreakwait;
    int32      sv503_oplockbreakresponsewait;
    int32      sv503_enableoplocks;
    int32      sv503_enableoplockforceclose;
    int32      sv503_enablefcbopens;
    int32      sv503_enableraw;
    int32      sv503_enablesharednetdrives;
    int32      sv503_minfreeconnections;
    int32      sv503_maxfreeconnections;
}

struct SERVER_INFO_599
{
    int32      sv599_sessopens;
    int32      sv599_sessvcs;
    int32      sv599_opensearch;
    int32      sv599_sizreqbuf;
    int32      sv599_initworkitems;
    int32      sv599_maxworkitems;
    int32      sv599_rawworkitems;
    int32      sv599_irpstacksize;
    int32      sv599_maxrawbuflen;
    int32      sv599_sessusers;
    int32      sv599_sessconns;
    int32      sv599_maxpagedmemoryusage;
    int32      sv599_maxnonpagedmemoryusage;
    int32      sv599_enablesoftcompat;
    int32      sv599_enableforcedlogoff;
    int32      sv599_timesource;
    int32      sv599_acceptdownlevelapis;
    int32      sv599_lmannounce;
    int32      sv599_domain;
    int32      sv599_maxcopyreadlen;
    int32      sv599_maxcopywritelen;
    int32      sv599_minkeepsearch;
    int32      sv599_maxkeepsearch;
    int32      sv599_minkeepcomplsearch;
    int32      sv599_maxkeepcomplsearch;
    int32      sv599_threadcountadd;
    int32      sv599_numblockthreads;
    int32      sv599_scavtimeout;
    int32      sv599_minrcvqueue;
    int32      sv599_minfreeworkitems;
    int32      sv599_xactmemsize;
    int32      sv599_threadpriority;
    int32      sv599_maxmpxct;
    int32      sv599_oplockbreakwait;
    int32      sv599_oplockbreakresponsewait;
    int32      sv599_enableoplocks;
    int32      sv599_enableoplockforceclose;
    int32      sv599_enablefcbopens;
    int32      sv599_enableraw;
    int32      sv599_enablesharednetdrives;
    int32      sv599_minfreeconnections;
    int32      sv599_maxfreeconnections;
    int32      sv599_initsesstable;
    int32      sv599_initconntable;
    int32      sv599_initfiletable;
    int32      sv599_initsearchtable;
    int32      sv599_alertschedule;
    int32      sv599_errorthreshold;
    int32      sv599_networkerrorthreshold;
    int32      sv599_diskspacethreshold;
    int32      sv599_reserved;
    int32      sv599_maxlinkdelay;
    int32      sv599_minlinkthroughput;
    int32      sv599_linkinfovalidtime;
    int32      sv599_scavqosinfoupdatetime;
    int32      sv599_maxworkitemidletime;
}

struct SERVER_INFO_598
{
    int32      sv598_maxrawworkitems;
    int32      sv598_maxthreadsperqueue;
    int32      sv598_producttype;
    int32      sv598_serversize;
    int32      sv598_connectionlessautodisc;
    int32      sv598_sharingviolationretries;
    int32      sv598_sharingviolationdelay;
    int32      sv598_maxglobalopensearch;
    int32      sv598_removeduplicatesearches;
    int32      sv598_lockviolationoffset;
    int32      sv598_lockviolationdelay;
    int32      sv598_mdlreadswitchover;
    int32      sv598_cachedopenlimit;
    int32      sv598_otherqueueaffinity;
    int32      sv598_restrictnullsessaccess;
    int32      sv598_enablewfw311directipx;
    int32      sv598_queuesamplesecs;
    int32      sv598_balancecount;
    int32      sv598_preferredaffinity;
    int32      sv598_maxfreerfcbs;
    int32      sv598_maxfreemfcbs;
    int32      sv598_maxfreelfcbs;
    int32      sv598_maxfreepagedpoolchunks;
    int32      sv598_minpagedpoolchunksize;
    int32      sv598_maxpagedpoolchunksize;
	int32      sv598_cacheddirectorylimit;
	int32      sv598_maxcopylength;
	int32      sv598_enablebulktransfer;
	int32      sv598_enablecompression;
	int32      sv598_autosharewks;
	int32      sv598_autoshareserver;
	int32      sv598_enablesecuritysignature;
	int32      sv598_requiresecuritysignature;
	int32      sv598_minclientbuffersize;
	GUID      sv598_serverguid;
	int32      sv598_ConnectionNoSessionsTimeout;
}

struct SERVER_INFO_1005
{
    int32      sv1005_comment;
}

struct SERVER_INFO_1107
{
    int32      sv1107_users;
}

struct SERVER_INFO_1010
{
    int32      sv1010_disc;
}

struct SERVER_INFO_1016
{
    int32      sv1016_hidden;
}

struct SERVER_INFO_1017
{
    int32      sv1017_announce;
}

struct SERVER_INFO_1018
{
    int32      sv1018_anndelta;
}

struct SERVER_INFO_1501
{
    int32      sv1501_sessopens;
}

struct SERVER_INFO_1502
{
    int32      sv1502_sessvcs;
}

struct SERVER_INFO_1503
{
    int32      sv1503_opensearch;
}

struct SERVER_INFO_1506
{
    int32      sv1506_maxworkitems;
}

struct SERVER_INFO_1509
{
    int32      sv1509_maxrawbuflen;
}

struct SERVER_INFO_1510
{
    int32      sv1510_sessusers;
}

struct SERVER_INFO_1511
{
    int32      sv1511_sessconns;
}

struct SERVER_INFO_1512
{
    int32      sv1512_maxnonpagedmemoryusage;
}

struct SERVER_INFO_1513
{
    int32      sv1513_maxpagedmemoryusage;
}

struct SERVER_INFO_1514
{
    int32      sv1514_enablesoftcompat;
}

struct SERVER_INFO_1515
{
    int32      sv1515_enableforcedlogoff;
}

struct SERVER_INFO_1516
{
    int32      sv1516_timesource;
}

struct SERVER_INFO_1518
{
    int32      sv1518_lmannounce;
}

struct SERVER_INFO_1520
{
    int32      sv1520_maxcopyreadlen;
}

struct SERVER_INFO_1521
{
    int32      sv1521_maxcopywritelen;
}

struct SERVER_INFO_1522
{
    int32      sv1522_minkeepsearch;
}

struct SERVER_INFO_1523
{
    int32      sv1523_maxkeepsearch;
}

struct SERVER_INFO_1524
{
    int32      sv1524_minkeepcomplsearch;
}

struct SERVER_INFO_1525
{
    int32      sv1525_maxkeepcomplsearch;
}

struct SERVER_INFO_1528
{
    int32      sv1528_scavtimeout;
}

struct SERVER_INFO_1529
{
    int32      sv1529_minrcvqueue;
}

struct SERVER_INFO_1530
{
    int32      sv1530_minfreeworkitems;
}

struct SERVER_INFO_1533
{
    int32      sv1533_maxmpxct;
}

struct SERVER_INFO_1534
{
    int32      sv1534_oplockbreakwait;
}

struct SERVER_INFO_1535
{
    int32      sv1535_oplockbreakresponsewait;
}

struct SERVER_INFO_1536
{
    int32      sv1536_enableoplocks;
}

struct SERVER_INFO_1537
{
    int32      sv1537_enableoplockforceclose;
}

struct SERVER_INFO_1538
{
    int32      sv1538_enablefcbopens;
}

struct SERVER_INFO_1539
{
    int32      sv1539_enableraw;
}

struct SERVER_INFO_1540
{
    int32      sv1540_enablesharednetdrives;
}

struct SERVER_INFO_1541
{
    int32      sv1541_minfreeconnections;
}

struct SERVER_INFO_1542
{
    int32      sv1542_maxfreeconnections;
}

struct SERVER_INFO_1543
{
    int32      sv1543_initsesstable;
}

struct SERVER_INFO_1544
{
    int32      sv1544_initconntable;
}

struct SERVER_INFO_1545
{
    int32      sv1545_initfiletable;
}

struct SERVER_INFO_1546
{
    int32      sv1546_initsearchtable;
}

struct SERVER_INFO_1547
{
    int32      sv1547_alertschedule;
}

struct SERVER_INFO_1548
{
    int32      sv1548_errorthreshold;
}

struct SERVER_INFO_1549
{
    int32      sv1549_networkerrorthreshold;
}

struct SERVER_INFO_1550
{
    int32      sv1550_diskspacethreshold;
}

struct SERVER_INFO_1552
{
    int32      sv1552_maxlinkdelay;
}

struct SERVER_INFO_1553
{
    int32      sv1553_minlinkthroughput;
}

struct SERVER_INFO_1554
{
    int32      sv1554_linkinfovalidtime;
}

struct SERVER_INFO_1555
{
    int32      sv1555_scavqosinfoupdatetime;
}

struct SERVER_INFO_1556
{
    int32      sv1556_maxworkitemidletime;
}

struct SERVER_INFO_1557
{
    int32      sv1557_maxrawworkitems;
}

struct SERVER_INFO_1560
{
    int32      sv1560_producttype;
}

struct SERVER_INFO_1561
{
    int32      sv1561_serversize;
}

struct SERVER_INFO_1562
{
    int32      sv1562_connectionlessautodisc;
}

struct SERVER_INFO_1563
{
    int32      sv1563_sharingviolationretries;
}

struct SERVER_INFO_1564
{
    int32      sv1564_sharingviolationdelay;
}

struct SERVER_INFO_1565
{
    int32      sv1565_maxglobalopensearch;
}

struct SERVER_INFO_1566
{
    int32      sv1566_removeduplicatesearches;
}

struct SERVER_INFO_1567
{
    int32      sv1567_lockviolationretries;
}

struct SERVER_INFO_1568
{
    int32      sv1568_lockviolationoffset;
}

struct SERVER_INFO_1569
{
    int32      sv1569_lockviolationdelay;
}

struct SERVER_INFO_1570
{
    int32      sv1570_mdlreadswitchover;
}

struct SERVER_INFO_1571
{
    int32      sv1571_cachedopenlimit;
}

struct SERVER_INFO_1572
{
    int32      sv1572_criticalthreads;
}

struct SERVER_INFO_1573
{
    int32      sv1573_restrictnullsessaccess;
}

struct SERVER_INFO_1574
{
    int32      sv1574_enablewfw311directipx;
}

struct SERVER_INFO_1575
{
    int32      sv1575_otherqueueaffinity;
}

struct SERVER_INFO_1576
{
    int32      sv1576_queuesamplesecs;
}

struct SERVER_INFO_1577
{
    int32      sv1577_balancecount;
}

struct SERVER_INFO_1578
{
    int32      sv1578_preferredaffinity;
}

struct SERVER_INFO_1579
{
    int32      sv1579_maxfreerfcbs;
}

struct SERVER_INFO_1580
{
    int32      sv1580_maxfreemfcbs;
}

struct SERVER_INFO_1581
{
    int32      sv1581_maxfreemlcbs;
}

struct SERVER_INFO_1582
{
    int32      sv1582_maxfreepagedpoolchunks;
}

struct SERVER_INFO_1583
{
    int32      sv1583_minpagedpoolchunksize;
}

struct SERVER_INFO_1584
{
    int32      sv1584_maxpagedpoolchunksize;
}

struct SERVER_INFO_1585
{
    int32 sv1585_sendsfrompreferredprocessor;
}

struct SERVER_INFO_1586
{
    int32      sv1586_maxthreadsperqueue;
}

struct SERVER_INFO_1587
{
    int32      sv1587_cacheddirectorylimit;
}

struct SERVER_INFO_1588
{
    int32      sv1588_maxcopylength;
}

struct SERVER_INFO_1589
{
    int32      sv1589_enablebulktransfer;
}

struct SERVER_INFO_1590
{
    int32      sv1590_enablecompression;
}

struct SERVER_INFO_1591
{
    int32      sv1591_autosharewks;
}

struct SERVER_INFO_1592
{
    int32      sv1592_autosharewks;
}

struct SERVER_INFO_1593
{
    int32      sv1593_enablesecuritysignature;
}

struct SERVER_INFO_1594
{
    int32      sv1594_requiresecuritysignature;
}

struct SERVER_INFO_1595
{
    int32      sv1595_minclientbuffersize;
}

struct SERVER_INFO_1596
{
    int32      sv1596_ConnectionNoSessionsTimeout;
}

struct SERVER_TRANSPORT_INFO_0
{
    int32      svti0_numberofvcs;
    int32      svti0_transportname;
    int32      svti0_transportaddress;
    int32      svti0_transportaddresslength;
    int32      svti0_networkaddress;
}

struct SERVER_TRANSPORT_INFO_1
{
    int32      svti1_numberofvcs;
    int32      svti1_transportname;
    int32      svti1_transportaddress;
    int32      svti1_transportaddresslength;
    int32      svti1_networkaddress;
    int32      svti1_domain;
}

struct SERVER_TRANSPORT_INFO_2
{
    int32      svti2_numberofvcs;
    int32      svti2_transportname;
    int32      svti2_transportaddress;
    int32      svti2_transportaddresslength;
    int32      svti2_networkaddress;
    int32      svti2_domain;
    int32      svti2_flags;
}

//------------------------------------------------------ LMERR.H --------------------------------------------
define NERR_Success()  0
define NERR_BASE()  2100
define NERR_NetNotStarted()  (NERR_BASE+2)
define NERR_UnknownServer()  (NERR_BASE+3)
define NERR_ShareMem()  (NERR_BASE+4)
define NERR_NoNetworkResource()  (NERR_BASE+5)
define NERR_RemoteOnly()  (NERR_BASE+6)
define NERR_DevNotRedirected()  (NERR_BASE+7)
define NERR_ServerNotStarted()  (NERR_BASE+14)
define NERR_ItemNotFound()  (NERR_BASE+15)
define NERR_UnknownDevDir()  (NERR_BASE+16)
define NERR_RedirectedPath()  (NERR_BASE+17)
define NERR_DuplicateShare()  (NERR_BASE+18)
define NERR_NoRoom()  (NERR_BASE+19)
define NERR_TooManyItems()  (NERR_BASE+21)
define NERR_InvalidMaxUsers()  (NERR_BASE+22)
define NERR_BufTooSmall()  (NERR_BASE+23)
define NERR_RemoteErr()  (NERR_BASE+27)
define NERR_LanmanIniError()  (NERR_BASE+31)
define NERR_NetworkError()  (NERR_BASE+36)
define NERR_WkstaInconsistentState()  (NERR_BASE+37)
define NERR_WkstaNotStarted()  (NERR_BASE+38)
define NERR_BrowserNotStarted()  (NERR_BASE+39)
define NERR_InternalError()  (NERR_BASE+40)
define NERR_BadTransactConfig()  (NERR_BASE+41)
define NERR_InvalidAPI()  (NERR_BASE+42)
define NERR_BadEventName()  (NERR_BASE+43)
define NERR_DupNameReboot()  (NERR_BASE+44)
define NERR_CfgCompNotFound()  (NERR_BASE+46)
define NERR_CfgParamNotFound()  (NERR_BASE+47)
define NERR_LineTooLong()  (NERR_BASE+49)
define NERR_QNotFound()  (NERR_BASE+50)
define NERR_JobNotFound()  (NERR_BASE+51)
define NERR_DestNotFound()  (NERR_BASE+52)
define NERR_DestExists()  (NERR_BASE+53)
define NERR_QExists()  (NERR_BASE+54)
define NERR_QNoRoom()  (NERR_BASE+55)
define NERR_JobNoRoom()  (NERR_BASE+56)
define NERR_DestNoRoom()  (NERR_BASE+57)
define NERR_DestIdle()  (NERR_BASE+58)
define NERR_DestInvalidOp()  (NERR_BASE+59)
define NERR_ProcNoRespond()  (NERR_BASE+60)
define NERR_SpoolerNotLoaded()  (NERR_BASE+61)
define NERR_DestInvalidState()  (NERR_BASE+62)
define NERR_QInvalidState()  (NERR_BASE+63)
define NERR_JobInvalidState()  (NERR_BASE+64)
define NERR_SpoolNoMemory()  (NERR_BASE+65)
define NERR_DriverNotFound()  (NERR_BASE+66)
define NERR_DataTypeInvalid()  (NERR_BASE+67)
define NERR_ProcNotFound()  (NERR_BASE+68)
define NERR_ServiceTableLocked()  (NERR_BASE+80)
define NERR_ServiceTableFull()  (NERR_BASE+81)
define NERR_ServiceInstalled()  (NERR_BASE+82)
define NERR_ServiceEntryLocked()  (NERR_BASE+83)
define NERR_ServiceNotInstalled()  (NERR_BASE+84)
define NERR_BadServiceName()  (NERR_BASE+85)
define NERR_ServiceCtlTimeout()  (NERR_BASE+86)
define NERR_ServiceCtlBusy()  (NERR_BASE+87)
define NERR_BadServiceProgName()  (NERR_BASE+88)
define NERR_ServiceNotCtrl()  (NERR_BASE+89)
define NERR_ServiceKillProc()  (NERR_BASE+90)
define NERR_ServiceCtlNotValid()  (NERR_BASE+91)
define NERR_NotInDispatchTbl()  (NERR_BASE+92)
define NERR_BadControlRecv()  (NERR_BASE+93)
define NERR_ServiceNotStarting()  (NERR_BASE+94)
define NERR_AlreadyLoggedOn()  (NERR_BASE+100)
define NERR_NotLoggedOn()  (NERR_BASE+101)
define NERR_BadUsername()  (NERR_BASE+102)
define NERR_BadPassword()  (NERR_BASE+103)
define NERR_UnableToAddName_W()  (NERR_BASE+104)
define NERR_UnableToAddName_F()  (NERR_BASE+105)
define NERR_UnableToDelName_W()  (NERR_BASE+106)
define NERR_UnableToDelName_F()  (NERR_BASE+107)
define NERR_LogonsPaused()  (NERR_BASE+109)
define NERR_LogonServerConflict()  (NERR_BASE+110)
define NERR_LogonNoUserPath()  (NERR_BASE+111)
define NERR_LogonScriptError()  (NERR_BASE+112)
define NERR_StandaloneLogon()  (NERR_BASE+114)
define NERR_LogonServerNotFound()  (NERR_BASE+115)
define NERR_LogonDomainExists()  (NERR_BASE+116)
define NERR_NonValidatedLogon()  (NERR_BASE+117)
define NERR_ACFNotFound()  (NERR_BASE+119)
define NERR_GroupNotFound()  (NERR_BASE+120)
define NERR_UserNotFound()  (NERR_BASE+121)
define NERR_ResourceNotFound()  (NERR_BASE+122)
define NERR_GroupExists()  (NERR_BASE+123)
define NERR_UserExists()  (NERR_BASE+124)
define NERR_ResourceExists()  (NERR_BASE+125)
define NERR_NotPrimary()  (NERR_BASE+126)
define NERR_ACFNotLoaded()  (NERR_BASE+127)
define NERR_ACFNoRoom()  (NERR_BASE+128)
define NERR_ACFFileIOFail()  (NERR_BASE+129)
define NERR_ACFTooManyLists()  (NERR_BASE+130)
define NERR_UserLogon()  (NERR_BASE+131)
define NERR_ACFNoParent()  (NERR_BASE+132)
define NERR_CanNotGrowSegment()  (NERR_BASE+133)
define NERR_SpeGroupOp()  (NERR_BASE+134)
define NERR_NotInCache()  (NERR_BASE+135)
define NERR_UserInGroup()  (NERR_BASE+136)
define NERR_UserNotInGroup()  (NERR_BASE+137)
define NERR_AccountUndefined()  (NERR_BASE+138)
define NERR_AccountExpired()  (NERR_BASE+139)
define NERR_InvalidWorkstation()  (NERR_BASE+140)
define NERR_InvalidLogonHours()  (NERR_BASE+141)
define NERR_PasswordExpired()  (NERR_BASE+142)
define NERR_PasswordCantChange()  (NERR_BASE+143)
define NERR_PasswordHistConflict()  (NERR_BASE+144)
define NERR_PasswordTooShort()  (NERR_BASE+145)
define NERR_PasswordTooRecent()  (NERR_BASE+146)
define NERR_InvalidDatabase()  (NERR_BASE+147)
define NERR_DatabaseUpToDate()  (NERR_BASE+148)
define NERR_SyncRequired()  (NERR_BASE+149)
define NERR_UseNotFound()  (NERR_BASE+150)
define NERR_BadAsgType()  (NERR_BASE+151)
define NERR_DeviceIsShared()  (NERR_BASE+152)
define NERR_NoComputerName()  (NERR_BASE+170)
define NERR_MsgAlreadyStarted()  (NERR_BASE+171)
define NERR_MsgInitFailed()  (NERR_BASE+172)
define NERR_NameNotFound()  (NERR_BASE+173)
define NERR_AlreadyForwarded()  (NERR_BASE+174)
define NERR_AddForwarded()  (NERR_BASE+175)
define NERR_AlreadyExists()  (NERR_BASE+176)
define NERR_TooManyNames()  (NERR_BASE+177)
define NERR_DelComputerName()  (NERR_BASE+178)
define NERR_LocalForward()  (NERR_BASE+179)
define NERR_GrpMsgProcessor()  (NERR_BASE+180)
define NERR_PausedRemote()  (NERR_BASE+181)
define NERR_BadReceive()  (NERR_BASE+182)
define NERR_NameInUse()  (NERR_BASE+183)
define NERR_MsgNotStarted()  (NERR_BASE+184)
define NERR_NotLocalName()  (NERR_BASE+185)
define NERR_NoForwardName()  (NERR_BASE+186)
define NERR_RemoteFull()  (NERR_BASE+187)
define NERR_NameNotForwarded()  (NERR_BASE+188)
define NERR_TruncatedBroadcast()  (NERR_BASE+189)
define NERR_InvalidDevice()  (NERR_BASE+194)
define NERR_WriteFault()  (NERR_BASE+195)
define NERR_DuplicateName()  (NERR_BASE+197)
define NERR_DeleteLater()  (NERR_BASE+198)
define NERR_IncompleteDel()  (NERR_BASE+199)
define NERR_MultipleNets()  (NERR_BASE+200)
define NERR_NetNameNotFound()  (NERR_BASE+210)
define NERR_DeviceNotShared()  (NERR_BASE+211)
define NERR_ClientNameNotFound()  (NERR_BASE+212)
define NERR_FileIdNotFound()  (NERR_BASE+214)
define NERR_ExecFailure()  (NERR_BASE+215)
define NERR_TmpFile()  (NERR_BASE+216)
define NERR_TooMuchData()  (NERR_BASE+217)
define NERR_DeviceShareConflict()  (NERR_BASE+218)
define NERR_BrowserTableIncomplete()  (NERR_BASE+219)
define NERR_NotLocalDomain()  (NERR_BASE+220)
define NERR_IsDfsShare()  (NERR_BASE+221)
define NERR_DevInvalidOpCode()  (NERR_BASE+231)
define NERR_DevNotFound()  (NERR_BASE+232)
define NERR_DevNotOpen()  (NERR_BASE+233)
define NERR_BadQueueDevString()  (NERR_BASE+234)
define NERR_BadQueuePriority()  (NERR_BASE+235)
define NERR_NoCommDevs()  (NERR_BASE+237)
define NERR_QueueNotFound()  (NERR_BASE+238)
define NERR_BadDevString()  (NERR_BASE+240)
define NERR_BadDev()  (NERR_BASE+241)
define NERR_InUseBySpooler()  (NERR_BASE+242)
define NERR_CommDevInUse()  (NERR_BASE+243)
define NERR_InvalidComputer()  (NERR_BASE+251)
define NERR_MaxLenExceeded()  (NERR_BASE+254)
define NERR_BadComponent()  (NERR_BASE+256)
define NERR_CantType()  (NERR_BASE+257)
define NERR_TooManyEntries()  (NERR_BASE+262)
define NERR_ProfileFileTooBig()  (NERR_BASE+270)
define NERR_ProfileOffset()  (NERR_BASE+271)
define NERR_ProfileCleanup()  (NERR_BASE+272)
define NERR_ProfileUnknownCmd()  (NERR_BASE+273)
define NERR_ProfileLoadErr()  (NERR_BASE+274)
define NERR_ProfileSaveErr()  (NERR_BASE+275)
define NERR_LogOverflow()  (NERR_BASE+277)
define NERR_LogFileChanged()  (NERR_BASE+278)
define NERR_LogFileCorrupt()  (NERR_BASE+279)
define NERR_SourceIsDir()  (NERR_BASE+280)
define NERR_BadSource()  (NERR_BASE+281)
define NERR_BadDest()  (NERR_BASE+282)
define NERR_DifferentServers()  (NERR_BASE+283)
define NERR_RunSrvPaused()  (NERR_BASE+285)
define NERR_ErrCommRunSrv()  (NERR_BASE+289)
define NERR_ErrorExecingGhost()  (NERR_BASE+291)
define NERR_ShareNotFound()  (NERR_BASE+292)
define NERR_InvalidLana()  (NERR_BASE+300)
define NERR_OpenFiles()  (NERR_BASE+301)
define NERR_ActiveConns()  (NERR_BASE+302)
define NERR_BadPasswordCore()  (NERR_BASE+303)
define NERR_DevInUse()  (NERR_BASE+304)
define NERR_LocalDrive()  (NERR_BASE+305)
define NERR_AlertExists()  (NERR_BASE+330)
define NERR_TooManyAlerts()  (NERR_BASE+331)
define NERR_NoSuchAlert()  (NERR_BASE+332)
define NERR_BadRecipient()  (NERR_BASE+333)
define NERR_AcctLimitExceeded()  (NERR_BASE+334)
define NERR_InvalidLogSeek()  (NERR_BASE+340)
define NERR_BadUasConfig()  (NERR_BASE+350)
define NERR_InvalidUASOp()  (NERR_BASE+351)
define NERR_LastAdmin()  (NERR_BASE+352)
define NERR_DCNotFound()  (NERR_BASE+353)
define NERR_LogonTrackingError()  (NERR_BASE+354)
define NERR_NetlogonNotStarted()  (NERR_BASE+355)
define NERR_CanNotGrowUASFile()  (NERR_BASE+356)
define NERR_TimeDiffAtDC()  (NERR_BASE+357)
define NERR_PasswordMismatch()  (NERR_BASE+358)
define NERR_NoSuchServer()  (NERR_BASE+360)
define NERR_NoSuchSession()  (NERR_BASE+361)
define NERR_NoSuchConnection()  (NERR_BASE+362)
define NERR_TooManyServers()  (NERR_BASE+363)
define NERR_TooManySessions()  (NERR_BASE+364)
define NERR_TooManyConnections()  (NERR_BASE+365)
define NERR_TooManyFiles()  (NERR_BASE+366)
define NERR_NoAlternateServers()  (NERR_BASE+367)
define NERR_TryDownLevel()  (NERR_BASE+370)
define NERR_UPSDriverNotStarted()  (NERR_BASE+380)
define NERR_UPSInvalidConfig()  (NERR_BASE+381)
define NERR_UPSInvalidCommPort()  (NERR_BASE+382)
define NERR_UPSSignalAsserted()  (NERR_BASE+383)
define NERR_UPSShutdownFailed()  (NERR_BASE+384)
define NERR_BadDosRetCode()  (NERR_BASE+400)
define NERR_ProgNeedsExtraMem()  (NERR_BASE+401)
define NERR_BadDosFunction()  (NERR_BASE+402)
define NERR_RemoteBootFailed()  (NERR_BASE+403)
define NERR_BadFileCheckSum()  (NERR_BASE+404)
define NERR_NoRplBootSystem()  (NERR_BASE+405)
define NERR_RplLoadrNetBiosErr()  (NERR_BASE+406)
define NERR_RplLoadrDiskErr()  (NERR_BASE+407)
define NERR_ImageParamErr()  (NERR_BASE+408)
define NERR_TooManyImageParams()  (NERR_BASE+409)
define NERR_NonDosFloppyUsed()  (NERR_BASE+410)
define NERR_RplBootRestart()  (NERR_BASE+411)
define NERR_RplSrvrCallFailed()  (NERR_BASE+412)
define NERR_CantConnectRplSrvr()  (NERR_BASE+413)
define NERR_CantOpenImageFile()  (NERR_BASE+414)
define NERR_CallingRplSrvr()  (NERR_BASE+415)
define NERR_StartingRplBoot()  (NERR_BASE+416)
define NERR_RplBootServiceTerm()  (NERR_BASE+417)
define NERR_RplBootStartFailed()  (NERR_BASE+418)
define NERR_RPL_CONNECTED()  (NERR_BASE+419)
define NERR_BrowserConfiguredToNotRun()  (NERR_BASE+450)
define NERR_RplNoAdaptersStarted()  (NERR_BASE+510)
define NERR_RplBadRegistry()  (NERR_BASE+511)
define NERR_RplBadDatabase()  (NERR_BASE+512)
define NERR_RplRplfilesShare()  (NERR_BASE+513)
define NERR_RplNotRplServer()  (NERR_BASE+514)
define NERR_RplCannotEnum()  (NERR_BASE+515)
define NERR_RplWkstaInfoCorrupted()  (NERR_BASE+516)
define NERR_RplWkstaNotFound()  (NERR_BASE+517)
define NERR_RplWkstaNameUnavailable()  (NERR_BASE+518)
define NERR_RplProfileInfoCorrupted()  (NERR_BASE+519)
define NERR_RplProfileNotFound()  (NERR_BASE+520)
define NERR_RplProfileNameUnavailable()  (NERR_BASE+521)
define NERR_RplProfileNotEmpty()  (NERR_BASE+522)
define NERR_RplConfigInfoCorrupted()  (NERR_BASE+523)
define NERR_RplConfigNotFound()  (NERR_BASE+524)
define NERR_RplAdapterInfoCorrupted()  (NERR_BASE+525)
define NERR_RplInternal()  (NERR_BASE+526)
define NERR_RplVendorInfoCorrupted()  (NERR_BASE+527)
define NERR_RplBootInfoCorrupted()  (NERR_BASE+528)
define NERR_RplWkstaNeedsUserAcct()  (NERR_BASE+529)
define NERR_RplNeedsRPLUSERAcct()  (NERR_BASE+530)
define NERR_RplBootNotFound()  (NERR_BASE+531)
define NERR_RplIncompatibleProfile()  (NERR_BASE+532)
define NERR_RplAdapterNameUnavailable()  (NERR_BASE+533)
define NERR_RplConfigNotEmpty()  (NERR_BASE+534)
define NERR_RplBootInUse()  (NERR_BASE+535)
define NERR_RplBackupDatabase()  (NERR_BASE+536)
define NERR_RplAdapterNotFound()  (NERR_BASE+537)
define NERR_RplVendorNotFound()  (NERR_BASE+538)
define NERR_RplVendorNameUnavailable()  (NERR_BASE+539)
define NERR_RplBootNameUnavailable()  (NERR_BASE+540)
define NERR_RplConfigNameUnavailable()  (NERR_BASE+541)
define NERR_DfsInternalCorruption()  (NERR_BASE+560)
define NERR_DfsVolumeDataCorrupt()  (NERR_BASE+561)
define NERR_DfsNoSuchVolume()  (NERR_BASE+562)
define NERR_DfsVolumeAlreadyExists()  (NERR_BASE+563)
define NERR_DfsAlreadyShared()  (NERR_BASE+564)
define NERR_DfsNoSuchShare()  (NERR_BASE+565)
define NERR_DfsNotALeafVolume()  (NERR_BASE+566)
define NERR_DfsLeafVolume()  (NERR_BASE+567)
define NERR_DfsVolumeHasMultipleServers()  (NERR_BASE+568)
define NERR_DfsCantCreateJunctionPoint()  (NERR_BASE+569)
define NERR_DfsServerNotDfsAware()  (NERR_BASE+570)
define NERR_DfsBadRenamePath()  (NERR_BASE+571)
define NERR_DfsVolumeIsOffline()  (NERR_BASE+572)
define NERR_DfsNoSuchServer()  (NERR_BASE+573)
define NERR_DfsCyclicalName()  (NERR_BASE+574)
define NERR_DfsNotSupportedInServerDfs()  (NERR_BASE+575)
define NERR_DfsInternalError()  (NERR_BASE+590)
define NERR_SetupAlreadyJoined()  (NERR_BASE+591)
define NERR_SetupNotJoined()  (NERR_BASE+592)
define NERR_SetupDomainController()  (NERR_BASE+593)
define MAX_NERR()  (NERR_BASE+899)

//===================================[ LMWKSTA.H ]==============================
define WKSTA_PLATFORM_ID_PARMNUM()  100
define WKSTA_COMPUTERNAME_PARMNUM()  1
define WKSTA_LANGROUP_PARMNUM()  2
define WKSTA_VER_MAJOR_PARMNUM()  4
define WKSTA_VER_MINOR_PARMNUM()  5
define WKSTA_LOGGED_ON_USERS_PARMNUM()  6
define WKSTA_LANROOT_PARMNUM()  7
define WKSTA_LOGON_DOMAIN_PARMNUM()  8
define WKSTA_LOGON_SERVER_PARMNUM()  9
define WKSTA_CHARWAIT_PARMNUM()  10
define WKSTA_CHARTIME_PARMNUM()  11
define WKSTA_CHARCOUNT_PARMNUM()  12
define WKSTA_KEEPCONN_PARMNUM()  13
define WKSTA_KEEPSEARCH_PARMNUM()  14
define WKSTA_MAXCMDS_PARMNUM()  15
define WKSTA_NUMWORKBUF_PARMNUM()  16
define WKSTA_MAXWRKCACHE_PARMNUM()  17
define WKSTA_SESSTIMEOUT_PARMNUM()  18
define WKSTA_SIZERROR_PARMNUM()  19
define WKSTA_NUMALERTS_PARMNUM()  20
define WKSTA_NUMSERVICES_PARMNUM()  21
define WKSTA_NUMCHARBUF_PARMNUM()  22
define WKSTA_SIZCHARBUF_PARMNUM()  23
define WKSTA_ERRLOGSZ_PARMNUM()  27
define WKSTA_PRINTBUFTIME_PARMNUM()  28
define WKSTA_SIZWORKBUF_PARMNUM()  29
define WKSTA_MAILSLOTS_PARMNUM()  30
define WKSTA_NUMDGRAMBUF_PARMNUM()  31
define WKSTA_WRKHEURISTICS_PARMNUM()  32
define WKSTA_MAXTHREADS_PARMNUM()  33
define WKSTA_LOCKQUOTA_PARMNUM()  41
define WKSTA_LOCKINCREMENT_PARMNUM()  42
define WKSTA_LOCKMAXIMUM_PARMNUM()  43
define WKSTA_PIPEINCREMENT_PARMNUM()  44
define WKSTA_PIPEMAXIMUM_PARMNUM()  45
define WKSTA_DORMANTFILELIMIT_PARMNUM()  46
define WKSTA_CACHEFILETIMEOUT_PARMNUM()  47
define WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM()  48
define WKSTA_USEUNLOCKBEHIND_PARMNUM()  49
define WKSTA_USECLOSEBEHIND_PARMNUM()  50
define WKSTA_BUFFERNAMEDPIPES_PARMNUM()  51
define WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM()  52
define WKSTA_UTILIZENTCACHING_PARMNUM()  53
define WKSTA_USERAWREAD_PARMNUM()  54
define WKSTA_USERAWWRITE_PARMNUM()  55
define WKSTA_USEWRITERAWWITHDATA_PARMNUM()  56
define WKSTA_USEENCRYPTION_PARMNUM()  57
define WKSTA_BUFFILESWITHDENYWRITE_PARMNUM()  58
define WKSTA_BUFFERREADONLYFILES_PARMNUM()  59
define WKSTA_FORCECORECREATEMODE_PARMNUM()  60
define WKSTA_USE512BYTESMAXTRANSFER_PARMNUM()  61
define WKSTA_READAHEADTHRUPUT_PARMNUM()  62
define WKSTA_OTH_DOMAINS_PARMNUM()  101
define TRANSPORT_QUALITYOFSERVICE_PARMNUM()  201
define TRANSPORT_NAME_PARMNUM()  202

struct WKSTA_INFO_100
{
    int32      wki100_platform_id;
    int32      wki100_computername;
    int32      wki100_langroup;
    int32      wki100_ver_major;
    int32      wki100_ver_minor;
}

struct WKSTA_INFO_101
{
    int32      wki101_platform_id;
    int32      wki101_computername;
    int32      wki101_langroup;
    int32      wki101_ver_major;
    int32      wki101_ver_minor;
    int32      wki101_lanroot;
}

struct WKSTA_INFO_102
{
    int32      wki102_platform_id;
    int32      wki102_computername;
    int32      wki102_langroup;
    int32      wki102_ver_major;
    int32      wki102_ver_minor;
    int32      wki102_lanroot;
    int32      wki102_logged_on_users;
}

struct WKSTA_INFO_302
{
    int32      wki302_char_wait;
    int32      wki302_collection_time;
    int32      wki302_maximum_collection_count;
    int32      wki302_keep_conn;
    int32      wki302_keep_search;
    int32      wki302_max_cmds;
    int32      wki302_num_work_buf;
    int32      wki302_siz_work_buf;
    int32      wki302_max_wrk_cache;
    int32      wki302_sess_timeout;
    int32      wki302_siz_error;
    int32      wki302_num_alerts;
    int32      wki302_num_services;
    int32      wki302_errlog_sz;
    int32      wki302_print_buf_time;
    int32      wki302_num_char_buf;
    int32      wki302_siz_char_buf;
    int32      wki302_wrk_heuristics;
    int32      wki302_mailslots;
    int32      wki302_num_dgram_buf;
}

struct WKSTA_INFO_402
{
    int32      wki402_char_wait;
    int32      wki402_collection_time;
    int32      wki402_maximum_collection_count;
    int32      wki402_keep_conn;
    int32      wki402_keep_search;
    int32      wki402_max_cmds;
    int32      wki402_num_work_buf;
    int32      wki402_siz_work_buf;
    int32      wki402_max_wrk_cache;
    int32      wki402_sess_timeout;
    int32      wki402_siz_error;
    int32      wki402_num_alerts;
    int32      wki402_num_services;
    int32      wki402_errlog_sz;
    int32      wki402_print_buf_time;
    int32      wki402_num_char_buf;
    int32      wki402_siz_char_buf;
    int32      wki402_wrk_heuristics;
    int32      wki402_mailslots;
    int32      wki402_num_dgram_buf;
    int32      wki402_max_threads;
}

struct WKSTA_INFO_502
{
    int32      wki502_char_wait;
    int32      wki502_collection_time;
    int32      wki502_maximum_collection_count;
    int32      wki502_keep_conn;
    int32      wki502_max_cmds;
    int32      wki502_sess_timeout;
    int32      wki502_siz_char_buf;
    int32      wki502_max_threads;
    int32      wki502_lock_quota;
    int32      wki502_lock_increment;
    int32      wki502_lock_maximum;
    int32      wki502_pipe_increment;
    int32      wki502_pipe_maximum;
    int32      wki502_cache_file_timeout;
    int32      wki502_dormant_file_limit;
    int32      wki502_read_ahead_throughput;
    int32      wki502_num_mailslot_buffers;
    int32      wki502_num_srv_announce_buffers;
    int32      wki502_max_illegal_datagram_events;
    int32      wki502_illegal_datagram_event_reset_frequency;
    int32      wki502_log_election_packets;
    int32      wki502_use_opportunistic_locking;
    int32      wki502_use_unlock_behind;
    int32      wki502_use_close_behind;
    int32      wki502_buf_named_pipes;
    int32      wki502_use_lock_read_unlock;
    int32      wki502_utilize_nt_caching;
    int32      wki502_use_raw_read;
    int32      wki502_use_raw_write;
    int32      wki502_use_write_raw_data;
    int32      wki502_use_encryption;
    int32      wki502_buf_files_deny_write;
    int32      wki502_buf_read_only_files;
    int32      wki502_force_core_create_mode;
    int32      wki502_use_512_byte_max_transfer;
}

struct WKSTA_INFO_1010
{
    int32       wki1010_char_wait;
}

struct WKSTA_INFO_1011
{
    int32       wki1011_collection_time;
}

struct WKSTA_INFO_1012
{
    int32       wki1012_maximum_collection_count;
}

struct WKSTA_INFO_1027
{
    int32       wki1027_errlog_sz;
}

struct WKSTA_INFO_1028
{
    int32       wki1028_print_buf_time;
}

struct WKSTA_INFO_1032
{
    int32       wki1032_wrk_heuristics;
}

struct WKSTA_INFO_1013
{
    int32       wki1013_keep_conn;
}

struct WKSTA_INFO_1018
{
    int32       wki1018_sess_timeout;
}

struct WKSTA_INFO_1023
{
    int32       wki1023_siz_char_buf;
}

struct WKSTA_INFO_1033
{
    int32       wki1033_max_threads;
}

struct WKSTA_INFO_1041
{
    int32      wki1041_lock_quota;
}

struct WKSTA_INFO_1042
{
    int32      wki1042_lock_increment;
}

struct WKSTA_INFO_1043
{
    int32      wki1043_lock_maximum;
}

struct WKSTA_INFO_1044
{
    int32      wki1044_pipe_increment;
}

struct WKSTA_INFO_1045
{
    int32      wki1045_pipe_maximum;
}

struct WKSTA_INFO_1046
{
    int32      wki1046_dormant_file_limit;
}

struct WKSTA_INFO_1047
{
    int32      wki1047_cache_file_timeout;
}

struct WKSTA_INFO_1048
{
    int32      wki1048_use_opportunistic_locking;
}

struct WKSTA_INFO_1049
{
    int32      wki1049_use_unlock_behind;
}

struct WKSTA_INFO_1050
{
    int32      wki1050_use_close_behind;
}

struct WKSTA_INFO_1051
{
    int32      wki1051_buf_named_pipes;
}

struct WKSTA_INFO_1052
{
    int32      wki1052_use_lock_read_unlock;
}

struct WKSTA_INFO_1053
{
    int32      wki1053_utilize_nt_caching;
}

struct WKSTA_INFO_1054
{
    int32      wki1054_use_raw_read;
}

struct WKSTA_INFO_1055
{
    int32      wki1055_use_raw_write;
}

struct WKSTA_INFO_1056
{
    int32      wki1056_use_write_raw_data;
}

struct WKSTA_INFO_1057
{
    int32      wki1057_use_encryption;
}

struct WKSTA_INFO_1058
{
    int32      wki1058_buf_files_deny_write;
}

struct WKSTA_INFO_1059
{
    int32      wki1059_buf_read_only_files;
}

struct WKSTA_INFO_1060
{
    int32      wki1060_force_core_create_mode;
}

struct WKSTA_INFO_1061
{
    int32      wki1061_use_512_byte_max_transfer;
}

struct WKSTA_INFO_1062
{
    int32      wki1062_read_ahead_throughput;
}

struct WKSTA_USER_INFO_0
{
    int32      wkui0_username;
}

struct WKSTA_USER_INFO_1
{
    int32      wkui1_username;
    int32      wkui1_logon_domain;
    int32      wkui1_oth_domains;
    int32      wkui1_logon_server;
}

struct WKSTA_USER_INFO_1101
{
    int32       wkui1101_oth_domains;
}

struct WKSTA_TRANSPORT_INFO_0
{
    int32      wkti0_quality_of_service;
    int32      wkti0_number_of_vcs;
    int32      wkti0_transport_name;
    int32      wkti0_transport_address;
    int32      wkti0_wan_ish;
}

//============================= [ LMCONS.H ]================================
//define PARMNUM_ALL()  0
//define PARM_ERROR_NONE()  0
//=================================[ LMACCESS.H ]=================================
define UF_SCRIPT()  1
define UF_ACCOUNTDISABLE()  2
define UF_HOMEDIR_REQUIRED()  8
define UF_LOCKOUT()  0x10
define UF_PASSWD_NOTREQD()  0x20
define UF_PASSWD_CANT_CHANGE()  0x40
define UF_TEMP_DUPLICATE_ACCOUNT()  0x100
define UF_NORMAL_ACCOUNT()  0x200
define UF_INTERDOMAIN_TRUST_ACCOUNT()  0x800
define UF_WORKSTATION_TRUST_ACCOUNT()  0x1000
define UF_SERVER_TRUST_ACCOUNT()  0x2000
define UF_MACHINE_ACCOUNT_MASK()  ( UF_INTERDOMAIN_TRUST_ACCOUNT + ...
                              UF_WORKSTATION_TRUST_ACCOUNT + ...
                              UF_SERVER_TRUST_ACCOUNT )
define UF_ACCOUNT_TYPE_MASK()  ( ...
                           UF_TEMP_DUPLICATE_ACCOUNT + ...
                           UF_NORMAL_ACCOUNT + ...
                           UF_INTERDOMAIN_TRUST_ACCOUNT + ...
                           UF_WORKSTATION_TRUST_ACCOUNT + ...
                           UF_SERVER_TRUST_ACCOUNT ...
                         )
define UF_DONT_EXPIRE_PASSWD()  0x10000
define UF_MNS_LOGON_ACCOUNT()  0x20000
define UF_SETTABLE_BITS()  ( ...
                       UF_SCRIPT + ...
                       UF_ACCOUNTDISABLE + ...
                       UF_LOCKOUT + ...
                       UF_HOMEDIR_REQUIRED  + ...
                       UF_PASSWD_NOTREQD + ...
                       UF_PASSWD_CANT_CHANGE + ...
                       UF_ACCOUNT_TYPE_MASK + ...
                       UF_DONT_EXPIRE_PASSWD + ...
                       UF_MNS_LOGON_ACCOUNT ...
                     )
define FILTER_TEMP_DUPLICATE_ACCOUNT()  (1)
define FILTER_NORMAL_ACCOUNT()  (2)
define FILTER_INTERDOMAIN_TRUST_ACCOUNT()  (8)
define FILTER_WORKSTATION_TRUST_ACCOUNT()  (0x10)
define FILTER_SERVER_TRUST_ACCOUNT()  (0x20)
define LG_INCLUDE_INDIRECT()  (1)
define AF_OP_PRINT()  1
define AF_OP_COMM()  2
define AF_OP_SERVER()  4
define AF_OP_ACCOUNTS()  8
define AF_SETTABLE_BITS()  (AF_OP_PRINT + AF_OP_COMM + ...
                      AF_OP_SERVER + AF_OP_ACCOUNTS)
define UAS_ROLE_STANDALONE()  0
define UAS_ROLE_MEMBER()  1
define UAS_ROLE_BACKUP()  2
define UAS_ROLE_PRIMARY()  3
define USER_NAME_PARMNUM()  1
define USER_PASSWORD_PARMNUM()  3
define USER_PASSWORD_AGE_PARMNUM()  4
define USER_PRIV_PARMNUM()  5
define USER_HOME_DIR_PARMNUM()  6
define USER_COMMENT_PARMNUM()  7
define USER_FLAGS_PARMNUM()  8
define USER_SCRIPT_PATH_PARMNUM()  9
define USER_AUTH_FLAGS_PARMNUM()  10
define USER_FULL_NAME_PARMNUM()  11
define USER_USR_COMMENT_PARMNUM()  12
define USER_PARMS_PARMNUM()  13
define USER_WORKSTATIONS_PARMNUM()  14
define USER_LAST_LOGON_PARMNUM()  15
define USER_LAST_LOGOFF_PARMNUM()  16
define USER_ACCT_EXPIRES_PARMNUM()  17
define USER_MAX_STORAGE_PARMNUM()  18
define USER_UNITS_PER_WEEK_PARMNUM()  19
define USER_LOGON_HOURS_PARMNUM()  20
define USER_PAD_PW_COUNT_PARMNUM()  21
define USER_NUM_LOGONS_PARMNUM()  22
define USER_LOGON_SERVER_PARMNUM()  23
define USER_COUNTRY_CODE_PARMNUM()  24
define USER_CODE_PAGE_PARMNUM()  25
define USER_PRIMARY_GROUP_PARMNUM()  51
define USER_PROFILE()  52
define USER_PROFILE_PARMNUM()  52
define USER_HOME_DIR_DRIVE_PARMNUM()  53
define USER_NAME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_NAME_PARMNUM)
define USER_PASSWORD_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PASSWORD_PARMNUM)
define USER_PASSWORD_AGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PASSWORD_AGE_PARMNUM)
define USER_PRIV_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PRIV_PARMNUM)
define USER_HOME_DIR_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_HOME_DIR_PARMNUM)
define USER_COMMENT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_COMMENT_PARMNUM)
define USER_FLAGS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_FLAGS_PARMNUM)
define USER_SCRIPT_PATH_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_SCRIPT_PATH_PARMNUM)
define USER_AUTH_FLAGS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_AUTH_FLAGS_PARMNUM)
define USER_FULL_NAME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_FULL_NAME_PARMNUM)
define USER_USR_COMMENT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_USR_COMMENT_PARMNUM)
define USER_PARMS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PARMS_PARMNUM)
define USER_WORKSTATIONS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_WORKSTATIONS_PARMNUM)
define USER_LAST_LOGON_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_LAST_LOGON_PARMNUM)
define USER_LAST_LOGOFF_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_LAST_LOGOFF_PARMNUM)
define USER_ACCT_EXPIRES_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_ACCT_EXPIRES_PARMNUM)
define USER_MAX_STORAGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_MAX_STORAGE_PARMNUM)
define USER_UNITS_PER_WEEK_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_UNITS_PER_WEEK_PARMNUM)
define USER_LOGON_HOURS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_LOGON_HOURS_PARMNUM)
define USER_PAD_PW_COUNT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PAD_PW_COUNT_PARMNUM)
define USER_NUM_LOGONS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_NUM_LOGONS_PARMNUM)
define USER_LOGON_SERVER_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_LOGON_SERVER_PARMNUM)
define USER_COUNTRY_CODE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_COUNTRY_CODE_PARMNUM)
define USER_CODE_PAGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_CODE_PAGE_PARMNUM)
define USER_PRIMARY_GROUP_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_PRIMARY_GROUP_PARMNUM)
define USER_POSIX_ID_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_POSIX_ID_PARMNUM)
define USER_HOME_DIR_DRIVE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + USER_HOME_DIR_DRIVE_PARMNUM)
define NULL_USERSETINFO_PASSWD()  "              "
define TIMEQ_FOREVER()  -1
define USER_MAXSTORAGE_UNLIMITED()  -1
define USER_NO_LOGOFF()  -1
define UNITS_PER_DAY()  24
define UNITS_PER_WEEK()  UNITS_PER_DAY * 7
define USER_PRIV_MASK()  3
define USER_PRIV_GUEST()  0
define USER_PRIV_USER()  1
define USER_PRIV_ADMIN()  2
define MAX_PASSWD_LEN()  PWLEN
define DEF_MIN_PWLEN()  6
define DEF_PWUNIQUENESS()  5
define DEF_MAX_PWHIST()  8
define DEF_MAX_PWAGE()  TIMEQ_FOREVER
define DEF_MIN_PWAGE()  0
define DEF_FORCE_LOGOFF()  0ffffffffh
define DEF_MAX_BADPW()  0
define ONE_DAY()  01*24*3600
define VALIDATED_LOGON()  0
define PASSWORD_EXPIRED()  2
define NON_VALIDATED_LOGON()  3
define VALID_LOGOFF()  1
define MODALS_MIN_PASSWD_LEN_PARMNUM()  1
define MODALS_MAX_PASSWD_AGE_PARMNUM()  2
define MODALS_MIN_PASSWD_AGE_PARMNUM()  3
define MODALS_FORCE_LOGOFF_PARMNUM()  4
define MODALS_PASSWD_HIST_LEN_PARMNUM()  5
define MODALS_ROLE_PARMNUM()  6
define MODALS_PRIMARY_PARMNUM()  7
define MODALS_DOMAIN_NAME_PARMNUM()  8
define MODALS_DOMAIN_ID_PARMNUM()  9
define MODALS_LOCKOUT_DURATION_PARMNUM()  10
define MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM()  11
define MODALS_LOCKOUT_THRESHOLD_PARMNUM()  12
define MODALS_MIN_PASSWD_LEN_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_MIN_PASSWD_LEN_PARMNUM)
define MODALS_MAX_PASSWD_AGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_MAX_PASSWD_AGE_PARMNUM)
define MODALS_MIN_PASSWD_AGE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_MIN_PASSWD_AGE_PARMNUM)
define MODALS_FORCE_LOGOFF_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_FORCE_LOGOFF_PARMNUM)
define MODALS_PASSWD_HIST_LEN_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_PASSWD_HIST_LEN_PARMNUM)
define MODALS_ROLE_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_ROLE_PARMNUM)
define MODALS_PRIMARY_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_PRIMARY_PARMNUM)
define MODALS_DOMAIN_NAME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_DOMAIN_NAME_PARMNUM)
define MODALS_DOMAIN_ID_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + MODALS_DOMAIN_ID_PARMNUM)

define GROUPIDMASK()  0x8000
define GROUP_SPECIALGRP_USERS()  L"USERS"
define GROUP_SPECIALGRP_ADMINS()  L"ADMINS"
define GROUP_SPECIALGRP_GUESTS()  L"GUESTS"
define GROUP_SPECIALGRP_LOCAL()  L"LOCAL"
define GROUP_ALL_PARMNUM()  0
define GROUP_NAME_PARMNUM()  1
define GROUP_COMMENT_PARMNUM()  2
define GROUP_ATTRIBUTES_PARMNUM()  3
define GROUP_ALL_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + GROUP_ALL_PARMNUM)
define GROUP_NAME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + GROUP_NAME_PARMNUM)
define GROUP_COMMENT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + GROUP_COMMENT_PARMNUM)
define GROUP_ATTRIBUTES_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + GROUP_ATTRIBUTES_PARMNUM)
define GROUP_POSIX_ID_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + GROUP_POSIX_ID_PARMNUM)

define LOCALGROUP_NAME_PARMNUM()  1
define LOCALGROUP_COMMENT_PARMNUM()  2
define MAXPERMENTRIES()  64
define ACCESS_NONE()  0
define ACCESS_ALL()  ( ACCESS_READ + ...
                 ACCESS_WRITE + ...
                 ACCESS_CREATE + ...
                 ACCESS_EXEC + ...
                 ACCESS_DELETE + ...
                 ACCESS_ATRIB + ...
                 ACCESS_PERM ...
               )
define ACCESS_READ()  1
define ACCESS_WRITE()  2
define ACCESS_CREATE()  4
define ACCESS_EXEC()  8
define ACCESS_DELETE()  0x10
define ACCESS_ATRIB()  0x20
define ACCESS_PERM()  0x40
define ACCESS_GROUP()  0x8000
define ACCESS_AUDIT()  1
define ACCESS_SUCCESS_OPEN()  0x10
define ACCESS_SUCCESS_WRITE()  0x20
define ACCESS_SUCCESS_DELETE()  0x40
define ACCESS_SUCCESS_ACL()  0x80
define ACCESS_SUCCESS_MASK()  0x0F0
define ACCESS_FAIL_OPEN()  0x100
define ACCESS_FAIL_WRITE()  0x200
define ACCESS_FAIL_DELETE()  0x400
define ACCESS_FAIL_ACL()  0x800
define ACCESS_FAIL_MASK()  0x0F00
define ACCESS_FAIL_SHIFT()  4
define ACCESS_RESOURCE_NAME_PARMNUM()  1
define ACCESS_ATTR_PARMNUM()  2
define ACCESS_COUNT_PARMNUM()  3
define ACCESS_ACCESS_LIST_PARMNUM()  4
define ACCESS_RESOURCE_NAME_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + ACCESS_RESOURCE_NAME_PARMNUM)
define ACCESS_ATTR_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + ACCESS_ATTR_PARMNUM)
define ACCESS_COUNT_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + ACCESS_COUNT_PARMNUM)
define ACCESS_ACCESS_LIST_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + ACCESS_ACCESS_LIST_PARMNUM)
define ACCESS_LETTERS()  "RWCXDAP         "
define NETLOGON_CONTROL_QUERY()  1
define NETLOGON_CONTROL_REPLICATE()  2
define NETLOGON_CONTROL_SYNCHRONIZE()  3
define NETLOGON_CONTROL_PDC_REPLICATE()  4
define NETLOGON_CONTROL_REDISCOVER()  5
define NETLOGON_CONTROL_TC_QUERY()  6
define NETLOGON_CONTROL_TRANSPORT_NOTIFY()  7
define NETLOGON_CONTROL_FIND_USER()  8
define NETLOGON_CONTROL_UNLOAD_NETLOGON_DLL()  0x0FFFB
define NETLOGON_CONTROL_BACKUP_CHANGE_LOG()  0x0FFFC
define NETLOGON_CONTROL_TRUNCATE_LOG()  0x0FFFD
define NETLOGON_CONTROL_SET_DBFLAG()  0x0FFFE
define NETLOGON_CONTROL_BREAKPOINT()  0x0FFFF
define NETLOGON_REPLICATION_NEEDED()  1
define NETLOGON_REPLICATION_IN_PROGRESS()  2
define NETLOGON_FULL_SYNC_REPLICATION()  4
define NETLOGON_REDO_NEEDED()  8

struct USER_INFO_0
{
    int32      usri0_name;
}

struct USER_INFO_1
{
    int32      usri1_name;
    int32      usri1_password;
    int32      usri1_password_age;
    int32      usri1_priv;
    int32      usri1_home_dir;
    int32      usri1_comment;
    int32      usri1_flags;
    int32      usri1_script_path;
}

struct USER_INFO_2
{
    int32      usri2_name;
    int32      usri2_password;
    int32      usri2_password_age;
    int32      usri2_priv;
    int32      usri2_home_dir;
    int32      usri2_comment;
    int32      usri2_flags;
    int32      usri2_script_path;
    int32      usri2_auth_flags;
    int32      usri2_full_name;
    int32      usri2_usr_comment;
    int32      usri2_parms;
    int32      usri2_workstations;
    int32      usri2_last_logon;
    int32      usri2_last_logoff;
    int32      usri2_acct_expires;
    int32      usri2_max_storage;
    int32      usri2_units_per_week;
    int32      usri2_logon_hours;
    int32      usri2_bad_pw_count;
    int32      usri2_num_logons;
    int32      usri2_logon_server;
    int32      usri2_country_code;
    int32      usri2_code_page;
}

struct USER_INFO_3
{
    int32      usri3_name;
    int32      usri3_password;
    int32      usri3_password_age;
    int32      usri3_priv;
    int32      usri3_home_dir;
    int32      usri3_comment;
    int32      usri3_flags;
    int32      usri3_script_path;
    int32      usri3_auth_flags;
    int32      usri3_full_name;
    int32      usri3_usr_comment;
    int32      usri3_parms;
    int32      usri3_workstations;
    int32      usri3_last_logon;
    int32      usri3_last_logoff;
    int32      usri3_acct_expires;
    int32      usri3_max_storage;
    int32      usri3_units_per_week;
    int32      usri3_logon_hours;
    int32      usri3_bad_pw_count;
    int32      usri3_num_logons;
    int32      usri3_logon_server;
    int32      usri3_country_code;
    int32      usri3_code_page;
    int32      usri3_user_id;
    int32      usri3_primary_group_id;
    int32      usri3_profile;
    int32      usri3_home_dir_drive;
    int32      usri3_password_expired;
}

struct USER_INFO_10
{
    int32      usri10_name;
    int32      usri10_comment;
    int32      usri10_usr_comment;
    int32      usri10_full_name;
}

struct USER_INFO_11
{
    int32      usri11_name;
    int32      usri11_comment;
    int32      usri11_usr_comment;
    int32      usri11_full_name;
    int32      usri11_priv;
    int32      usri11_auth_flags;
    int32      usri11_password_age;
    int32      usri11_home_dir;
    int32      usri11_parms;
    int32      usri11_last_logon;
    int32      usri11_last_logoff;
    int32      usri11_bad_pw_count;
    int32      usri11_num_logons;
    int32      usri11_logon_server;
    int32      usri11_country_code;
    int32      usri11_workstations;
    int32      usri11_max_storage;
    int32      usri11_units_per_week;
    int32      usri11_logon_hours;
    int32      usri11_code_page;
}

struct USER_INFO_20
{
    int32      usri20_name;
    int32      usri20_full_name;
    int32      usri20_comment;
    int32      usri20_flags;
    int32      usri20_user_id;
}

struct USER_INFO_21
{
    int8[ENCRYPTED_PWLEN]  usri21_password;
}

struct USER_INFO_22
{
    int32      usri22_name;
    int8[ENCRYPTED_PWLEN]  usri22_password;
    int32      usri22_password_age;
    int32      usri22_priv;
    int32      usri22_home_dir;
    int32      usri22_comment;
    int32      usri22_flags;
    int32      usri22_script_path;
    int32      usri22_auth_flags;
    int32      usri22_full_name;
    int32      usri22_usr_comment;
    int32      usri22_parms;
    int32      usri22_workstations;
    int32      usri22_last_logon;
    int32      usri22_last_logoff;
    int32      usri22_acct_expires;
    int32      usri22_max_storage;
    int32      usri22_units_per_week;
    int32      usri22_logon_hours;
    int32      usri22_bad_pw_count;
    int32      usri22_num_logons;
    int32      usri22_logon_server;
    int32      usri22_country_code;
    int32      usri22_code_page;
}

struct USER_INFO_1003
{
    int32       usri1003_password;
}

struct USER_INFO_1005
{
    int32       usri1005_priv;
}

struct USER_INFO_1006
{
    int32       usri1006_home_dir;
}

struct USER_INFO_1007
{
    int32       usri1007_comment;
}

struct USER_INFO_1008
{
    int32       usri1008_flags;
}

struct USER_INFO_1009
{
    int32       usri1009_script_path;
}

struct USER_INFO_1010
{
    int32       usri1010_auth_flags;
}

struct USER_INFO_1011
{
    int32       usri1011_full_name;
}

struct USER_INFO_1012
{
    int32       usri1012_usr_comment;
}

struct USER_INFO_1013
{
    int32       usri1013_parms;
}

struct USER_INFO_1014
{
    int32       usri1014_workstations;
}

struct USER_INFO_1017
{
    int32       usri1017_acct_expires;
}

struct USER_INFO_1018
{
    int32       usri1018_max_storage;
}

struct USER_INFO_1020
{
    int32      usri1020_units_per_week;
    int32      usri1020_logon_hours;
}

struct USER_INFO_1023
{
    int32       usri1023_logon_server;
}

struct USER_INFO_1024
{
    int32       usri1024_country_code;
}

struct USER_INFO_1025
{
    int32       usri1025_code_page;
}

struct USER_INFO_1051
{
    int32       usri1051_primary_group_id;
}

struct USER_INFO_1052
{
    int32       usri1052_profile;
}

struct USER_INFO_1053
{
    int32       usri1053_home_dir_drive;
}

struct USER_MODALS_INFO_0
{
    int32      usrmod0_min_passwd_len;
    int32      usrmod0_max_passwd_age;
    int32      usrmod0_min_passwd_age;
    int32      usrmod0_force_logoff;
    int32      usrmod0_password_hist_len;
}

struct USER_MODALS_INFO_1
{
    int32      usrmod1_role;
    int32      usrmod1_primary;
}

struct USER_MODALS_INFO_2
{
    int32      usrmod2_domain_name;
    int32      usrmod2_domain_id;
}

struct USER_MODALS_INFO_3
{
    int32      usrmod3_lockout_duration;
    int32      usrmod3_lockout_observation_window;
    int32      usrmod3_lockout_threshold;
}

struct USER_MODALS_INFO_1001
{
    int32       usrmod1001_min_passwd_len;
}

struct USER_MODALS_INFO_1002
{
    int32       usrmod1002_max_passwd_age;
}

struct USER_MODALS_INFO_1003
{
    int32       usrmod1003_min_passwd_age;
}

struct USER_MODALS_INFO_1004
{
    int32       usrmod1004_force_logoff;
}

struct USER_MODALS_INFO_1005
{
    int32      usrmod1005_password_hist_len;
}

struct USER_MODALS_INFO_1006
{
    int32       usrmod1006_role;
}

struct USER_MODALS_INFO_1007
{
    int32       usrmod1007_primary;
}

struct GROUP_INFO_0
{
    int32      grpi0_name;
}

struct GROUP_INFO_1
{
    int32      grpi1_name;
    int32      grpi1_comment;
}

struct GROUP_INFO_2
{
    int32      grpi2_name;
    int32      grpi2_comment;
    int32      grpi2_group_id;
    int32      grpi2_attributes;
}

struct GROUP_INFO_1002
{
    int32       grpi1002_comment;
}

struct GROUP_INFO_1005
{
    int32       grpi1005_attributes;
}

struct GROUP_USERS_INFO_0
{
    int32       grui0_name;
}

struct GROUP_USERS_INFO_1
{
    int32       grui1_name;
    int32       grui1_attributes;
}

struct LOCALGROUP_INFO_0
{
    int32      lgrpi0_name;
}

struct LOCALGROUP_INFO_1
{
    int32      lgrpi1_name;
    int32      lgrpi1_comment;
}

struct LOCALGROUP_INFO_1002
{
    int32       lgrpi1002_comment;
}

struct LOCALGROUP_MEMBERS_INFO_0
{
    int32       lgrmi0_sid;
}

struct LOCALGROUP_MEMBERS_INFO_1
{
    int32       lgrmi1_sid;
    int32       lgrmi1_sidusage;
    int32       lgrmi1_name;
}

struct LOCALGROUP_MEMBERS_INFO_2
{
    int32       lgrmi2_sid;
    int32       lgrmi2_sidusage;
    int32       lgrmi2_domainandname;
}

struct LOCALGROUP_MEMBERS_INFO_3
{
    int32       lgrmi3_domainandname;
}

struct LOCALGROUP_USERS_INFO_0
{
    int32       lgrui0_name;
}

struct NET_DISPLAY_USER
{
    int32      usri1_name;
    int32      usri1_comment;
    int32      usri1_flags;
    int32      usri1_full_name;
    int32      usri1_user_id;
    int32      usri1_next_index;
}

struct NET_DISPLAY_MACHINE
{
    int32      usri2_name;
    int32      usri2_comment;
    int32      usri2_flags;
    int32      usri2_user_id;
    int32      usri2_next_index;
}

struct NET_DISPLAY_GROUP
{
    int32      grpi3_name;
    int32      grpi3_comment;
    int32      grpi3_group_id;
    int32      grpi3_attributes;
    int32      grpi3_next_index;
}

struct ACCESS_INFO_0
{
    int32      acc0_resource_name;
}

struct ACCESS_INFO_1
{
    int32      acc1_resource_name;
    int32      acc1_attr;
    int32      acc1_count;
}

struct ACCESS_INFO_1002
{
    int32       acc1002_attr;
}


struct ACCESS_LIST
{
    int32      acl_ugname;
    int32      acl_access;
}

struct NETLOGON_INFO_1
{
    int32          netlog1_flags;
    NET_API_STATUS          netlog1_pdc_connection_status;
}

struct NETLOGON_INFO_2
{
    int32          netlog2_flags;
    NET_API_STATUS          netlog2_pdc_connection_status;
    int32          netlog2_trusted_dc_name;
    NET_API_STATUS          netlog2_tc_connection_status;
}

struct NETLOGON_INFO_3
{
    int32          netlog3_flags;
    int32          netlog3_logon_attempts;
    int32          netlog3_reserved1;
    int32          netlog3_reserved2;
    int32          netlog3_reserved3;
    int32          netlog3_reserved4;
    int32          netlog3_reserved5;
}

struct NETLOGON_INFO_4
{
    int32          netlog4_trusted_dc_name;
    int32          netlog4_trusted_domain_name;
}

//========================[ RichEdit v3 by Ewayne '==============================
define CFM_BACKCOLOR()  0x4000000
define CFM_LCID()  0x2000000
define CFM_UNDERLINETYPE()  0x800000
define CFM_WEIGHT()  0x400000
define CFM_SPACING()  0x200000
define CFM_KERNING()  0x100000
define CFM_STYLE()  0x80000
define CFM_ANIMATION()  0x40000
define CFM_REVAUTHOR()  0x8000
define CFM_SMALLCAPS()  0x40
define CFM_ALLCAPS()  0x80
define CFM_HIDDEN()  0x100
define CFM_OUTLINE()  0x200
define CFM_SHADOW()  0x400
define CFM_EMBOSS()  0x800
define CFM_IMPRINT()  0x1000
define CFM_DISABLED()  0x2000
define CFM_REVISED()  0x4000
define SCF_DEFAULT()  0
define SCF_ALL()  4
define SCF_SCF_USEUIRULES()  8
define CFU_CF1UNDERLINE()  0x0ff
define CFU_INVERT()  0x0fe
define CFU_UNDERLINEHAIRLINE()  10
define CFU_UNDERLINETHICK()  9
define CFU_UNDERLINEWAVE()  8
define CFU_UNDERLINEDASHDOTDOT()  7
define CFU_UNDERLINEDASHDOT()  6
define CFU_UNDERLINEDASH()  5
define CFU_UNDERLINEDOTTED()  4
define CFU_UNDERLINEDOUBLE()  3
define CFU_UNDERLINEWORD()  2
define CFU_UNDERLINE()  1
define CFU_UNDERLINENONE()  0

define PFM_SPACEBEFORE()  0x40
define PFM_SPACEAFTER()  0x80
define PFM_LINESPACING()  0x100
define PFM_STYLE()  0x400
define PFM_BORDER()  0x800
define PFM_SHADING()  0x1000
define PFM_NUMBERINGSTYLE()  0x2000
define PFM_NUMBERINGTAB()  0x4000
define PFM_NUMBERINGSTART()  0x8000
define PFM_RTLPARA()  0x10000
define PFM_KEEP()  0x20000
define PFM_KEEPNEXT()  0x40000
define PFM_PAGEBREAKBEFORE()  0x80000
define PFM_NOLINENUMBER()  0x100000
define PFM_NOWIDOWCONTROL()  0x200000
define PFM_DONOTHYPHEN()  0x400000
define PFM_SIDEBYSIDE()  0x800000
define PFM_TABLE()  0x40000000
define PFM_COLLAPSED()  0x1000000
define PFM_OUTLINELEVEL()  0x2000000
define PFM_BOX()  0x4000000

struct CHARFORMAT2
{
	int32    cbSize;
	int32    dwMask;
	int32    dwEffects;
	int32    yHeight;
	int32    yOffset;
	int32    crTextColor;
	int8    bCharSet;
	int8    bPitchAndFamily;
	int8[LF_FACESIZE]  szFaceName;
	int16    _wPad2;
	int16    wWeight;
	int16    sSpacing;
	int32    crBackColor;
	int32    lcid;
	int32    dwReserved;
	int16    sStyle;
	int16    wKerning;
	int8    bUnderlineType;
	int8    bAnimation;
	int8    bRevAuthor;
	int8    bReserved1;
}
//=============================================[ LMALERT.h ]=========================
define ALERTER_MAILSLOT()  "\\\\.\\MAILSLOT\\Alerter"
define ALERT_PRINT_EVENT()  "PRINTING"
define ALERT_MESSAGE_EVENT()  "MESSAGE"
define ALERT_ERRORLOG_EVENT()  "ERRORLOG"
define ALERT_ADMIN_EVENT()  "ADMIN"
define ALERT_USER_EVENT()  "USER"
define PRJOB_QSTATUS()  3
define PRJOB_DEVSTATUS()  0x1fc
define PRJOB_COMPLETE()  4
define PRJOB_INTERV()  8
define PRJOB_ERROR()  0x10
define PRJOB_DESTOFFLINE()  0x20
define PRJOB_DESTPAUSED()  0x40
define PRJOB_NOTIFY()  0x80
define PRJOB_DESTNOPAPER()  0x100
define PRJOB_DELETED()  0x8000
define PRJOB_QS_QUEUED()  0
define PRJOB_QS_PAUSED()  1
define PRJOB_QS_SPOOLING()  2
define PRJOB_QS_PRINTING()  3

struct STD_ALERT
{
	int32      alrt_timestamp;
	WCHAR[EVLEN+1]  alrt_eventname;
	WCHAR[SNLEN+1]  alrt_servicename;
}

struct ADMIN_OTHER_INFO
{
	int32      alrtad_errcode;
	int32      alrtad_numstrings;
}

struct ERRLOG_OTHER_INFO
{
	int32      alrter_errcode;
	int32      alrter_offset;
}

struct PRINT_OTHER_INFO
{
	int32      alrtpr_jobid;
	int32      alrtpr_status;
	int32      alrtpr_submitted;
	int32      alrtpr_size;
}

struct USER_OTHER_INFO
{
	int32      alrtus_errcode;
	int32      alrtus_numstrings;
}

//================================[ LMAT.H'=====================================
define JOB_RUN_PERIODICALLY()  1
define JOB_EXEC_ERROR()  2
define JOB_RUNS_TODAY()  4
define JOB_ADD_CURRENT_DATE()  8
define JOB_NONINTERACTIVE()  0x10
define JOB_INPUT_FLAGS()  (   JOB_RUN_PERIODICALLY        +   ...
                         JOB_ADD_CURRENT_DATE        +   ...
                         JOB_NONINTERACTIVE  )
define JOB_OUTPUT_FLAGS()  (   JOB_RUN_PERIODICALLY        +   ...
                          JOB_EXEC_ERROR              +   ...
                          JOB_RUNS_TODAY              +   ...
                          JOB_NONINTERACTIVE  )
struct AT_INFO
{
    int32      JobTime;
    int32      DaysOfMonth;
    UCHAR      DaysOfWeek;
    UCHAR      Flags;
    int32      Command;
}

struct AT_ENUM
{
    int32      JobId;
    int32      JobTime;
    int32      DaysOfMonth;
    UCHAR      DaysOfWeek;
    UCHAR      Flags;
    int32      Command;
}

//=========================================[ LMAUDIT.H ]=========================
define LOGFLAGS_FORWARD()  0
define LOGFLAGS_BACKWARD()  1
define LOGFLAGS_SEEK()  2
define ACTION_LOCKOUT()  00
define ACTION_ADMINUNLOCK()  01
//AE_SRVSTATUS equ 0
//AE_SESSLOGON equ 1
//AE_SESSLOGOFF equ 2
//AE_SESSPWERR equ 3
//AE_CONNSTART equ 4
//AE_CONNSTOP equ 5
//AE_CONNREJ equ 6
//AE_RESACCESS equ 7
//AE_RESACCESSREJ equ 8
//AE_CLOSEFILE equ 9
//AE_SERVICESTAT equ 11
//AE_ACLMOD equ 12
//AE_UASMOD equ 13
//AE_NETLOGON equ 14
//AE_NETLOGOFF equ 15
//AE_NETLOGDENIED equ 16
//AE_ACCLIMITEXCD equ 17
//AE_RESACCESS2 equ 18
//AE_ACLMODFAIL equ 19
//AE_LOCKOUT equ 20
//AE_GENERIC_TYPE equ 21
define AE_SRVSTART()  0
define AE_SRVPAUSED()  1
define AE_SRVCONT()  2
define AE_SRVSTOP()  3
define AE_GUEST()  0
define AE_USER()  1
define AE_ADMIN()  2
define AE_NORMAL()  0
define AE_USERLIMIT()  0
define AE_GENERAL()  0
define AE_ERROR()  1
define AE_SESSDIS()  1
define AE_BADPW()  1
define AE_AUTODIS()  2
define AE_UNSHARE()  2
define AE_ADMINPRIVREQD()  2
define AE_ADMINDIS()  3
define AE_NOACCESSPERM()  3
define AE_ACCRESTRICT()  4
define AE_NORMAL_CLOSE()  0
define AE_SES_CLOSE()  1
define AE_ADMIN_CLOSE()  2
define AE_LIM_UNKNOWN()  0
define AE_LIM_LOGONHOURS()  1
define AE_LIM_EXPIRED()  2
define AE_LIM_INVAL_WKSTA()  3
define AE_LIM_DISABLED()  4
define AE_LIM_DELETED()  5
define AE_MOD()  0
define AE_DELETE()  1
define AE_ADD()  2
define AE_UAS_USER()  0
define AE_UAS_GROUP()  1
define AE_UAS_MODALS()  2
define SVAUD_SERVICE()  1
define SVAUD_GOODSESSLOGON()  6
define SVAUD_BADSESSLOGON()  0x18
define SVAUD_SESSLOGON()  (SVAUD_GOODSESSLOGON + SVAUD_BADSESSLOGON)
define SVAUD_GOODNETLOGON()  0x60
define SVAUD_BADNETLOGON()  0x180
define SVAUD_NETLOGON()  (SVAUD_GOODNETLOGON + SVAUD_BADNETLOGON)
define SVAUD_LOGON()  (SVAUD_NETLOGON + SVAUD_SESSLOGON)
define SVAUD_GOODUSE()  0x600
define SVAUD_BADUSE()  0x1800
define SVAUD_USE()  (SVAUD_GOODUSE + SVAUD_BADUSE)
define SVAUD_USERLIST()  0x2000
define SVAUD_PERMISSIONS()  0x4000
define SVAUD_RESOURCE()  0x8000
define SVAUD_LOGONLIM()  0x10000
define AA_AUDIT_ALL()  1
define AA_A_OWNER()  4
define AA_CLOSE()  8
define AA_S_OPEN()  0x10
define AA_S_WRITE()  0x20
define AA_S_CREATE()  0x20
define AA_S_DELETE()  0x40
define AA_S_ACL()  0x80
define AA_S_ALL()  ( AA_S_OPEN + AA_S_WRITE + AA_S_DELETE + AA_S_ACL)
define AA_F_OPEN()  0x100
define AA_F_WRITE()  0x200
define AA_F_CREATE()  0x200
define AA_F_DELETE()  0x400
define AA_F_ACL()  0x800
define AA_F_ALL()  ( AA_F_OPEN + AA_F_WRITE + AA_F_DELETE + AA_F_ACL)
define AA_A_OPEN()  0x1000
define AA_A_WRITE()  0x2000
define AA_A_CREATE()  0x2000
define AA_A_DELETE()  0x4000
define AA_A_ACL()  0x8000
define AA_A_ALL()  ( AA_F_OPEN + AA_F_WRITE + AA_F_DELETE + AA_F_ACL)

struct HLOG
{
    int32       time;
    int32       last_flags;
    int32       offset1;
    int32       rec_offset;
}

struct AUDIT_ENTRY
{
    int32       ae_len;
    int32       ae_reserved;
    int32       ae_time;
    int32       ae_type;
    int32       ae_data_offset;
    int32       ae_data_size;
}

struct AE_SRVSTATUS
{
    int32       ae_sv_status;
}

struct AE_SESSLOGON
{
    int32       ae_so_compname;
    int32       ae_so_username;
    int32       ae_so_privilege;
}

struct AE_SESSLOGOFF
{
    int32       ae_sf_compname;
    int32       ae_sf_username;
    int32       ae_sf_reason;
}

struct AE_SESSPWERR
{
    int32       ae_sp_compname;
    int32       ae_sp_username;
}

struct AE_CONNSTART
{
    int32       ae_ct_compname;
    int32       ae_ct_username;
    int32       ae_ct_netname;
    int32       ae_ct_connid;
}

struct AE_CONNSTOP
{
    int32       ae_cp_compname;
    int32       ae_cp_username;
    int32       ae_cp_netname;
    int32       ae_cp_connid;
    int32       ae_cp_reason;
}

struct AE_CONNREJ
{
    int32       ae_cr_compname;
    int32       ae_cr_username;
    int32       ae_cr_netname;
    int32       ae_cr_reason;
}

struct AE_RESACCESS
{
    int32       ae_ra_compname;
    int32       ae_ra_username;
    int32       ae_ra_resname;
    int32       ae_ra_operation;
    int32       ae_ra_returncode;
    int32       ae_ra_restype;
    int32       ae_ra_fileid;
}

struct AE_RESACCESSREJ
{
    int32       ae_rr_compname;
    int32       ae_rr_username;
    int32       ae_rr_resname;
    int32       ae_rr_operation;
}

struct AE_CLOSEFILE
{
    int32       ae_cf_compname;
    int32       ae_cf_username;
    int32       ae_cf_resname;
    int32       ae_cf_fileid;
    int32       ae_cf_duration;
    int32       ae_cf_reason;
}

struct AE_SERVICESTAT
{
    int32       ae_ss_compname;
    int32       ae_ss_username;
    int32       ae_ss_svcname;
    int32       ae_ss_status;
    int32       ae_ss_code;
    int32       ae_ss_text;
    int32       ae_ss_returnval;
}

struct AE_ACLMOD
{
    int32       ae_am_compname;
    int32       ae_am_username;
    int32       ae_am_resname;
    int32       ae_am_action;
    int32       ae_am_datalen;
}

struct AE_UASMOD
{
    int32       ae_um_compname;
    int32       ae_um_username;
    int32       ae_um_resname;
    int32       ae_um_rectype;
    int32       ae_um_action;
    int32       ae_um_datalen;
}

struct AE_NETLOGON
{
    int32       ae_no_compname;
    int32       ae_no_username;
    int32       ae_no_privilege;
    int32       ae_no_authflags;
}

struct AE_NETLOGOFF
{
    int32       ae_nf_compname;
    int32       ae_nf_username;
    int32       ae_nf_reserved1;
    int32       ae_nf_reserved2;
}

struct AE_ACCLIM
{
    int32       ae_al_compname;
    int32       ae_al_username;
    int32       ae_al_resname;
    int32       ae_al_limit;
}

struct AE_LOCKOUT
{
    int32      ae_lk_compname;
    int32      ae_lk_username;
    int32      ae_lk_action;
    int32      ae_lk_bad_pw_count;
}

struct AE_GENERIC
{
    int32       ae_ge_msgfile;
    int32       ae_ge_msgnum;
    int32       ae_ge_params;
    int32       ae_ge_param1;
    int32       ae_ge_param2;
    int32       ae_ge_param3;
    int32       ae_ge_param4;
    int32       ae_ge_param5;
    int32       ae_ge_param6;
    int32       ae_ge_param7;
    int32       ae_ge_param8;
    int32       ae_ge_param9;
}

//==================================[ LMBROWSR.H ]==============================
define BROWSER_ROLE_PDC()  1
define BROWSER_ROLE_BDC()  2

struct BROWSER_STATISTICS
{
    LARGE_INTEGER      StatisticsStartTime;
    LARGE_INTEGER      NumberOfServerAnnouncements;
    LARGE_INTEGER      NumberOfDomainAnnouncements;
    int32      NumberOfElectionPackets;
    int32      NumberOfMailslotWrites;
    int32      NumberOfGetBrowserServerListRequests;
    int32      NumberOfServerEnumerations;
    int32      NumberOfDomainEnumerations;
    int32      NumberOfOtherEnumerations;
    int32      NumberOfMissedServerAnnouncements;
    int32      NumberOfMissedMailslotDatagrams;
    int32      NumberOfMissedGetBrowserServerListRequests;
    int32      NumberOfFailedServerAnnounceAllocations;
    int32      NumberOfFailedMailslotAllocations;
    int32      NumberOfFailedMailslotReceives;
    int32      NumberOfFailedMailslotWrites;
    int32      NumberOfFailedMailslotOpens;
    int32      NumberOfDuplicateMasterAnnouncements;
    LARGE_INTEGER      NumberOfIllegalDatagrams;
}

struct BROWSER_STATISTICS_100
{
    LARGE_INTEGER      StartTime;
    LARGE_INTEGER      NumberOfServerAnnouncements;
    LARGE_INTEGER      NumberOfDomainAnnouncements;
    int32      NumberOfElectionPackets;
    int32      NumberOfMailslotWrites;
    int32      NumberOfGetBrowserServerListRequests;
    LARGE_INTEGER      NumberOfIllegalDatagrams;
}

struct BROWSER_STATISTICS_101
{
    LARGE_INTEGER      StartTime;
    LARGE_INTEGER      NumberOfServerAnnouncements;
    LARGE_INTEGER      NumberOfDomainAnnouncements;
    int32      NumberOfElectionPackets;
    int32      NumberOfMailslotWrites;
    int32      NumberOfGetBrowserServerListRequests;
    LARGE_INTEGER      NumberOfIllegalDatagrams;
    int32      NumberOfMissedServerAnnouncements;
    int32      NumberOfMissedMailslotDatagrams;
    int32      NumberOfMissedGetBrowserServerListRequests;
    int32      NumberOfFailedServerAnnounceAllocations;
    int32      NumberOfFailedMailslotAllocations;
    int32      NumberOfFailedMailslotReceives;
    int32      NumberOfFailedMailslotWrites;
    int32      NumberOfFailedMailslotOpens;
    int32      NumberOfDuplicateMasterAnnouncements;
}


struct BROWSER_EMULATED_DOMAIN
{
    int32      DomainName;
    int32      EmulatedServerName;
    int32      Role;
}

//====================================[ LMCHDEV.H ]==============================
define CHARDEV_STAT_OPENED()  2
define CHARDEV_STAT_ERROR()  4
define CHARDEV_CLOSE()  0
define CHARDEVQ_DEV_PARMNUM()  1
define CHARDEVQ_PRIORITY_PARMNUM()  2
define CHARDEVQ_DEVS_PARMNUM()  3
define CHARDEVQ_NUMUSERS_PARMNUM()  4
define CHARDEVQ_NUMAHEAD_PARMNUM()  5
define CHARDEVQ_PRIORITY_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + CHARDEVQ_PRIORITY_PARMNUM)
define CHARDEVQ_DEVS_INFOLEVEL()  ...
(PARMNUM_BASE_INFOLEVEL + CHARDEVQ_DEVS_PARMNUM)
define CHARDEVQ_MAX_PRIORITY()  1
define CHARDEVQ_MIN_PRIORITY()  9
define CHARDEVQ_DEF_PRIORITY()  5
define CHARDEVQ_NO_REQUESTS()  -1
define HANDLE_INFO_LEVEL_1()  1
define HANDLE_CHARTIME_PARMNUM()  1
define HANDLE_CHARCOUNT_PARMNUM()  2

struct CHARDEV_INFO_0
{
    int32      ch0_dev;
}

struct CHARDEV_INFO_1
{
    int32      ch1_dev;
    int32      ch1_status;
    int32      ch1_username;
    int32      ch1_time;
}

struct CHARDEVQ_INFO_0
{
    int32      cq0_dev;
}

struct CHARDEVQ_INFO_1
{
    int32      cq1_dev;
    int32      cq1_priority;
    int32      cq1_devs;
    int32      cq1_numusers;
    int32      cq1_numahead;
}

struct CHARDEVQ_INFO_1002
{
    int32      cq1002_priority;
}

struct CHARDEVQ_INFO_1003
{
    int32      cq1003_devs;
}

struct HANDLE_INFO_1
{
    int32      hdli1_chartime;
    int32      hdli1_charcount;
}

//======================================[ LMCONFIG ]========================
struct CONFIG_INFO_0
{
    int32       cfgi0_key;
    int32       cfgi0_data;
}

//=======================================[ LMDFS.H ]========================

define DFS_VOLUME_STATE_OK()  1
define DFS_VOLUME_STATE_INCONSISTENT()  2
define DFS_VOLUME_STATE_OFFLINE()  3
define DFS_VOLUME_STATE_ONLINE()  4
define DFS_STORAGE_STATE_OFFLINE()  1
define DFS_STORAGE_STATE_ONLINE()  2
define DFS_ADD_VOLUME()  1
define DFS_RESTORE_VOLUME()  2

struct DFS_INFO_1
{
    int32      EntryPath;
}

struct DFS_INFO_2
{
    int32      EntryPath;
    int32      Comment;
    int32      State;
    int32      NumberOfStorages;
}

struct DFS_STORAGE_INFO
{
    int32      State;
    int32      ServerName;
    int32      ShareName;
}

struct DFS_INFO_3
{
    int32      EntryPath;
    int32      Comment;
    int32      State;
    int32      NumberOfStorages;
    int32      Storage;
}

struct DFS_INFO_100
{
    int32      _comment;
}

struct DFS_INFO_101
{
    int32      State;
}

//================================[ LMERRLOG.H ]===============================
define ERRLOG_BASE()  3100
define NELOG_Internal_Error()  (ERRLOG_BASE + 0)
define NELOG_Resource_Shortage()  (ERRLOG_BASE + 1)
define NELOG_Unable_To_Lock_Segment()  (ERRLOG_BASE + 2)
define NELOG_Unable_To_Unlock_Segment()  (ERRLOG_BASE + 3)
define NELOG_Uninstall_Service()  (ERRLOG_BASE + 4)
define NELOG_Init_Exec_Fail()  (ERRLOG_BASE + 5)
define NELOG_Ncb_Error()  (ERRLOG_BASE + 6)
define NELOG_Net_Not_Started()  (ERRLOG_BASE + 7)
define NELOG_Ioctl_Error()  (ERRLOG_BASE + 8)
define NELOG_System_Semaphore()  (ERRLOG_BASE + 9)
define NELOG_Init_OpenCreate_Err()  (ERRLOG_BASE + 10)
define NELOG_NetBios()  (ERRLOG_BASE + 11)
define NELOG_SMB_Illegal()  (ERRLOG_BASE + 12)
define NELOG_Service_Fail()  (ERRLOG_BASE + 13)
define NELOG_Entries_Lost()  (ERRLOG_BASE + 14)
define NELOG_Init_Seg_Overflow()  (ERRLOG_BASE + 20)
define NELOG_Srv_No_Mem_Grow()  (ERRLOG_BASE + 21)
define NELOG_Access_File_Bad()  (ERRLOG_BASE + 22)
define NELOG_Srvnet_Not_Started()  (ERRLOG_BASE + 23)
define NELOG_Init_Chardev_Err()  (ERRLOG_BASE + 24)
define NELOG_Remote_API()  (ERRLOG_BASE + 25)
define NELOG_Ncb_TooManyErr()  (ERRLOG_BASE + 26)
define NELOG_Mailslot_err()  (ERRLOG_BASE + 27)
define NELOG_ReleaseMem_Alert()  (ERRLOG_BASE + 28)
define NELOG_AT_cannot_write()  (ERRLOG_BASE + 29)
define NELOG_Cant_Make_Msg_File()  (ERRLOG_BASE + 30)
define NELOG_Exec_Netservr_NoMem()  (ERRLOG_BASE + 31)
define NELOG_Server_Lock_Failure()  (ERRLOG_BASE + 32)
define NELOG_Msg_Shutdown()  (ERRLOG_BASE + 40)
define NELOG_Msg_Sem_Shutdown()  (ERRLOG_BASE + 41)
define NELOG_Msg_Log_Err()  (ERRLOG_BASE + 50)
define NELOG_VIO_POPUP_ERR()  (ERRLOG_BASE + 51)
define NELOG_Msg_Unexpected_SMB_Type()  (ERRLOG_BASE + 52)
define NELOG_Wksta_Infoseg()  (ERRLOG_BASE + 60)
define NELOG_Wksta_Compname()  (ERRLOG_BASE + 61)
define NELOG_Wksta_BiosThreadFailure()  (ERRLOG_BASE + 62)
define NELOG_Wksta_IniSeg()  (ERRLOG_BASE + 63)
define NELOG_Wksta_HostTab_Full()  (ERRLOG_BASE + 64)
define NELOG_Wksta_Bad_Mailslot_SMB()  (ERRLOG_BASE + 65)
define NELOG_Wksta_UASInit()  (ERRLOG_BASE + 66)
define NELOG_Wksta_SSIRelogon()  (ERRLOG_BASE + 67)
define NELOG_Build_Name()  (ERRLOG_BASE + 70)
define NELOG_Name_Expansion()  (ERRLOG_BASE + 71)
define NELOG_Message_Send()  (ERRLOG_BASE + 72)
define NELOG_Mail_Slt_Err()  (ERRLOG_BASE + 73)
define NELOG_AT_cannot_read()  (ERRLOG_BASE + 74)
define NELOG_AT_sched_err()  (ERRLOG_BASE + 75)
define NELOG_AT_schedule_file_created()  (ERRLOG_BASE + 76)
define NELOG_Srvnet_NB_Open()  (ERRLOG_BASE + 77)
define NELOG_AT_Exec_Err()  (ERRLOG_BASE + 78)
define NELOG_Lazy_Write_Err()  (ERRLOG_BASE + 80)
define NELOG_HotFix()  (ERRLOG_BASE + 81)
define NELOG_HardErr_From_Server()  (ERRLOG_BASE + 82)
define NELOG_LocalSecFail1()  (ERRLOG_BASE + 83)
define NELOG_LocalSecFail2()  (ERRLOG_BASE + 84)
define NELOG_LocalSecFail3()  (ERRLOG_BASE + 85)
define NELOG_LocalSecGeneralFail()  (ERRLOG_BASE + 86)
define NELOG_NetWkSta_Internal_Error()  (ERRLOG_BASE + 90)
define NELOG_NetWkSta_No_Resource()  (ERRLOG_BASE + 91)
define NELOG_NetWkSta_SMB_Err()  (ERRLOG_BASE + 92)
define NELOG_NetWkSta_VC_Err()  (ERRLOG_BASE + 93)
define NELOG_NetWkSta_Stuck_VC_Err()  (ERRLOG_BASE + 94)
define NELOG_NetWkSta_NCB_Err()  (ERRLOG_BASE + 95)
define NELOG_NetWkSta_Write_Behind_Err()  (ERRLOG_BASE + 96)
define NELOG_NetWkSta_Reset_Err()  (ERRLOG_BASE + 97)
define NELOG_NetWkSta_Too_Many()  (ERRLOG_BASE + 98)
define NELOG_Srv_Thread_Failure()  (ERRLOG_BASE + 104)
define NELOG_Srv_Close_Failure()  (ERRLOG_BASE + 105)
define NELOG_ReplUserCurDir()  (ERRLOG_BASE + 106)
define NELOG_ReplCannotMasterDir()  (ERRLOG_BASE + 107)
define NELOG_ReplUpdateError()  (ERRLOG_BASE + 108)
define NELOG_ReplLostMaster()  (ERRLOG_BASE + 109)
define NELOG_NetlogonAuthDCFail()  (ERRLOG_BASE + 110)
define NELOG_ReplLogonFailed()  (ERRLOG_BASE + 111)
define NELOG_ReplNetErr()  (ERRLOG_BASE + 112)
define NELOG_ReplMaxFiles()  (ERRLOG_BASE + 113)
define NELOG_ReplMaxTreeDepth()  (ERRLOG_BASE + 114)
define NELOG_ReplBadMsg()  (ERRLOG_BASE + 115)
define NELOG_ReplSysErr()  (ERRLOG_BASE + 116)
define NELOG_ReplUserLoged()  (ERRLOG_BASE + 117)
define NELOG_ReplBadImport()  (ERRLOG_BASE + 118)
define NELOG_ReplBadExport()  (ERRLOG_BASE + 119)
define NELOG_ReplSignalFileErr()  (ERRLOG_BASE + 120)
define NELOG_DiskFT()  (ERRLOG_BASE+121)
define NELOG_ReplAccessDenied()  (ERRLOG_BASE + 122)
define NELOG_NetlogonFailedPrimary()  (ERRLOG_BASE + 123)
define NELOG_NetlogonPasswdSetFailed()  (ERRLOG_BASE + 124)
define NELOG_NetlogonTrackingError()  (ERRLOG_BASE + 125)
define NELOG_NetlogonSyncError()  (ERRLOG_BASE + 126)
define NELOG_UPS_PowerOut()  (ERRLOG_BASE + 130)
define NELOG_UPS_Shutdown()  (ERRLOG_BASE + 131)
define NELOG_UPS_CmdFileError()  (ERRLOG_BASE + 132)
define NELOG_UPS_CannotOpenDriver()  (ERRLOG_BASE+133)
define NELOG_UPS_PowerBack()  (ERRLOG_BASE + 134)
define NELOG_UPS_CmdFileConfig()  (ERRLOG_BASE + 135)
define NELOG_UPS_CmdFileExec()  (ERRLOG_BASE + 136)
define NELOG_Missing_Parameter()  (ERRLOG_BASE + 150)
define NELOG_Invalid_Config_Line()  (ERRLOG_BASE + 151)
define NELOG_Invalid_Config_File()  (ERRLOG_BASE + 152)
define NELOG_File_Changed()  (ERRLOG_BASE + 153)
define NELOG_Files_Dont_Fit()  (ERRLOG_BASE + 154)
define NELOG_Wrong_DLL_Version()  (ERRLOG_BASE + 155)
define NELOG_Error_in_DLL()  (ERRLOG_BASE + 156)
define NELOG_System_Error()  (ERRLOG_BASE + 157)
define NELOG_FT_ErrLog_Too_Large()  (ERRLOG_BASE + 158)
define NELOG_FT_Update_In_Progress()  (ERRLOG_BASE + 159)
define NELOG_OEM_Code()  (ERRLOG_BASE + 199)
define ERRLOG2_BASE()  5700
define NELOG_NetlogonSSIInitError()  (ERRLOG2_BASE + 0)
define NELOG_NetlogonFailedToUpdateTrustList()  (ERRLOG2_BASE + 1)
define NELOG_NetlogonFailedToAddRpcInterface()  (ERRLOG2_BASE + 2)
define NELOG_NetlogonFailedToReadMailslot()  (ERRLOG2_BASE + 3)
define NELOG_NetlogonFailedToRegisterSC()  (ERRLOG2_BASE + 4)
define NELOG_NetlogonChangeLogCorrupt()  (ERRLOG2_BASE + 5)
define NELOG_NetlogonFailedToCreateShare()  (ERRLOG2_BASE + 6)
define NELOG_NetlogonDownLevelLogonFailed()  (ERRLOG2_BASE + 7)
define NELOG_NetlogonDownLevelLogoffFailed()  (ERRLOG2_BASE + 8)
define NELOG_NetlogonNTLogonFailed()  (ERRLOG2_BASE + 9)
define NELOG_NetlogonNTLogoffFailed()  (ERRLOG2_BASE + 10)
define NELOG_NetlogonPartialSyncCallSuccess()  (ERRLOG2_BASE + 11)
define NELOG_NetlogonPartialSyncCallFailed()  (ERRLOG2_BASE + 12)
define NELOG_NetlogonFullSyncCallSuccess()  (ERRLOG2_BASE + 13)
define NELOG_NetlogonFullSyncCallFailed()  (ERRLOG2_BASE + 14)
define NELOG_NetlogonPartialSyncSuccess()  (ERRLOG2_BASE + 15)
define NELOG_NetlogonPartialSyncFailed()  (ERRLOG2_BASE + 16)
define NELOG_NetlogonFullSyncSuccess()  (ERRLOG2_BASE + 17)
define NELOG_NetlogonFullSyncFailed()  (ERRLOG2_BASE + 18)
define NELOG_NetlogonAuthNoDomainController()  (ERRLOG2_BASE + 19)
define NELOG_NetlogonAuthNoTrustLsaSecret()  (ERRLOG2_BASE + 20)
define NELOG_NetlogonAuthNoTrustSamAccount()  (ERRLOG2_BASE + 21)
define NELOG_NetlogonServerAuthFailed()  (ERRLOG2_BASE + 22)
define NELOG_NetlogonServerAuthNoTrustSamAccount()  (ERRLOG2_BASE + 23)
define NELOG_FailedToRegisterSC()  (ERRLOG2_BASE + 24)
define NELOG_FailedToSetServiceStatus()  (ERRLOG2_BASE + 25)
define NELOG_FailedToGetComputerName()  (ERRLOG2_BASE + 26)
define NELOG_DriverNotLoaded()  (ERRLOG2_BASE + 27)
define NELOG_NoTranportLoaded()  (ERRLOG2_BASE + 28)
define NELOG_NetlogonFailedDomainDelta()  (ERRLOG2_BASE + 29)
define NELOG_NetlogonFailedGlobalGroupDelta()  (ERRLOG2_BASE + 30)
define NELOG_NetlogonFailedLocalGroupDelta()  (ERRLOG2_BASE + 31)
define NELOG_NetlogonFailedUserDelta()  (ERRLOG2_BASE + 32)
define NELOG_NetlogonFailedPolicyDelta()  (ERRLOG2_BASE + 33)
define NELOG_NetlogonFailedTrustedDomainDelta()  (ERRLOG2_BASE + 34)
define NELOG_NetlogonFailedAccountDelta()  (ERRLOG2_BASE + 35)
define NELOG_NetlogonFailedSecretDelta()  (ERRLOG2_BASE + 36)
define NELOG_NetlogonSystemError()  (ERRLOG2_BASE + 37)
define NELOG_NetlogonDuplicateMachineAccounts()  (ERRLOG2_BASE + 38)
define NELOG_NetlogonTooManyGlobalGroups()  (ERRLOG2_BASE + 39)
define NELOG_NetlogonBrowserDriver()  (ERRLOG2_BASE + 40)
define NELOG_NetlogonAddNameFailure()  (ERRLOG2_BASE + 41)
define NELOG_RplMessages()  (ERRLOG2_BASE + 42)
define NELOG_RplXnsBoot()  (ERRLOG2_BASE + 43)
define NELOG_RplSystem()  (ERRLOG2_BASE + 44)
define NELOG_RplWkstaTimeout()  (ERRLOG2_BASE + 45)
define NELOG_RplWkstaFileOpen()  (ERRLOG2_BASE + 46)
define NELOG_RplWkstaFileRead()  (ERRLOG2_BASE + 47)
define NELOG_RplWkstaMemory()  (ERRLOG2_BASE + 48)
define NELOG_RplWkstaFileChecksum()  (ERRLOG2_BASE + 49)
define NELOG_RplWkstaFileLineCount()  (ERRLOG2_BASE + 50)
define NELOG_RplWkstaBbcFile()  (ERRLOG2_BASE + 51)
define NELOG_RplWkstaFileSize()  (ERRLOG2_BASE + 52)
define NELOG_RplWkstaInternal()  (ERRLOG2_BASE + 53)
define NELOG_RplWkstaWrongVersion()  (ERRLOG2_BASE + 54)
define NELOG_RplWkstaNetwork()  (ERRLOG2_BASE + 55)
define NELOG_RplAdapterResource()  (ERRLOG2_BASE + 56)
define NELOG_RplFileCopy()  (ERRLOG2_BASE + 57)
define NELOG_RplFileDelete()  (ERRLOG2_BASE + 58)
define NELOG_RplFilePerms()  (ERRLOG2_BASE + 59)
define NELOG_RplCheckConfigs()  (ERRLOG2_BASE + 60)
define NELOG_RplCreateProfiles()  (ERRLOG2_BASE + 61)
define NELOG_RplRegistry()  (ERRLOG2_BASE + 62)
define NELOG_RplReplaceRPLDISK()  (ERRLOG2_BASE + 63)
define NELOG_RplCheckSecurity()  (ERRLOG2_BASE + 64)
define NELOG_RplBackupDatabase()  (ERRLOG2_BASE + 65)
define NELOG_RplInitDatabase()  (ERRLOG2_BASE + 66)
define NELOG_RplRestoreDatabaseFailure()  (ERRLOG2_BASE + 67)
define NELOG_RplRestoreDatabaseSuccess()  (ERRLOG2_BASE + 68)
define NELOG_RplInitRestoredDatabase()  (ERRLOG2_BASE + 69)
define NELOG_NetlogonSessionTypeWrong()  (ERRLOG2_BASE + 70)
define NELOG_RplUpgradeDBTo40()  (ERRLOG2_BASE + 71)
define NELOG_NetlogonLanmanBdcsNotAllowed()  (ERRLOG2_BASE + 72)
define NELOG_NetlogonNoDynamicDns()  (ERRLOG2_BASE + 73)
define NELOG_NetlogonDynamicDnsRegisterFailure()  (ERRLOG2_BASE + 74)
define NELOG_NetlogonDynamicDnsDeregisterFailure()  (ERRLOG2_BASE + 75)
define NELOG_NetlogonFailedFileCreate()  (ERRLOG2_BASE + 76)
define NELOG_NetlogonGetSubnetToSite()  (ERRLOG2_BASE + 77)
define NELOG_NetlogonNoSiteForClient()  (ERRLOG2_BASE + 78)
define NELOG_NetlogonBadSiteName()  (ERRLOG2_BASE + 79)
define NELOG_NetlogonBadSubnetName()  (ERRLOG2_BASE + 80)

struct ERROR_LOG
{
    int32       el_len;
    int32       el_reserved;
    int32       el_time;
    int32       el_error;
    int32       el_name;
    int32       el_text;
    int32       el_data;
    int32       el_data_size;
    int32       el_nstrings;
}

//===============================[ LMMSG.H]=============================
define MSGNAME_NOT_FORWARDED()  0
define MSGNAME_FORWARDED_TO()  4
define MSGNAME_FORWARDED_FROM()  0x10

struct MSG_INFO_0
{
    int32      msgi0_name;
}

struct MSG_INFO_1
{
    int32      msgi1_name;
    int32      msgi1_forward_flag;
    int32      msgi1_forward;
}

//=================================[ LMREMUTL.H]==========================
struct TIME_OF_DAY_INFO
{
    int32      tod_elapsedt;
    int32      tod_msecs;
    int32      tod_hours;
    int32      tod_mins;
    int32      tod_secs;
    int32      tod_hunds;
    int32      tod_timezone;
    int32      tod_tinterval;
    int32      tod_day;
    int32      tod_month;
    int32      tod_year;
    int32      tod_weekday;
}

define SUPPORTS_REMOTE_ADMIN_PROTOCOL()  2
define SUPPORTS_RPC()  4
define SUPPORTS_SAM_PROTOCOL()  8
define SUPPORTS_UNICODE()  0x10
define SUPPORTS_LOCAL()  0x20
define SUPPORTS_ANY()  0x0FFFFFFFF
define NO_PERMISSION_REQUIRED()  1
define ALLOCATE_RESPONSE()  2
define USE_SPECIFIC_TRANSPORT()  0x80000000

//===============================[ LMREPL.H]=======================
define REPL_ROLE_EXPORT()  1
define REPL_ROLE_IMPORT()  2
define REPL_ROLE_BOTH()  3
define REPL_INTERVAL_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 0)
define REPL_PULSE_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 1)
define REPL_GUARDTIME_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 2)
define REPL_RANDOM_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 3)
define REPL_INTEGRITY_FILE()  1
define REPL_INTEGRITY_TREE()  2
define REPL_EXTENT_FILE()  1
define REPL_EXTENT_TREE()  2
define REPL_EXPORT_INTEGRITY_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 0)
define REPL_EXPORT_EXTENT_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + 1)
define REPL_UNLOCK_NOFORCE()  0
define REPL_UNLOCK_FORCE()  1
define REPL_STATE_OK()  0
define REPL_STATE_NO_MASTER()  1
define REPL_STATE_NO_SYNC()  2
define REPL_STATE_NEVER_REPLICATED()  3

struct REPL_INFO_0
{
    int32      rp0_role;
    int32      rp0_exportpath;
    int32      rp0_exportlist;
    int32      rp0_importpath;
    int32      rp0_importlist;
    int32      rp0_logonusername;
    int32      rp0_interval;
    int32      rp0_pulse;
    int32      rp0_guardtime;
    int32      rp0_random;
}

struct REPL_INFO_1000
{
    int32      rp1000_interval;
}

struct REPL_INFO_1001
{
    int32      rp1001_pulse;
}

struct REPL_INFO_1002
{
    int32      rp1002_guardtime;
}

struct REPL_INFO_1003
{
    int32      rp1003_random;
}

struct REPL_EDIR_INFO_0
{
    int32      rped0_dirname;
}

struct REPL_EDIR_INFO_1
{
    int32      rped1_dirname;
    int32      rped1_integrity;
    int32      rped1_extent;
}

struct REPL_EDIR_INFO_2
{
    int32      rped2_dirname;
    int32      rped2_integrity;
    int32      rped2_extent;
    int32      rped2_lockcount;
    int32      rped2_locktime;
}

struct REPL_EDIR_INFO_1000
{
    int32      rped1000_integrity;
}

struct REPL_EDIR_INFO_1001
{
    int32      rped1001_extent;
}

struct REPL_IDIR_INFO_0
{
    int32      rpid0_dirname;
}

struct REPL_IDIR_INFO_1
{
    int32      rpid1_dirname;
    int32      rpid1_state;
    int32      rpid1_mastername;
    int32      rpid1_last_update_time;
    int32      rpid1_lockcount;
    int32      rpid1_locktime;
}

//==============================[ LMSHARE.H ]=============================
define SHARE_NETNAME_PARMNUM()  1
define SHARE_TYPE_PARMNUM()  3
define SHARE_REMARK_PARMNUM()  4
define SHARE_PERMISSIONS_PARMNUM()  5
define SHARE_MAX_USES_PARMNUM()  6
define SHARE_CURRENT_USES_PARMNUM()  7
define SHARE_PATH_PARMNUM()  8
define SHARE_PASSWD_PARMNUM()  9
define SHARE_FILE_SD_PARMNUM()  501
define SHARE_REMARK_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SHARE_REMARK_PARMNUM)
define SHARE_MAX_USES_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SHARE_MAX_USES_PARMNUM)
define SHARE_FILE_SD_INFOLEVEL()  (PARMNUM_BASE_INFOLEVEL + SHARE_FILE_SD_PARMNUM)
define SHI1_NUM_ELEMENTS()  4
define SHI2_NUM_ELEMENTS()  10
define STYPE_DISKTREE()  0
define STYPE_PRINTQ()  1
define STYPE_DEVICE()  2
define STYPE_IPC()  3
define STYPE_SPECIAL()  0x80000000
define SHI_USES_UNLIMITED()  (int32)-1
define SHI1005_FLAGS_DFS()  1
define SHI1005_FLAGS_DFS_ROOT()  2
define COW_PERMACHINE()  4
define COW_PERUSER()  8
define CSC_CACHEABLE()  0x10
define CSC_NOFLOWOPS()  0x20
define CSC_AUTO_INWARD()  0x40
define CSC_AUTO_OUTWARD()  0x80
define SHI1005_VALID_FLAGS_SET()  (   CSC_CACHEABLE + CSC_NOFLOWOPS + CSC_AUTO_INWARD + CSC_AUTO_OUTWARD+ COW_PERMACHINE  + COW_PERUSER)
define SHI1007_VALID_FLAGS_SET()  SHI1005_VALID_FLAGS_SET
define SESS_GUEST()  1
define SESS_NOENCRYPTION()  2
define SESI1_NUM_ELEMENTS()  8
define SESI2_NUM_ELEMENTS()  9
define PERM_FILE_READ()  1
define PERM_FILE_WRITE()  2
define PERM_FILE_CREATE()  4

struct SHARE_INFO_0
{
    int32      shi0_netname;
}

struct SHARE_INFO_1
{
    int32      shi1_netname;
    int32      shi1_type;
    int32      shi1_remark;
}

struct SHARE_INFO_2
{
    int32      shi2_netname;
    int32      shi2_type;
    int32      shi2_remark;
    int32      shi2_permissions;
    int32      shi2_max_uses;
    int32      shi2_current_uses;
    int32      shi2_path;
    int32      shi2_passwd;
}

struct SHARE_INFO_501
{
    int32      shi501_netname;
    int32      shi501_type;
    int32      shi501_remark;
    int32      shi501_flags;
}

struct SHARE_INFO_502
{
    int32      shi502_netname;
    int32      shi502_type;
    int32      shi502_remark;
    int32      shi502_permissions;
    int32      shi502_max_uses;
    int32      shi502_current_uses;
    int32      shi502_path;
    int32      shi502_passwd;
    int32      shi502_reserved;
    int32      shi502_security_descriptor;
}

struct SHARE_INFO_1004
{
    int32      shi1004_remark;
}

struct SHARE_INFO_1005
{
    int32      shi1005_flags;
}

struct SHARE_INFO_1006
{
    int32      shi1006_max_uses;
}

struct SHARE_INFO_1007
{
    int32      shi1007_flags;
    int32      shi1007_AlternateDirectoryName;
}

struct SHARE_INFO_1501
{
    int32      shi1501_reserved;
    int32      shi1501_security_descriptor;
}

struct SESSION_INFO_0
{
    int32      sesi0_cname;
}

struct SESSION_INFO_1
{
    int32      sesi1_cname;
    int32      sesi1_username;
    int32      sesi1_num_opens;
    int32      sesi1_time;
    int32      sesi1_idle_time;
    int32      sesi1_user_flags;
}

struct SESSION_INFO_2
{
    int32      sesi2_cname;
    int32      sesi2_username;
    int32      sesi2_num_opens;
    int32      sesi2_time;
    int32      sesi2_idle_time;
    int32      sesi2_user_flags;
    int32      sesi2_cltype_name;
}

struct SESSION_INFO_10
{
    int32      sesi10_cname;
    int32      sesi10_username;
    int32      sesi10_time;
    int32      sesi10_idle_time;
}

struct SESSION_INFO_502
{
    int32      sesi502_cname;
    int32      sesi502_username;
    int32      sesi502_num_opens;
    int32      sesi502_time;
    int32      sesi502_idle_time;
    int32      sesi502_user_flags;
    int32      sesi502_cltype_name;
    int32      sesi502_transport;
}

struct CONNECTION_INFO_0
{
    int32      coni0_id;
}

struct CONNECTION_INFO_1
{
    int32      coni1_id;
    int32      coni1_type;
    int32      coni1_num_opens;
    int32      coni1_num_users;
    int32      coni1_time;
    int32      coni1_username;
    int32      coni1_netname;
}

struct FILE_INFO_2
{
    int32      fi2_id;
}

struct FILE_INFO_3
{
    int32      fi3_id;
    int32      fi3_permissions;
    int32      fi3_num_locks;
    int32      fi3_pathname;
    int32      fi3_username;
}

//===================================[ LMSNAME.H ]===================
define SERVICE_WORKSTATION()  "LanmanWorkstation"
define SERVICE_LM20_WORKSTATION()  "WORKSTATION"
define WORKSTATION_DISPLAY_NAME()  "Workstation"
define SERVICE_SERVER()  "LanmanServer"
define SERVICE_LM20_SERVER()  "SERVER"
define SERVER_DISPLAY_NAME()  "Server"
define SERVICE_BROWSER()  "BROWSER"
define SERVICE_LM20_BROWSER()  SERVICE_BROWSER
define SERVICE_MESSENGER()  "MESSENGER"
define SERVICE_LM20_MESSENGER()  SERVICE_MESSENGER
define SERVICE_NETRUN()  "NETRUN"
define SERVICE_LM20_NETRUN()  SERVICE_NETRUN
define SERVICE_SPOOLER()  "SPOOLER"
define SERVICE_LM20_SPOOLER()  SERVICE_SPOOLER
define SERVICE_ALERTER()  "ALERTER"
define SERVICE_LM20_ALERTER()  SERVICE_ALERTER
define SERVICE_NETLOGON()  "NETLOGON"
define SERVICE_LM20_NETLOGON()  SERVICE_NETLOGON
define SERVICE_NETPOPUP()  "NETPOPUP"
define SERVICE_LM20_NETPOPUP()  SERVICE_NETPOPUP
define SERVICE_SQLSERVER()  "SQLSERVER"
define SERVICE_LM20_SQLSERVER()  SERVICE_SQLSERVER
define SERVICE_REPL()  "REPLICATOR"
define SERVICE_LM20_REPL()  SERVICE_REPL
define SERVICE_RIPL()  "REMOTEBOOT"
define SERVICE_LM20_RIPL()  SERVICE_RIPL
define SERVICE_TIMESOURCE()  "TIMESOURCE"
define SERVICE_LM20_TIMESOURCE()  SERVICE_TIMESOURCE
define SERVICE_AFP()  "AFP"
define SERVICE_LM20_AFP()  SERVICE_AFP
define SERVICE_UPS()  "UPS"
define SERVICE_LM20_UPS()  SERVICE_UPS
define SERVICE_XACTSRV()  "XACTSRV"
define SERVICE_LM20_XACTSRV()  SERVICE_XACTSRV
define SERVICE_TCPIP()  "TCPIP"
define SERVICE_LM20_TCPIP()  SERVICE_TCPIP
define SERVICE_NBT()  "NBT"
define SERVICE_LM20_NBT()  SERVICE_NBT
define SERVICE_LMHOSTS()  "LMHOSTS"
define SERVICE_LM20_LMHOSTS()  SERVICE_LMHOSTS
define SERVICE_TELNET()  "Telnet"
define SERVICE_LM20_TELNET()  SERVICE_TELNET
define SERVICE_SCHEDULE()  "Schedule"
define SERVICE_LM20_SCHEDULE()  SERVICE_SCHEDULE
define SERVICE_NTLMSSP()  "NtLmSsp"
define SERVICE_DHCP()  "DHCP"
define SERVICE_LM20_DHCP()  SERVICE_DHCP
define SERVICE_NWSAP()  "NwSapAgent"
define SERVICE_LM20_NWSAP()  SERVICE_NWSAP
define NWSAP_DISPLAY_NAME()  "NW Sap Agent"
define SERVICE_NWCS()  "NWCWorkstation"
define SERVICE_DNS_CACHE()  "DnsCache"
define SERVICE_W32TIME()  "w32time"
define SERVCE_LM20_W32TIME()  SERVICE_W32TIME
define SERVICE_KDC()  "kdc"
define SERVICE_LM20_KDC()  SERVICE_KDC
define SERVICE_RPCLOCATOR()  "RPCLOCATOR"
define SERVICE_LM20_RPCLOCATOR()  SERVICE_RPCLOCATOR
define SERVICE_TRKSVR()  "TrkSvr"
define SERVICE_LM20_TRKSVR()  SERVICE_TRKSVR
define SERVICE_TRKWKS()  "TrkWks"
define SERVICE_LM20_TRKWKS()  SERVICE_TRKWKS

//====================================[ LMSTATS.H ]======================
define STATSOPT_CLR()  1
define STATS_NO_VALUE()  -1
define STATS_OVERFLOW()  -2

struct STAT_WORKSTATION_0
{
    int32       stw0_start;
    int32       stw0_numNCB_r;
    int32       stw0_numNCB_s;
    int32       stw0_numNCB_a;
    int32       stw0_fiNCB_r;
    int32       stw0_fiNCB_s;
    int32       stw0_fiNCB_a;
    int32       stw0_fcNCB_r;
    int32       stw0_fcNCB_s;
    int32       stw0_fcNCB_a;
    int32       stw0_sesstart;
    int32       stw0_sessfailcon;
    int32       stw0_sessbroke;
    int32       stw0_uses;
    int32       stw0_usefail;
    int32       stw0_autorec;
    int32       stw0_bytessent_r_lo;
    int32       stw0_bytessent_r_hi;
    int32       stw0_bytesrcvd_r_lo;
    int32       stw0_bytesrcvd_r_hi;
    int32       stw0_bytessent_s_lo;
    int32       stw0_bytessent_s_hi;
    int32       stw0_bytesrcvd_s_lo;
    int32       stw0_bytesrcvd_s_hi;
    int32       stw0_bytessent_a_lo;
    int32       stw0_bytessent_a_hi;
    int32       stw0_bytesrcvd_a_lo;
    int32       stw0_bytesrcvd_a_hi;
    int32       stw0_reqbufneed;
    int32       stw0_bigbufneed;
}

struct STAT_SERVER_0
{
    int32       sts0_start;
    int32       sts0_fopens;
    int32       sts0_devopens;
    int32       sts0_jobsqueued;
    int32       sts0_sopens;
    int32       sts0_stimedout;
    int32       sts0_serrorout;
    int32       sts0_pwerrors;
    int32       sts0_permerrors;
    int32       sts0_syserrors;
    int32       sts0_bytessent_low;
    int32       sts0_bytessent_high;
    int32       sts0_bytesrcvd_low;
    int32       sts0_bytesrcvd_high;
    int32       sts0_avresponse;
    int32       sts0_reqbufneed;
    int32       sts0_bigbufneed;
}

//===========================[ LMSVC.H ]============================
struct SERVICE_INFO_0
{
    int32      svci0_name;
}

struct SERVICE_INFO_1
{
    int32      svci1_name;
    int32      svci1_status;
    int32      svci1_code;
    int32      svci1_pid;
}

struct SERVICE_INFO_2
{
    int32      svci2_name;
    int32      svci2_status;
    int32      svci2_code;
    int32      svci2_pid;
    int32      svci2_text;
    int32      svci2_specific_error;
    int32      svci2_display_name;
}

define SERVICE_INSTALL_STATE()  3
define SERVICE_UNINSTALLED()  0
define SERVICE_INSTALL_PENDING()  1
define SERVICE_UNINSTALL_PENDING()  2
define SERVICE_INSTALLED()  3
define SERVICE_PAUSE_STATE()  0x0C
define LM20_SERVICE_ACTIVE()  0
define LM20_SERVICE_CONTINUE_PENDING()  4
define LM20_SERVICE_PAUSE_PENDING()  8
define LM20_SERVICE_PAUSED()  0x0C
define SERVICE_NOT_UNINSTALLABLE()  0
define SERVICE_UNINSTALLABLE()  0x10
define SERVICE_NOT_PAUSABLE()  0
define SERVICE_PAUSABLE()  0x20
define SERVICE_REDIR_PAUSED()  0x700
define SERVICE_REDIR_DISK_PAUSED()  0x100
define SERVICE_REDIR_PRINT_PAUSED()  0x200
define SERVICE_REDIR_COMM_PAUSED()  0x400
define SERVICE_DOS_ENCRYPTION()  L"ENCRYPT"
define SERVICE_CTRL_INTERROGATE()  0
define SERVICE_CTRL_PAUSE()  1
define SERVICE_CTRL_CONTINUE()  2
define SERVICE_CTRL_UNINSTALL()  3
define SERVICE_CTRL_REDIR_DISK()  1
define SERVICE_CTRL_REDIR_PRINT()  2
define SERVICE_CTRL_REDIR_COMM()  4
define SERVICE_IP_NO_HINT()  0
define SERVICE_CCP_NO_HINT()  0
define SERVICE_IP_QUERY_HINT()  0x10000
define SERVICE_CCP_QUERY_HINT()  0x10000
define SERVICE_IP_CHKPT_NUM()  0x0FF
define SERVICE_CCP_CHKPT_NUM()  0x0FF
define SERVICE_IP_WAIT_TIME()  0x0FF00
define SERVICE_CCP_WAIT_TIME()  0x0FF00
define SERVICE_IP_WAITTIME_SHIFT()  8
define SERVICE_NTIP_WAITTIME_SHIFT()  12
define UPPER_HINT_MASK()  0x0FF00
define LOWER_HINT_MASK()  0x0FF
define UPPER_GET_HINT_MASK()  0x0FF00000
define LOWER_GET_HINT_MASK()  0x0FF00
define SERVICE_NT_MAXTIME()  0x0FFFF
define SERVICE_RESRV_MASK()  0x1FFFF
define SERVICE_MAXTIME()  0x0FF
define SERVICE_BASE()  3050
define SERVICE_UIC_NORMAL()  0
define SERVICE_UIC_BADPARMVAL()  (SERVICE_BASE + 1)
define SERVICE_UIC_MISSPARM()  (SERVICE_BASE + 2)
define SERVICE_UIC_UNKPARM()  (SERVICE_BASE + 3)
define SERVICE_UIC_RESOURCE()  (SERVICE_BASE + 4)
define SERVICE_UIC_CONFIG()  (SERVICE_BASE + 5)
define SERVICE_UIC_SYSTEM()  (SERVICE_BASE + 6)
define SERVICE_UIC_INTERNAL()  (SERVICE_BASE + 7)
define SERVICE_UIC_AMBIGPARM()  (SERVICE_BASE + 8)
define SERVICE_UIC_DUPPARM()  (SERVICE_BASE + 9)
define SERVICE_UIC_KILL()  (SERVICE_BASE + 10)
define SERVICE_UIC_EXEC()  (SERVICE_BASE + 11)
define SERVICE_UIC_SUBSERV()  (SERVICE_BASE + 12)
define SERVICE_UIC_CONFLPARM()  (SERVICE_BASE + 13)
define SERVICE_UIC_FILE()  (SERVICE_BASE + 14)
define SERVICE_UIC_M_NULL()  0
define SERVICE_UIC_M_MEMORY()  (SERVICE_BASE + 20)
define SERVICE_UIC_M_DISK()  (SERVICE_BASE + 21)
define SERVICE_UIC_M_THREADS()  (SERVICE_BASE + 22)
define SERVICE_UIC_M_PROCESSES()  (SERVICE_BASE + 23)
define SERVICE_UIC_M_SECURITY()  (SERVICE_BASE + 24)
define SERVICE_UIC_M_LANROOT()  (SERVICE_BASE + 25)
define SERVICE_UIC_M_REDIR()  (SERVICE_BASE + 26)
define SERVICE_UIC_M_SERVER()  (SERVICE_BASE + 27)
define SERVICE_UIC_M_SEC_FILE_ERR()  (SERVICE_BASE + 28)
define SERVICE_UIC_M_FILES()  (SERVICE_BASE + 29)
define SERVICE_UIC_M_LOGS()  (SERVICE_BASE + 30)
define SERVICE_UIC_M_LANGROUP()  (SERVICE_BASE + 31)
define SERVICE_UIC_M_MSGNAME()  (SERVICE_BASE + 32)
define SERVICE_UIC_M_ANNOUNCE()  (SERVICE_BASE + 33)
define SERVICE_UIC_M_UAS()  (SERVICE_BASE + 34)
define SERVICE_UIC_M_SERVER_SEC_ERR()  (SERVICE_BASE + 35)
define SERVICE_UIC_M_WKSTA()  (SERVICE_BASE + 37)
define SERVICE_UIC_M_ERRLOG()  (SERVICE_BASE + 38)
define SERVICE_UIC_M_FILE_UW()  (SERVICE_BASE + 39)
define SERVICE_UIC_M_ADDPAK()  (SERVICE_BASE + 40)
define SERVICE_UIC_M_LAZY()  (SERVICE_BASE + 41)
define SERVICE_UIC_M_UAS_MACHINE_ACCT()  (SERVICE_BASE + 42)
define SERVICE_UIC_M_UAS_SERVERS_NMEMB()  (SERVICE_BASE + 43)
define SERVICE_UIC_M_UAS_SERVERS_NOGRP()  (SERVICE_BASE + 44)
define SERVICE_UIC_M_UAS_INVALID_ROLE()  (SERVICE_BASE + 45)
define SERVICE_UIC_M_NETLOGON_NO_DC()  (SERVICE_BASE + 46)
define SERVICE_UIC_M_NETLOGON_DC_CFLCT()  (SERVICE_BASE + 47)
define SERVICE_UIC_M_NETLOGON_AUTH()  (SERVICE_BASE + 48)
define SERVICE_UIC_M_UAS_PROLOG()  (SERVICE_BASE + 49)
define SERVICE2_BASE()  5600
define SERVICE_UIC_M_NETLOGON_MPATH()  (SERVICE2_BASE + 0)
define SERVICE_UIC_M_LSA_MACHINE_ACCT()  (SERVICE2_BASE + 1)
define SERVICE_UIC_M_DATABASE_ERROR()  (SERVICE2_BASE + 2)

//==============================[ LMUSE.H ]======================
struct USE_INFO_0
{
    int32      ui0_local;
    int32      ui0_remote;
}

struct USE_INFO_1
{
    int32      ui1_local;
    int32      ui1_remote;
    int32      ui1_password;
    int32      ui1_status;
    int32      ui1_asg_type;
    int32      ui1_refcount;
    int32      ui1_usecount;
}

struct USE_INFO_2
{
    int32      ui2_local;
    int32      ui2_remote;
    int32      ui2_password;
    int32      ui2_status;
    int32      ui2_asg_type;
    int32      ui2_refcount;
    int32      ui2_usecount;
    int32      ui2_username;
    int32      ui2_domainname;
}

struct USE_INFO_3
{
    USE_INFO_2      ui3_ui2;
    int32      ui3_flags;
}

define USE_LOCAL_PARMNUM()  1
define USE_REMOTE_PARMNUM()  2
define USE_PASSWORD_PARMNUM()  3
define USE_ASGTYPE_PARMNUM()  4
define USE_USERNAME_PARMNUM()  5
define USE_DOMAINNAME_PARMNUM()  6
define USE_OK()  0
define USE_PAUSED()  1
define USE_SESSLOST()  2
define USE_DISCONN()  2
define USE_NETERR()  3
define USE_CONN()  4
define USE_RECONN()  5
define USE_WILDCARD()  -1
define USE_DISKDEV()  0
define USE_SPOOLDEV()  1
define USE_CHARDEV()  2
define USE_IPC()  3
define CREATE_NO_CONNECT()  1

//============================[ LMUSEFLG.H]=======================
define USE_NOFORCE()  0
define USE_FORCE()  1
define USE_LOTS_OF_FORCE()  2

struct STRRET
{
    int32   uType;
    union UNION_STRRET
    {
        int32      pOleStr;
        int32      pStr;
        int32      uOffset;
        union UNION_STRRET2
        {
            int8[MAX_PATH]  cStr;
            int8[MAX_PATH]  cstr;
        }
    }
}

//============================[ RICHEDIT.H ]=======================
struct GETTEXTEX
{
    int32    cb;
    int32    flags;
    int32    codepage;
    int32    lpDefaultChar;
    int32    lpUsedDefChar;
}

struct SETTEXTEX
{
    int32    flags;
    int32    codepage;
}

struct GETTEXTLENGTHEX
{
    int32    flags;
    int32    codepage;
}

define ST_DEFAULT()  0
define ST_KEEPUNDO()  1
define ST_SELECTION()  2


//Misc
//-------------------------------------------------------------------------------------------------

define TB_SETINDENT()  WM_USER + 47
define TB_SETIMAGELIST()  WM_USER + 48
define TB_GETIMAGELIST()  WM_USER + 49
define TB_LOADIMAGES()  WM_USER + 50
define TB_GETRECT()  WM_USER + 51
define TB_SETHOTIMAGELIST()  WM_USER + 52
define TB_GETHOTIMAGELIST()  WM_USER + 53
define TB_SETDISABLEDIMAGELIST()  WM_USER + 54
define TB_GETDISABLEDIMAGELIST()  WM_USER + 55
define TB_GETBUTTONSIZE()  WM_USER + 58
define TB_SETBUTTONWIDTH()  WM_USER + 59
define TB_SETMAXTEXTROWS()  WM_USER + 60
define TB_GETTEXTROWS()  WM_USER + 61
define TB_GETOBJECT()  WM_USER + 62
define TB_GETHOTITEM()  WM_USER + 71
define TB_SETHOTITEM()  WM_USER + 72
define TB_SETANCHORHIGHLIGHT()  WM_USER + 73
define TB_GETANCHORHIGHLIGHT()  WM_USER + 74
define TB_MAPACCELERATOR()  WM_USER + 78

define LVS_EX_GRIDLINES()  0x00000001
define LVS_EX_SUBITEMIMAGES()  0x00000002
define LVS_EX_CHECKBOXES()  0x00000004
define LVS_EX_TRACKSELECT()  0x00000008
define LVS_EX_HEADERDRAGDROP()  0x00000010
define LVS_EX_FULLROWSELECT()  0x00000020
define LVS_EX_ONECLICKACTIVATE()  0x00000040
define LVS_EX_TWOCLICKACTIVATE()  0x00000080
define LVS_EX_FLATSB()  0x00000100
define LVS_EX_REGIONAL()  0x00000200
define LVS_EX_INFOTIP()  0x00000400
define LVS_EX_UNDERLINEHOT()  0x00000800
define LVS_EX_UNDERLINECOLD()  0x00001000
define LVS_EX_MULTIWORKAREAS()  0x00002000
define LVS_EX_LABELTIP()  0x00004000

define LVCF_IMAGE()  0x0010
define LVCF_ORDER()  0x0020
define LVCFMT_IMAGE()  0x0800
define LVCFMT_BITMAP_ON_RIGHT()  0x1000
define LVCFMT_COL_HAS_IMAGES()  0x8000

define LVM_SETEXTENDEDLISTVIEWSTYLE()  LVM_FIRST + 54
define LVM_GETEXTENDEDLISTVIEWSTYLE()  LVM_FIRST + 55


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
define LVM_GETHEADER()  LVM_FIRST + 31


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
define HDM_SETIMAGELIST()  HDM_FIRST + 8
define HDM_GETIMAGELIST()  HDM_FIRST + 9


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
define HDI_IMAGE()  0x0020
define HDI_DI_SETITEM()  0x0040
define HDI_ORDER()  0x0080


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//define HDF_LEFT()  0
define HDF_BITMAP_ON_RIGHT()  0x1000
define HDF_IMAGE()  0x0800

//OLE Structures and Equates
//----------------------------------------------------------------------------


//----------------------------------------------------------------------------

define CLSCTX_ALL()  CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER | CLSCTX_LOCAL_SERVER
define CLSCTX_INPROC()  CLSCTX_INPROC_SERVER | CLSCTX_INPROC_HANDLER
define CLSCTX_SERVER()  CLSCTX_INPROC_SERVER | CLSCTX_LOCAL_SERVER

define REGCLS_SINGLEUSE()  0
define REGCLS_MULTIPLEUSE()  1
define REGCLS_MULTI_SEPARATE()  2

define MARSHALINTERFACE_MIN()  500
define CWCSTORAGENAME()  32
define STGM_DIRECT()  0
define STGM_TRANSACTED()  0x00010000
define STGM_SIMPLE()  0x08000000
define STGM_READ()  0
define STGM_WRITE()  0x00000001
define STGM_READWRITE()  0x00000002
define STGM_SHARE_DENY_NONE()  0x00000040
define STGM_SHARE_DENY_READ()  0x00000030
define STGM_SHARE_DENY_WRITE()  0x00000020
define STGM_SHARE_EXCLUSIVE()  0x00000010
define STGM_PRIORITY()  0x00040000
define STGM_DELETEONRELEASE()  0x04000000
define STGM_CREATE()  0x00001000
define STGM_CONVERT()  0x00020000
define STGM_FAILIFTHERE()  0

struct guidIID
{
    int32      Data1;
    int16      Data2;
    int16      Data3;
    int8[8]  Data4;
}

define BFFM_SETSTATUSTEXT()  WM_USER + 100
define BFFM_SETSELECTION()  WM_USER + 102

define CMIC_VALID_SEE_FLAGS()  SEE_VALID_CMIC_FLAGS     // Internal

struct COLORSCHEME
{
    int32     dwSize;
    COLORREF     clrBtnHighlight;
    COLORREF     clrBtnShadow;
}

struct NMMOUSE
{
    NMHDR      hdr;
    int32      dwItemSpec;
    int32      dwItemData;
    POINT      pt;
    int32      dwHitInfo;
}

define NMCLICK()  NMMOUSE

define HOVER_DEFAULT()  0x0FFFFFFFF

struct TRACKMOUSEEVENT
{
    int32      cbSize;
    int32      dwFlags;
    int32      hwndTrack;
    int32      dwHoverTime;
}

define TBSTYLE_AUTOSIZE()  0x10
define TB_SETCOLORSCHEME()  CCM_SETCOLORSCHEME
define SWP_NOSENDCHANGING()  0x400
define CC_ANYCOLOR()  0x100
define TCN_FOCUSCHANGE()  TCN_FIRST - 4

define STREAM_SEEK_SET()  0
define STREAM_SEEK_CUR()  1
define STREAM_SEEK_END()  2

define GTL_DEFAULT()  0
define GTL_USECRLF()  1
define GTL_PRECISE()  2
define GTL_CLOSE()  4
define GTL_NUMCHARS()  8
define GTL_NUMBYTES()  16

define TM_PLAINTEXT()  1
define TM_RICHTEXT()  2
define TM_SINGLELEVELUNDO()  4
define TM_MULTILEVELUNDO()  8
define TM_SINGLECODEPAGE()  16
define TM_MULTICODEPAGE()  32

define hWndOwner()  hwndOwner

define TO_ADVANCEDTYPOGRAPHY()  1
define TO_SIMPLELINEBREAK()  2
define TCS_FLATBUTTONS()  8

define TTN_GETDISPINFO()  TTN_FIRST
define TTF_DI_SETITEM()  0x8000
define RBBS_USECHEVRON()  0x200
define GT_DEFAULT()  0
define GT_USECRLF()  1

struct DLLVERSIONINFO
{
    int32          cbSize;
    int32          dwMajorVersion;
    int32          dwMinorVersion;
    int32          dwBuildNumber;
    int32          dwPlatformID;
}

define BTNS_SHOWTEXT()  0x40
define I_IMAGENONE()  -2

define DTM_FIRST()  0x1000
define DTM_SETFORMAT()  DTM_FIRST + 5
define DTM_SETSYSTEMTIME()  DTM_FIRST + 2
define DTM_GETSYSTEMTIME()  DTM_FIRST + 1
define MAX_COMPUTERNAME_LENGTH()  15

// ----------------------------------------
// aditional winsock equates and structure
// contributed by Thomas Bleeker.
// ----------------------------------------
define FD_READ_BIT()  0
define FD_WRITE_BIT()  1
define FD_OOB_BIT()  2
define FD_ACCEPT_BIT()  3
define FD_CONNECT_BIT()  4
define FD_CLOSE_BIT()  5
define FD_QOS_BIT()  6
define FD_GROUP_QOS_BIT()  7
define FD_ROUTING_INTERFACE_CHANGE_BIT()  8
define FD_ADDRESS_LIST_CHANGE_BIT()  9

define FD_MAX_EVENTS()  10
define FD_ALL_EVENTS()  (1 SHL FD_MAX_EVENTS) - 1

struct WSANETWORKEVENTS
{
    int32      lNetworkEvents;
    int32[FD_MAX_EVENTS]  iErrorCode;
}

// -------------------------------------------------
// DatePicker constants contributed by Edgar Hansen
// -------------------------------------------------
define MCM_FIRST()  4096
define MCM_GETCOLOR()  MCM_FIRST + 11
define MCM_GETCURSEL()  MCM_FIRST + 1
define MCM_GETFIRSTDAYOFWEEK()  MCM_FIRST + 16
define MCM_GETMAXSELCOUNT()  MCM_FIRST + 3
define MCM_GETMAXTODAYWIDTH()  MCM_FIRST + 21
define MCM_GETMINREQRECT()  MCM_FIRST + 9
define MCM_GETMONTHDELTA()  MCM_FIRST + 19
define MCM_GETMONTHRANGE()  MCM_FIRST + 7
define MCM_GETRANGE()  MCM_FIRST + 17
define MCM_GETSELRANGE()  MCM_FIRST + 5
define MCM_GETTODAY()  MCM_FIRST + 13
define MCM_HITTEST()  MCM_FIRST + 14
define MCM_SETCOLOR()  MCM_FIRST + 10
define MCM_SETCURSEL()  MCM_FIRST + 2
define MCM_SETDAYSTATE()  MCM_FIRST + 8
define MCM_SETFIRSTDAYOFWEEK()  MCM_FIRST + 15
define MCM_SETMAXSELCOUNT()  MCM_FIRST + 4
define MCM_SETMONTHDELTA()  MCM_FIRST + 20
define MCM_SETRANGE()  MCM_FIRST + 18
define MCM_SETSELRANGE()  MCM_FIRST + 6
define MCM_SETTODAY()  MCM_FIRST + 12
define MCS_DAYSTATE()  1
define MCS_MULTISELECT()  2
define MCS_NOTODAY()  16
define MCS_NOTODAY_PRE_IE4()  8
define MCS_NOTODAYCIRCLE()  8
define MCS_WEEKNUMBERS()  4

define DTM_GETMCCOLOR()  DTM_FIRST + 7
define DTM_GETMCFONT()  DTM_FIRST + 10
define DTM_GETMONTHCAL()  DTM_FIRST + 8
define DTM_GETRANGE()  DTM_FIRST + 3
define DTM_SETFORMATA()  DTM_FIRST + 5
define DTM_SETFORMATW()  DTM_FIRST + 50
define DTM_SETMCCOLOR()  DTM_FIRST + 6
define DTM_SETMCFONT()  DTM_FIRST + 9
define DTM_SETRANGE()  DTM_FIRST + 4
define DTS_APPCANPARSE()  16
define DTS_LONGDATEFORMAT()  4
define DTS_RIGHTALIGN()  32
define DTS_SHORTDATEFORMAT()  0
define DTS_SHOWNONE()  2
define DTS_TIMEFORMAT()  9
define DTS_UPDOWN()  1


struct TBBUTTONINFOA
{
    int32      cbSize;
    int32      dwMask;
    int32      idCommand;
    int32      iImage;
    int8      fsState;
    int8      fsStyle;
    int16      lx;
    int32      lParam;
    int32      pszText;
    int32      cchText;
}

define TBBUTTONINFO()  TBBUTTONINFOA

// ----------------------
// edit control messages
// ----------------------
define EM_GETSEL()  0x0B0
define EM_SETSEL()  0x0B1
define EM_GETRECT()  0x0B2
define EM_SETRECT()  0x0B3
define EM_SETRECTNP()  0x0B4
define EM_SCROLL()  0x0B5
define EM_LINESCROLL()  0x0B6
define EM_SCROLLCARET()  0x0B7
define EM_GETMODIFY()  0x0B8
define EM_SETMODIFY()  0x0B9
define EM_GETLINECOUNT()  0x0BA
define EM_LINEINDEX()  0x0BB
define EM_SETHANDLE()  0x0BC
define EM_GETHANDLE()  0x0BD
define EM_GETTHUMB()  0x0BE
define EM_LINELENGTH()  0x0C1
define EM_REPLACESEL()  0x0C2
define EM_GETLINE()  0x0C4
define EM_LIMITTEXT()  0x0C5
define EM_CANUNDO()  0x0C6
define EM_UNDO()  0x0C7
define EM_FMTLINES()  0x0C8
define EM_LINEFROMCHAR()  0x0C9
define EM_SETTABSTOPS()  0x0CB
define EM_SETPASSWORDCHAR()  0x0CC
define EM_EMPTYUNDOBUFFER()  0x0CD
define EM_GETFIRSTVISIBLELINE()  0x0CE
define EM_SETREADONLY()  0x0CF
define EM_SETWORDBREAKPROC()  0x0D0
define EM_GETWORDBREAKPROC()  0x0D1
define EM_GETPASSWORDCHAR()  0x0D2
define EM_SETMARGINS()  0x0D3
define EM_GETMARGINS()  0x0D4
define EM_SETLIMITTEXT()  EM_LIMITTEXT
define EM_GETLIMITTEXT()  0x0D5
define EM_POSFROMCHAR()  0x0D6
define EM_CHARFROMPOS()  0x0D7
define EM_SETIMESTATUS()  0x0D8
define EM_GETIMESTATUS()  0x0D9

// -------------------------- riched equates -------------------------------

define cchTextLimitDefault()  32767

define EM_CANPASTE()  WM_USER + 50
define EM_DISPLAYBAND()  WM_USER + 51
define EM_EXGETSEL()  WM_USER + 52
define EM_EXLIMITTEXT()  WM_USER + 53
define EM_EXLINEFROMCHAR()  WM_USER + 54
define EM_EXSETSEL()  WM_USER + 55
define EM_FINDTEXT()  WM_USER + 56
define EM_FORMATRANGE()  WM_USER + 57
define EM_GETCHARFORMAT()  WM_USER + 58
define EM_GETEVENTMASK()  WM_USER + 59
define EM_GETOLEINTERFACE()  WM_USER + 60
define EM_GETPARAFORMAT()  WM_USER + 61
define EM_GETSELTEXT()  WM_USER + 62
define EM_HIDESELECTION()  WM_USER + 63
define EM_PASTESPECIAL()  WM_USER + 64
define EM_REQUESTRESIZE()  WM_USER + 65
define EM_SELECTIONTYPE()  WM_USER + 66
define EM_SETBKGNDCOLOR()  WM_USER + 67
define EM_SETCHARFORMAT()  WM_USER + 68
define EM_SETEVENTMASK()  WM_USER + 69
define EM_SETOLECALLBACK()  WM_USER + 70
define EM_SETPARAFORMAT()  WM_USER + 71
define EM_SETTARGETDEVICE()  WM_USER + 72
define EM_STREAMIN()  WM_USER + 73
define EM_STREAMOUT()  WM_USER + 74
define EM_GETTEXTRANGE()  WM_USER + 75
define EM_FINDWORDBREAK()  WM_USER + 76
define EM_SETOPTIONS()  WM_USER + 77
define EM_GETOPTIONS()  WM_USER + 78
define EM_FINDTEXTEX()  WM_USER + 79
define EM_GETWORDBREAKPROCEX()  WM_USER + 80
define EM_SETWORDBREAKPROCEX()  WM_USER + 81
define EM_SETUNDOLIMIT()  WM_USER + 82
define EM_REDO()  WM_USER + 84
define EM_CANREDO()  WM_USER + 85
define EM_GETUNDONAME()  WM_USER + 86
define EM_GETREDONAME()  WM_USER + 87
define EM_STOPGROUPTYPING()  WM_USER + 88
define EM_SETTEXTMODE()  WM_USER + 89
define EM_GETTEXTMODE()  WM_USER + 90
define EM_AUTOURLDETECT()  WM_USER + 91
define EM_GETAUTOURLDETECT()  WM_USER + 92
define EM_SETPALETTE()  WM_USER + 93
define EM_GETTEXTEX()  WM_USER + 94
define EM_GETTEXTLENGTHEX()  WM_USER + 95
define EM_SHOWSCROLLBAR()  WM_USER + 96

define EM_SETPUNCTUATION()  WM_USER + 100
define EM_GETPUNCTUATION()  WM_USER + 101
define EM_SETWORDWRAPMODE()  WM_USER + 102
define EM_GETWORDWRAPMODE()  WM_USER + 103
define EM_SETIMECOLOR()  WM_USER + 104
define EM_GETIMECOLOR()  WM_USER + 105
define EM_SETIMEOPTIONS()  WM_USER + 106
define EM_GETIMEOPTIONS()  WM_USER + 107
define EM_CONVPOSITION()  WM_USER + 108
define EM_SETLANGOPTIONS()  WM_USER + 120
define EM_GETLANGOPTIONS()  WM_USER + 121
define EM_GETIMECOMPMODE()  WM_USER + 122
define EM_FINDTEXTW()  WM_USER + 123
define EM_FINDTEXTEXW()  WM_USER + 124
define EM_RECONVERSION()  WM_USER + 125
define EM_SETIMEMODEBIAS()  WM_USER + 126
define EM_GETIMEMODEBIAS()  WM_USER + 127
define EM_SETBIDIOPTIONS()  WM_USER + 200
define EM_GETBIDIOPTIONS()  WM_USER + 201
define EM_SETTYPOGRAPHYOPTIONS()  WM_USER + 202
define EM_GETTYPOGRAPHYOPTIONS()  WM_USER + 203
define EM_SETEDITSTYLE()  WM_USER + 204
define EM_GETEDITSTYLE()  WM_USER + 205

define EM_OUTLINE()  WM_USER + 220
define EM_GETSCROLLPOS()  WM_USER + 221
define EM_SETSCROLLPOS()  WM_USER + 222
define EM_SETFONTSIZE()  WM_USER + 223
define EM_GETZOOM()  WM_USER + 224
define EM_SETZOOM()  WM_USER + 225

define EM_SETTEXTEX()  WM_USER + 97

// ----------------------
// notification messages
// ----------------------
define EN_SETFOCUS()  0x100
define EN_KILLFOCUS()  0x200
define EN_CHANGE()  0x300
define EN_UPDATE()  0x400
define EN_ERRSPACE()  0x500
define EN_MAXTEXT()  0x501
define EN_HSCROLL()  0x601
define EN_VSCROLL()  0x602

define EN_MSGFILTER()  0x0700
define EN_REQUESTRESIZE()  0x0701
define EN_SELCHANGE()  0x0702
define EN_DROPFILES()  0x0703
define EN_PROTECTED()  0x0704
define EN_CORRECTTEXT()  0x0705
define EN_STOPNOUNDO()  0x0706
define EN_IMECHANGE()  0x0707
define EN_SAVECLIPBOARD()  0x0708
define EN_OLEOPFAILED()  0x0709

// -------------------------------------
// Additional common control structures
// -------------------------------------

struct NMTOOLTIPSCREATED
{
    NMHDR    hdr;
    int32    hwndToolTips;
}

struct NMKEY
{
    NMHDR    hdr;
    int32    nVKey;
    int32    uFlags;
}

define _ch()  lh

struct NMBYTE
{
    NMHDR    hdr;
    int32    _ch;
    int32    dwItemPrev;
    int32    dwItemNext;
}

struct NMCUSTOMDRAW
{
    NMHDR    hdr;
    int32    dwDrawStage;
    int32    hdc;
    RECT    rc;
    int32    dwItemSpec;
    int32    uItemState;
    int32    lItemlParam;
}

struct NMTTCUSTOMDRAW
{
    NMCUSTOMDRAW    nmcd;
    int32    uDrawFlags;
}

define _cx()  lx

struct IMAGELISTDRADWORDS
{
    int32    cbSize;
    int32    himl;
    int32    i;
    int32    hdcDst;
    int32    x;
    int32    y;
    int32    _cx;
    int32    cy;
    int32    xBitmap;
    int32    yBitmap;
    int32    rgbBk;
    int32    rgbFg;
    int32    fStyle;
    int32    dwRop;
}

struct HD_TEXTFILTERA
{
    int32    pszText;
    int32    cchTextMax;
}

define TEXTFILTER()  TEXTFILTERA

struct HDITEMA
{
    int32    _mask;
    int32    cxy;
    int32    pszText;
    int32    hbm;
    int32    cchTextMax;
    int32    fmt;
    int32    lParam;
    int32    iImage;
    int32    iOrder;
    int32    _type;
    int32    pvFilter;
}

define HDITEM()  HDITEMA

struct HDHITTESTINFO
{
    POINT    pt;
    int32    flags;
    int32    iItem;
}

struct NMHDDISPINFOA
{
    NMHDR    hdr;
    int32    iItem;
    int32    _mask;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    lParam;
}

define NMHDDISPINFO()  NMHDDISPINFOA

struct NMHDFILTERBTNCLICK
{
    NMHDR    hdr;
    int32    iItem;
    RECT    rc;
}

struct TBINSERTMARK
{
    int32    iButton;
    int32    dwFlags;
}

struct NMTBHOTITEM
{
    NMHDR    hdr;
    int32    idOld;
    int32    idNew;
    int32    dwFlags;
}

struct NMTBSAVE
{
    NMHDR    hdr;
    int32    pData;
    int32    pCurrent;
    int32    cbData;
    int32    iItem;
    int32    cButtons;
    TBBUTTON    tbButton;
}

struct NMTBRESTORE
{
    NMHDR    hdr;
    int32    pData;
    int32    pCurrent;
    int32    cbData;
    int32    iItem;
    int32    cButtons;
    int32    cbBytesPerRecord;
    TBBUTTON    tbButton;
}

struct NMTBGETINFOTIPA
{
    NMHDR    hdr;
    int32    pszText;
    int32    cchTextMax;
    int32    iItem;
    int32    lParam;
}

define NMTBGETINFOTIP()  NMTBGETINFOTIPA

struct NMTBDISPINFOA
{
    NMHDR    hdr;
    int32    dwMask;
    int32    idCommand;
    int32    lParam;
    int32    iImage;
    int32    pszText;
    int32    cchText;
}

define NMTBDISPINFO()  NMTBDISPINFOA

struct NMTOOLBARA
{
    NMHDR    hdr;
    int32    iItem;
    TBBUTTON    tbButton;
    int32    cchText;
    int32    pszText;
    RECT    rcButton;
}

////// NMTOOLBAR equ <NMTOOLBARA>

struct NMREBARCHEVRON
{
    NMHDR    hdr;
    int32    uBand;
    int32    wID;
    int32    lParam;
    RECT    rc;
    int32    lParamNM;
}

struct TTTOOLINFOA
{
    int32    cbSize;
    int32    uFlags;
    int32    hwnd;
    int32    uId;
    RECT    rect;
    int32    hinst;
    int32    lpszText;
    int32    lParam;
}

define TTTOOLINFO()  TTTOOLINFOA

struct TTHITTESTINFOA
{
    int32    hwnd;
    POINT    pt;
    TTTOOLINFOA    ti;
}

define TTHITTESTINFO()  TTHITTESTINFOA

struct NMTTDISPINFOA
{
    NMHDR    hdr;
    int32    lpszText;
    int8[80]  szText;
    int32    hinst;
    int32    uFlags;
    int32    lParam;
}

////// NMTTDISPINFO equ <NMTTDISPINFOA>

// NMUPDOWN STRUCT
//   hdr               NMHDR  <>
//   iPos              int32  ?
//   iDelta            int32  ?
// NMUPDOWN ENDS

struct PBRANGE
{
    int32    iLow;
    int32    iHigh;
}

struct LVBKIMAGEA
{
    int32    ulFlags;
    int32    hbm;
    int32    pszImage;
    int32    cchImageMax;
    int32    xOffsetPercent;
    int32    yOffsetPercent;
}

define LVBKIMAGE()  LVBKIMAGEA

struct NMITEMACTIVATE
{
    NMHDR    hdr;
    int32    iItem;
    int32    iSubItem;
    int32    uNewState;
    int32    uOldState;
    int32    uChanged;
    POINT    ptAction;
    int32    lParam;
    int32    uKeyFlags;
}

struct NMLVCUSTOMDRAW
{
    NMCUSTOMDRAW    nmcd    ;
    int32    clrText;
    int32    clrTextBk;
    int32    iSubItem;
}

struct NMLVCACHEHDWORD
{
    NMHDR    hdr;
    int32    iFrom;
    int32    iTo;
}

// NMLVFINDITEMA STRUCT
//   hdr               NMHDR  <>
//   iStart            int32  ?
//   lvfi              LVFINDINFOA  <>
// NMLVFINDITEMA ENDS

define NMLVFINDITEM()  NMLVFINDITEMA

struct NMLVODSTATECHANGE
{
    NMHDR    hdr;
    int32    iFrom;
    int32    iTo;
    int32    uNewState;
    int32    uOldState;
}

// NMLVDISPINFOA STRUCT
//   hdr               NMHDR  <>
//   item              LVITEMA  <>
// NMLVDISPINFOA ENDS

define NMLVDISPINFO()  NMLVDISPINFOA

struct NMLVGETINFOTIPA
{
    NMHDR    hdr;
    int32    dwFlags;
    int32    pszText;
    int32    cchTextMax;
    int32    iItem;
    int32    iSubItem;
    int32    lParam;
}

define NMLVGETINFOTIP()  NMLVGETINFOTIPA

struct NMTVCUSTOMDRAW
{
    NMCUSTOMDRAW    nmcd    ;
    int32    clrText;
    int32    clrTextBk;
    int32    iLevel;
}

struct NMTVGETINFOTIPA
{
    NMHDR    hdr;
    int32    pszText;
    int32    cchTextMax;
    int32    hItem;
    int32    lParam;
}

define NMTVGETINFOTIP()  NMTVGETINFOTIPA

struct COMBOBOXEXITEMA
{
    int32    _mask;
    int32    iItem;
    int32    pszText;
    int32    cchTextMax;
    int32    iImage;
    int32    iSelectedImage;
    int32    iOverlay;
    int32    iIndent;
    int32    lParam;
}


define COMBOBOXEXITEM()  COMBOBOXEXITEMA

struct NMCOMBOBOXEXA
{
    NMHDR    hdr;
    COMBOBOXEXITEMA    ceItem;
}

define NMCOMBOBOXEX()  NMCOMBOBOXEXA

struct MCHITTESTINFO
{
    int32    cbSize;
    POINT    pt;
    int32    uHit;
    SYSTEMTIME    _st    ;
}

struct NMSELCHANGE
{
    NMHDR    nmhdr;
    SYSTEMTIME    stSelStart    ;
    SYSTEMTIME    stSelEnd;
}

// NMDAYSTATE STRUCT
//   nmhdr             NMHDR  <>
//   stStart           SYSTEMTIME  <>
//   cDayState         int32  ?
//   prgDayState       LPMONTHDAYSTATE  <>
// NMDAYSTATE ENDS

struct NMDATETIMECHANGE
{
    NMHDR    nmhdr;
    int32    dwFlags;
    SYSTEMTIME    _st    ;
}

struct NMDATETIMESTRINGA
{
    NMHDR    nmhdr;
    int32    pszUserString;
    SYSTEMTIME    _st    ;
    int32    dwFlags;
}

define NMDATETIMESTRING()  NMDATETIMESTRINGA

struct NMDATETIMEWMKEYDOWNA
{
    NMHDR    nmhdr;
    int32    nVirtKey;
    int32    pszFormat;
    SYSTEMTIME    _st    ;
}

define NMDATETIMEWMKEYDOWN()  NMDATETIMEWMKEYDOWNA

struct NMDATETIMEFORMATA
{
    NMHDR    nmhdr;
    int32    pszFormat;
    SYSTEMTIME    _st    ;
    int32    pszDisplay;
    int8[64]  szDisplay;
}

define NMDATETIMEFORMAT()  NMDATETIMEFORMATA

// NMDATETIMEFORMATQUERYA STRUCT
//   nmhdr             NMHDR  <>
//   pszFormat         int32  ?
//   szMax             SIZE  <> // naming conflict
// NMDATETIMEFORMATQUERYA ENDS

struct NMDWORDESS
{
    NMHDR    hdr;
    int32    iField;
    int32    iValue;
}

struct NMPGSCROLL
{
    NMHDR    hdr;
    int16    fwKeys;
    RECT    rcParent;
    int32    iDir;
    int32    iXpos;
    int32    iYpos;
    int32    iScroll;
}

struct NMPGCALCSIZE
{
    NMHDR    hdr;
    int32    dwFlag;
    int32    iWidth;
    int32    iHeight;
}

// -----------------------------------------
// additional structures 24th November 2002
// -----------------------------------------
struct _GUID
{
    int32    Data1;
    int16    Data2;
    int16    Data3;
    int8[8]  Data4;
}

struct QUOTA_LIMITS
{
    int32    PagedPoolLimit;
    int32    NonPagedPoolLimit;
    int32    MinimumWorkingSetSize;
    int32    MaximumWorkingSetSize;
    int32    PagefileLimit;
    LARGE_INTEGER    TimeLimit;
}

struct JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
    LARGE_INTEGER    TotalUserTime;
    LARGE_INTEGER    TotalKernelTime;
    LARGE_INTEGER    ThisPeriodTotalUserTime;
    LARGE_INTEGER    ThisPeriodTotalKernelTime;
    int32    TotalPageFaultCount;
    int32    TotalProcesses;
    int32    ActiveProcesses;
    int32    TotalTerminatedProcesses;
}

struct JOBOBJECT_BASIC_LIMIT_INFORMATION
{
    LARGE_INTEGER    PerProcessUserTimeLimit;
    LARGE_INTEGER    PerJobUserTimeLimit;
    int32    LimitFlags;
    int32    MinimumWorkingSetSize;
    int32    MaximumWorkingSetSize;
    int32    ActiveProcessLimit;
    int32    Affinity;
    int32    PriorityClass;
}

struct JOBOBJECT_BASIC_PROCESS_ID_LIST
{
    int32    NumberOfAssignedProcesses;
    int32    NumberOfProcessIdsInList;
    int32[1]  ProcessIdList;
}

struct JOBOBJECT_BASIC_UI_RESTRICTIONS
{
    int32    UIRestrictionsClass;
}

struct JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
    int32    EndOfJobTimeAction;
}

struct JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
    int32    CompletionKey;
    int32    CompletionPort;
}

struct IMAGE_OS2_HEADER
{
    int16    ne_magic;
    int8    ne_ver;
    int8    ne_rev;
    int16    ne_enttab;
    int16    ne_cbenttab;
    int32    ne_crc;
    int16    ne_flags;
    int16    ne_autodata;
    int16    ne_heap;
    int16    ne_stack;
    int32    ne_csip;
    int32    ne_sssp;
    int16    ne_cseg;
    int16    ne_cmod;
    int16    ne_cbnrestab;
    int16    ne_segtab;
    int16    ne_rsrctab;
    int16    ne_restab;
    int16    ne_modtab;
    int16    ne_imptab;
    int32    ne_nrestab;
    int16    ne_cmovent;
    int16    ne_align;
    int16    ne_cres;
    int8    ne_exetyp;
    int8    ne_flagsothers;
    int16    ne_pretthunks;
    int16    ne_psegrefbytes;
    int16    ne_swaparea;
    int16    ne_expver;
}

struct IMAGE_NT_HEADERS32
{
    int32    Signature;
    IMAGE_FILE_HEADER    FileHeader;
    IMAGE_OPTIONAL_HEADER32    OptionalHeader    ;
}

struct IMAGE_STUB_DIRECTORY
{
    int32    SecondaryImportAddressTable;
    int16[2]  ExpectedISA;
    int32[2]  StubAddressTable;
}

struct RECOVERY_AGENT_INFORMATIONA
{
    int32    NextEntryOffset;
    int32    AgentNameLength;
    int8[1]  AgentInformation;
}

define RECOVERY_AGENT_INFORMATION()  RECOVERY_AGENT_INFORMATIONA

struct WIN32_FILE_ATTRIBUTE_DATA
{
    int32    dwFileAttributes;
    FILETIME    ftCreationTime;
    FILETIME    ftLastAccessTime;
    FILETIME    ftLastWriteTime;
    int32    nFileSizeHigh;
    int32    nFileSizeLow;
}

struct OSVERSIONINFOEXA
{
    int32    dwOSVersionInfoSize;
    int32    dwMajorVersion;
    int32    dwMinorVersion;
    int32    dwBuildNumber;
    int32    dwPlatformId;
    int8[128]  szCSDVersion;
    int16    wServicePackMajor;
    int16    wServicePackMinor;
    int16[2]  wReserved;
}

define OSVERSIONINFOEX()  OSVERSIONINFOEXA

struct WIN_CERTIFICATE
{
    int32    dwLength;
    int16    wRevision;
    int16    wCertificateType;
    int8[1]  bCertificate;
}

struct DRAWPATRECT
{
    POINT    ptPosition;
    POINT    ptSize;
    int16    wStyle;
    int16    wPattern;
}

struct PSINJECTDATA
{
    int32    DataBytes;
    int32    InjectionPoint;
    int32    Flags;
    int32    Reserved;
}

struct DISPLAY_DEVICEA
{
    int32    cb;
    int8[32]  DeviceName;
    int8[128]  DeviceString;
    int32    StateFlags;
}

define DISPLAY_DEVICE()  DISPLAY_DEVICEA

struct TRIVERTEX
{
    int32    x;
    int32    y;
    int16    zRed;
    int16    zGreen;
    int16    zBlue;
    int16    zAlpha;
}

struct GRADIENT_TRIANGLE
{
    int32    Vertex1;
    int32    Vertex2;
    int32    Vertex3;
}

struct GRADIENT_RECT
{
    int32    UpperLeft;
    int32    LowerRight;
}

struct BLENDFUNCTION
{
    int8    BlendOp;
    int8    BlendFlags;
    int8    SourceConstantAlpha;
    int8    AlphaFormat;
}

struct DIBSECTION
{
    BITMAP    dsBm;
    BITMAPINFOHEADER    dsBmih;
    int32[3]  dsBitfields;
    int32    dshSection;
    int32    dsOffset;
}

struct EMRFORMAT
{
    int32    dSignature;
    int32    nVersion;
    int32    cbData;
    int32    offData;
}

struct EMRGLSRECORD
{
    EMR    emr;
    int32    cbData;
    int8[1]  Data;
}

struct EMRGLSBOUNDEDRECORD
{
    EMR    emr;
    RECTL    rclBounds;
    int32    cbData;
    int8[1]  Data;
}

struct EMRPIXELFORMAT
{
    EMR    emr;
    PIXELFORMATDESCRIPTOR    pfd;
}

struct EMRSETICMPROFILE
{
    EMR    emr;
    int32    dwFlags;
    int32    cbName;
    int32    cbData;
    int8[1]  Data;
}

struct POINTFLOAT
{
    FLOAT    x;
    FLOAT    y;
}

struct GLYPHMETRICSFLOAT
{
    FLOAT    gmfBlackBoxX;
    FLOAT    gmfBlackBoxY;
    POINTFLOAT    gmfptGlyphOrigin;
    FLOAT    gmfCellIncX;
    FLOAT    gmfCellIncY;
}

struct LAYERPLANEDESCRIPTOR
{
    int16    nSize;
    int16    nVersion;
    int32    dwFlags;
    int8    iPixelType;
    int8    cColorBits;
    int8    cRedBits;
    int8    cRedShift;
    int8    cGreenBits;
    int8    cGreenShift;
    int8    cBlueBits;
    int8    cBlueShift;
    int8    cAlphaBits;
    int8    cAlphaShift;
    int8    cAccumBits;
    int8    cAccumRedBits;
    int8    cAccumGreenBits;
    int8    cAccumBlueBits;
    int8    cAccumAlphaBits;
    int8    cDepthBits;
    int8    cStencilBits;
    int8    cAuxBuffers;
    int8    iLayerPlane;
    int8    bReserved;
    int32    crTransparent;
}

struct CPINFOEXA
{
    int32    MaxCharSize;
    int8[2]  DefaultChar;
    int8[12]  LeadByte;
    int16    UnicodeDefaultChar;
    int32    CodePage;
    int8[260]  CodePageName;
}

define CPINFOEX()  CPINFOEXA

struct PVALUEA
{
    int32    pv_valuename;
    int32    pv_valuelen;
    int32    pv_value_context;
    int32    pv_type;
}

define PVALUE()  PVALUEA

struct VALENTA
{
    int32    ve_valuename;
    int32    ve_valuelen;
    int32    ve_valueptr;
    int32    ve_type;
}

define VALENT()  VALENTA

struct DISCDLGSTRUCTA
{
    int32    cbStructure;
    int32    hwndOwner;
    int32    lpLocalName;
    int32    lpRemoteName;
    int32    dwFlags;
}

define DISCDLGSTRUCT()  DISCDLGSTRUCTA

struct UNIVERSAL_NAME_INFOA
{
    int32    lpUniversalName;
}

define UNIVERSAL_NAME_INFO()  UNIVERSAL_NAME_INFOA

struct REMOTE_NAME_INFOA
{
    int32    lpUniversalName;
    int32    lpConnectionName;
    int32    lpRemainingPath;
}

define REMOTE_NAME_INFO()  REMOTE_NAME_INFOA

struct NETINFOSTRUCT
{
    int32    cbStructure;
    int32    dwProviderVersion;
    int32    dwStatus;
    int32    dwCharacteristics;
    int32    dwHandle;
    int16    wNetType;
    int32    dwPrinters;
    int32    dwDrives;
}

struct NETCONNECTINFOSTRUCT
{
    int32    cbStructure;
    int32    dwFlags;
    int32    dwSpeed;
    int32    dwDelay;
    int32    dwOptDataSize;
}

// --------------------------------------------------
// Additional Common Control Equates 28 January 2003
// --------------------------------------------------

define CCM_SETVERSION()  CCM_FIRST + 7
define CCM_GETVERSION()  CCM_FIRST + 8
define CCM_SETNOTIFYWINDOW()  CCM_FIRST + 9
define INFOTIPSIZE()  1024
define NM_CUSTOMDRAW()  NM_FIRST - 12
define NM_HOVER()  NM_FIRST - 13
define NM_NCHITTEST()  NM_FIRST - 14 // uses NMMOUSE type
define NM_KEYDOWN()  NM_FIRST - 15 // uses NMKEY type
define NM_RELEASEDCAPTURE()  NM_FIRST - 16
define NM_SETCURSOR()  NM_FIRST - 17 // uses NMMOUSE type
define NM_CHAR()  NM_FIRST - 18 // uses NMCHAR type
define NM_TOOLTIPSCREATED()  NM_FIRST - 19 // notify of when the tooltips window is create
define NM_LDOWN()  NM_FIRST - 20
define NM_RDOWN()  NM_FIRST - 21
define WMN_FIRST()  0-1000
define WMN_LAST()  0-1200
define CDRF_DODEFAULT()  0x00000000
define CDRF_NEWFONT()  0x00000002
define CDRF_SKIPDEFAULT()  0x00000004
define CDRF_NOTIFYPOSTPAINT()  0x00000010
define CDRF_NOTIFYITEMDRAW()  0x00000020
define CDRF_NOTIFYSUBITEMDRAW()  0x00000020
define CDRF_NOTIFYPOSTERASE()  0x00000040
define CDDS_PREPAINT()  0x00000001
define CDDS_POSTPAINT()  0x00000002
define CDDS_PREERASE()  0x00000003
define CDDS_POSTERASE()  0x00000004
define CDDS_ITEM()  0x00010000
define CDDS_ITEMPREPAINT()  (CDDS_ITEM | CDDS_PREPAINT)
define CDDS_ITEMPOSTPAINT()  (CDDS_ITEM | CDDS_POSTPAINT)
define CDDS_ITEMPREERASE()  (CDDS_ITEM | CDDS_PREERASE)
define CDDS_ITEMPOSTERASE()  (CDDS_ITEM | CDDS_POSTERASE)
define CDDS_SUBITEM()  0x00020000
define CDIS_SELECTED()  0x0001
define CDIS_GRAYED()  0x0002
define CDIS_DISABLED()  0x0004
define CDIS_CHECKED()  0x0008
define CDIS_FOCUS()  0x0010
define CDIS_DEFAULT()  0x0020
define CDIS_HOT()  0x0040
define CDIS_MARKED()  0x0080
define CDIS_INDETERMINATE()  0x0100
define ILD_ROP()  0x0040
define ILCF_MOVE()  0x00000000
define ILCF_SWAP()  0x00000001
define HDS_HOTTRACK()  0x0004
define HDS_DRAGDROP()  0x0040
define HDS_FULLDRAG()  0x0080
define HDS_FILTERBAR()  0x0100
define HDFT_ISSTRING()  0x00000000
define HDFT_ISNUMBER()  0x00000001
define HDFT_HASNOVALUE()  0x00008000
define HDI_FILTER()  0x0100
define HDM_GETITEMRECT()  (HDM_FIRST + 7)
define HDM_ORDERTOINDEX()  (HDM_FIRST + 15)
define HDM_CREATEDRAGIMAGE()  (HDM_FIRST + 16)
define HDM_GETORDERARRAY()  (HDM_FIRST + 17)
define HDM_SETORDERARRAY()  (HDM_FIRST + 18)
define HDM_SETHOTDIVIDER()  (HDM_FIRST + 19)
define HDM_SETBITMAPMARGIN()  (HDM_FIRST + 20)
define HDM_GETBITMAPMARGIN()  (HDM_FIRST + 21)
define HDM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define HDM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define HDM_SETFILTERCHANGETIMEOUT()  (HDM_FIRST + 22)
define HDM_EDITFILTER()  (HDM_FIRST + 23)
define HDM_CLEARFILTER()  (HDM_FIRST + 24)
define HDN_GETDISPINFO()  (HDN_FIRST - 9)
define HDN_GETDISPINFOW()  (HDN_FIRST - 29)
define HDN_BEGINDRAG()  (HDN_FIRST - 10)
define HDN_ENDDRAG()  (HDN_FIRST - 11)
define HDN_FILTERCHANGE()  (HDN_FIRST - 12)
define HDN_FILTERBTNCLICK()  (HDN_FIRST - 13)
define TBSTATE_ELLIPSES()  0x0040
define TBSTATE_MARKED()  0x0080
define TBSTYLE_DROPDOWN()  0x0008
define TBSTYLE_NOPREFIX()  0x0020
define TBSTYLE_EX_DRAWDDARROWS()  0x00000001
define BTNS_BUTTON()  TBSTYLE_BUTTON
define BTNS_SEP()  TBSTYLE_SEP
define BTNS_CHECK()  TBSTYLE_CHECK
define BTNS_GROUP()  TBSTYLE_GROUP
define BTNS_CHECKGROUP()  TBSTYLE_CHECKGROUP
define BTNS_DROPDOWN()  TBSTYLE_DROPDOWN
define BTNS_AUTOSIZE()  TBSTYLE_AUTOSIZE
define BTNS_NOPREFIX()  TBSTYLE_NOPREFIX
define BTNS_WHOLEDROPDOWN()  0x0080           // draw drop-down arrow, but without split arrow section
define TBSTYLE_EX_MIXEDBUTTONS()  0x00000008
define TBSTYLE_EX_HIDECLIPPEDBUTTONS()  0x00000010
define TBCDRF_NOEDGES()  0x00010000
define TBCDRF_HILITEHOTTRACK()  0x00020000
define TBCDRF_NOOFFSET()  0x00040000
define TBCDRF_NOMARK()  0x00080000
define TBCDRF_NOETCHEDEFFECT()  0x00100000
define TBCDRF_BLENDICON()  0x00200000
define TB_MARKBUTTON()  WM_USER + 6
define TB_ISBUTTONHIGHLIGHTED()  WM_USER + 14
define IDB_HIST_SMALL_COLOR()  8
define IDB_HIST_LARGE_COLOR()  9
define VIEW_VIEWMENU()  12
define HIST_BACK()  0
define HIST_FORWARD()  1
define HIST_FAVORITES()  2
define HIST_ADDTOFAVORITES()  3
define HIST_VIEWTREE()  4
define TB_SAVERESTOREW()  WM_USER + 76
define TB_ADDSTRINGW()  WM_USER + 77
define TB_GETBUTTONTEXTW()  WM_USER + 75
define TBIMHT_AFTER()  0x00000001
define TBIMHT_BACKGROUND()  0x00000002
define TB_GETINSERTMARK()  WM_USER + 79
define TB_SETINSERTMARK()  WM_USER + 80
define TB_INSERTMARKHITTEST()  WM_USER + 81
define TB_MOVEBUTTON()  WM_USER + 82
define TB_GETMAXSIZE()  WM_USER + 83
define TB_SETEXTENDEDSTYLE()  WM_USER + 84  // For TBSTYLE_EX_*
define TB_GETEXTENDEDSTYLE()  WM_USER + 85  // For TBSTYLE_EX_*
define TB_GETPADDING()  WM_USER + 86
define TB_SETPADDING()  WM_USER + 87
define TB_SETINSERTMARKCOLOR()  WM_USER + 88
define TB_GETINSERTMARKCOLOR()  WM_USER + 89
define TB_GETCOLORSCHEME()  CCM_GETCOLORSCHEME  // fills in COLORSCHEME pointed to by lParam
define TB_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define TB_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define TB_MAPACCELERATORW()  WM_USER + 90
define TBIF_IMAGE()  0x00000001
define TBIF_TEXT()  0x00000002
define TBIF_STATE()  0x00000004
define TBIF_STYLE()  0x00000008
define TBIF_LPARAM()  0x00000010
define TBIF_COMMAND()  0x00000020
define TBIF_SIZE()  0x00000040
define TBIF_BYINDEX()  0x80000000
define TB_GETBUTTONINFOW()  WM_USER + 63
define TB_SETBUTTONINFOW()  WM_USER + 64
define TB_GETBUTTONINFO()  WM_USER + 65
define TB_SETBUTTONINFO()  WM_USER + 66
define TB_INSERTBUTTONW()  WM_USER + 67
define TB_ADDBUTTONSW()  WM_USER + 68
define TB_HITTEST()  WM_USER + 69
define TB_SETDRAWTEXTFLAGS()  WM_USER + 70
define TB_GETSTRINGW()  WM_USER + 91
define TB_GETSTRING()  WM_USER + 92
define TBN_GETBUTTONINFOW()  TBN_FIRST - 20
define TBN_DROPDOWN()  TBN_FIRST - 10
define TBN_GETOBJECT()  TBN_FIRST - 12
define HICF_OTHER()  0x00000000
define HICF_MOUSE()  0x00000001
define HICF_ARROWKEYS()  0x00000002
define HICF_ACCELERATOR()  0x00000004
define HICF_DUPACCEL()  0x00000008
define HICF_ENTERING()  0x00000010
define HICF_LEAVING()  0x00000020
define HICF_RESELECT()  0x00000040
define TBN_HOTITEMCHANGE()  TBN_FIRST - 13
define TBN_DRAGOUT()  TBN_FIRST - 14 // this is sent when the user clicks down on a button then drags off the button
define TBN_DELETINGBUTTON()  TBN_FIRST - 15 // uses TBNOTIFY
define TBN_GETDISPINFO()  TBN_FIRST - 16 // This is sent when the toolbar needs some display information
define TBN_GETDISPINFOW()  TBN_FIRST - 17 // This is sent when the toolbar needs some display information
define TBN_GETINFOTIP()  TBN_FIRST - 18
define TBN_GETINFOTIPW()  TBN_FIRST - 19
define TBN_RESTORE()  TBN_FIRST - 21
define TBN_SAVE()  TBN_FIRST - 22
define TBN_INITCUSTOMIZE()  TBN_FIRST - 23
define TBNRF_HIDEHELP()  0x00000001
define TBNRF_ENDCUSTOMIZE()  0x00000002
define TBNF_IMAGE()  0x00000001
define TBNF_TEXT()  0x00000002
define TBNF_DI_SETITEM()  0x10000000
define TBDDRET_DEFAULT()  0
define TBDDRET_NODEFAULT()  1
define TBDDRET_TREATPRESSED()  2       // Treat as a standard press button
define RBBS_HIDETITLE()  0x00000400
define RB_INSERTBANDW()  (WM_USER + 10)
define RB_SETBANDINFOW()  (WM_USER + 11)
define RB_GETBANDINFOW()  (WM_USER + 28)
define RB_PUSHCHEVRON()  (WM_USER + 43)
define RBN_CHEVRONPUSHED()  (RBN_FIRST - 10)
define RBN_MINMAX()  (RBN_FIRST - 21)
define RBHT_CHEVRON()  0x0008
define TTS_NOANIMATE()  0x10
define TTS_NOFADE()  0x20
define TTS_BALLOON()  0x40
define TTF_TRACK()  0x00000020
define TTF_ABSOLUTE()  0x00000080
define TTF_TRANSPARENT()  0x00000100
define TTI_NONE()  0
define TTI_INFO()  1
define TTI_WARNING()  2
define TTI_ERROR()  3
define TTM_TRACKACTIVATE()  WM_USER + 17
define TTM_TRACKPOSITION()  WM_USER + 18
define TTM_SETTIPBKCOLOR()  WM_USER + 19
define TTM_SETTIPTEXTCOLOR()  WM_USER + 20
define TTM_GETDELAYTIME()  WM_USER + 21
define TTM_GETTIPBKCOLOR()  WM_USER + 22
define TTM_GETTIPTEXTCOLOR()  WM_USER + 23
define TTM_SETMAXTIPWIDTH()  WM_USER + 24
define TTM_GETMAXTIPWIDTH()  WM_USER + 25
define TTM_SETMARGIN()  WM_USER + 26
define TTM_GETMARGIN()  WM_USER + 27
define TTM_POP()  WM_USER + 28
define TTM_GETBUBBLESIZE()  WM_USER + 30
define TTM_ADJUSTRECT()  WM_USER + 31
define TTM_SETTITLE()  WM_USER + 32
define TTM_SETTITLEW()  WM_USER + 33
define TTN_GETDISPINFOW()  (TTN_FIRST - 10)
define SBARS_TOOLTIPS()  0x0800
define SB_ISSIMPLE()  WM_USER + 14
define SB_SETICON()  WM_USER + 15
define SB_SETTIPTEXT()  WM_USER + 16
define SB_SETTIPTEXTW()  WM_USER + 17
define SB_GETTIPTEXT()  WM_USER + 18
define SB_GETTIPTEXTW()  WM_USER + 19
define SB_GETICON()  WM_USER + 20
define SB_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define SB_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define SBT_TOOLTIPS()  0x0800
define SBT_NOTABPARSING()  0x0800
define SB_SETBKCOLOR()  CCM_SETBKCOLOR
define SBN_SIMPLEMODECHANGE()  SBN_FIRST
define SB_SIMPLEID()  0x00FF
define TBS_TOOLTIPS()  0x0100
define TBS_REVERSED()  0x0200
define TBM_SETTOOLTIPS()  WM_USER + 29
define TBM_GETTOOLTIPS()  WM_USER + 30
define TBM_SETTIPSIDE()  WM_USER + 31
define TBTS_TOP()  0
define TBTS_LEFT()  1
define TBTS_BOTTOM()  2
define TBTS_RIGHT()  3
define TBM_SETBUDDY()  WM_USER + 32
define TBM_GETBUDDY()  WM_USER + 33
define TBM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define TBM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define TBCD_TICS()  0x0001
define TBCD_THUMB()  0x0002
define TBCD_CHANNEL()  0x0003
define UDS_HOTTRACK()  0x0100
define UDM_SETRANGE32()  WM_USER + 111
define UDM_GETRANGE32()  WM_USER + 112
define UDM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define UDM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define UDM_SETPOS32()  WM_USER + 113
define UDM_GETPOS32()  WM_USER + 114
define PBS_SMOOTH()  0x01
define PBS_VERTICAL()  0x04
define PBM_SETRANGE32()  WM_USER + 6
define PBM_GETRANGE()  WM_USER + 7
define PBM_GETPOS()  WM_USER + 8
define PBM_SETBKCOLOR()  CCM_SETBKCOLOR
define PBM_SETBARCOLOR()  WM_USER + 9
define CCS_VERT()  0x00000080
define CCS_LEFT()  CCS_VERT | CCS_TOP
define CCS_RIGHT()  CCS_VERT | CCS_BOTTOM
define CCS_NOMOVEX()  CCS_VERT | CCS_NOMOVEY
define LVS_OWNERDATA()  0x00001000
define LVM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define LVM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define LVIF_INDENT()  0x0010
define LVIF_NORECOMPUTE()  0x0800
define LVIS_ACTIVATING()  0x0020
define LVSICF_NOINVALIDATEALL()  0x00000001
define LVSICF_NOSCROLL()  0x00000002
define LVM_SETICONSPACING()  LVM_FIRST + 53
define LVM_GETSUBITEMRECT()  LVM_FIRST + 56
define LVM_SETCOLUMNORDERARRAY()  LVM_FIRST + 58
define LVM_GETCOLUMNORDERARRAY()  LVM_FIRST + 59
define LVM_SETHOTITEM()  LVM_FIRST + 60
define LVM_GETHOTITEM()  LVM_FIRST + 61
define LVM_SETHOTCURSOR()  LVM_FIRST + 62
define LVM_GETHOTCURSOR()  LVM_FIRST + 63
define LVM_APPROXIMATEVIEWRECT()  LVM_FIRST + 64
define LV_MAX_WORKARE()  16
define LVM_SETWORKARE()  LVM_FIRST + 65
define LVM_GETWORKARE()  LVM_FIRST + 70
define LVM_GETNUMBEROFWORKARE()  LVM_FIRST + 73
define LVM_GETSELECTIONMARK()  LVM_FIRST + 66
define LVM_SETSELECTIONMARK()  LVM_FIRST + 67
define LVM_SETHOVERTIME()  LVM_FIRST + 71
define LVM_GETHOVERTIME()  LVM_FIRST + 72
define LVM_SETTOOLTIPS()  LVM_FIRST + 74
define LVM_GETTOOLTIPS()  LVM_FIRST + 78
define LVBKIF_SOURCE_NONE()  0x00000000
define LVBKIF_SOURCE_HBITMAP()  0x00000001
define LVBKIF_SOURCE_URL()  0x00000002
define LVBKIF_SOURCE_MASK()  0x00000003
define LVBKIF_STYLE_NORMAL()  0x00000000
define LVBKIF_STYLE_TILE()  0x00000010
define LVBKIF_STYLE_MASK()  0x00000010
define LVM_SETBKIMAGE()  LVM_FIRST + 68
define LVM_SETBKIMAGEW()  LVM_FIRST + 138
define LVM_GETBKIMAGE()  LVM_FIRST + 69
define LVM_GETBKIMAGEW()  LVM_FIRST + 139
define LVKF_ALT()  0x0001
define LVKF_CONTROL()  0x0002
define LVKF_SHIFT()  0x0004
define LVN_ODCACHEHINT()  LVN_FIRST - 13
define LVN_ODFINDITEM()  LVN_FIRST - 52
define LVN_ODFINDITEMW()  LVN_FIRST - 79
define LVN_ITEMACTIVATE()  LVN_FIRST - 14
define LVN_ODSTATECHANGED()  LVN_FIRST - 15
define LVN_HOTTRACK()  LVN_FIRST - 21
define LVN_MARQUEEBEGIN()  LVN_FIRST - 56
define LVGIT_UNFOLDED()  0x0001
define LVN_GETINFOTIP()  LVN_FIRST - 57
define LVN_GETINFOTIPW()  LVN_FIRST - 58
define TVS_RTLREADING()  0x00000040
define TVS_NOTOOLTIPS()  0x00000080
define TVS_CHECKBOXES()  0x00000100
define TVS_TRACKSELECT()  0x00000200
define TVS_SINGLEEXPAND()  0x00000400
define TVS_INFOTIP()  0x00000800
define TVS_FULLROWSELECT()  0x00001000
define TVS_NOSCROLL()  0x00002000
define TVS_NONEVENHEIGHT()  0x00004000
define TVS_NOHSCROLL()  0x00008000
define TVIF_INTEGRAL()  0x0080
define TVIS_EXPANDPARTIAL()  0x0080
define TVE_EXPANDPARTIAL()  0x00004000
define TVGN_LASTVISIBLE()  0x000A
define TVM_ENDEDITLABELNOW()  TV_FIRST + 22
define TVM_SETTOOLTIPS()  TV_FIRST + 24
define TVM_GETTOOLTIPS()  TV_FIRST + 25
define TVM_SETINSERTMARK()  TV_FIRST + 26
define TVM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define TVM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define TVM_SETITEMHEIGHT()  TV_FIRST + 27
define TVM_GETITEMHEIGHT()  TV_FIRST + 28
define TVM_SETBKCOLOR()  TV_FIRST + 29
define TVM_SETTEXTCOLOR()  TV_FIRST + 30
define TVM_GETBKCOLOR()  TV_FIRST + 31
define TVM_GETTEXTCOLOR()  TV_FIRST + 32
define TVM_SETSCROLLTIME()  TV_FIRST + 33
define TVM_GETSCROLLTIME()  TV_FIRST + 34
define TVM_SETINSERTMARKCOLOR()  TV_FIRST + 37
define TVM_GETINSERTMARKCOLOR()  TV_FIRST + 38
define TVM_GETITEMSTATE()  TV_FIRST + 39
define TVM_SETLINECOLOR()  TV_FIRST + 40
define TVM_GETLINECOLOR()  TV_FIRST + 41
define TVN_SELCHANGINGW()  TVN_FIRST - 50
define TVN_SELCHANGEDW()  TVN_FIRST - 51
define TVN_GETDISPINFOW()  TVN_FIRST - 52
define TVN_SETDISPINFOW()  TVN_FIRST - 53
define TVN_ITEMEXPANDINGW()  TVN_FIRST - 54
define TVN_ITEMEXPANDEDW()  TVN_FIRST - 55
define TVN_BEGINDRAGW()  TVN_FIRST - 56
define TVN_BEGINRDRAGW()  TVN_FIRST - 57
define TVN_DELETEITEMW()  TVN_FIRST - 58
define TVN_BEGINLABELEDITW()  TVN_FIRST - 59
define TVN_ENDLABELEDITW()  TVN_FIRST - 60
define TVN_GETINFOTIP()  TVN_FIRST - 13
define TVN_GETINFOTIPW()  TVN_FIRST - 14
define TVN_SINGLEEXPAND()  TVN_FIRST - 15
define TVNRET_DEFAULT()  0
define TVNRET_SKIPOLD()  1
define TVNRET_SKIPNEW()  2
define TVCDRF_NOIMAGES()  0x00010000
define CBEIF_TEXT()  0x00000001
define CBEIF_IMAGE()  0x00000002
define CBEIF_SELECTEDIMAGE()  0x00000004
define CBEIF_OVERLAY()  0x00000008
define CBEIF_INDENT()  0x00000010
define CBEIF_LPARAM()  0x00000020
define CBEIF_DI_SETITEM()  0x10000000
define CBEM_INSERTITEM()  WM_USER + 1
define CBEM_SETIMAGELIST()  WM_USER + 2
define CBEM_GETIMAGELIST()  WM_USER + 3
define CBEM_GETITEM()  WM_USER + 4
define CBEM_SETITEM()  WM_USER + 5
define CBEM_DELETEITEM()  CB_DELETESTRING
define CBEM_GETCOMBOCONTROL()  WM_USER + 6
define CBEM_GETEDITCONTROL()  WM_USER + 7
define CBEM_SETEXSTYLE()  WM_USER + 8
define CBEM_SETEXTENDEDSTYLE()  WM_USER + 14
define CBEM_GETEXSTYLE()  WM_USER + 9
define CBEM_GETEXTENDEDSTYLE()  WM_USER + 9
define CBEM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define CBEM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define CBEM_HASEDITCHANGED()  WM_USER + 10
define CBEM_INSERTITEMW()  WM_USER + 11
define CBEM_SETITEMW()  WM_USER + 12
define CBEM_GETITEMW()  WM_USER + 13
define CBES_EX_NOEDITIMAGE()  0x00000001
define CBES_EX_NOEDITIMAGEINDENT()  0x00000002
define CBES_EX_PATHWORDBREAKPROC()  0x00000004
define CBES_EX_NOSIZELIMIT()  0x00000008
define CBES_EX_CASESENSITIVE()  0x00000010
define CBEN_GETDISPINFO()  CBEN_FIRST - 0
define CBEN_INSERTITEM()  CBEN_FIRST - 1
define CBEN_DELETEITEM()  CBEN_FIRST - 2
define CBEN_BEGINEDIT()  CBEN_FIRST - 4
define CBEN_ENDEDIT()  CBEN_FIRST - 5
define CBEN_ENDEDITW()  CBEN_FIRST - 6
define CBEN_GETDISPINFOW()  CBEN_FIRST - 7
define CBEN_DRAGBEGIN()  CBEN_FIRST - 8
define CBEN_DRAGBEGINW()  CBEN_FIRST - 9
define CBENF_KILLFOCUS()  1
define CBENF_RETURN()  2
define CBENF_ESCAPE()  3
define CBENF_DROPDOWN()  4
define CBEMAXSTRLEN()  260
define TCS_SCROLLOPPOSITE()  0x00000001
define TCS_BOTTOM()  0x00000002
define TCS_MULTISELECT()  0x00000004
define TCS_HOTTRACK()  0x00000040
define TCS_VERTICAL()  0x00000080
define TCS_EX_FLATSEPARATORS()  0x00000001
define TCS_EX_REGISTERDROP()  0x00000002
define TCIF_STATE()  0x0010
define TCIS_BUTTONPRESSED()  0x0001
define TCIS_HIGHLIGHTED()  0x0002
define TCM_GETITEMW()  TCM_FIRST + 60
define TCM_SETMINTABWIDTH()  TCM_FIRST + 49
define TCM_DESELECTALL()  TCM_FIRST + 50
define TCM_HIGHLIGHTITEM()  TCM_FIRST + 51
define TCM_SETEXTENDEDSTYLE()  TCM_FIRST + 52
define TCM_GETEXTENDEDSTYLE()  TCM_FIRST + 53
define TCM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define TCM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define TCN_GETOBJECT()  TCN_FIRST - 3
define ACS_TIMER()  0x0008
define MCSC_BACKGROUND()  0   // the background color (between months)
define MCSC_TEXT()  1   // the dates
define MCSC_TITLEBK()  2   // background of the title
define MCSC_TITLETEXT()  3
define MCSC_MONTHBK()  4   // background within the month cal
define MCSC_TRAILINGTEXT()  5   // the text color of header & trailing days
define MCHT_TITLE()  0x00010000
define MCHT_CALENDAR()  0x00020000
define MCHT_TODAYLINK()  0x00030000
define MCHT_NEXT()  0x01000000
define MCHT_PREV()  0x02000000
define MCHT_NOWHERE()  0x00000000
define MCHT_TITLEBK()  MCHT_TITLE
define MCHT_TITLEMONTH()  MCHT_TITLE | 0x0001
define MCHT_TITLEYEAR()  MCHT_TITLE | 0x0002
define MCHT_TITLEBTNNEXT()  MCHT_TITLE | MCHT_NEXT | 0x0003
define MCHT_TITLEBTNPREV()  MCHT_TITLE | MCHT_PREV | 0x0003
define MCHT_CALENDARBK()  MCHT_CALENDAR
define MCHT_CALENDARDATE()  MCHT_CALENDAR | 1
define MCHT_CALENDARDATENEXT()  MCHT_CALENDARDATE | MCHT_NEXT
define MCHT_CALENDARDATEPREV()  MCHT_CALENDARDATE | MCHT_PREV
define MCHT_CALENDARDAY()  MCHT_CALENDAR | 2
define MCHT_CALENDARWEEKNUM()  MCHT_CALENDAR | 3
define MCM_SETUNICODEFORMAT()  CCM_SETUNICODEFORMAT
define MCM_GETUNICODEFORMAT()  CCM_GETUNICODEFORMAT
define MCN_SELCHANGE()  MCN_FIRST + 1
define MCN_GETDAYSTATE()  MCN_FIRST + 3
define MCN_SELECT()  MCN_FIRST + 4
define GMR_VISIBLE()  0
define GMR_DAYSTATE()  1
define DTS_DWORDDATEFORMAT()  0x0004
define DTS_SHORTDATECENTURYFORMAT()  0x000C
define DTN_DATETIMECHANGE()  DTN_FIRST + 1 // the systemtime has changed
define DTN_USERSTRING()  DTN_FIRST + 2  // the user has entered a string
define DTN_USERSTRINGW()  DTN_FIRST + 15
define DTN_WMKEYDOWN()  DTN_FIRST + 3  // modify keydown on app format field (X)
define DTN_WMKEYDOWNW()  DTN_FIRST + 16
define DTN_FORMAT()  DTN_FIRST + 4  // query display for app format field (X)
define DTN_FORMATW()  DTN_FIRST + 17
define DTN_FORMATQUERY()  DTN_FIRST + 5  // query formatting info for app format field (X)
define DTN_FORMATQUERYW()  DTN_FIRST + 18
define DTN_DROPDOWN()  DTN_FIRST + 6  // MonthCal has dropped down
define DTN_CLOSEUP()  DTN_FIRST + 7  // MonthCal is popping up
define GDTR_MIN()  0x0001
define GDTR_MAX()  0x0002
define GDT_ERROR()  -1
define GDT_VALID()  0
define GDT_NONE()  1
define IPM_CLEARADDRESS()  WM_USER + 100 // no parameters
define IPM_SETADDRESS()  WM_USER + 101 // lparam equ TCP/IP address
define IPM_GETADDRESS()  WM_USER + 102 // lresult equ # of non black fields. lparam equ LPDWORD for TCP/IP address
define IPM_SETRANGE()  WM_USER + 103 // wparam equ field, lparam equ range
define IPM_SETFOCUS()  WM_USER + 104 // wparam equ field
define IPM_ISBLANK()  WM_USER + 105 // no parameters
define IPN_FIELDCHANGED()  IPN_FIRST
define PGS_VERT()  0x00000000
define PGS_HORZ()  0x00000001
define PGS_AUTOSCROLL()  0x00000002
define PGS_DRAGNDROP()  0x00000004
define PGF_INVISIBLE()  0      // Scroll button is not visible
define PGF_NORMAL()  1      // Scroll button is in normal state
define PGF_GRAYED()  2      // Scroll button is in grayed state
define PGF_DEPRESSED()  4      // Scroll button is in depressed state
define PGF_HOT()  8      // Scroll button is in hot state
define PGB_TOPORLEFT()  0
define PGB_BOTTOMORRIGHT()  1
define PGN_SCROLL()  PGN_FIRST - 1
define PGF_SCROLLUP()  1
define PGF_SCROLLDOWN()  2
define PGF_SCROLLLEFT()  4
define PGF_SCROLLRIGHT()  8
define PGK_SHIFT()  1
define PGK_CONTROL()  2
define PGK_MENU()  4
define PGN_CALCSIZE()  PGN_FIRST - 2
define PGF_CALCWIDTH()  1
define PGF_CALCHEIGHT()  2
define NFS_EDIT()  0x0001
define NFS_STATIC()  0x0002
define NFS_LISTCOMBO()  0x0004
define NFS_BUTTON()  0x0008
define NFS_ALL()  0x0010
define NFS_USEFONTASSOC()  0x0020
define TME_NONCLIENT()  0x00000010
define WSB_PROP_CYVSCROLL()  0x00000001
define WSB_PROP_CXHSCROLL()  0x00000002
define WSB_PROP_CYHSCROLL()  0x00000004
define WSB_PROP_CXVSCROLL()  0x00000008
define WSB_PROP_CXHTHUMB()  0x00000010
define WSB_PROP_CYVTHUMB()  0x00000020
define WSB_PROP_VBKGCOLOR()  0x00000040
define WSB_PROP_HBKGCOLOR()  0x00000080
define WSB_PROP_VSTYLE()  0x00000100
define WSB_PROP_HSTYLE()  0x00000200
define WSB_PROP_WINSTYLE()  0x00000400
define WSB_PROP_PALETTE()  0x00000800
define WSB_PROP_MASK()  0x00000FFF
define FSB_FLAT_MODE()  2
define FSB_ENCARTA_MODE()  1
define FSB_REGULAR_MODE()  0

// -----------------------------------------

// Additional equates for win2k XP from "gunner" (Rob)

// -----------------------------------------

define COINIT_APARTMENTTHREADED()  2
define COINIT_MULTITHREADED()  0
define COINIT_DISABLE_OLE1DDE()  4
define COINIT_SPEED_OVER_MEMORY()  8

define REST_NONE()  0x00000000
define REST_NORUN()  0x00000001
define REST_NOCLOSE()  0x00000002
define REST_NOSAVESET()  0x00000004
define REST_NOFILEMENU()  0x00000008
define REST_NOSETFOLDERS()  0x00000010
define REST_NOSETTASKBAR()  0x00000020
define REST_NODESKTOP()  0x00000040
define REST_NOFIND()  0x00000080
define REST_NODRIVES()  0x00000100
define REST_NODRIVEAUTORUN()  0x00000200
define REST_NODRIVETYPEAUTORUN()  0x00000400
define REST_NONETHOOD()  0x00000800
define REST_STARTBANNER()  0x00001000
define REST_RESTRICTRUN()  0x00002000
define REST_NOPRINTERTABS()  0x00004000
define REST_NOPRINTERDELETE()  0x00008000
define REST_NOPRINTERADD()  0x00010000
define REST_NOSTARTMENUSUBFOLDERS()  0x00020000
define REST_MYDOCSONNET()  0x00040000
define REST_NOEXITTODOS()  0x00080000
define REST_ENFORCESHELLEXTSECURITY()  0x00100000
define REST_LINKRESOLVEIGNORELINKINFO()  0x00200000
define REST_NOCOMMONGROUPS()  0x00400000
define REST_SEPARATEDESKTOPPROCESS()  0x00800000
define REST_NOWEB()  0x01000000
define REST_NOTRAYCONTEXTMENU()  0x02000000
define REST_NOVIEWCONTEXTMENU()  0x04000000
define REST_NONETCONNECTDISCONNECT()  0x08000000
define REST_STARTMENULOGOFF()  0x10000000
define REST_NOSETTINGSASSIST()  0x20000000
define REST_NOINTERNETICON()  0x40000001
define REST_NORECENTDOCSHISTORY()  0x40000002
define REST_NORECENTDOCSMENU()  0x40000003
define REST_NOACTIVEDESKTOP()  0x40000004
define REST_NOACTIVEDESKTOPCHANGES()  0x40000005
define REST_NOFAVORITESMENU()  0x40000006
define REST_CLEARRECENTDOCSONEXIT()  0x40000007
define REST_CLASSICSHELL()  0x40000008
define REST_NOCUSTOMIZEWEBVIEW()  0x40000009
define REST_NOHTMLWALLPAPER()  0x40000010
define REST_NOCHANGINGWALLPAPER()  0x40000011
define REST_NODESKCOMP()  0x40000012
define REST_NOADDDESKCOMP()  0x40000013
define REST_NODELDESKCOMP()  0x40000014
define REST_NOCLOSEDESKCOMP()  0x40000015
define REST_NOCLOSE_DRAGDROPBAND()  0x40000016
define REST_NOMOVINGBAND()  0x40000017
define REST_NOEDITDESKCOMP()  0x40000018
define REST_NORESOLVESEARCH()  0x40000019
define REST_NORESOLVETRACK()  0x4000001A
define REST_FORCECOPYACLWITHFILE()  0x4000001B
define REST_NOLOGO3CHANNELNOTIFY()  0x4000001C
define REST_NOFORGETSOFTWAREUPDATE()  0x4000001D
define REST_NOSETACTIVEDESKTOP()  0x4000001E
define REST_NOUPDATEWINDOWS()  0x4000001F
define REST_NOCHANGESTARMENU()  0x40000020
define REST_NOFOLDEROPTIONS()  0x40000021
define REST_HASFINDCOMPUTERS()  0x40000022
define REST_INTELLIMENUS()  0x40000023
define REST_RUNDLGMEMCHECKBOX()  0x40000024
define REST_ARP_ShowPostSetup()  0x40000025
define REST_NOCSC()  0x40000026
define REST_NOCONTROLPANEL()  0x40000027
define REST_ENUMWORKGROUP()  0x40000028
define REST_ARP_NOARP()  0x40000029
define REST_ARP_NOREMOVEPAGE()  0x4000002A
define REST_ARP_NOADDPAGE()  0x4000002B
define REST_ARP_NOWINSETUPPAGE()  0x4000002C
define REST_GREYMSIADS()  0x4000002D
define REST_NOCHANGEMAPPEDDRIVELABEL()  0x4000002E
define REST_NOCHANGEMAPPEDDRIVECOMMENT()  0x4000002F
define REST_MaxRecentDocs()  0x40000030
define REST_NONETWORKCONNECTIONS()  0x40000031
define REST_FORCESTARTMENULOGOFF()  0x40000032
define REST_NOWEBVIEW()  0x40000033
define REST_NOCUSTOMIZETHISFOLDER()  0x40000034
define REST_NOENCRYPTION()  0x40000035
//  Do NOT use me                     0x40000036
define REST_DONTSHOWSUPERHIDDEN()  0x40000037
define REST_NOSHELLSEARCHBUTTON()  0x40000038
define REST_NOHARDWARETAB()  0x40000039
define REST_NORUNASINSTALLPROMPT()  0x4000003A
define REST_PROMPTRUNASINSTALLNETPATH()  0x4000003B
define REST_NOMANAGEMYCOMPUTERVERB()  0x4000003C
define REST_NORECENTDOCSNETHOOD()  0x4000003D
define REST_DISALLOWRUN()  0x4000003E
define REST_NOWELCOMESCREEN()  0x4000003F
define REST_RESTRICTCPL()  0x40000040
define REST_DISALLOWCPL()  0x40000041
define REST_NOSMBALLOONTIP()  0x40000042
define REST_NOSMHELP()  0x40000043
define REST_NOWINKEYS()  0x40000044
define REST_NOENCRYPTONMOVE()  0x40000045
define REST_NOLOCALMACHINERUN()  0x40000046
define REST_NOCURRENTUSERRUN()  0x40000047
define REST_NOLOCALMACHINERUNONCE()  0x40000048
define REST_NOCURRENTUSERRUNONCE()  0x40000049
define REST_FORCEACTIVEDESKTOPON()  0x4000004A
define REST_NOCOMPUTERSNEARME()  0x4000004B
define REST_NOVIEWONDRIVE()  0x4000004C
define REST_NONETCRAWL()  0x4000004D
define REST_NOSHAREDDOCUMENTS()  0x4000004E
define REST_NOSMMYDOCS()  0x4000004F
define REST_NOSMMYPICS()  0x40000050
define REST_ALLOWBITBUCKDRIVES()  0x40000051
define REST_NONLEGACYSHELLMODE()  0x40000052
define REST_NOCONTROLPANELBARRICADE()  0x40000053
define REST_NOSTARTPAGE()  0x40000054
define REST_NOAUTOTRAYNOTIFY()  0x40000055
define REST_NOTASKGROUPING()  0x40000056
define REST_NOCDBURNING()  0x40000057
define REST_MYCOMPNOPROP()  0x40000058
define REST_MYDOCSNOPROP()  0x40000059
define REST_NOSTARTPANEL()  0x4000005A
define REST_NODISPLAYAPPEARANCEPAGE()  0x4000005B
define REST_NOTHEMESTAB()  0x4000005C
define REST_NOVISUALSTYLECHOICE()  0x4000005D
define REST_NOSIZECHOICE()  0x4000005E
define REST_NOCOLORCHOICE()  0x4000005F
define REST_SETVISUALSTYLE()  0x40000060
define REST_STARTRUNNOHOMEPATH()  0x40000061
define REST_NOUSERNAMEINSTARTPANEL()  0x40000062
define REST_NOMYCOMPUTERICON()  0x40000063
define REST_NOSMNETWORKPLACES()  0x40000064
define REST_NOSMPINNEDLIST()  0x40000065
define REST_NOSMMYMUSIC()  0x40000066
define REST_NOSMEJECTPC()  0x40000067
define REST_NOSMMOREPROGRAMS()  0x40000068
define REST_NOSMMFUPROGRAMS()  0x40000069
define REST_NOTRAYITEMSDISPLAY()  0x4000006A
define REST_NOTOOLBARSONTASKBAR()  0x4000006B
define REST_NOSMCONFIGUREPROGRAMS()  0x4000006F
define REST_HIDECLOCK()  0x40000070
define REST_NOLOWDISKSPACECHECKS()  0x40000071
define REST_NOENTIRENETWORK()  0x40000072
define REST_NODESKTOPCLEANUP()  0x40000073
define REST_BITBUCKNUKEONDELETE()  0x40000074
define REST_BITBUCKCONFIRMDELETE()  0x40000075
define REST_BITBUCKNOPROP()  0x40000076
define REST_NODISPBACKGROUND()  0x40000077
define REST_NODISPSCREENSAVEPG()  0x40000078
define REST_NODISPSETTINGSPG()  0x40000079
define REST_NODISPSCREENSAVEPREVIEW()  0x4000007A
define REST_NODISPLAYCPL()  0x4000007B
define REST_HIDERUNASVERB()  0x4000007C
define REST_NOTHUMBNAILCACHE()  0x4000007D
define REST_NOSTRCMPLOGICAL()  0x4000007E
define REST_NOPUBLISHWIZARD()  0x4000007F
define REST_NOONLINEPRINTSWIZARD()  0x40000080
define REST_NOWEBSERVICES()  0x40000081
define REST_ALLOWUNHASHEDWEBVIEW()  0x40000082
define REST_ALLOWLEGACYWEBVIEW()  0x40000083
define REST_REVERTWEBVIEWSECURITY()  0x40000084
define REST_INHERITCONSOLEHANDLES()  0x40000086
define REST_NODISCONNECT()  0x41000001
define REST_NOSECURITY()  0x41000002
define REST_NOFILEASSOCIATE()  0x41000003

// ------------------------

//    Equates from Video for Windows

// ------------------------

define BI_1632()  0x32333631
define ICERR_OK()  0
define ICERR_DONTDRAW()  1
define ICERR_NEWPALETTE()  2
define ICERR_GOTOKEYFRAME()  3
define ICERR_STOPDRAWING()  4
define ICERR_UNSUPPORTED()  -1
define ICERR_BADFORMAT()  -2
define ICERR_MEMORY()  -3
define ICERR_INTERNAL()  -4
define ICERR_BADFLAGS()  -5
define ICERR_BADPARAM()  -6
define ICERR_BADSIZE()  -7
define ICERR_BADHANDLE()  -8
define ICERR_CANTUPDATE()  -9
define ICERR_ABORT()  -10
define ICERR_ERROR()  -100
define ICERR_BADBITDEPTH()  -200
define ICERR_BADIMAGESIZE()  -201
define ICERR_CUSTOM()  -400
define ICMODE_COMPRESS()  1
define ICMODE_DECOMPRESS()  2
define ICMODE_FASTDECOMPRESS()  3
define ICMODE_QUERY()  4
define ICMODE_FASTCOMPRESS()  5
define ICMODE_DRAW()  8
define ICMODE_INTERNALF_FUNCTION32()  0x8000
define ICMODE_INTERNALF_MASK()  0x8000
define AVIIF_LIST()  0x00000001
define AVIIF_TWOCC()  0x00000002
define AVIIF_KEYFRAME()  0x00000010
define ICQUALITY_LOW()  0
define ICQUALITY_HIGH()  10000
define ICQUALITY_DEFAULT()  -1
define ICM_USER()  DRV_USER+0x0000
define ICM_RESERVED()  ICM_RESERVED_LOW
define ICM_RESERVED_LOW()  DRV_USER+0x1000
define ICM_RESERVED_HIGH()  DRV_USER+0x2000
define ICM_GETSTATE()  ICM_RESERVED+0
define ICM_SETSTATE()  ICM_RESERVED+1
define ICM_GETINFO()  ICM_RESERVED+2
define ICM_CONFIGURE()  ICM_RESERVED+10
define ICM_ABOUT()  ICM_RESERVED+11
define ICM_GETERRORTEXT()  ICM_RESERVED+12
define ICM_GETFORMATNAME()  ICM_RESERVED+20
define ICM_ENUMFORMATS()  ICM_RESERVED+21
define ICM_GETDEFAULTQUALITY()  ICM_RESERVED+30
define ICM_GETQUALITY()  ICM_RESERVED+31
define ICM_SETQUALITY()  ICM_RESERVED+32
define ICM_SET()  ICM_RESERVED+40
define ICM_GET()  ICM_RESERVED+41
define ICM_COMPRESS_GET_FORMAT()  ICM_USER+4
define ICM_COMPRESS_GET_SIZE()  ICM_USER+5
define ICM_COMPRESS_QUERY()  ICM_USER+6
define ICM_COMPRESS_BEGIN()  ICM_USER+7
define ICM_COMPRESS()  ICM_USER+8
define ICM_COMPRESS_END()  ICM_USER+9
define ICM_DECOMPRESS_GET_FORMAT()  ICM_USER+10
define ICM_DECOMPRESS_QUERY()  ICM_USER+11
define ICM_DECOMPRESS_BEGIN()  ICM_USER+12
define ICM_DECOMPRESS()  ICM_USER+13
define ICM_DECOMPRESS_END()  ICM_USER+14
define ICM_DECOMPRESS_SET_PALETTE()  ICM_USER+29
define ICM_DECOMPRESS_GET_PALETTE()  ICM_USER+30
define ICM_DRAW_QUERY()  ICM_USER+31
define ICM_DRAW_BEGIN()  ICM_USER+15
define ICM_DRAW_GET_PALETTE()  ICM_USER+16
define ICM_DRAW_UPDATE()  ICM_USER+17
define ICM_DRAW_START()  ICM_USER+18
define ICM_DRAW_STOP()  ICM_USER+19
define ICM_DRAW_BITS()  ICM_USER+20
define ICM_DRAW_END()  ICM_USER+21
define ICM_DRAW_GETTIME()  ICM_USER+32
define ICM_DRAW()  ICM_USER+33
define ICM_DRAW_WINDOW()  ICM_USER+34
define ICM_DRAW_SETTIME()  ICM_USER+35
define ICM_DRAW_REALIZE()  ICM_USER+36
define ICM_DRAW_FLUSH()  ICM_USER+37
define ICM_DRAW_RENDERBUFFER()  ICM_USER+38
define ICM_DRAW_START_PLAY()  ICM_USER+39
define ICM_DRAW_STOP_PLAY()  ICM_USER+40
define ICM_DRAW_SUGGESTFORMAT()  ICM_USER+50
define ICM_DRAW_CHANGEPALETTE()  ICM_USER+51
define ICM_DRAW_IDLE()  ICM_USER+52
define ICM_GETBUFFERSWANTED()  ICM_USER+41
define ICM_GETDEFAULTKEYFRAMERATE()  ICM_USER+42
define ICM_DECOMPRESSEX_BEGIN()  ICM_USER+60
define ICM_DECOMPRESSEX_QUERY()  ICM_USER+61
define ICM_DECOMPRESSEX()  ICM_USER+62
define ICM_DECOMPRESSEX_END()  ICM_USER+63
define ICM_COMPRESS_FRAMES_INFO()  ICM_USER+70
define ICM_COMPRESS_FRAMES()  ICM_USER+71
define ICM_SET_STATUS_PROC()  ICM_USER+72
define VIDCF_QUALITY()  0x0001
define VIDCF_CRUNCH()  0x0002
define VIDCF_TEMPORAL()  0x0004
define VIDCF_COMPRESSFRAMES()  0x0008
define VIDCF_DRAW()  0x0010
define VIDCF_FASTTEMPORALC()  0x0020
define VIDCF_FASTTEMPORALD()  0x0080
define ICCOMPRESS_KEYFRAME()  0x00000001
define ICCOMPRESSFRAMES_PADDING()  0x00000001
define ICSTATUS_START()  0
define ICSTATUS_STATUS()  1
define ICSTATUS_END()  2
define ICSTATUS_ERROR()  3
define ICSTATUS_YIELD()  4
define ICDECOMPRESS_HURRYUP()  0x80000000
define ICDECOMPRESS_UPDATE()  0x40000000
define ICDECOMPRESS_PREROLL()  0x20000000
define ICDECOMPRESS_NULLFRAME()  0x10000000
define ICDECOMPRESS_NOTKEYFRAME()  0x08000000
define ICDRAW_QUERY()  0x00000001
define ICDRAW_FULLSCREEN()  0x00000002
define ICDRAW_HDC()  0x00000004
define ICDRAW_ANIMATE()  0x00000008
define ICDRAW_CONTINUE()  0x00000010
define ICDRAW_MEMORYDC()  0x00000020
define ICDRAW_UPDATING()  0x00000040
define ICDRAW_RENDER()  0x00000080
define ICDRAW_BUFFER()  0x00000100
define ICDRAW_HURRYUP()  0x80000000
define ICDRAW_UPDATE()  0x40000000
define ICDRAW_PREROLL()  0x20000000
define ICDRAW_NULLFRAME()  0x10000000
define ICDRAW_NOTKEYFRAME()  0x08000000
define ICINSTALL_UNICODE()  0x8000
define ICINSTALL_FUNCTION()  0x0001
define ICINSTALL_DRIVER()  0x0002
define ICINSTALL_HDRV()  0x0004
define ICINSTALL_DRIVERW()  0x8002
define ICMF_CONFIGURE_QUERY()  0x00000001
define ICMF_ABOUT_QUERY()  0x00000001

/*------------------ 前面已经有定义-----------------------
define ICDECOMPRESS_HURRYUP()  0x80000000
define ICDRAW_QUERY()  0x00000001
define ICDRAW_FULLSCREEN()  0x00000002
define ICDRAW_HDC()  0x00000004
define ICDRAW_HURRYUP()  0x80000000
define ICDRAW_UPDATE()  0x40000000
------------------------------------------------------*/

define ICMF_COMPVARS_VALID()  0x00000001
define ICMF_CHOOSE_KEYFRAME()  0x0001
define ICMF_CHOOSE_DATARATE()  0x0002
define ICMF_CHOOSE_PREVIEW()  0x0004
define ICMF_CHOOSE_ALLCOMPRESSORS()  0x0008
define DDF_0001()  0x0001
define DDF_UPDATE()  0x0002
define DDF_SAME_HDC()  0x0004
define DDF_SAME_DRAW()  0x0008
define DDF_DONTDRAW()  0x0010
define DDF_ANIMATE()  0x0020
define DDF_BUFFER()  0x0040
define DDF_JUSTDRAWIT()  0x0080
define DDF_FULLSCREEN()  0x0100
define DDF_BACKGROUNDPAL()  0x0200
define DDF_NOTKEYFRAME()  0x0400
define DDF_HURRYUP()  0x0800
define DDF_HALFTONE()  0x1000
define DDF_2000()  0x2000
define DDF_PREROLL()  DDF_DONTDRAW
define DDF_SAME_DIB()  DDF_SAME_DRAW
define DDF_SAME_SIZE()  DDF_SAME_DRAW
define AVIF_HASINDEX()  0x00000010
define AVIF_MUSTUSEINDEX()  0x00000020
define AVIF_ISINTERLEAVED()  0x00000100
define AVIF_WASCAPTUREFILE()  0x00010000
define AVIF_COPYRIGHTED()  0x00020000
define AVI_HEADERSIZE()  2048
define AVISF_DISABLED()  0x00000001
define AVISF_VIDEO_PALCHANGES()  0x00010000
//define AVIIF_LIST()  0x00000001
//define AVIIF_KEYFRAME()  0x00000010
define AVIIF_FIRSTPART()  0x00000020
define AVIIF_LASTPART()  0x00000040
define AVIIF_MIDPART()  AVIIF_LASTPART | AVIIF_FIRSTPART
define AVIIF_NOTIME()  0x00000100
define AVIIF_COMPUSE()  0x0FFF0000
//define AVIIF_KEYFRAME()  0x00000010
define AVIGETFRAMEF_BESTDISPLAYFMT()  1
define AVISTREAMINFO_DISABLED()  0x00000001
define AVISTREAMINFO_FORMATCHANGES()  0x00010000
define AVIFILEINFO_HASINDEX()  0x00000010
define AVIFILEINFO_MUSTUSEINDEX()  0x00000020
define AVIFILEINFO_ISINTERLEAVED()  0x00000100
define AVIFILEINFO_WASCAPTUREFILE()  0x00010000
define AVIFILEINFO_COPYRIGHTED()  0x00020000
define AVIFILECAPS_CANREAD()  0x00000001
define AVIFILECAPS_CANWRITE()  0x00000002
define AVIFILECAPS_ALLKEYFRAMES()  0x00000010
define AVIFILECAPS_NOCOMPRESSION()  0x00000020
define AVICOMPRESSF_INTERLEAVE()  0x00000001
define AVICOMPRESSF_DATARATE()  0x00000002
define AVICOMPRESSF_KEYFRAMES()  0x00000004
define AVICOMPRESSF_VALID()  0x00000008
define AVIFILEHANDLER_CANREAD()  0x0001
define AVIFILEHANDLER_CANWRITE()  0x0002
define AVIFILEHANDLER_CANACCEPTNONRGB()  0x0004
define FIND_DIR()  0x0000000F
define FIND_NEXT()  0x00000001
define FIND_PREV()  0x00000004
define FIND_FROM_START()  0x00000008
define FIND_TYPE()  0x000000F0
define FIND_KEY()  0x00000010
define FIND_ANY()  0x00000020
define FIND_FORMAT()  0x00000040
define FIND_RET()  0x0000F000
define FIND_POS()  0x00000000
define FIND_LENGTH()  0x00001000
define FIND_OFFSET()  0x00002000
define FIND_SIZE()  0x00003000
define FIND_INDEX()  0x00004000
define AVIStreamFindKeyFrame()  AVIStreamFindSample
define FindKeyFrame()  FindSample
define AVIStreamClose()  AVIStreamRelease
define AVIFileClose()  AVIFileRelease
define AVIStreamInit()  AVIFileInit
define AVIStreamExit()  AVIFileExit
define SEARCH_NEAREST()  FIND_PREV
define SEARCH_BACKWARD()  FIND_PREV
define SEARCH_FORWARD()  FIND_NEXT
define SEARCH_KEY()  FIND_KEY
define SEARCH_ANY()  FIND_ANY
define MCIWNDOPENF_NEW()  0x0001
define MCIWNDF_NOAUTOSIZEWINDOW()  0x0001
define MCIWNDF_NOPLAYBAR()  0x0002
define MCIWNDF_NOAUTOSIZEMOVIE()  0x0004
define MCIWNDF_NOMENU()  0x0008
define MCIWNDF_SHOWNAME()  0x0010
define MCIWNDF_SHOWPOS()  0x0020
define MCIWNDF_SHOWMODE()  0x0040
define MCIWNDF_SHOWALL()  0x0070
define MCIWNDF_NOTIFYMODE()  0x0100
define MCIWNDF_NOTIFYPOS()  0x0200
define MCIWNDF_NOTIFYSIZE()  0x0400
define MCIWNDF_NOTIFYERROR()  0x1000
define MCIWNDF_NOTIFYALL()  0x1F00
define MCIWNDF_NOTIFYANSI()  0x0080
define MCIWNDF_NOTIFYMEDIAA()  0x0880
define MCIWNDF_NOTIFYMEDIAW()  0x0800
define MCIWNDF_RECORD()  0x2000
define MCIWNDF_NOERRORDLG()  0x4000
define MCIWNDF_NOOPEN()  0x8000
define MCIWNDM_GETDEVICEID()  WM_USER+100
define MCIWNDM_GETSTART()  WM_USER+103
define MCIWNDM_GETLENGTH()  WM_USER+104
define MCIWNDM_GETEND()  WM_USER+105
define MCIWNDM_EJECT()  WM_USER+107
define MCIWNDM_SETZOOM()  WM_USER+108
define MCIWNDM_GETZOOM()  WM_USER+109
define MCIWNDM_SETVOLUME()  WM_USER+110
define MCIWNDM_GETVOLUME()  WM_USER+111
define MCIWNDM_SETSPEED()  WM_USER+112
define MCIWNDM_GETSPEED()  WM_USER+113
define MCIWNDM_SETREPEAT()  WM_USER+114
define MCIWNDM_GETREPEAT()  WM_USER+115
define MCIWNDM_REALIZE()  WM_USER+118
define MCIWNDM_VALIDATEMEDIA()  WM_USER+121
define MCIWNDM_PLAYFROM()  WM_USER+122
define MCIWNDM_PLAYTO()  WM_USER+123
define MCIWNDM_GETPALETTE()  WM_USER+126
define MCIWNDM_SETPALETTE()  WM_USER+127
define MCIWNDM_SETTIMERS()  WM_USER+129
define MCIWNDM_SETACTIVETIMER()  WM_USER+130
define MCIWNDM_SETINACTIVETIMER()  WM_USER+131
define MCIWNDM_GETACTIVETIMER()  WM_USER+132
define MCIWNDM_GETINACTIVETIMER()  WM_USER+133
define MCIWNDM_CHANGESTYLES()  WM_USER+135
define MCIWNDM_GETSTYLES()  WM_USER+136
define MCIWNDM_GETALIAS()  WM_USER+137
define MCIWNDM_PLAYREVERSE()  WM_USER+139
define MCIWNDM_GET_SOURCE()  WM_USER+140
define MCIWNDM_PUT_SOURCE()  WM_USER+141
define MCIWNDM_GET_DEST()  WM_USER+142
define MCIWNDM_PUT_DEST()  WM_USER+143
define MCIWNDM_CAN_PLAY()  WM_USER+144
define MCIWNDM_CAN_WINDOW()  WM_USER+145
define MCIWNDM_CAN_RECORD()  WM_USER+146
define MCIWNDM_CAN_SAVE()  WM_USER+147
define MCIWNDM_CAN_EJECT()  WM_USER+148
define MCIWNDM_CAN_CONFIG()  WM_USER+149
define MCIWNDM_PALETTEKICK()  WM_USER+150
define MCIWNDM_OPENINTERFACE()  WM_USER+151
define MCIWNDM_SETOWNER()  WM_USER+152
define MCIWNDM_SENDSTRINGA()  WM_USER+101
define MCIWNDM_GETPOSITIONA()  WM_USER+102
define MCIWNDM_GETMODEA()  WM_USER+106
define MCIWNDM_SETTIMEFORMATA()  WM_USER+119
define MCIWNDM_GETTIMEFORMATA()  WM_USER+120
define MCIWNDM_GETFILENAMEA()  WM_USER+124
define MCIWNDM_GETDEVICEA()  WM_USER+125
define MCIWNDM_GETERRORA()  WM_USER+128
define MCIWNDM_NEWA()  WM_USER+134
define MCIWNDM_RETURNSTRINGA()  WM_USER+138
define MCIWNDM_OPENA()  WM_USER+153
define MCIWNDM_SENDSTRINGW()  WM_USER+201
define MCIWNDM_GETPOSITIONW()  WM_USER+202
define MCIWNDM_GETMODEW()  WM_USER+206
define MCIWNDM_SETTIMEFORMATW()  WM_USER+219
define MCIWNDM_GETTIMEFORMATW()  WM_USER+220
define MCIWNDM_GETFILENAMEW()  WM_USER+224
define MCIWNDM_GETDEVICEW()  WM_USER+225
define MCIWNDM_GETERRORW()  WM_USER+228
define MCIWNDM_NEWW()  WM_USER+234
define MCIWNDM_RETURNSTRINGW()  WM_USER+238
define MCIWNDM_OPENW()  WM_USER+252
define MCIWNDM_NOTIFYMODE()  WM_USER+200
define MCIWNDM_NOTIFYPOS()  WM_USER+201
define MCIWNDM_NOTIFYSIZE()  WM_USER+202
define MCIWNDM_NOTIFYMEDIA()  WM_USER+203
define MCIWNDM_NOTIFYERROR()  WM_USER+205
define MCIWND_START()  -1
define MCIWND_END()  -2

/*------------------ 前面已经有定义-----------------------
define MCI_OPEN()  0x0803
define MCI_CLOSE()  0x0804
define MCI_PLAY()  0x0806
define MCI_SEEK()  0x0807
define MCI_STOP()  0x0808
define MCI_PAUSE()  0x0809
define MCI_STEP()  0x080E
define MCI_RECORD()  0x080F
define MCI_SAVE()  0x0813
define MCI_CUT()  0x0851
define MCI_COPY()  0x0852
define MCI_PASTE()  0x0853
define MCI_RESUME()  0x0855
define MCI_DELETE()  0x0856
define MCI_MODE_NOT_READY()  524
define MCI_MODE_STOP()  525
define MCI_MODE_PLAY()  526
define MCI_MODE_RECORD()  527
define MCI_MODE_SEEK()  528
define MCI_MODE_PAUSE()  529
define MCI_MODE_OPEN()  530
------------------------------------------------------*/

define DV_ERR_OK()  0
define DV_ERR_BASE()  1
define DV_ERR_NONSPECIFIC()  DV_ERR_BASE
define DV_ERR_BADFORMAT()  DV_ERR_BASE+1
define DV_ERR_STILLPLAYING()  DV_ERR_BASE+2
define DV_ERR_UNPREPARED()  DV_ERR_BASE+3
define DV_ERR_SYNC()  DV_ERR_BASE+4
define DV_ERR_TOOMANYCHANNELS()  DV_ERR_BASE+5
define DV_ERR_NOTDETECTED()  DV_ERR_BASE+6
define DV_ERR_BADINSTALL()  DV_ERR_BASE+7
define DV_ERR_CREATEPALETTE()  DV_ERR_BASE+8
define DV_ERR_SIZEFIELD()  DV_ERR_BASE+9
define DV_ERR_PARAM1()  DV_ERR_BASE+10
define DV_ERR_PARAM2()  DV_ERR_BASE+11
define DV_ERR_CONFIG1()  DV_ERR_BASE+12
define DV_ERR_CONFIG2()  DV_ERR_BASE+13
define DV_ERR_FLAGS()  DV_ERR_BASE+14
define DV_ERR_13()  DV_ERR_BASE+15
define DV_ERR_NOTSUPPORTED()  DV_ERR_BASE+16
define DV_ERR_NOMEM()  DV_ERR_BASE+17
define DV_ERR_ALLOCATED()  DV_ERR_BASE+18
define DV_ERR_BADDEVICEID()  DV_ERR_BASE+19
define DV_ERR_INVALHANDLE()  DV_ERR_BASE+20
define DV_ERR_BADERRNUM()  DV_ERR_BASE+21
define DV_ERR_NO_BUFFERS()  DV_ERR_BASE+22
define DV_ERR_MEM_CONFLICT()  DV_ERR_BASE+23
define DV_ERR_IO_CONFLICT()  DV_ERR_BASE+24
define DV_ERR_DMA_CONFLICT()  DV_ERR_BASE+25
define DV_ERR_INT_CONFLICT()  DV_ERR_BASE+26
define DV_ERR_PROTECT_ONLY()  DV_ERR_BASE+27
define DV_ERR_LASTERROR()  DV_ERR_BASE+27
define DV_ERR_USER_MSG()  DV_ERR_BASE+1000

/*------------------ 前面已经有定义-----------------------
define MM_DRVM_OPEN()  0x3D0
define MM_DRVM_CLOSE()  0x3D1
define MM_DRVM_DATA()  0x3D2
define MM_DRVM_ERROR()  0x3D3
------------------------------------------------------*/

define DV_VM_OPEN()  MM_DRVM_OPEN
define DV_VM_CLOSE()  MM_DRVM_CLOSE
define DV_VM_DATA()  MM_DRVM_DATA
define DV_VM_ERROR()  MM_DRVM_ERROR
define VHDR_DONE()  0x00000001
define VHDR_PREPARED()  0x00000002
define VHDR_INQUEUE()  0x00000004
define VHDR_KEYFRAME()  0x00000008
define VHDR_VALID()  0x0000000F
define VCAPS_OVERLAY()  0x00000001
define VCAPS_SRC_CAN_CLIP()  0x00000002
define VCAPS_DST_CAN_CLIP()  0x00000004
define VCAPS_CAN_SCALE()  0x00000008
define VIDEO_EXTERNALIN()  0x0001
define VIDEO_EXTERNALOUT()  0x0002
define VIDEO_IN()  0x0004
define VIDEO_OUT()  0x0008
define VIDEO_DLG_QUERY()  0x0010
define VIDEO_CONFIGURE_QUERY()  0x8000
define VIDEO_CONFIGURE_SET()  0x1000
define VIDEO_CONFIGURE_GET()  0x2000
define VIDEO_CONFIGURE_QUERYSIZE()  0x0001
define VIDEO_CONFIGURE_CURRENT()  0x0010
define VIDEO_CONFIGURE_NOMINAL()  0x0020
define VIDEO_CONFIGURE_MIN()  0x0040
define VIDEO_CONFIGURE_MAX()  0x0080
define DVM_USER()  0x4000
define DVM_CONFIGURE_START()  0x1000
define DVM_CONFIGURE_END()  0x1FFF
define DVM_PALETTE()  DVM_CONFIGURE_START+1
define DVM_FORMAT()  DVM_CONFIGURE_START+2
define DVM_PALETTERGB555()  DVM_CONFIGURE_START+3
define DVM_SRC_RECT()  DVM_CONFIGURE_START+4
define DVM_DST_RECT()  DVM_CONFIGURE_START+5
define WM_CAP_START()  WM_USER
define WM_CAP_UNICODE_START()  WM_USER+100
define WM_CAP_GET_CAPSTREAMPTR()  WM_CAP_START+1
define WM_CAP_SET_CALLBACK_ERRORW()  WM_CAP_UNICODE_START+2
define WM_CAP_SET_CALLBACK_STATUSW()  WM_CAP_UNICODE_START+3
define WM_CAP_SET_CALLBACK_ERRORA()  WM_CAP_START+2
define WM_CAP_SET_CALLBACK_STATUSA()  WM_CAP_START+3
define WM_CAP_SET_CALLBACK_YIELD()  WM_CAP_START+4
define WM_CAP_SET_CALLBACK_FRAME()  WM_CAP_START+5
define WM_CAP_SET_CALLBACK_VIDEOSTREAM()  WM_CAP_START+6
define WM_CAP_SET_CALLBACK_WAVESTREAM()  WM_CAP_START+7
define WM_CAP_GET_USER_DATA()  WM_CAP_START+8
define WM_CAP_SET_USER_DATA()  WM_CAP_START+9
define WM_CAP_DRIVER_CONNECT()  WM_CAP_START+10
define WM_CAP_DRIVER_DISCONNECT()  WM_CAP_START+11
define WM_CAP_DRIVER_GET_NAMEA()  WM_CAP_START+12
define WM_CAP_DRIVER_GET_VERSIONA()  WM_CAP_START+13
define WM_CAP_DRIVER_GET_NAMEW()  WM_CAP_UNICODE_START+12
define WM_CAP_DRIVER_GET_VERSIONW()  WM_CAP_UNICODE_START+13
define WM_CAP_DRIVER_GET_CAPS()  WM_CAP_START+14
define WM_CAP_FILE_SET_CAPTURE_FILEA()  WM_CAP_START+20
define WM_CAP_FILE_GET_CAPTURE_FILEA()  WM_CAP_START+21
define WM_CAP_FILE_SAVEASA()  WM_CAP_START+23
define WM_CAP_FILE_SAVEDIBA()  WM_CAP_START+25
define WM_CAP_FILE_SET_CAPTURE_FILEW()  WM_CAP_UNICODE_START+20
define WM_CAP_FILE_GET_CAPTURE_FILEW()  WM_CAP_UNICODE_START+21
define WM_CAP_FILE_SAVEASW()  WM_CAP_UNICODE_START+23
define WM_CAP_FILE_SAVEDIBW()  WM_CAP_UNICODE_START+25
define WM_CAP_FILE_ALLOCATE()  WM_CAP_START+22
define WM_CAP_FILE_SET_INFOCHUNK()  WM_CAP_START+24
define WM_CAP_EDIT_COPY()  WM_CAP_START+30
define WM_CAP_SET_AUDIOFORMAT()  WM_CAP_START+35
define WM_CAP_GET_AUDIOFORMAT()  WM_CAP_START+36
define WM_CAP_DLG_VIDEOFORMAT()  WM_CAP_START+41
define WM_CAP_DLG_VIDEOSOURCE()  WM_CAP_START+42
define WM_CAP_DLG_VIDEODISPLAY()  WM_CAP_START+43
define WM_CAP_GET_VIDEOFORMAT()  WM_CAP_START+44
define WM_CAP_SET_VIDEOFORMAT()  WM_CAP_START+45
define WM_CAP_DLG_VIDEOCOMPRESSION()  WM_CAP_START+46
define WM_CAP_SET_PREVIEW()  WM_CAP_START+50
define WM_CAP_SET_OVERLAY()  WM_CAP_START+51
define WM_CAP_SET_PREVIEWRATE()  WM_CAP_START+52
define WM_CAP_SET_SCALE()  WM_CAP_START+53
define WM_CAP_GET_STATUS()  WM_CAP_START+54
define WM_CAP_SET_SCROLL()  WM_CAP_START+55
define WM_CAP_GRAB_FRAME()  WM_CAP_START+60
define WM_CAP_GRAB_FRAME_NOSTOP()  WM_CAP_START+61
define WM_CAP_SEQUENCE()  WM_CAP_START+62
define WM_CAP_SEQUENCE_NOFILE()  WM_CAP_START+63
define WM_CAP_SET_SEQUENCE_SETUP()  WM_CAP_START+64
define WM_CAP_GET_SEQUENCE_SETUP()  WM_CAP_START+65
define WM_CAP_SET_MCI_DEVICEA()  WM_CAP_START+66
define WM_CAP_GET_MCI_DEVICEA()  WM_CAP_START+67
define WM_CAP_SET_MCI_DEVICEW()  WM_CAP_UNICODE_START+66
define WM_CAP_GET_MCI_DEVICEW()  WM_CAP_UNICODE_START+67
define WM_CAP_STOP()  WM_CAP_START+68
define WM_CAP_ABORT()  WM_CAP_START+69
define WM_CAP_SINGLE_FRAME_OPEN()  WM_CAP_START+70
define WM_CAP_SINGLE_FRAME_CLOSE()  WM_CAP_START+71
define WM_CAP_SINGLE_FRAME()  WM_CAP_START+72
define WM_CAP_PAL_OPENA()  WM_CAP_START+80
define WM_CAP_PAL_SAVEA()  WM_CAP_START+81
define WM_CAP_PAL_OPENW()  WM_CAP_UNICODE_START+80
define WM_CAP_PAL_SAVEW()  WM_CAP_UNICODE_START+81
define WM_CAP_PAL_PASTE()  WM_CAP_START+82
define WM_CAP_PAL_AUTOCREATE()  WM_CAP_START+83
define WM_CAP_PAL_MANUALCREATE()  WM_CAP_START+84
define WM_CAP_SET_CALLBACK_CAPCONTROL()  WM_CAP_START+85
define WM_CAP_UNICODE_END()  WM_CAP_PAL_SAVEW
define WM_CAP_END()  WM_CAP_UNICODE_END
define AVSTREAMMASTER_AUDIO()  0
define AVSTREAMMASTER_NONE()  1
define CONTROLCALLBACK_PREROLL()  1
define CONTROLCALLBACK_CAPTURING()  2
define IDS_CAP_BEGIN()  300
define IDS_CAP_END()  301
define IDS_CAP_INFO()  401
define IDS_CAP_OUTOFMEM()  402
define IDS_CAP_FILEEXISTS()  403
define IDS_CAP_ERRORPALOPEN()  404
define IDS_CAP_ERRORPALSAVE()  405
define IDS_CAP_ERRORDIBSAVE()  406
define IDS_CAP_DEFAVIEXT()  407
define IDS_CAP_DEFPALEXT()  408
define IDS_CAP_CANTOPEN()  409
define IDS_CAP_SEQ_MSGSTART()  410
define IDS_CAP_SEQ_MSGSTOP()  411
define IDS_CAP_VIDEDITERR()  412
define IDS_CAP_READONLYFILE()  413
define IDS_CAP_WRITEERROR()  414
define IDS_CAP_NODISKSPACE()  415
define IDS_CAP_SETFILESIZE()  416
define IDS_CAP_SAVEASPERCENT()  417
define IDS_CAP_DRIVER_ERROR()  418
define IDS_CAP_WAVE_OPEN_ERROR()  419
define IDS_CAP_WAVE_ALLOC_ERROR()  420
define IDS_CAP_WAVE_PREPARE_ERROR()  421
define IDS_CAP_WAVE_ADD_ERROR()  422
define IDS_CAP_WAVE_SIZE_ERROR()  423
define IDS_CAP_VIDEO_OPEN_ERROR()  424
define IDS_CAP_VIDEO_ALLOC_ERROR()  425
define IDS_CAP_VIDEO_PREPARE_ERROR()  426
define IDS_CAP_VIDEO_ADD_ERROR()  427
define IDS_CAP_VIDEO_SIZE_ERROR()  428
define IDS_CAP_FILE_OPEN_ERROR()  429
define IDS_CAP_FILE_WRITE_ERROR()  430
define IDS_CAP_RECORDING_ERROR()  431
define IDS_CAP_RECORDING_ERROR2()  432
define IDS_CAP_AVI_INIT_ERROR()  433
define IDS_CAP_NO_FRAME_CAP_ERROR()  434
define IDS_CAP_NO_PALETTE_WARN()  435
define IDS_CAP_MCI_CONTROL_ERROR()  436
define IDS_CAP_MCI_CANT_STEP_ERROR()  437
define IDS_CAP_NO_AUDIO_CAP_ERROR()  438
define IDS_CAP_AVI_DRAWDIB_ERROR()  439
define IDS_CAP_COMPRESSOR_ERROR()  440
define IDS_CAP_AUDIO_DROP_ERROR()  441
define IDS_CAP_AUDIO_DROP_COMPERROR()  442
define IDS_CAP_STAT_LIVE_MODE()  500
define IDS_CAP_STAT_OVERLAY_MODE()  501
define IDS_CAP_STAT_CAP_INIT()  502
define IDS_CAP_STAT_CAP_FINI()  503
define IDS_CAP_STAT_PALETTE_BUILD()  504
define IDS_CAP_STAT_OPTPAL_BUILD()  505
define IDS_CAP_STAT_I_FRAMES()  506
define IDS_CAP_STAT_L_FRAMES()  507
define IDS_CAP_STAT_CAP_L_FRAMES()  508
define IDS_CAP_STAT_CAP_AUDIO()  509
define IDS_CAP_STAT_VIDEOCURRENT()  510
define IDS_CAP_STAT_VIDEOAUDIO()  511
define IDS_CAP_STAT_VIDEOONLY()  512
define IDS_CAP_STAT_FRAMESDROPPED()  513
