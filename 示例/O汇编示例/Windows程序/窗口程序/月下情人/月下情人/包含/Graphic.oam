

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//	公用子程序部分：图形部分
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 设置窗口形状为BMP图形形状
// 参数：窗口句柄，BMP图形句柄
// 输入BMP图形要求：0，0处颜色为背景色
// 返回 累加32 == TRUE 为成功，eax == FALSE 为失败
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
函数 _SetWindowShape(双字 hWnd,双字 hBitMap)
{
	双字 hDC,hBmpDC
	RECT stRect
	BITMAP stBmp
	双字 dwX,dwY,dwStartX
	双字 hRgn,rgbBack,dwCount

	全部压栈
//********************************************************************
// 如果句柄无效，则返回
//********************************************************************
     累加32 @= stBmp
	GetObject(hBitMap,取大小 BITMAP,累加32)
	如果(累加32 ==	0)
     {
		全部出栈
		累加32 ^= 累加32
		返回
	}

	dwCount = 0
     累加32 @= stRect
	获取窗体矩形(hWnd,累加32)
	显示窗体(hWnd,SW_HIDE)
	移动窗体(hWnd,stRect.left,stRect.top,...
		stBmp.bmWidth,stBmp.bmHeight,假)

	GetDC(hWnd)
	hDC = 累加32
	创建兼容设备环境(hDC)
	hBmpDC = 累加32
	选择对象(hBmpDC,hBitMap)
//********************************************************************
// 计算窗口形状
//********************************************************************
	获取象素(hBmpDC,0,0)
	rgbBack = 累加32
	CreateRectRgn(0,0,0,0)
	hRgn = 累加32

	dwY = 0

	循环(真)
     {
		dwX = 0
		dwStartX = -1
		循环(真)
           {
			获取象素(hBmpDC,dwX,dwY)
			如果(dwStartX == -1)
           	{
				如果(累加32 !=	rgbBack)
                	{
//********************************************************************
// 记录第一个非背景色的位置
//********************************************************************
				累加32 = dwX
				dwStartX = 累加32
				}
           	}
			否则
           	{
				如果(累加32 ==	rgbBack)
                	{
//********************************************************************
// 本行中已经有非背景色又遇到背景色，添加 Rgn
//********************************************************************
				计数32 = dwY
				计数32 ++
				CreateRectRgn(dwStartX,dwY,dwX,计数32)
				压栈 累加32
				CombineRgn(hRgn,hRgn,累加32,RGN_OR)
				出栈 累加32
				删除对象(累加32)
				dwCount ++
				dwStartX = -1
                	}
				否则
                	{
//********************************************************************
// 本行中已经有非背景色且到行尾，添加 Rgn
//********************************************************************
					累加32 = dwX
					如果(累加32 == stBmp.bmWidth)
                		{
						累加32 ++
						计数32 = dwY
						计数32 ++
						CreateRectRgn(dwStartX,dwY,累加32,计数32)
						压栈	累加32
						CombineRgn(hRgn,hRgn,累加32,RGN_OR)
						出栈	累加32
						删除对象(累加32)
						dwCount ++
						dwStartX = -1
					}
				}
			}
			dwX ++
			累加32 = dwX
		     如果(累加32 >	stBmp.bmWidth)
               {
                   跳出
               }
          }

		dwY ++
		累加32 = dwY
	     如果(累加32 >	stBmp.bmHeight)
          {
              跳出
          }
     }

//********************************************************************
// 将窗口设置为图片的形状画图
//********************************************************************
	如果(dwCount != 0)
     {
		SetWindowRgn(hWnd,hRgn,TRUE)
	}
	删除对象(hRgn)
	BitBlt(hDC,0,0,stBmp.bmWidth,stBmp.bmHeight,...
		hBmpDC,0,0,SRCCOPY)
//********************************************************************
	删除设备环境(hBmpDC)
	ReleaseDC(hWnd,hDC)
	InvalidateRect(hWnd,NULL,-1)

	全部出栈

     返回 真
}


//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 把 DC 中的图形变成 MASK（和 0,0 处相同的设为黑，不同的设置为白）
// 参数：DC句柄
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
函数 _CreateMask(双字 _hDcDest,双字 _dwWidth,双字 _dwHeight)
{
	双字 dwX,dwY,rgbBack

	全部压栈
	获取象素(_hDcDest,0,0)
	rgbBack = 累加32
	dwY = 0
	循环(真)
     {
		dwX = 0
		循环(真)
           {
			获取象素(_hDcDest,dwX,dwY)
			如果(累加32 == rgbBack)
           	{
				SetPixel(_hDcDest,dwX,dwY,0)
           	}
			否则
           	{
				SetPixel(_hDcDest,dwX,dwY,0x0ffffff)
			}
			dwX ++
			累加32 = dwX
			如果(累加32 > _dwWidth)
           	{
                     跳出
           	}
		}
		dwY ++
		累加32 = dwY
		如果(累加32 > _dwHeight)
           {
               跳出
           }
	}
	全部出栈
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
// 在 BitMap 中查找一个相同颜色的区域
// 输入：位图句柄，区域宽度，区域高度，关键颜色
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
函数 _ScanRect(双字 _hWnd,双字 _hBmp,双字 _dwWidth,双字 _dwHeight,双字 _rgbKeyColor)
{
     BITMAP stBmp
	双字	hBmpDC
	双字	dwReturn
	双字	dwNowX,dwNowY,dwEndX,dwEndY

	全部压栈
	dwReturn = -1
//********************************************************************
// 检查参数合法性
//********************************************************************
	如果((_dwWidth >= 0x10000) || (_dwHeight >= 0x10000))
     {
		跳转到	_SR_Quit
	}
	如果((_dwWidth == 0) || (_dwHeight == 0))
     {
		跳转到	_SR_Quit
	}
     累加32 @= stBmp
	GetObject(_hBmp,取大小 BITMAP,累加32)
	如果(累加32 == 0)
     {
		跳转到	_SR_Quit
	}
	累加32 = stBmp.bmWidth
	基数32 = stBmp.bmHeight
	如果((累加32 >=	0x10000) || (基数32 >= 0x10000))
     {
		跳转到	_SR_Quit
	}
	如果((累加32 <=	_dwWidth) || (基数32 <= _dwHeight))
     {
		跳转到	_SR_Quit
	}
//********************************************************************
// 建立临时 DC
//********************************************************************
	GetDC(_hWnd)
	压栈	累加32
	创建兼容设备环境(累加32)
	hBmpDC = 累加32
	选择对象(hBmpDC,_hBmp)
	出栈	累加32
	ReleaseDC(_hWnd,累加32)
//********************************************************************
	源址32 ^= 源址32
	的址32 ^= 的址32
	循环(真)
     {
		循环(真)
           {
			获取象素(hBmpDC,源址32,的址32)
			如果(累加32 ==	_rgbKeyColor)
           	{
//********************************************************************
// 如果有一个点颜色符合，则比较整个指定区域的点
//********************************************************************
				全部压栈
				累加32 = 源址32
				累加32 += _dwWidth
				dwEndX = 累加32
				累加32 = 的址32
				累加32 += _dwHeight
				dwEndY = 累加32
				dwNowX = 源址32
				dwNowY = 的址32
				循环(真)
                     {
					循环(真)
                          {
						获取象素(hBmpDC,源址32,的址32)
						如果(累加32 !=	_rgbKeyColor)
                      		{
							全部出栈
							累加32 = -1
							跳转到	位置一
						}
						源址32 ++
					     如果(源址32 ==	dwEndX)
                               {
                                    跳出
                               }
                          }

					源址32 = dwNowX
					的址32 ++
				     如果(的址32 ==	dwEndY)
                          {
                             跳出
                          }
                     }

				全部出栈
			}
//********************************************************************
// 整个区域的点符合，则保存位置
//********************************************************************
			标签 位置一:
			如果(累加32 ==	_rgbKeyColor)
           	{
				源址32 逻辑左移 16
				dwReturn = 源址32
				dwReturn += 的址32
				跳转到	位置二
			}
			源址32 ++
		     如果(源址32 ==	stBmp.bmWidth)
               {
                   跳出
               }
           }

		源址32 ^= 源址32
		的址32 ++
	     如果(的址32 ==	stBmp.bmHeight)
          {
              跳出
          }
     }

	标签 位置二:
//********************************************************************
// 释放临时 DC
//********************************************************************
	删除设备环境(hBmpDC)

标签 _SR_Quit:
	全部出栈

	返回 dwReturn

}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
